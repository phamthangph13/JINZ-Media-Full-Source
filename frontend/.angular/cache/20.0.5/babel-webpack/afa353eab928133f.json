{"ast":null,"code":"/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\n/**\r\n * @description Constants for the categories of parameters that can be defined for animations.\r\n *\r\n * A corresponding function defines a set of parameters for each category, and\r\n * collects them into a corresponding `AnimationMetadata` object.\r\n *\r\n * @publicApi\r\n */\nvar AnimationMetadataType;\n(function (AnimationMetadataType) {\n  /**\r\n   * Associates a named animation state with a set of CSS styles.\r\n   * See [`state()`](api/animations/state)\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"State\"] = 0] = \"State\";\n  /**\r\n   * Data for a transition from one animation state to another.\r\n   * See `transition()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Transition\"] = 1] = \"Transition\";\n  /**\r\n   * Contains a set of animation steps.\r\n   * See `sequence()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Sequence\"] = 2] = \"Sequence\";\n  /**\r\n   * Contains a set of animation steps.\r\n   * See `group()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Group\"] = 3] = \"Group\";\n  /**\r\n   * Contains an animation step.\r\n   * See `animate()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Animate\"] = 4] = \"Animate\";\n  /**\r\n   * Contains a set of animation steps.\r\n   * See `keyframes()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Keyframes\"] = 5] = \"Keyframes\";\n  /**\r\n   * Contains a set of CSS property-value pairs into a named style.\r\n   * See `style()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Style\"] = 6] = \"Style\";\n  /**\r\n   * Associates an animation with an entry trigger that can be attached to an element.\r\n   * See `trigger()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Trigger\"] = 7] = \"Trigger\";\n  /**\r\n   * Contains a re-usable animation.\r\n   * See `animation()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Reference\"] = 8] = \"Reference\";\n  /**\r\n   * Contains data to use in executing child animations returned by a query.\r\n   * See `animateChild()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"AnimateChild\"] = 9] = \"AnimateChild\";\n  /**\r\n   * Contains animation parameters for a re-usable animation.\r\n   * See `useAnimation()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"AnimateRef\"] = 10] = \"AnimateRef\";\n  /**\r\n   * Contains child-animation query data.\r\n   * See `query()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Query\"] = 11] = \"Query\";\n  /**\r\n   * Contains data for staggering an animation sequence.\r\n   * See `stagger()`\r\n   */\n  AnimationMetadataType[AnimationMetadataType[\"Stagger\"] = 12] = \"Stagger\";\n})(AnimationMetadataType || (AnimationMetadataType = {}));\n/**\r\n * Specifies automatic styling.\r\n *\r\n * @publicApi\r\n */\nconst AUTO_STYLE = '*';\n/**\r\n * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)\r\n * and `transition()` entries to be evaluated when the expression\r\n * bound to the trigger changes.\r\n *\r\n * @param name An identifying string.\r\n * @param definitions  An animation definition object, containing an array of\r\n * [`state()`](api/animations/state) and `transition()` declarations.\r\n *\r\n * @return An object that encapsulates the trigger data.\r\n *\r\n * @usageNotes\r\n * Define an animation trigger in the `animations` section of `@Component` metadata.\r\n * In the template, reference the trigger by name and bind it to a trigger expression that\r\n * evaluates to a defined animation state, using the following format:\r\n *\r\n * `[@triggerName]=\"expression\"`\r\n *\r\n * Animation trigger bindings convert all values to strings, and then match the\r\n * previous and current values against any linked transitions.\r\n * Booleans can be specified as `1` or `true` and `0` or `false`.\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example creates an animation trigger reference based on the provided\r\n * name value.\r\n * The provided animation value is expected to be an array consisting of state and\r\n * transition declarations.\r\n *\r\n * ```ts\r\n * @Component({\r\n *   selector: \"my-component\",\r\n *   templateUrl: \"my-component-tpl.html\",\r\n *   animations: [\r\n *     trigger(\"myAnimationTrigger\", [\r\n *       state(...),\r\n *       state(...),\r\n *       transition(...),\r\n *       transition(...)\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"something\";\r\n * }\r\n * ```\r\n *\r\n * The template associated with this component makes use of the defined trigger\r\n * by binding to an element within its template code.\r\n *\r\n * ```html\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * ### Using an inline function\r\n * The `transition` animation method also supports reading an inline function which can decide\r\n * if its associated animation should be run.\r\n *\r\n * ```ts\r\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\r\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\r\n string]: any}): boolean {\r\n *   // notice that `element` and `params` are also available here\r\n *   return toState == 'yes-please-animate';\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   templateUrl: 'my-component-tpl.html',\r\n *   animations: [\r\n *     trigger('myAnimationTrigger', [\r\n *       transition(myInlineMatcherFn, [\r\n *         // the animation sequence code\r\n *       ]),\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"yes-please-animate\";\r\n * }\r\n * ```\r\n *\r\n * ### Disabling Animations\r\n * When true, the special animation control binding `@.disabled` binding prevents\r\n * all animations from rendering.\r\n * Place the  `@.disabled` binding on an element to disable\r\n * animations on the element itself, as well as any inner animation triggers\r\n * within the element.\r\n *\r\n * The following example shows how to use this feature:\r\n *\r\n * ```angular-ts\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   template: `\r\n *     <div [@.disabled]=\"isDisabled\">\r\n *       <div [@childAnimation]=\"exp\"></div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *     trigger(\"childAnimation\", [\r\n *       // ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   isDisabled = true;\r\n *   exp = '...';\r\n * }\r\n * ```\r\n *\r\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\r\n * along with any inner animations.\r\n *\r\n * ### Disable animations application-wide\r\n * When an area of the template is set to have animations disabled,\r\n * **all** inner components have their animations disabled as well.\r\n * This means that you can disable all animations for an app\r\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\r\n *\r\n * ```ts\r\n * import {Component, HostBinding} from '@angular/core';\r\n *\r\n * @Component({\r\n *   selector: 'app-component',\r\n *   templateUrl: 'app.component.html',\r\n * })\r\n * class AppComponent {\r\n *   @HostBinding('@.disabled')\r\n *   public animationsDisabled = true;\r\n * }\r\n * ```\r\n *\r\n * ### Overriding disablement of inner animations\r\n * Despite inner animations being disabled, a parent animation can `query()`\r\n * for inner elements located in disabled areas of the template and still animate\r\n * them if needed. This is also the case for when a sub animation is\r\n * queried by a parent and then later animated using `animateChild()`.\r\n *\r\n * ### Detecting when an animation is disabled\r\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\r\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\r\n * an instance of an `AnimationEvent`. If animations are disabled,\r\n * the `.disabled` flag on the event is true.\r\n *\r\n * @publicApi\r\n */\nfunction trigger(name, definitions) {\n  return {\n    type: AnimationMetadataType.Trigger,\n    name,\n    definitions,\n    options: {}\n  };\n}\n/**\r\n * Defines an animation step that combines styling information with timing information.\r\n *\r\n * @param timings Sets `AnimateTimings` for the parent animation.\r\n * A string in the format \"duration [delay] [easing]\".\r\n *  - Duration and delay are expressed as a number and optional time unit,\r\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\r\n * The default unit is milliseconds.\r\n *  - The easing value controls how the animation accelerates and decelerates\r\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\r\n * `ease-in-out`, or a `cubic-bezier()` function call.\r\n * If not supplied, no easing is applied.\r\n *\r\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\r\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\r\n * which decelerates near the end of the duration.\r\n * @param styles Sets AnimationStyles for the parent animation.\r\n * A function call to either `style()` or `keyframes()`\r\n * that returns a collection of CSS style entries to be applied to the parent animation.\r\n * When null, uses the styles from the destination state.\r\n * This is useful when describing an animation step that will complete an animation;\r\n * see \"Animating to the final state\" in `transitions()`.\r\n * @returns An object that encapsulates the animation step.\r\n *\r\n * @usageNotes\r\n * Call within an animation `sequence()`, {@link /api/animations/group group()}, or\r\n * `transition()` call to specify an animation step\r\n * that applies given style data to the parent animation for a given amount of time.\r\n *\r\n * ### Syntax Examples\r\n * **Timing examples**\r\n *\r\n * The following examples show various `timings` specifications.\r\n * - `animate(500)` : Duration is 500 milliseconds.\r\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\r\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\r\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\r\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\r\n * milliseconds, easing according to a bezier curve.\r\n *\r\n * **Style examples**\r\n *\r\n * The following example calls `style()` to set a single CSS style.\r\n * ```ts\r\n * animate(500, style({ background: \"red\" }))\r\n * ```\r\n * The following example calls `keyframes()` to set a CSS style\r\n * to different values for successive keyframes.\r\n * ```ts\r\n * animate(500, keyframes(\r\n *  [\r\n *   style({ background: \"blue\" }),\r\n *   style({ background: \"red\" })\r\n *  ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction animate(timings, styles = null) {\n  return {\n    type: AnimationMetadataType.Animate,\n    styles,\n    timings\n  };\n}\n/**\r\n * @description Defines a list of animation steps to be run in parallel.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - When steps are defined by `style()` or `animate()`\r\n * function calls, each call within the group is executed instantly.\r\n * - To specify offset styles to be applied at a later time, define steps with\r\n * `keyframes()`, or use `animate()` calls with a delay value.\r\n * For example:\r\n *\r\n * ```ts\r\n * group([\r\n *   animate(\"1s\", style({ background: \"black\" })),\r\n *   animate(\"2s\", style({ color: \"white\" }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the group data.\r\n *\r\n * @usageNotes\r\n * Grouped animations are useful when a series of styles must be\r\n * animated at different starting times and closed off at different ending times.\r\n *\r\n * When called within a `sequence()` or a\r\n * `transition()` call, does not continue to the next\r\n * instruction until all of the inner animation steps have completed.\r\n *\r\n * @publicApi\r\n */\nfunction group(steps, options = null) {\n  return {\n    type: AnimationMetadataType.Group,\n    steps,\n    options\n  };\n}\n/**\r\n * Defines a list of animation steps to be run sequentially, one by one.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - Steps defined by `style()` calls apply the styling data immediately.\r\n * - Steps defined by `animate()` calls apply the styling data over time\r\n *   as specified by the timing data.\r\n *\r\n * ```ts\r\n * sequence([\r\n *   style({ opacity: 0 }),\r\n *   animate(\"1s\", style({ opacity: 1 }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the sequence data.\r\n *\r\n * @usageNotes\r\n * When you pass an array of steps to a\r\n * `transition()` call, the steps run sequentially by default.\r\n * Compare this to the  {@link /api/animations/group group()} call, which runs animation steps in\r\n *parallel.\r\n *\r\n * When a sequence is used within a  {@link /api/animations/group group()} or a `transition()` call,\r\n * execution continues to the next instruction only after each of the inner animation\r\n * steps have completed.\r\n *\r\n * @publicApi\r\n **/\nfunction sequence(steps, options = null) {\n  return {\n    type: AnimationMetadataType.Sequence,\n    steps,\n    options\n  };\n}\n/**\r\n * Declares a key/value object containing CSS properties/styles that\r\n * can then be used for an animation [`state`](api/animations/state), within an animation\r\n *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.\r\n *\r\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\r\n * The value can be any of the following:\r\n * - A key-value style pair associating a CSS property with a value.\r\n * - An array of key-value style pairs.\r\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\r\n * being animated and applied to the animation when it starts.\r\n *\r\n * Auto-styling can be used to define a state that depends on layout or other\r\n * environmental factors.\r\n *\r\n * @return An object that encapsulates the style data.\r\n *\r\n * @usageNotes\r\n * The following examples create animation styles that collect a set of\r\n * CSS property values:\r\n *\r\n * ```ts\r\n * // string values for CSS properties\r\n * style({ background: \"red\", color: \"blue\" })\r\n *\r\n * // numerical pixel values\r\n * style({ width: 100, height: 0 })\r\n * ```\r\n *\r\n * The following example uses auto-styling to allow an element to animate from\r\n * a height of 0 up to its full height:\r\n *\r\n * ```ts\r\n * style({ height: 0 }),\r\n * animate(\"1s\", style({ height: \"*\" }))\r\n * ```\r\n *\r\n * @publicApi\r\n **/\nfunction style(tokens) {\n  return {\n    type: AnimationMetadataType.Style,\n    styles: tokens,\n    offset: null\n  };\n}\n/**\r\n * Declares an animation state within a trigger attached to an element.\r\n *\r\n * @param name One or more names for the defined state in a comma-separated string.\r\n * The following reserved state names can be supplied to define a style for specific use\r\n * cases:\r\n *\r\n * - `void` You can associate styles with this name to be used when\r\n * the element is detached from the application. For example, when an `ngIf` evaluates\r\n * to false, the state of the associated element is void.\r\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\r\n * to be used as the fallback when the state that is being animated is not declared\r\n * within the trigger.\r\n *\r\n * @param styles A set of CSS styles associated with this state, created using the\r\n * `style()` function.\r\n * This set of styles persists on the element once the state has been reached.\r\n * @param options Parameters that can be passed to the state when it is invoked.\r\n * 0 or more key-value pairs.\r\n * @return An object that encapsulates the new state data.\r\n *\r\n * @usageNotes\r\n * Use the `trigger()` function to register states to an animation trigger.\r\n * Use the `transition()` function to animate between states.\r\n * When a state is active within a component, its associated styles persist on the element,\r\n * even when the animation ends.\r\n *\r\n * @publicApi\r\n **/\nfunction state(name, styles, options) {\n  return {\n    type: AnimationMetadataType.State,\n    name,\n    styles,\n    options\n  };\n}\n/**\r\n * Defines a set of animation styles, associating each style with an optional `offset` value.\r\n *\r\n * @param steps A set of animation styles with optional offset data.\r\n * The optional `offset` value for a style specifies a percentage of the total animation\r\n * time at which that style is applied.\r\n * @returns An object that encapsulates the keyframes data.\r\n *\r\n * @usageNotes\r\n * Use with the `animate()` call. Instead of applying animations\r\n * from the current state\r\n * to the destination state, keyframes describe how each style entry is applied and at what point\r\n * within the animation arc.\r\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\r\n *\r\n * ### Usage\r\n *\r\n * In the following example, the offset values describe\r\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\r\n * blue when 20% of the total time has elapsed.\r\n *\r\n * ```ts\r\n * // the provided offset values\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\", offset: 0 }),\r\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\r\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\r\n *   style({ backgroundColor: \"black\", offset: 1 })\r\n * ]))\r\n * ```\r\n *\r\n * If there are no `offset` values specified in the style entries, the offsets\r\n * are calculated automatically.\r\n *\r\n * ```ts\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\" }) // offset = 0\r\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\r\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\r\n *   style({ backgroundColor: \"black\" }) // offset = 1\r\n * ]))\r\n *```\r\n\r\n * @publicApi\r\n */\nfunction keyframes(steps) {\n  return {\n    type: AnimationMetadataType.Keyframes,\n    steps\n  };\n}\n/**\r\n * Declares an animation transition which is played when a certain specified condition is met.\r\n *\r\n * @param stateChangeExpr A string with a specific format or a function that specifies when the\r\n * animation transition should occur (see [State Change Expression](#state-change-expression)).\r\n *\r\n * @param steps One or more animation objects that represent the animation's instructions.\r\n *\r\n * @param options An options object that can be used to specify a delay for the animation or provide\r\n * custom parameters for it.\r\n *\r\n * @returns An object that encapsulates the transition data.\r\n *\r\n * @usageNotes\r\n *\r\n * ### State Change Expression\r\n *\r\n * The State Change Expression instructs Angular when to run the transition's animations, it can\r\n *either be\r\n *  - a string with a specific syntax\r\n *  - or a function that compares the previous and current state (value of the expression bound to\r\n *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise\r\n *\r\n * The string format can be:\r\n *  - `fromState => toState`, which indicates that the transition's animations should occur then the\r\n *    expression bound to the trigger's element goes from `fromState` to `toState`\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))\r\n *      ```\r\n *\r\n *  - `fromState <=> toState`, which indicates that the transition's animations should occur then\r\n *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))\r\n *      ```\r\n *\r\n *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the\r\n *    element enters or exists the DOM\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition(':enter', [\r\n *          style({ opacity: 0 }),\r\n *          animate('500ms', style({ opacity: 1 }))\r\n *        ])\r\n *      ```\r\n *\r\n *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when\r\n *    the numerical expression bound to the trigger's element has increased in value or decreased\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition(':increment', query('@counter', animateChild()))\r\n *      ```\r\n *\r\n *  - a sequence of any of the above divided by commas, which indicates that transition's animations\r\n *    should occur whenever one of the state change expressions matches\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([\r\n *          style({ transform: 'scale(1)', offset: 0}),\r\n *          style({ transform: 'scale(1.1)', offset: 0.7}),\r\n *          style({ transform: 'scale(1)', offset: 1})\r\n *        ]))),\r\n *      ```\r\n *\r\n * Also note that in such context:\r\n *  - `void` can be used to indicate the absence of the element\r\n *  - asterisks can be used as wildcards that match any state\r\n *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is\r\n *    equivalent to `:leave`)\r\n *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match\r\n *    _truthy_ and _falsy_ values)\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n *  Be careful about entering end leaving elements as their transitions present a common\r\n *  pitfall for developers.\r\n *\r\n *  Note that when an element with a trigger enters the DOM its `:enter` transition always\r\n *  gets executed, but its `:leave` transition will not be executed if the element is removed\r\n *  alongside its parent (as it will be removed \"without warning\" before its transition has\r\n *  a chance to be executed, the only way that such transition can occur is if the element\r\n *  is exiting the DOM on its own).\r\n *\r\n *\r\n * </div>\r\n *\r\n * ### Animating to a Final State\r\n *\r\n * If the final step in a transition is a call to `animate()` that uses a timing value\r\n * with no `style` data, that step is automatically considered the final animation arc,\r\n * for the element to reach the final state, in such case Angular automatically adds or removes\r\n * CSS styles to ensure that the element is in the correct final state.\r\n *\r\n *\r\n * ### Usage Examples\r\n *\r\n *  - Transition animations applied based on\r\n *    the trigger's expression value\r\n *\r\n *   ```html\r\n *   <div [@myAnimationTrigger]=\"myStatusExp\">\r\n *    ...\r\n *   </div>\r\n *   ```\r\n *\r\n *   ```ts\r\n *   trigger(\"myAnimationTrigger\", [\r\n *     ..., // states\r\n *     transition(\"on => off, open => closed\", animate(500)),\r\n *     transition(\"* <=> error\", query('.indicator', animateChild()))\r\n *   ])\r\n *   ```\r\n *\r\n *  - Transition animations applied based on custom logic dependent\r\n *    on the trigger's expression value and provided parameters\r\n *\r\n *    ```html\r\n *    <div [@myAnimationTrigger]=\"{\r\n *     value: stepName,\r\n *     params: { target: currentTarget }\r\n *    }\">\r\n *     ...\r\n *    </div>\r\n *    ```\r\n *\r\n *    ```ts\r\n *    trigger(\"myAnimationTrigger\", [\r\n *      ..., // states\r\n *      transition(\r\n *        (fromState, toState, _element, params) =>\r\n *          ['firststep', 'laststep'].includes(fromState.toLowerCase())\r\n *          && toState === params?.['target'],\r\n *        animate('1s')\r\n *      )\r\n *    ])\r\n *    ```\r\n *\r\n * @publicApi\r\n **/\nfunction transition(stateChangeExpr, steps, options = null) {\n  return {\n    type: AnimationMetadataType.Transition,\n    expr: stateChangeExpr,\n    animation: steps,\n    options\n  };\n}\n/**\r\n * Produces a reusable animation that can be invoked in another animation or sequence,\r\n * by calling the `useAnimation()` function.\r\n *\r\n * @param steps One or more animation objects, as returned by the `animate()`\r\n * or `sequence()` function, that form a transformation from one state to another.\r\n * A sequence is used by default when you pass an array.\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional developer-defined parameters.\r\n * Provided values for additional parameters are used as defaults,\r\n * and override values can be passed to the caller on invocation.\r\n * @returns An object that encapsulates the animation data.\r\n *\r\n * @usageNotes\r\n * The following example defines a reusable animation, providing some default parameter\r\n * values.\r\n *\r\n * ```ts\r\n * var fadeAnimation = animation([\r\n *   style({ opacity: '{{ start }}' }),\r\n *   animate('{{ time }}',\r\n *   style({ opacity: '{{ end }}'}))\r\n *   ],\r\n *   { params: { time: '1000ms', start: 0, end: 1 }});\r\n * ```\r\n *\r\n * The following invokes the defined animation with a call to `useAnimation()`,\r\n * passing in override parameter values.\r\n *\r\n * ```js\r\n * useAnimation(fadeAnimation, {\r\n *   params: {\r\n *     time: '2s',\r\n *     start: 1,\r\n *     end: 0\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * If any of the passed-in parameter values are missing from this call,\r\n * the default values are used. If one or more parameter values are missing before a step is\r\n * animated, `useAnimation()` throws an error.\r\n *\r\n * @publicApi\r\n */\nfunction animation(steps, options = null) {\n  return {\n    type: AnimationMetadataType.Reference,\n    animation: steps,\n    options\n  };\n}\n/**\r\n * Executes a queried inner animation element within an animation sequence.\r\n *\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional override values for developer-defined parameters.\r\n * @return An object that encapsulates the child animation data.\r\n *\r\n * @usageNotes\r\n * Each time an animation is triggered in Angular, the parent animation\r\n * has priority and any child animations are blocked. In order\r\n * for a child animation to run, the parent animation must query each of the elements\r\n * containing child animations, and run them using this function.\r\n *\r\n * Note that this feature is designed to be used with `query()` and it will only work\r\n * with animations that are assigned using the Angular animation library. CSS keyframes\r\n * and transitions are not handled by this API.\r\n *\r\n * @publicApi\r\n */\nfunction animateChild(options = null) {\n  return {\n    type: AnimationMetadataType.AnimateChild,\n    options\n  };\n}\n/**\r\n * Starts a reusable animation that is created using the `animation()` function.\r\n *\r\n * @param animation The reusable animation to start.\r\n * @param options An options object that can contain a delay value for the start of\r\n * the animation, and additional override values for developer-defined parameters.\r\n * @return An object that contains the animation parameters.\r\n *\r\n * @publicApi\r\n */\nfunction useAnimation(animation, options = null) {\n  return {\n    type: AnimationMetadataType.AnimateRef,\n    animation,\n    options\n  };\n}\n/**\r\n * Finds one or more inner elements within the current element that is\r\n * being animated within a sequence. Use with `animate()`.\r\n *\r\n * @param selector The element to query, or a set of elements that contain Angular-specific\r\n * characteristics, specified with one or more of the following tokens.\r\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements (not\r\n *     all elements can be queried via these tokens, see\r\n *     [Entering and Leaving Elements](#entering-and-leaving-elements))\r\n *  - `query(\":animating\")` : Query all currently animating elements.\r\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\r\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\r\n *  - `query(\":self\")` : Include the current element into the animation sequence.\r\n *\r\n * @param animation One or more animation steps to apply to the queried element or elements.\r\n * An array is treated as an animation sequence.\r\n * @param options An options object. Use the 'limit' field to limit the total number of\r\n * items to collect.\r\n * @return An object that encapsulates the query data.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Multiple Tokens\r\n *\r\n * Tokens can be merged into a combined query selector string. For example:\r\n *\r\n * ```ts\r\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\r\n * ```\r\n *\r\n * The `query()` function collects multiple elements and works internally by using\r\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\r\n * the total number of items to be collected. For example:\r\n *\r\n * ```js\r\n * query('div', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { limit: 1 })\r\n * ```\r\n *\r\n * By default, throws an error when zero items are found. Set the\r\n * `optional` flag to ignore this error. For example:\r\n *\r\n * ```js\r\n * query('.some-element-that-may-not-be-there', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { optional: true })\r\n * ```\r\n *\r\n * ### Entering and Leaving Elements\r\n *\r\n * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones\r\n * that can are those that Angular assumes can enter/leave based on their own logic\r\n * (if their insertion/removal is simply a consequence of that of their parent they\r\n * should be queried via a different token in their parent's `:enter`/`:leave` transitions).\r\n *\r\n * The only elements Angular assumes can enter/leave based on their own logic (thus the only\r\n * ones that can be queried via the `:enter` and `:leave` tokens) are:\r\n *  - Those inserted dynamically (via `ViewContainerRef`)\r\n *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n *  Note that elements will be successfully queried via `:enter`/`:leave` even if their\r\n *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural\r\n *  directive (e.g. they enter/exit alongside their parent).\r\n *\r\n * </div>\r\n *\r\n * <div class=\"docs-alert docs-alert-important\">\r\n *\r\n *  There is an exception to what previously mentioned, besides elements entering/leaving based on\r\n *  their own logic, elements with an animation trigger can always be queried via `:leave` when\r\n * their parent is also leaving.\r\n *\r\n * </div>\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example queries for inner elements and animates them\r\n * individually using `animate()`.\r\n *\r\n * ```angular-ts\r\n * @Component({\r\n *   selector: 'inner',\r\n *   template: `\r\n *     <div [@queryAnimation]=\"exp\">\r\n *       <h1>Title</h1>\r\n *       <div class=\"content\">\r\n *         Blah blah blah\r\n *       </div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *    trigger('queryAnimation', [\r\n *      transition('* => goAnimate', [\r\n *        // hide the inner elements\r\n *        query('h1', style({ opacity: 0 })),\r\n *        query('.content', style({ opacity: 0 })),\r\n *\r\n *        // animate the inner elements in, one by one\r\n *        query('h1', animate(1000, style({ opacity: 1 }))),\r\n *        query('.content', animate(1000, style({ opacity: 1 }))),\r\n *      ])\r\n *    ])\r\n *  ]\r\n * })\r\n * class Cmp {\r\n *   exp = '';\r\n *\r\n *   goAnimate() {\r\n *     this.exp = 'goAnimate';\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction query(selector, animation, options = null) {\n  return {\n    type: AnimationMetadataType.Query,\n    selector,\n    animation,\n    options\n  };\n}\n/**\r\n * Use within an animation `query()` call to issue a timing gap after\r\n * each queried item is animated.\r\n *\r\n * @param timings A delay value.\r\n * @param animation One ore more animation steps.\r\n * @returns An object that encapsulates the stagger data.\r\n *\r\n * @usageNotes\r\n * In the following example, a container element wraps a list of items stamped out\r\n * by an `@for` block. The container element contains an animation trigger that will later be set\r\n * to query for each of the inner items.\r\n *\r\n * Each time items are added, the opacity fade-in animation runs,\r\n * and each removed item is faded out.\r\n * When either of these animations occur, the stagger effect is\r\n * applied after each item's animation is started.\r\n *\r\n * ```html\r\n * <!-- list.component.html -->\r\n * <button (click)=\"toggle()\">Show / Hide Items</button>\r\n * <hr />\r\n * <div [@listAnimation]=\"items.length\">\r\n *   @for(item of items; track $index) {\r\n *      <div>{{ item }}</div>\r\n *   }\r\n * </div>\r\n * ```\r\n *\r\n * Here is the component code:\r\n *\r\n * ```ts\r\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\r\n * @Component({\r\n *   templateUrl: 'list.component.html',\r\n *   animations: [\r\n *     trigger('listAnimation', [\r\n *     ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class ListComponent {\r\n *   items = [];\r\n *\r\n *   showItems() {\r\n *     this.items = [0,1,2,3,4];\r\n *   }\r\n *\r\n *   hideItems() {\r\n *     this.items = [];\r\n *   }\r\n *\r\n *   toggle() {\r\n *     this.items.length ? this.hideItems() : this.showItems();\r\n *    }\r\n *  }\r\n * ```\r\n *\r\n * Here is the animation trigger code:\r\n *\r\n * ```ts\r\n * trigger('listAnimation', [\r\n *   transition('* => *', [ // each time the binding value changes\r\n *     query(':leave', [\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 0 }))\r\n *       ])\r\n *     ]),\r\n *     query(':enter', [\r\n *       style({ opacity: 0 }),\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 1 }))\r\n *       ])\r\n *     ])\r\n *   ])\r\n * ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction stagger(timings, animation) {\n  return {\n    type: AnimationMetadataType.Stagger,\n    timings,\n    animation\n  };\n}\n\n/**\r\n * An empty programmatic controller for reusable animations.\r\n * Used internally when animations are disabled, to avoid\r\n * checking for the null case when an animation player is expected.\r\n *\r\n * @see {@link animate}\r\n * @see {@link AnimationPlayer}\r\n *\r\n * @publicApi\r\n */\nclass NoopAnimationPlayer {\n  _onDoneFns = [];\n  _onStartFns = [];\n  _onDestroyFns = [];\n  _originalOnDoneFns = [];\n  _originalOnStartFns = [];\n  _started = false;\n  _destroyed = false;\n  _finished = false;\n  _position = 0;\n  parentPlayer = null;\n  totalTime;\n  constructor(duration = 0, delay = 0) {\n    this.totalTime = duration + delay;\n  }\n  _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n  onStart(fn) {\n    this._originalOnStartFns.push(fn);\n    this._onStartFns.push(fn);\n  }\n  onDone(fn) {\n    this._originalOnDoneFns.push(fn);\n    this._onDoneFns.push(fn);\n  }\n  onDestroy(fn) {\n    this._onDestroyFns.push(fn);\n  }\n  hasStarted() {\n    return this._started;\n  }\n  init() {}\n  play() {\n    if (!this.hasStarted()) {\n      this._onStart();\n      this.triggerMicrotask();\n    }\n    this._started = true;\n  }\n  /** @internal */\n  triggerMicrotask() {\n    queueMicrotask(() => this._onFinish());\n  }\n  _onStart() {\n    this._onStartFns.forEach(fn => fn());\n    this._onStartFns = [];\n  }\n  pause() {}\n  restart() {}\n  finish() {\n    this._onFinish();\n  }\n  destroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      if (!this.hasStarted()) {\n        this._onStart();\n      }\n      this.finish();\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n  reset() {\n    this._started = false;\n    this._finished = false;\n    this._onStartFns = this._originalOnStartFns;\n    this._onDoneFns = this._originalOnDoneFns;\n  }\n  setPosition(position) {\n    this._position = this.totalTime ? position * this.totalTime : 1;\n  }\n  getPosition() {\n    return this.totalTime ? this._position / this.totalTime : 1;\n  }\n  /** @internal */\n  triggerCallback(phaseName) {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n\n/**\r\n * A programmatic controller for a group of reusable animations.\r\n * Used internally to control animations.\r\n *\r\n * @see {@link AnimationPlayer}\r\n * @see {@link animations/group group}\r\n *\r\n */\nclass AnimationGroupPlayer {\n  _onDoneFns = [];\n  _onStartFns = [];\n  _finished = false;\n  _started = false;\n  _destroyed = false;\n  _onDestroyFns = [];\n  parentPlayer = null;\n  totalTime = 0;\n  players;\n  constructor(_players) {\n    this.players = _players;\n    let doneCount = 0;\n    let destroyCount = 0;\n    let startCount = 0;\n    const total = this.players.length;\n    if (total == 0) {\n      queueMicrotask(() => this._onFinish());\n    } else {\n      this.players.forEach(player => {\n        player.onDone(() => {\n          if (++doneCount == total) {\n            this._onFinish();\n          }\n        });\n        player.onDestroy(() => {\n          if (++destroyCount == total) {\n            this._onDestroy();\n          }\n        });\n        player.onStart(() => {\n          if (++startCount == total) {\n            this._onStart();\n          }\n        });\n      });\n    }\n    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n  }\n  _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n  init() {\n    this.players.forEach(player => player.init());\n  }\n  onStart(fn) {\n    this._onStartFns.push(fn);\n  }\n  _onStart() {\n    if (!this.hasStarted()) {\n      this._started = true;\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n    }\n  }\n  onDone(fn) {\n    this._onDoneFns.push(fn);\n  }\n  onDestroy(fn) {\n    this._onDestroyFns.push(fn);\n  }\n  hasStarted() {\n    return this._started;\n  }\n  play() {\n    if (!this.parentPlayer) {\n      this.init();\n    }\n    this._onStart();\n    this.players.forEach(player => player.play());\n  }\n  pause() {\n    this.players.forEach(player => player.pause());\n  }\n  restart() {\n    this.players.forEach(player => player.restart());\n  }\n  finish() {\n    this._onFinish();\n    this.players.forEach(player => player.finish());\n  }\n  destroy() {\n    this._onDestroy();\n  }\n  _onDestroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._onFinish();\n      this.players.forEach(player => player.destroy());\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n  reset() {\n    this.players.forEach(player => player.reset());\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n  setPosition(p) {\n    const timeAtPosition = p * this.totalTime;\n    this.players.forEach(player => {\n      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n      player.setPosition(position);\n    });\n  }\n  getPosition() {\n    const longestPlayer = this.players.reduce((longestSoFar, player) => {\n      const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n      return newPlayerIsLongest ? player : longestSoFar;\n    }, null);\n    return longestPlayer != null ? longestPlayer.getPosition() : 0;\n  }\n  beforeDestroy() {\n    this.players.forEach(player => {\n      if (player.beforeDestroy) {\n        player.beforeDestroy();\n      }\n    });\n  }\n  /** @internal */\n  triggerCallback(phaseName) {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\nconst ɵPRE_STYLE = '!';\nexport { AUTO_STYLE, AnimationGroupPlayer, AnimationMetadataType, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵPRE_STYLE };","map":{"version":3,"names":["AnimationMetadataType","AUTO_STYLE","trigger","name","definitions","type","Trigger","options","animate","timings","styles","Animate","group","steps","Group","sequence","Sequence","style","tokens","Style","offset","state","State","keyframes","Keyframes","transition","stateChangeExpr","Transition","expr","animation","Reference","animateChild","AnimateChild","useAnimation","AnimateRef","query","selector","Query","stagger","Stagger","NoopAnimationPlayer","_onDoneFns","_onStartFns","_onDestroyFns","_originalOnDoneFns","_originalOnStartFns","_started","_destroyed","_finished","_position","parentPlayer","totalTime","constructor","duration","delay","_onFinish","forEach","fn","onStart","push","onDone","onDestroy","hasStarted","init","play","_onStart","triggerMicrotask","queueMicrotask","pause","restart","finish","destroy","reset","setPosition","position","getPosition","triggerCallback","phaseName","methods","length","AnimationGroupPlayer","players","_players","doneCount","destroyCount","startCount","total","player","_onDestroy","reduce","time","Math","max","p","timeAtPosition","min","longestPlayer","longestSoFar","newPlayerIsLongest","beforeDestroy","ɵPRE_STYLE"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/animations/fesm2022/private_export.mjs"],"sourcesContent":["/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n/**\r\n * @description Constants for the categories of parameters that can be defined for animations.\r\n *\r\n * A corresponding function defines a set of parameters for each category, and\r\n * collects them into a corresponding `AnimationMetadata` object.\r\n *\r\n * @publicApi\r\n */\r\nvar AnimationMetadataType;\r\n(function (AnimationMetadataType) {\r\n    /**\r\n     * Associates a named animation state with a set of CSS styles.\r\n     * See [`state()`](api/animations/state)\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"State\"] = 0] = \"State\";\r\n    /**\r\n     * Data for a transition from one animation state to another.\r\n     * See `transition()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Transition\"] = 1] = \"Transition\";\r\n    /**\r\n     * Contains a set of animation steps.\r\n     * See `sequence()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Sequence\"] = 2] = \"Sequence\";\r\n    /**\r\n     * Contains a set of animation steps.\r\n     * See `group()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Group\"] = 3] = \"Group\";\r\n    /**\r\n     * Contains an animation step.\r\n     * See `animate()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Animate\"] = 4] = \"Animate\";\r\n    /**\r\n     * Contains a set of animation steps.\r\n     * See `keyframes()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Keyframes\"] = 5] = \"Keyframes\";\r\n    /**\r\n     * Contains a set of CSS property-value pairs into a named style.\r\n     * See `style()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Style\"] = 6] = \"Style\";\r\n    /**\r\n     * Associates an animation with an entry trigger that can be attached to an element.\r\n     * See `trigger()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Trigger\"] = 7] = \"Trigger\";\r\n    /**\r\n     * Contains a re-usable animation.\r\n     * See `animation()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Reference\"] = 8] = \"Reference\";\r\n    /**\r\n     * Contains data to use in executing child animations returned by a query.\r\n     * See `animateChild()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"AnimateChild\"] = 9] = \"AnimateChild\";\r\n    /**\r\n     * Contains animation parameters for a re-usable animation.\r\n     * See `useAnimation()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"AnimateRef\"] = 10] = \"AnimateRef\";\r\n    /**\r\n     * Contains child-animation query data.\r\n     * See `query()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Query\"] = 11] = \"Query\";\r\n    /**\r\n     * Contains data for staggering an animation sequence.\r\n     * See `stagger()`\r\n     */\r\n    AnimationMetadataType[AnimationMetadataType[\"Stagger\"] = 12] = \"Stagger\";\r\n})(AnimationMetadataType || (AnimationMetadataType = {}));\r\n/**\r\n * Specifies automatic styling.\r\n *\r\n * @publicApi\r\n */\r\nconst AUTO_STYLE = '*';\r\n/**\r\n * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)\r\n * and `transition()` entries to be evaluated when the expression\r\n * bound to the trigger changes.\r\n *\r\n * @param name An identifying string.\r\n * @param definitions  An animation definition object, containing an array of\r\n * [`state()`](api/animations/state) and `transition()` declarations.\r\n *\r\n * @return An object that encapsulates the trigger data.\r\n *\r\n * @usageNotes\r\n * Define an animation trigger in the `animations` section of `@Component` metadata.\r\n * In the template, reference the trigger by name and bind it to a trigger expression that\r\n * evaluates to a defined animation state, using the following format:\r\n *\r\n * `[@triggerName]=\"expression\"`\r\n *\r\n * Animation trigger bindings convert all values to strings, and then match the\r\n * previous and current values against any linked transitions.\r\n * Booleans can be specified as `1` or `true` and `0` or `false`.\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example creates an animation trigger reference based on the provided\r\n * name value.\r\n * The provided animation value is expected to be an array consisting of state and\r\n * transition declarations.\r\n *\r\n * ```ts\r\n * @Component({\r\n *   selector: \"my-component\",\r\n *   templateUrl: \"my-component-tpl.html\",\r\n *   animations: [\r\n *     trigger(\"myAnimationTrigger\", [\r\n *       state(...),\r\n *       state(...),\r\n *       transition(...),\r\n *       transition(...)\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"something\";\r\n * }\r\n * ```\r\n *\r\n * The template associated with this component makes use of the defined trigger\r\n * by binding to an element within its template code.\r\n *\r\n * ```html\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * ### Using an inline function\r\n * The `transition` animation method also supports reading an inline function which can decide\r\n * if its associated animation should be run.\r\n *\r\n * ```ts\r\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\r\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\r\n string]: any}): boolean {\r\n *   // notice that `element` and `params` are also available here\r\n *   return toState == 'yes-please-animate';\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   templateUrl: 'my-component-tpl.html',\r\n *   animations: [\r\n *     trigger('myAnimationTrigger', [\r\n *       transition(myInlineMatcherFn, [\r\n *         // the animation sequence code\r\n *       ]),\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"yes-please-animate\";\r\n * }\r\n * ```\r\n *\r\n * ### Disabling Animations\r\n * When true, the special animation control binding `@.disabled` binding prevents\r\n * all animations from rendering.\r\n * Place the  `@.disabled` binding on an element to disable\r\n * animations on the element itself, as well as any inner animation triggers\r\n * within the element.\r\n *\r\n * The following example shows how to use this feature:\r\n *\r\n * ```angular-ts\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   template: `\r\n *     <div [@.disabled]=\"isDisabled\">\r\n *       <div [@childAnimation]=\"exp\"></div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *     trigger(\"childAnimation\", [\r\n *       // ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   isDisabled = true;\r\n *   exp = '...';\r\n * }\r\n * ```\r\n *\r\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\r\n * along with any inner animations.\r\n *\r\n * ### Disable animations application-wide\r\n * When an area of the template is set to have animations disabled,\r\n * **all** inner components have their animations disabled as well.\r\n * This means that you can disable all animations for an app\r\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\r\n *\r\n * ```ts\r\n * import {Component, HostBinding} from '@angular/core';\r\n *\r\n * @Component({\r\n *   selector: 'app-component',\r\n *   templateUrl: 'app.component.html',\r\n * })\r\n * class AppComponent {\r\n *   @HostBinding('@.disabled')\r\n *   public animationsDisabled = true;\r\n * }\r\n * ```\r\n *\r\n * ### Overriding disablement of inner animations\r\n * Despite inner animations being disabled, a parent animation can `query()`\r\n * for inner elements located in disabled areas of the template and still animate\r\n * them if needed. This is also the case for when a sub animation is\r\n * queried by a parent and then later animated using `animateChild()`.\r\n *\r\n * ### Detecting when an animation is disabled\r\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\r\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\r\n * an instance of an `AnimationEvent`. If animations are disabled,\r\n * the `.disabled` flag on the event is true.\r\n *\r\n * @publicApi\r\n */\r\nfunction trigger(name, definitions) {\r\n    return { type: AnimationMetadataType.Trigger, name, definitions, options: {} };\r\n}\r\n/**\r\n * Defines an animation step that combines styling information with timing information.\r\n *\r\n * @param timings Sets `AnimateTimings` for the parent animation.\r\n * A string in the format \"duration [delay] [easing]\".\r\n *  - Duration and delay are expressed as a number and optional time unit,\r\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\r\n * The default unit is milliseconds.\r\n *  - The easing value controls how the animation accelerates and decelerates\r\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\r\n * `ease-in-out`, or a `cubic-bezier()` function call.\r\n * If not supplied, no easing is applied.\r\n *\r\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\r\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\r\n * which decelerates near the end of the duration.\r\n * @param styles Sets AnimationStyles for the parent animation.\r\n * A function call to either `style()` or `keyframes()`\r\n * that returns a collection of CSS style entries to be applied to the parent animation.\r\n * When null, uses the styles from the destination state.\r\n * This is useful when describing an animation step that will complete an animation;\r\n * see \"Animating to the final state\" in `transitions()`.\r\n * @returns An object that encapsulates the animation step.\r\n *\r\n * @usageNotes\r\n * Call within an animation `sequence()`, {@link /api/animations/group group()}, or\r\n * `transition()` call to specify an animation step\r\n * that applies given style data to the parent animation for a given amount of time.\r\n *\r\n * ### Syntax Examples\r\n * **Timing examples**\r\n *\r\n * The following examples show various `timings` specifications.\r\n * - `animate(500)` : Duration is 500 milliseconds.\r\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\r\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\r\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\r\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\r\n * milliseconds, easing according to a bezier curve.\r\n *\r\n * **Style examples**\r\n *\r\n * The following example calls `style()` to set a single CSS style.\r\n * ```ts\r\n * animate(500, style({ background: \"red\" }))\r\n * ```\r\n * The following example calls `keyframes()` to set a CSS style\r\n * to different values for successive keyframes.\r\n * ```ts\r\n * animate(500, keyframes(\r\n *  [\r\n *   style({ background: \"blue\" }),\r\n *   style({ background: \"red\" })\r\n *  ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction animate(timings, styles = null) {\r\n    return { type: AnimationMetadataType.Animate, styles, timings };\r\n}\r\n/**\r\n * @description Defines a list of animation steps to be run in parallel.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - When steps are defined by `style()` or `animate()`\r\n * function calls, each call within the group is executed instantly.\r\n * - To specify offset styles to be applied at a later time, define steps with\r\n * `keyframes()`, or use `animate()` calls with a delay value.\r\n * For example:\r\n *\r\n * ```ts\r\n * group([\r\n *   animate(\"1s\", style({ background: \"black\" })),\r\n *   animate(\"2s\", style({ color: \"white\" }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the group data.\r\n *\r\n * @usageNotes\r\n * Grouped animations are useful when a series of styles must be\r\n * animated at different starting times and closed off at different ending times.\r\n *\r\n * When called within a `sequence()` or a\r\n * `transition()` call, does not continue to the next\r\n * instruction until all of the inner animation steps have completed.\r\n *\r\n * @publicApi\r\n */\r\nfunction group(steps, options = null) {\r\n    return { type: AnimationMetadataType.Group, steps, options };\r\n}\r\n/**\r\n * Defines a list of animation steps to be run sequentially, one by one.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - Steps defined by `style()` calls apply the styling data immediately.\r\n * - Steps defined by `animate()` calls apply the styling data over time\r\n *   as specified by the timing data.\r\n *\r\n * ```ts\r\n * sequence([\r\n *   style({ opacity: 0 }),\r\n *   animate(\"1s\", style({ opacity: 1 }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the sequence data.\r\n *\r\n * @usageNotes\r\n * When you pass an array of steps to a\r\n * `transition()` call, the steps run sequentially by default.\r\n * Compare this to the  {@link /api/animations/group group()} call, which runs animation steps in\r\n *parallel.\r\n *\r\n * When a sequence is used within a  {@link /api/animations/group group()} or a `transition()` call,\r\n * execution continues to the next instruction only after each of the inner animation\r\n * steps have completed.\r\n *\r\n * @publicApi\r\n **/\r\nfunction sequence(steps, options = null) {\r\n    return { type: AnimationMetadataType.Sequence, steps, options };\r\n}\r\n/**\r\n * Declares a key/value object containing CSS properties/styles that\r\n * can then be used for an animation [`state`](api/animations/state), within an animation\r\n *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.\r\n *\r\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\r\n * The value can be any of the following:\r\n * - A key-value style pair associating a CSS property with a value.\r\n * - An array of key-value style pairs.\r\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\r\n * being animated and applied to the animation when it starts.\r\n *\r\n * Auto-styling can be used to define a state that depends on layout or other\r\n * environmental factors.\r\n *\r\n * @return An object that encapsulates the style data.\r\n *\r\n * @usageNotes\r\n * The following examples create animation styles that collect a set of\r\n * CSS property values:\r\n *\r\n * ```ts\r\n * // string values for CSS properties\r\n * style({ background: \"red\", color: \"blue\" })\r\n *\r\n * // numerical pixel values\r\n * style({ width: 100, height: 0 })\r\n * ```\r\n *\r\n * The following example uses auto-styling to allow an element to animate from\r\n * a height of 0 up to its full height:\r\n *\r\n * ```ts\r\n * style({ height: 0 }),\r\n * animate(\"1s\", style({ height: \"*\" }))\r\n * ```\r\n *\r\n * @publicApi\r\n **/\r\nfunction style(tokens) {\r\n    return { type: AnimationMetadataType.Style, styles: tokens, offset: null };\r\n}\r\n/**\r\n * Declares an animation state within a trigger attached to an element.\r\n *\r\n * @param name One or more names for the defined state in a comma-separated string.\r\n * The following reserved state names can be supplied to define a style for specific use\r\n * cases:\r\n *\r\n * - `void` You can associate styles with this name to be used when\r\n * the element is detached from the application. For example, when an `ngIf` evaluates\r\n * to false, the state of the associated element is void.\r\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\r\n * to be used as the fallback when the state that is being animated is not declared\r\n * within the trigger.\r\n *\r\n * @param styles A set of CSS styles associated with this state, created using the\r\n * `style()` function.\r\n * This set of styles persists on the element once the state has been reached.\r\n * @param options Parameters that can be passed to the state when it is invoked.\r\n * 0 or more key-value pairs.\r\n * @return An object that encapsulates the new state data.\r\n *\r\n * @usageNotes\r\n * Use the `trigger()` function to register states to an animation trigger.\r\n * Use the `transition()` function to animate between states.\r\n * When a state is active within a component, its associated styles persist on the element,\r\n * even when the animation ends.\r\n *\r\n * @publicApi\r\n **/\r\nfunction state(name, styles, options) {\r\n    return { type: AnimationMetadataType.State, name, styles, options };\r\n}\r\n/**\r\n * Defines a set of animation styles, associating each style with an optional `offset` value.\r\n *\r\n * @param steps A set of animation styles with optional offset data.\r\n * The optional `offset` value for a style specifies a percentage of the total animation\r\n * time at which that style is applied.\r\n * @returns An object that encapsulates the keyframes data.\r\n *\r\n * @usageNotes\r\n * Use with the `animate()` call. Instead of applying animations\r\n * from the current state\r\n * to the destination state, keyframes describe how each style entry is applied and at what point\r\n * within the animation arc.\r\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\r\n *\r\n * ### Usage\r\n *\r\n * In the following example, the offset values describe\r\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\r\n * blue when 20% of the total time has elapsed.\r\n *\r\n * ```ts\r\n * // the provided offset values\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\", offset: 0 }),\r\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\r\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\r\n *   style({ backgroundColor: \"black\", offset: 1 })\r\n * ]))\r\n * ```\r\n *\r\n * If there are no `offset` values specified in the style entries, the offsets\r\n * are calculated automatically.\r\n *\r\n * ```ts\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\" }) // offset = 0\r\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\r\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\r\n *   style({ backgroundColor: \"black\" }) // offset = 1\r\n * ]))\r\n *```\r\n\r\n * @publicApi\r\n */\r\nfunction keyframes(steps) {\r\n    return { type: AnimationMetadataType.Keyframes, steps };\r\n}\r\n/**\r\n * Declares an animation transition which is played when a certain specified condition is met.\r\n *\r\n * @param stateChangeExpr A string with a specific format or a function that specifies when the\r\n * animation transition should occur (see [State Change Expression](#state-change-expression)).\r\n *\r\n * @param steps One or more animation objects that represent the animation's instructions.\r\n *\r\n * @param options An options object that can be used to specify a delay for the animation or provide\r\n * custom parameters for it.\r\n *\r\n * @returns An object that encapsulates the transition data.\r\n *\r\n * @usageNotes\r\n *\r\n * ### State Change Expression\r\n *\r\n * The State Change Expression instructs Angular when to run the transition's animations, it can\r\n *either be\r\n *  - a string with a specific syntax\r\n *  - or a function that compares the previous and current state (value of the expression bound to\r\n *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise\r\n *\r\n * The string format can be:\r\n *  - `fromState => toState`, which indicates that the transition's animations should occur then the\r\n *    expression bound to the trigger's element goes from `fromState` to `toState`\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))\r\n *      ```\r\n *\r\n *  - `fromState <=> toState`, which indicates that the transition's animations should occur then\r\n *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))\r\n *      ```\r\n *\r\n *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the\r\n *    element enters or exists the DOM\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition(':enter', [\r\n *          style({ opacity: 0 }),\r\n *          animate('500ms', style({ opacity: 1 }))\r\n *        ])\r\n *      ```\r\n *\r\n *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when\r\n *    the numerical expression bound to the trigger's element has increased in value or decreased\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition(':increment', query('@counter', animateChild()))\r\n *      ```\r\n *\r\n *  - a sequence of any of the above divided by commas, which indicates that transition's animations\r\n *    should occur whenever one of the state change expressions matches\r\n *\r\n *    _Example:_\r\n *      ```ts\r\n *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([\r\n *          style({ transform: 'scale(1)', offset: 0}),\r\n *          style({ transform: 'scale(1.1)', offset: 0.7}),\r\n *          style({ transform: 'scale(1)', offset: 1})\r\n *        ]))),\r\n *      ```\r\n *\r\n * Also note that in such context:\r\n *  - `void` can be used to indicate the absence of the element\r\n *  - asterisks can be used as wildcards that match any state\r\n *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is\r\n *    equivalent to `:leave`)\r\n *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match\r\n *    _truthy_ and _falsy_ values)\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n *  Be careful about entering end leaving elements as their transitions present a common\r\n *  pitfall for developers.\r\n *\r\n *  Note that when an element with a trigger enters the DOM its `:enter` transition always\r\n *  gets executed, but its `:leave` transition will not be executed if the element is removed\r\n *  alongside its parent (as it will be removed \"without warning\" before its transition has\r\n *  a chance to be executed, the only way that such transition can occur is if the element\r\n *  is exiting the DOM on its own).\r\n *\r\n *\r\n * </div>\r\n *\r\n * ### Animating to a Final State\r\n *\r\n * If the final step in a transition is a call to `animate()` that uses a timing value\r\n * with no `style` data, that step is automatically considered the final animation arc,\r\n * for the element to reach the final state, in such case Angular automatically adds or removes\r\n * CSS styles to ensure that the element is in the correct final state.\r\n *\r\n *\r\n * ### Usage Examples\r\n *\r\n *  - Transition animations applied based on\r\n *    the trigger's expression value\r\n *\r\n *   ```html\r\n *   <div [@myAnimationTrigger]=\"myStatusExp\">\r\n *    ...\r\n *   </div>\r\n *   ```\r\n *\r\n *   ```ts\r\n *   trigger(\"myAnimationTrigger\", [\r\n *     ..., // states\r\n *     transition(\"on => off, open => closed\", animate(500)),\r\n *     transition(\"* <=> error\", query('.indicator', animateChild()))\r\n *   ])\r\n *   ```\r\n *\r\n *  - Transition animations applied based on custom logic dependent\r\n *    on the trigger's expression value and provided parameters\r\n *\r\n *    ```html\r\n *    <div [@myAnimationTrigger]=\"{\r\n *     value: stepName,\r\n *     params: { target: currentTarget }\r\n *    }\">\r\n *     ...\r\n *    </div>\r\n *    ```\r\n *\r\n *    ```ts\r\n *    trigger(\"myAnimationTrigger\", [\r\n *      ..., // states\r\n *      transition(\r\n *        (fromState, toState, _element, params) =>\r\n *          ['firststep', 'laststep'].includes(fromState.toLowerCase())\r\n *          && toState === params?.['target'],\r\n *        animate('1s')\r\n *      )\r\n *    ])\r\n *    ```\r\n *\r\n * @publicApi\r\n **/\r\nfunction transition(stateChangeExpr, steps, options = null) {\r\n    return { type: AnimationMetadataType.Transition, expr: stateChangeExpr, animation: steps, options };\r\n}\r\n/**\r\n * Produces a reusable animation that can be invoked in another animation or sequence,\r\n * by calling the `useAnimation()` function.\r\n *\r\n * @param steps One or more animation objects, as returned by the `animate()`\r\n * or `sequence()` function, that form a transformation from one state to another.\r\n * A sequence is used by default when you pass an array.\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional developer-defined parameters.\r\n * Provided values for additional parameters are used as defaults,\r\n * and override values can be passed to the caller on invocation.\r\n * @returns An object that encapsulates the animation data.\r\n *\r\n * @usageNotes\r\n * The following example defines a reusable animation, providing some default parameter\r\n * values.\r\n *\r\n * ```ts\r\n * var fadeAnimation = animation([\r\n *   style({ opacity: '{{ start }}' }),\r\n *   animate('{{ time }}',\r\n *   style({ opacity: '{{ end }}'}))\r\n *   ],\r\n *   { params: { time: '1000ms', start: 0, end: 1 }});\r\n * ```\r\n *\r\n * The following invokes the defined animation with a call to `useAnimation()`,\r\n * passing in override parameter values.\r\n *\r\n * ```js\r\n * useAnimation(fadeAnimation, {\r\n *   params: {\r\n *     time: '2s',\r\n *     start: 1,\r\n *     end: 0\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * If any of the passed-in parameter values are missing from this call,\r\n * the default values are used. If one or more parameter values are missing before a step is\r\n * animated, `useAnimation()` throws an error.\r\n *\r\n * @publicApi\r\n */\r\nfunction animation(steps, options = null) {\r\n    return { type: AnimationMetadataType.Reference, animation: steps, options };\r\n}\r\n/**\r\n * Executes a queried inner animation element within an animation sequence.\r\n *\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional override values for developer-defined parameters.\r\n * @return An object that encapsulates the child animation data.\r\n *\r\n * @usageNotes\r\n * Each time an animation is triggered in Angular, the parent animation\r\n * has priority and any child animations are blocked. In order\r\n * for a child animation to run, the parent animation must query each of the elements\r\n * containing child animations, and run them using this function.\r\n *\r\n * Note that this feature is designed to be used with `query()` and it will only work\r\n * with animations that are assigned using the Angular animation library. CSS keyframes\r\n * and transitions are not handled by this API.\r\n *\r\n * @publicApi\r\n */\r\nfunction animateChild(options = null) {\r\n    return { type: AnimationMetadataType.AnimateChild, options };\r\n}\r\n/**\r\n * Starts a reusable animation that is created using the `animation()` function.\r\n *\r\n * @param animation The reusable animation to start.\r\n * @param options An options object that can contain a delay value for the start of\r\n * the animation, and additional override values for developer-defined parameters.\r\n * @return An object that contains the animation parameters.\r\n *\r\n * @publicApi\r\n */\r\nfunction useAnimation(animation, options = null) {\r\n    return { type: AnimationMetadataType.AnimateRef, animation, options };\r\n}\r\n/**\r\n * Finds one or more inner elements within the current element that is\r\n * being animated within a sequence. Use with `animate()`.\r\n *\r\n * @param selector The element to query, or a set of elements that contain Angular-specific\r\n * characteristics, specified with one or more of the following tokens.\r\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements (not\r\n *     all elements can be queried via these tokens, see\r\n *     [Entering and Leaving Elements](#entering-and-leaving-elements))\r\n *  - `query(\":animating\")` : Query all currently animating elements.\r\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\r\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\r\n *  - `query(\":self\")` : Include the current element into the animation sequence.\r\n *\r\n * @param animation One or more animation steps to apply to the queried element or elements.\r\n * An array is treated as an animation sequence.\r\n * @param options An options object. Use the 'limit' field to limit the total number of\r\n * items to collect.\r\n * @return An object that encapsulates the query data.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Multiple Tokens\r\n *\r\n * Tokens can be merged into a combined query selector string. For example:\r\n *\r\n * ```ts\r\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\r\n * ```\r\n *\r\n * The `query()` function collects multiple elements and works internally by using\r\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\r\n * the total number of items to be collected. For example:\r\n *\r\n * ```js\r\n * query('div', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { limit: 1 })\r\n * ```\r\n *\r\n * By default, throws an error when zero items are found. Set the\r\n * `optional` flag to ignore this error. For example:\r\n *\r\n * ```js\r\n * query('.some-element-that-may-not-be-there', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { optional: true })\r\n * ```\r\n *\r\n * ### Entering and Leaving Elements\r\n *\r\n * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones\r\n * that can are those that Angular assumes can enter/leave based on their own logic\r\n * (if their insertion/removal is simply a consequence of that of their parent they\r\n * should be queried via a different token in their parent's `:enter`/`:leave` transitions).\r\n *\r\n * The only elements Angular assumes can enter/leave based on their own logic (thus the only\r\n * ones that can be queried via the `:enter` and `:leave` tokens) are:\r\n *  - Those inserted dynamically (via `ViewContainerRef`)\r\n *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n *  Note that elements will be successfully queried via `:enter`/`:leave` even if their\r\n *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural\r\n *  directive (e.g. they enter/exit alongside their parent).\r\n *\r\n * </div>\r\n *\r\n * <div class=\"docs-alert docs-alert-important\">\r\n *\r\n *  There is an exception to what previously mentioned, besides elements entering/leaving based on\r\n *  their own logic, elements with an animation trigger can always be queried via `:leave` when\r\n * their parent is also leaving.\r\n *\r\n * </div>\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example queries for inner elements and animates them\r\n * individually using `animate()`.\r\n *\r\n * ```angular-ts\r\n * @Component({\r\n *   selector: 'inner',\r\n *   template: `\r\n *     <div [@queryAnimation]=\"exp\">\r\n *       <h1>Title</h1>\r\n *       <div class=\"content\">\r\n *         Blah blah blah\r\n *       </div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *    trigger('queryAnimation', [\r\n *      transition('* => goAnimate', [\r\n *        // hide the inner elements\r\n *        query('h1', style({ opacity: 0 })),\r\n *        query('.content', style({ opacity: 0 })),\r\n *\r\n *        // animate the inner elements in, one by one\r\n *        query('h1', animate(1000, style({ opacity: 1 }))),\r\n *        query('.content', animate(1000, style({ opacity: 1 }))),\r\n *      ])\r\n *    ])\r\n *  ]\r\n * })\r\n * class Cmp {\r\n *   exp = '';\r\n *\r\n *   goAnimate() {\r\n *     this.exp = 'goAnimate';\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction query(selector, animation, options = null) {\r\n    return { type: AnimationMetadataType.Query, selector, animation, options };\r\n}\r\n/**\r\n * Use within an animation `query()` call to issue a timing gap after\r\n * each queried item is animated.\r\n *\r\n * @param timings A delay value.\r\n * @param animation One ore more animation steps.\r\n * @returns An object that encapsulates the stagger data.\r\n *\r\n * @usageNotes\r\n * In the following example, a container element wraps a list of items stamped out\r\n * by an `@for` block. The container element contains an animation trigger that will later be set\r\n * to query for each of the inner items.\r\n *\r\n * Each time items are added, the opacity fade-in animation runs,\r\n * and each removed item is faded out.\r\n * When either of these animations occur, the stagger effect is\r\n * applied after each item's animation is started.\r\n *\r\n * ```html\r\n * <!-- list.component.html -->\r\n * <button (click)=\"toggle()\">Show / Hide Items</button>\r\n * <hr />\r\n * <div [@listAnimation]=\"items.length\">\r\n *   @for(item of items; track $index) {\r\n *      <div>{{ item }}</div>\r\n *   }\r\n * </div>\r\n * ```\r\n *\r\n * Here is the component code:\r\n *\r\n * ```ts\r\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\r\n * @Component({\r\n *   templateUrl: 'list.component.html',\r\n *   animations: [\r\n *     trigger('listAnimation', [\r\n *     ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class ListComponent {\r\n *   items = [];\r\n *\r\n *   showItems() {\r\n *     this.items = [0,1,2,3,4];\r\n *   }\r\n *\r\n *   hideItems() {\r\n *     this.items = [];\r\n *   }\r\n *\r\n *   toggle() {\r\n *     this.items.length ? this.hideItems() : this.showItems();\r\n *    }\r\n *  }\r\n * ```\r\n *\r\n * Here is the animation trigger code:\r\n *\r\n * ```ts\r\n * trigger('listAnimation', [\r\n *   transition('* => *', [ // each time the binding value changes\r\n *     query(':leave', [\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 0 }))\r\n *       ])\r\n *     ]),\r\n *     query(':enter', [\r\n *       style({ opacity: 0 }),\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 1 }))\r\n *       ])\r\n *     ])\r\n *   ])\r\n * ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction stagger(timings, animation) {\r\n    return { type: AnimationMetadataType.Stagger, timings, animation };\r\n}\r\n\r\n/**\r\n * An empty programmatic controller for reusable animations.\r\n * Used internally when animations are disabled, to avoid\r\n * checking for the null case when an animation player is expected.\r\n *\r\n * @see {@link animate}\r\n * @see {@link AnimationPlayer}\r\n *\r\n * @publicApi\r\n */\r\nclass NoopAnimationPlayer {\r\n    _onDoneFns = [];\r\n    _onStartFns = [];\r\n    _onDestroyFns = [];\r\n    _originalOnDoneFns = [];\r\n    _originalOnStartFns = [];\r\n    _started = false;\r\n    _destroyed = false;\r\n    _finished = false;\r\n    _position = 0;\r\n    parentPlayer = null;\r\n    totalTime;\r\n    constructor(duration = 0, delay = 0) {\r\n        this.totalTime = duration + delay;\r\n    }\r\n    _onFinish() {\r\n        if (!this._finished) {\r\n            this._finished = true;\r\n            this._onDoneFns.forEach((fn) => fn());\r\n            this._onDoneFns = [];\r\n        }\r\n    }\r\n    onStart(fn) {\r\n        this._originalOnStartFns.push(fn);\r\n        this._onStartFns.push(fn);\r\n    }\r\n    onDone(fn) {\r\n        this._originalOnDoneFns.push(fn);\r\n        this._onDoneFns.push(fn);\r\n    }\r\n    onDestroy(fn) {\r\n        this._onDestroyFns.push(fn);\r\n    }\r\n    hasStarted() {\r\n        return this._started;\r\n    }\r\n    init() { }\r\n    play() {\r\n        if (!this.hasStarted()) {\r\n            this._onStart();\r\n            this.triggerMicrotask();\r\n        }\r\n        this._started = true;\r\n    }\r\n    /** @internal */\r\n    triggerMicrotask() {\r\n        queueMicrotask(() => this._onFinish());\r\n    }\r\n    _onStart() {\r\n        this._onStartFns.forEach((fn) => fn());\r\n        this._onStartFns = [];\r\n    }\r\n    pause() { }\r\n    restart() { }\r\n    finish() {\r\n        this._onFinish();\r\n    }\r\n    destroy() {\r\n        if (!this._destroyed) {\r\n            this._destroyed = true;\r\n            if (!this.hasStarted()) {\r\n                this._onStart();\r\n            }\r\n            this.finish();\r\n            this._onDestroyFns.forEach((fn) => fn());\r\n            this._onDestroyFns = [];\r\n        }\r\n    }\r\n    reset() {\r\n        this._started = false;\r\n        this._finished = false;\r\n        this._onStartFns = this._originalOnStartFns;\r\n        this._onDoneFns = this._originalOnDoneFns;\r\n    }\r\n    setPosition(position) {\r\n        this._position = this.totalTime ? position * this.totalTime : 1;\r\n    }\r\n    getPosition() {\r\n        return this.totalTime ? this._position / this.totalTime : 1;\r\n    }\r\n    /** @internal */\r\n    triggerCallback(phaseName) {\r\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\r\n        methods.forEach((fn) => fn());\r\n        methods.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * A programmatic controller for a group of reusable animations.\r\n * Used internally to control animations.\r\n *\r\n * @see {@link AnimationPlayer}\r\n * @see {@link animations/group group}\r\n *\r\n */\r\nclass AnimationGroupPlayer {\r\n    _onDoneFns = [];\r\n    _onStartFns = [];\r\n    _finished = false;\r\n    _started = false;\r\n    _destroyed = false;\r\n    _onDestroyFns = [];\r\n    parentPlayer = null;\r\n    totalTime = 0;\r\n    players;\r\n    constructor(_players) {\r\n        this.players = _players;\r\n        let doneCount = 0;\r\n        let destroyCount = 0;\r\n        let startCount = 0;\r\n        const total = this.players.length;\r\n        if (total == 0) {\r\n            queueMicrotask(() => this._onFinish());\r\n        }\r\n        else {\r\n            this.players.forEach((player) => {\r\n                player.onDone(() => {\r\n                    if (++doneCount == total) {\r\n                        this._onFinish();\r\n                    }\r\n                });\r\n                player.onDestroy(() => {\r\n                    if (++destroyCount == total) {\r\n                        this._onDestroy();\r\n                    }\r\n                });\r\n                player.onStart(() => {\r\n                    if (++startCount == total) {\r\n                        this._onStart();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\r\n    }\r\n    _onFinish() {\r\n        if (!this._finished) {\r\n            this._finished = true;\r\n            this._onDoneFns.forEach((fn) => fn());\r\n            this._onDoneFns = [];\r\n        }\r\n    }\r\n    init() {\r\n        this.players.forEach((player) => player.init());\r\n    }\r\n    onStart(fn) {\r\n        this._onStartFns.push(fn);\r\n    }\r\n    _onStart() {\r\n        if (!this.hasStarted()) {\r\n            this._started = true;\r\n            this._onStartFns.forEach((fn) => fn());\r\n            this._onStartFns = [];\r\n        }\r\n    }\r\n    onDone(fn) {\r\n        this._onDoneFns.push(fn);\r\n    }\r\n    onDestroy(fn) {\r\n        this._onDestroyFns.push(fn);\r\n    }\r\n    hasStarted() {\r\n        return this._started;\r\n    }\r\n    play() {\r\n        if (!this.parentPlayer) {\r\n            this.init();\r\n        }\r\n        this._onStart();\r\n        this.players.forEach((player) => player.play());\r\n    }\r\n    pause() {\r\n        this.players.forEach((player) => player.pause());\r\n    }\r\n    restart() {\r\n        this.players.forEach((player) => player.restart());\r\n    }\r\n    finish() {\r\n        this._onFinish();\r\n        this.players.forEach((player) => player.finish());\r\n    }\r\n    destroy() {\r\n        this._onDestroy();\r\n    }\r\n    _onDestroy() {\r\n        if (!this._destroyed) {\r\n            this._destroyed = true;\r\n            this._onFinish();\r\n            this.players.forEach((player) => player.destroy());\r\n            this._onDestroyFns.forEach((fn) => fn());\r\n            this._onDestroyFns = [];\r\n        }\r\n    }\r\n    reset() {\r\n        this.players.forEach((player) => player.reset());\r\n        this._destroyed = false;\r\n        this._finished = false;\r\n        this._started = false;\r\n    }\r\n    setPosition(p) {\r\n        const timeAtPosition = p * this.totalTime;\r\n        this.players.forEach((player) => {\r\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\r\n            player.setPosition(position);\r\n        });\r\n    }\r\n    getPosition() {\r\n        const longestPlayer = this.players.reduce((longestSoFar, player) => {\r\n            const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;\r\n            return newPlayerIsLongest ? player : longestSoFar;\r\n        }, null);\r\n        return longestPlayer != null ? longestPlayer.getPosition() : 0;\r\n    }\r\n    beforeDestroy() {\r\n        this.players.forEach((player) => {\r\n            if (player.beforeDestroy) {\r\n                player.beforeDestroy();\r\n            }\r\n        });\r\n    }\r\n    /** @internal */\r\n    triggerCallback(phaseName) {\r\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\r\n        methods.forEach((fn) => fn());\r\n        methods.length = 0;\r\n    }\r\n}\r\n\r\nconst ɵPRE_STYLE = '!';\r\n\r\nexport { AUTO_STYLE, AnimationGroupPlayer, AnimationMetadataType, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵPRE_STYLE };\r\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,qBAAqB;AACzB,CAAC,UAAUA,qBAAqB,EAAE;EAC9B;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACnE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EAC7E;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EACzE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACnE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACvE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EAC3E;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACnE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACvE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EAC3E;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;EACjF;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;EAC9E;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;EACpE;AACJ;AACA;AACA;EACIA,qBAAqB,CAACA,qBAAqB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS;AAC5E,CAAC,EAAEA,qBAAqB,KAAKA,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,IAAI,EAAEC,WAAW,EAAE;EAChC,OAAO;IAAEC,IAAI,EAAEL,qBAAqB,CAACM,OAAO;IAAEH,IAAI;IAAEC,WAAW;IAAEG,OAAO,EAAE,CAAC;EAAE,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,OAAO,EAAEC,MAAM,GAAG,IAAI,EAAE;EACrC,OAAO;IAAEL,IAAI,EAAEL,qBAAqB,CAACW,OAAO;IAAED,MAAM;IAAED;EAAQ,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,KAAKA,CAACC,KAAK,EAAEN,OAAO,GAAG,IAAI,EAAE;EAClC,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAACc,KAAK;IAAED,KAAK;IAAEN;EAAQ,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,QAAQA,CAACF,KAAK,EAAEN,OAAO,GAAG,IAAI,EAAE;EACrC,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAACgB,QAAQ;IAAEH,KAAK;IAAEN;EAAQ,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,KAAKA,CAACC,MAAM,EAAE;EACnB,OAAO;IAAEb,IAAI,EAAEL,qBAAqB,CAACmB,KAAK;IAAET,MAAM,EAAEQ,MAAM;IAAEE,MAAM,EAAE;EAAK,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAAClB,IAAI,EAAEO,MAAM,EAAEH,OAAO,EAAE;EAClC,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAACsB,KAAK;IAAEnB,IAAI;IAAEO,MAAM;IAAEH;EAAQ,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,SAASA,CAACV,KAAK,EAAE;EACtB,OAAO;IAAER,IAAI,EAAEL,qBAAqB,CAACwB,SAAS;IAAEX;EAAM,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,UAAUA,CAACC,eAAe,EAAEb,KAAK,EAAEN,OAAO,GAAG,IAAI,EAAE;EACxD,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAAC2B,UAAU;IAAEC,IAAI,EAAEF,eAAe;IAAEG,SAAS,EAAEhB,KAAK;IAAEN;EAAQ,CAAC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsB,SAASA,CAAChB,KAAK,EAAEN,OAAO,GAAG,IAAI,EAAE;EACtC,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAAC8B,SAAS;IAAED,SAAS,EAAEhB,KAAK;IAAEN;EAAQ,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,YAAYA,CAACxB,OAAO,GAAG,IAAI,EAAE;EAClC,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAACgC,YAAY;IAAEzB;EAAQ,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0B,YAAYA,CAACJ,SAAS,EAAEtB,OAAO,GAAG,IAAI,EAAE;EAC7C,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAACkC,UAAU;IAAEL,SAAS;IAAEtB;EAAQ,CAAC;AACztB,OAAO,GAAG,IAAI,EAAE;EAChD,OAAO;IAAEF,IAAI,EAAEL,qBAAqB,CAACqC,KAAK;IAAED,QAAQ;IAAEP,SAAS;IAAEtB;EAAQ,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+B,OAAOA,CAAC7B,OAAO,EAAEoB,SAAS,EAAE;EACjC,OAAO;IAAExB,IAAI,EAAEL,qBAAqB,CAACuC,OAAO;IAAE9B,OAAO;IAAEoB;EAAU,CAAC;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,mBAAmB,CAAC;EACtBC,UAAU,GAAG,EAAE;EACfC,WAAW,GAAG,EAAE;EAChBC,aAAa,GAAG,EAAE;EAClBC,kBAAkB,GAAG,EAAE;EACvBC,mBAAmB,GAAG,EAAE;EACxBC,QAAQ,GAAG,KAAK;EAChBC,UAAU,GAAG,KAAK;EAClBC,SAAS,GAAG,KAAK;EACjBC,SAAS,GAAG,CAAC;EACbC,YAAY,GAAG,IAAI;EACnBC,SAAS;EACTC,WAAWA,CAACC,QAAQ,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAE;IACjC,IAAI,CAACH,SAAS,GAAGE,QAAQ,GAAGC,KAAK;EACrC;EACAC,SAASA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACP,UAAU,CAACe,OAAO,CAAEC,EAAE,IAAKA,EAAE,CAAC,CAAC,CAAC;MACrC,IAAI,CAAChB,UAAU,GAAG,EAAE;IACxB;EACJ;EACAiB,OAAOA,CAACD,EAAE,EAAE;IACR,IAAI,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}