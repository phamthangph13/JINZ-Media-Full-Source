{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Check for existing token on service initialization\n    this.checkAuthStatus();\n  }\n  // Login user\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(map(response => {\n      if (response.success && response.token) {\n        // Store token and user data\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.data));\n        this.currentUserSubject.next(response.data);\n      }\n      return response;\n    }));\n  }\n  // Logout user\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  // Force logout (clear all auth data)\n  forceLogout() {\n    localStorage.clear();\n    this.currentUserSubject.next(null);\n  }\n  // Get current user\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = this.getToken();\n    const user = this.getCurrentUser();\n    if (!token || !user) {\n      return false;\n    }\n    // Check if token is expired\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const expirationTime = payload.exp * 1000; // Convert to milliseconds\n      const now = Date.now();\n      if (expirationTime <= now) {\n        // Token expired, logout\n        this.logout();\n        return false;\n      }\n      return true;\n    } catch (error) {\n      // Invalid token format, logout\n      this.logout();\n      return false;\n    }\n  }\n  // Check if user is admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return user?.role === 'admin';\n  }\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  // Get user profile\n  getProfile() {\n    return this.http.get(`${this.apiUrl}/me`).pipe(map(response => response.data));\n  }\n  // Check authentication status on app load\n  checkAuthStatus() {\n    const token = this.getToken();\n    const userStr = localStorage.getItem('user');\n    if (token && userStr) {\n      try {\n        const user = JSON.parse(userStr);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        // Invalid user data, clear storage\n        this.logout();\n      }\n    }\n  }\n  // Auto-logout when token expires\n  autoLogout() {\n    const token = this.getToken();\n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const expirationTime = payload.exp * 1000; // Convert to milliseconds\n        const now = Date.now();\n        if (expirationTime <= now) {\n          this.logout();\n        } else {\n          // Set timeout to logout when token expires\n          setTimeout(() => {\n            this.logout();\n          }, expirationTime - now);\n        }\n      } catch (error) {\n        this.logout();\n      }\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","checkAuthStatus","login","credentials","post","pipe","response","success","token","localStorage","setItem","JSON","stringify","data","next","logout","removeItem","forceLogout","clear","getCurrentUser","value","isAuthenticated","getToken","user","payload","parse","atob","split","expirationTime","exp","now","Date","error","isAdmin","role","getItem","getProfile","get","userStr","autoLogout","setTimeout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\winni\\OneDrive\\Desktop\\JINZ-Media-Full-Source\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface User {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  role: 'user' | 'admin';\r\n  isActive: boolean;\r\n  avatar?: string;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  success: boolean;\r\n  token: string;\r\n  data: User;\r\n  message: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/auth`;\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Check for existing token on service initialization\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  // Login user\r\n  login(credentials: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials).pipe(\r\n      map(response => {\r\n        if (response.success && response.token) {\r\n          // Store token and user data\r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('user', JSON.stringify(response.data));\r\n          this.currentUserSubject.next(response.data);\r\n        }\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Logout user\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  // Force logout (clear all auth data)\r\n  forceLogout(): void {\r\n    localStorage.clear();\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  // Get current user\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    const user = this.getCurrentUser();\r\n    \r\n    if (!token || !user) {\r\n      return false;\r\n    }\r\n    \r\n    // Check if token is expired\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const expirationTime = payload.exp * 1000; // Convert to milliseconds\r\n      const now = Date.now();\r\n      \r\n      if (expirationTime <= now) {\r\n        // Token expired, logout\r\n        this.logout();\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      // Invalid token format, logout\r\n      this.logout();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Check if user is admin\r\n  isAdmin(): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user?.role === 'admin';\r\n  }\r\n\r\n  // Get stored token\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Get user profile\r\n  getProfile(): Observable<User> {\r\n    return this.http.get<{success: boolean, data: User}>(`${this.apiUrl}/me`).pipe(\r\n      map(response => response.data)\r\n    );\r\n  }\r\n\r\n  // Check authentication status on app load\r\n  private checkAuthStatus(): void {\r\n    const token = this.getToken();\r\n    const userStr = localStorage.getItem('user');\r\n    \r\n    if (token && userStr) {\r\n      try {\r\n        const user = JSON.parse(userStr);\r\n        this.currentUserSubject.next(user);\r\n      } catch (error) {\r\n        // Invalid user data, clear storage\r\n        this.logout();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Auto-logout when token expires\r\n  private autoLogout(): void {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      try {\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        const expirationTime = payload.exp * 1000; // Convert to milliseconds\r\n        const now = Date.now();\r\n        \r\n        if (expirationTime <= now) {\r\n          this.logout();\r\n        } else {\r\n          // Set timeout to logout when token expires\r\n          setTimeout(() => {\r\n            this.logout();\r\n          }, expirationTime - now);\r\n        }\r\n      } catch (error) {\r\n        this.logout();\r\n      }\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}