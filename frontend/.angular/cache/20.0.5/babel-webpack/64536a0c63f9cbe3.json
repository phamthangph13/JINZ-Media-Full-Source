{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/**\r\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\r\n * tables that animate rows.\r\n */\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]], \"*\"];\nconst _c1 = [\"caption\", \"colgroup, col\", \"*\"];\nfunction MatTable_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nfunction MatTable_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"thead\", 0);\n    i0.ɵɵelementContainer(1, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"tbody\", 2);\n    i0.ɵɵelementContainer(3, 3)(4, 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tfoot\", 0);\n    i0.ɵɵelementContainer(6, 5);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatTable_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 1)(1, 3)(2, 4)(3, 5);\n  }\n}\nfunction MatTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction MatTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dataAccessor(data_r2, ctx_r0.name), \" \");\n  }\n}\nclass MatRecycleRows {\n  static ɵfac = function MatRecycleRows_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRecycleRows)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRecycleRows,\n    selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\nclass MatTable extends CdkTable {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  stickyCssClass = 'mat-mdc-table-sticky';\n  /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n  needsPositionStickyOnElement = false;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatTable_BaseFactory;\n    return function MatTable_Factory(__ngFactoryType__) {\n      return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatTable)))(__ngFactoryType__ || MatTable);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTable,\n    selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-table\", \"mdc-data-table__table\"],\n    hostVars: 2,\n    hostBindings: function MatTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mdc-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    exportAs: [\"matTable\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTable,\n      useExisting: MatTable\n    }, {\n      provide: CDK_TABLE,\n      useExisting: MatTable\n    },\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    },\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 2,\n    consts: [[\"role\", \"rowgroup\"], [\"headerRowOutlet\", \"\"], [\"role\", \"rowgroup\", 1, \"mdc-data-table__content\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function MatTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n        i0.ɵɵconditionalCreate(2, MatTable_Conditional_2_Template, 1, 0);\n        i0.ɵɵconditionalCreate(3, MatTable_Conditional_3_Template, 7, 0)(4, MatTable_Conditional_4_Template, 4, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵconditional(ctx._isServer ? 2 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx._isNativeHtmlTable ? 3 : 4);\n      }\n    },\n    dependencies: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n    styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTable, [{\n    type: Component,\n    args: [{\n      selector: 'mat-table, table[mat-table]',\n      exportAs: 'matTable',\n      template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `,\n      host: {\n        'class': 'mat-mdc-table mdc-data-table__table',\n        '[class.mdc-table-fixed-layout]': 'fixedLayout'\n      },\n      providers: [{\n        provide: CdkTable,\n        useExisting: MatTable\n      }, {\n        provide: CDK_TABLE,\n        useExisting: MatTable\n      },\n      // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n      //  is only included in the build if used.\n      {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      },\n      // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n      styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\nclass MatCellDef extends CdkCellDef {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatCellDef_BaseFactory;\n    return function MatCellDef_Factory(__ngFactoryType__) {\n      return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatCellDef)))(__ngFactoryType__ || MatCellDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatCellDef,\n    selectors: [[\"\", \"matCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkCellDef,\n      useExisting: MatCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matCellDef]',\n      providers: [{\n        provide: CdkCellDef,\n        useExisting: MatCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatHeaderCellDef_BaseFactory;\n    return function MatHeaderCellDef_Factory(__ngFactoryType__) {\n      return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(__ngFactoryType__ || MatHeaderCellDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatHeaderCellDef,\n    selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderCellDef,\n      useExisting: MatHeaderCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderCellDef]',\n      providers: [{\n        provide: CdkHeaderCellDef,\n        useExisting: MatHeaderCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Footer cell definition for the mat-table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatFooterCellDef_BaseFactory;\n    return function MatFooterCellDef_Factory(__ngFactoryType__) {\n      return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCellDef)))(__ngFactoryType__ || MatFooterCellDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatFooterCellDef,\n    selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterCellDef,\n      useExisting: MatFooterCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterCellDef]',\n      providers: [{\n        provide: CdkFooterCellDef,\n        useExisting: MatFooterCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\nclass MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\r\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\r\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\r\n   * will change from type string[] to string.\r\n   * @docs-private\r\n   */\n  _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatColumnDef_BaseFactory;\n    return function MatColumnDef_Factory(__ngFactoryType__) {\n      return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatColumnDef)))(__ngFactoryType__ || MatColumnDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatColumnDef,\n    selectors: [[\"\", \"matColumnDef\", \"\"]],\n    inputs: {\n      name: [0, \"matColumnDef\", \"name\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkColumnDef,\n      useExisting: MatColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatColumnDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matColumnDef]',\n      providers: [{\n        provide: CdkColumnDef,\n        useExisting: MatColumnDef\n      }, {\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: MatColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['matColumnDef']\n    }]\n  });\n})();\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatHeaderCell_BaseFactory;\n    return function MatHeaderCell_Factory(__ngFactoryType__) {\n      return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCell)))(__ngFactoryType__ || MatHeaderCell);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatHeaderCell,\n    selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"mat-mdc-header-cell\", \"mdc-data-table__header-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-header-cell, th[mat-header-cell]',\n      host: {\n        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], null, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatFooterCell_BaseFactory;\n    return function MatFooterCell_Factory(__ngFactoryType__) {\n      return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCell)))(__ngFactoryType__ || MatFooterCell);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatFooterCell,\n    selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-footer-cell\", \"mdc-data-table__cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-footer-cell, td[mat-footer-cell]',\n      host: {\n        'class': 'mat-mdc-footer-cell mdc-data-table__cell'\n      }\n    }]\n  }], null, null);\n})();\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatCell_BaseFactory;\n    return function MatCell_Factory(__ngFactoryType__) {\n      return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatCell)))(__ngFactoryType__ || MatCell);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatCell,\n    selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-cell\", \"mdc-data-table__cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-cell, td[mat-cell]',\n      host: {\n        'class': 'mat-mdc-cell mdc-data-table__cell'\n      }\n    }]\n  }], null, null);\n})();\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatHeaderRowDef_BaseFactory;\n    return function MatHeaderRowDef_Factory(__ngFactoryType__) {\n      return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(__ngFactoryType__ || MatHeaderRowDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatHeaderRowDef,\n    selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [0, \"matHeaderRowDef\", \"columns\"],\n      sticky: [2, \"matHeaderRowDefSticky\", \"sticky\", booleanAttribute]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRowDef,\n      useExisting: MatHeaderRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderRowDef]',\n      providers: [{\n        provide: CdkHeaderRowDef,\n        useExisting: MatHeaderRowDef\n      }],\n      inputs: [{\n        name: 'columns',\n        alias: 'matHeaderRowDef'\n      }, {\n        name: 'sticky',\n        alias: 'matHeaderRowDefSticky',\n        transform: booleanAttribute\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Footer row definition for the mat-table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatFooterRowDef_BaseFactory;\n    return function MatFooterRowDef_Factory(__ngFactoryType__) {\n      return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRowDef)))(__ngFactoryType__ || MatFooterRowDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatFooterRowDef,\n    selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [0, \"matFooterRowDef\", \"columns\"],\n      sticky: [2, \"matFooterRowDefSticky\", \"sticky\", booleanAttribute]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRowDef,\n      useExisting: MatFooterRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterRowDef]',\n      providers: [{\n        provide: CdkFooterRowDef,\n        useExisting: MatFooterRowDef\n      }],\n      inputs: [{\n        name: 'columns',\n        alias: 'matFooterRowDef'\n      }, {\n        name: 'sticky',\n        alias: 'matFooterRowDefSticky',\n        transform: booleanAttribute\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the data row's template and other properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\nclass MatRowDef extends CdkRowDef {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatRowDef_BaseFactory;\n    return function MatRowDef_Factory(__ngFactoryType__) {\n      return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatRowDef)))(__ngFactoryType__ || MatRowDef);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRowDef,\n    selectors: [[\"\", \"matRowDef\", \"\"]],\n    inputs: {\n      columns: [0, \"matRowDefColumns\", \"columns\"],\n      when: [0, \"matRowDefWhen\", \"when\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRowDef,\n      useExisting: MatRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matRowDef]',\n      providers: [{\n        provide: CdkRowDef,\n        useExisting: MatRowDef\n      }],\n      inputs: [{\n        name: 'columns',\n        alias: 'matRowDefColumns'\n      }, {\n        name: 'when',\n        alias: 'matRowDefWhen'\n      }]\n    }]\n  }], null, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatHeaderRow_BaseFactory;\n    return function MatHeaderRow_Factory(__ngFactoryType__) {\n      return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRow)))(__ngFactoryType__ || MatHeaderRow);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatHeaderRow,\n    selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-header-row\", \"mdc-data-table__header-row\"],\n    exportAs: [\"matHeaderRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRow,\n      useExisting: MatHeaderRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-header-row, tr[mat-header-row]',\n      template: ROW_TEMPLATE,\n      host: {\n        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matHeaderRow',\n      providers: [{\n        provide: CdkHeaderRow,\n        useExisting: MatHeaderRow\n      }],\n      imports: [CdkCellOutlet]\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatFooterRow_BaseFactory;\n    return function MatFooterRow_Factory(__ngFactoryType__) {\n      return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRow)))(__ngFactoryType__ || MatFooterRow);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatFooterRow,\n    selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-footer-row\", \"mdc-data-table__row\"],\n    exportAs: [\"matFooterRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRow,\n      useExisting: MatFooterRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-footer-row, tr[mat-footer-row]',\n      template: ROW_TEMPLATE,\n      host: {\n        'class': 'mat-mdc-footer-row mdc-data-table__row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matFooterRow',\n      providers: [{\n        provide: CdkFooterRow,\n        useExisting: MatFooterRow\n      }],\n      imports: [CdkCellOutlet]\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatRow_BaseFactory;\n    return function MatRow_Factory(__ngFactoryType__) {\n      return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatRow)))(__ngFactoryType__ || MatRow);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatRow,\n    selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-row\", \"mdc-data-table__row\"],\n    exportAs: [\"matRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRow,\n      useExisting: MatRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-row, tr[mat-row]',\n      template: ROW_TEMPLATE,\n      host: {\n        'class': 'mat-mdc-row mdc-data-table__row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRow',\n      providers: [{\n        provide: CdkRow,\n        useExisting: MatRow\n      }],\n      imports: [CdkCellOutlet]\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n  _contentClassName = 'mat-mdc-no-data-row';\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatNoDataRow_BaseFactory;\n    return function MatNoDataRow_Factory(__ngFactoryType__) {\n      return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatNoDataRow)))(__ngFactoryType__ || MatNoDataRow);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatNoDataRow,\n    selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNoDataRow,\n      useExisting: MatNoDataRow\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matNoDataRow]',\n      providers: [{\n        provide: CdkNoDataRow,\n        useExisting: MatNoDataRow\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\nclass MatTextColumn extends CdkTextColumn {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatTextColumn_BaseFactory;\n    return function MatTextColumn_Factory(__ngFactoryType__) {\n      return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatTextColumn)))(__ngFactoryType__ || MatTextColumn);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTextColumn,\n    selectors: [[\"mat-text-column\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n    template: function MatTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, 0);\n        i0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1)(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        i0.ɵɵelementContainerEnd();\n      }\n    },\n    dependencies: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'mat-text-column',\n      template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell]\n    }]\n  }], null, null);\n})();\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatTable, MatRecycleRows,\n// Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef,\n// Cell directives\nMatHeaderCell, MatCell, MatFooterCell,\n// Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\nclass MatTableModule {\n  static ɵfac = function MatTableModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatTableModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTableModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, CdkTableModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n      exports: [MatCommonModule, EXPORTED_DECLARATIONS]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\r\n * which defines how row data is converted to a string for filter matching.\r\n *\r\n * **Note:** This class is meant to be a simple data source to help you get started. As such\r\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\r\n * interactions. If your app needs to support more advanced use cases, consider implementing your\r\n * own `DataSource`.\r\n */\nclass MatTableDataSource extends DataSource {\n  /** Stream that emits when a new data array is set on the data source. */\n  _data;\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  _renderData = new BehaviorSubject([]);\n  /** Stream that emits when a new filter string is set on the data source. */\n  _filter = new BehaviorSubject('');\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  _internalPageChanges = new Subject();\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n   * as filtering, sorting, pagination, or base data changes.\r\n   */\n  _renderChangesSubscription = null;\n  /**\r\n   * The filtered set of data that has been matched by the filter string, or all the data if there\r\n   * is no filter. Useful for knowing the set of data the table represents.\r\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n   * shown to the user rather than all the data.\r\n   */\n  filteredData;\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() {\n    return this._data.value;\n  }\n  set data(data) {\n    data = Array.isArray(data) ? data : [];\n    this._data.next(data);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\n  get filter() {\n    return this._filter.value;\n  }\n  set filter(filter) {\n    this._filter.next(filter);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n  /**\r\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n   * emitted by the MatSort will trigger an update to the table's rendered data.\r\n   */\n  get sort() {\n    return this._sort;\n  }\n  set sort(sort) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  _sort;\n  /**\r\n   * Instance of the paginator component used by the table to control what page of the data is\r\n   * displayed. Page changes emitted by the paginator will trigger an update to the\r\n   * table's rendered data.\r\n   *\r\n   * Note that the data source uses the paginator's properties to calculate which page of data\r\n   * should be displayed. If the paginator receives its properties as template inputs,\r\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n   * initialized before assigning it to this data source.\r\n   */\n  get paginator() {\n    return this._paginator;\n  }\n  set paginator(paginator) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  _paginator;\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param sortHeaderId The name of the column that represents the data.\r\n   */\n  sortingDataAccessor = (data, sortHeaderId) => {\n    const value = data[sortHeaderId];\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n    return value;\n  };\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\n  sortData = (data, sort) => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') {\n      return data;\n    }\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n      if (valueAType !== valueBType) {\n        if (valueAType === 'number') {\n          valueA += '';\n        }\n        if (valueBType === 'number') {\n          valueB += '';\n        }\n      }\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  };\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param data Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\n  filterPredicate = (data, filter) => {\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n    // Loops over the values in the array and returns true if any of them match the filter string\n    return Object.values(data).some(value => `${value}`.toLowerCase().includes(transformedFilter));\n  };\n  constructor(initialData = []) {\n    super();\n    this._data = new BehaviorSubject(initialData);\n    this._updateChangeSubscription();\n  }\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n    const pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterPredicate function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterPredicate.\n    // May be overridden for customization.\n    this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n    return this.filteredData;\n  }\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\r\n   * Returns a paged slice of the provided data array according to the provided paginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n  /**\r\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n   * guard against making property changes within a round of change detection.\r\n   */\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n      if (!paginator) {\n        return;\n      }\n      paginator.length = filteredDataLength;\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n    return this._renderData;\n  }\n  /**\r\n   * Used by the MatTable. Called when it disconnects from the data source.\r\n   * @docs-private\r\n   */\n  disconnect() {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n}\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };","map":{"version":3,"names":["i0","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","booleanAttribute","NgModule","CdkTable","CDK_TABLE","STICKY_POSITIONING_LISTENER","HeaderRowOutlet","DataRowOutlet","NoDataRowOutlet","FooterRowOutlet","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkHeaderRow","CdkCellOutlet","CdkFooterRow","CdkRow","CdkNoDataRow","CdkTextColumn","CdkTableModule","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","_DisposeViewRepeaterStrategy","DataSource","M","MatCommonModule","BehaviorSubject","Subject","merge","of","combineLatest","_isNumberValue","map","_c0","_c1","MatTable_Conditional_2_Template","rf","ctx","ɵɵprojection","MatTable_Conditional_3_Template","ɵɵelementStart","ɵɵelementContainer","ɵɵelementEnd","MatTable_Conditional_4_Template","MatTextColumn_th_1_Template","ɵɵtext","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","MatTextColumn_td_2_Template","data_r2","$implicit","dataAccessor","name","MatRecycleRows","ɵfac","MatRecycleRows_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","provide","useClass","ngDevMode","ɵsetClassMetadata","args","selector","providers","MatTable","stickyCssClass","needsPositionStickyOnElement","ɵMatTable_BaseFactory","MatTable_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatTable_HostBindings","ɵɵclassProp","fixedLayout","exportAs","useExisting","useValue","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatTable_Template","ɵɵprojectionDef","ɵɵconditionalCreate","ɵɵconditional","_isServer","_isNativeHtmlTable","dependencies","styles","encapsulation","host","None","changeDetection","Default","imports","MatCellDef","ɵMatCellDef_BaseFactory","MatCellDef_Factory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatHeaderCellDef_Factory","MatFooterCellDef","ɵMatFooterCellDef_BaseFactory","MatFooterCellDef_Factory","MatColumnDef","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","push","cssClassFriendlyName","ɵMatColumnDef_BaseFactory","MatColumnDef_Factory","inputs","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatHeaderCell_Factory","MatFooterCell","ɵMatFooterCell_BaseFactory","MatFooterCell_Factory","MatCell","ɵMatCell_BaseFactory","MatCell_Factory","ROW_TEMPLATE","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatHeaderRowDef_Factory","columns","sticky","alias","transform","MatFooterRowDef","ɵMatFooterRowDef_BaseFactory","MatFooterRowDef_Factory","MatRowDef","ɵMatRowDef_BaseFactory","MatRowDef_Factory","when","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatHeaderRow_Factory","MatHeaderRow_Template","MatFooterRow","ɵMatFooterRow_BaseFactory","MatFooterRow_Factory","MatFooterRow_Template","MatRow","ɵMatRow_BaseFactory","MatRow_Factory","MatRow_Template","MatNoDataRow","_contentClassName","ɵMatNoDataRow_BaseFactory","MatNoDataRow_Factory","MatTextColumn","ɵMatTextColumn_BaseFactory","MatTextColumn_Factory","MatTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","MatTableModule","MatTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","MAX_SAFE_INTEGER","MatTableDataSource","_data","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","filteredData","data","value","Array","isArray","next","_filterData","filter","sort","_sort","_updateChangeSubscription","paginator","_paginator","sortingDataAccessor","sortHeaderId","numberValue","Number","sortData","active","direction","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","transformedFilter","trim","toLowerCase","Object","values","some","includes","constructor","initialData","sortChange","initialized","pageChange","page","dataStream","pipe","orderedData","_orderData","paginatedData","_pageData","unsubscribe","subscribe","obj","_updatePaginator","length","slice","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/material/fesm2022/table.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\r\nimport { CdkTable, CDK_TABLE, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\r\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\r\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\r\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\r\nimport { _isNumberValue } from '@angular/cdk/coercion';\r\nimport { map } from 'rxjs/operators';\r\nimport '@angular/cdk/a11y';\r\nimport '@angular/cdk/bidi';\r\n\r\n/**\r\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\r\n * tables that animate rows.\r\n */\r\nclass MatRecycleRows {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\r\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\r\n                }]\r\n        }] });\r\nclass MatTable extends CdkTable {\r\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\r\n    stickyCssClass = 'mat-mdc-table-sticky';\r\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\r\n    needsPositionStickyOnElement = false;\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\r\n            { provide: CdkTable, useExisting: MatTable },\r\n            { provide: CDK_TABLE, useExisting: MatTable },\r\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\r\n            //  is only included in the build if used.\r\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\r\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\r\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\r\n    <ng-content select=\"caption\"/>\r\n    <ng-content select=\"colgroup, col\"/>\r\n\r\n    <!--\r\n      Unprojected content throws a hydration error so we need this to capture it.\r\n      It gets removed on the client so it doesn't affect the layout.\r\n    -->\r\n    @if (_isServer) {\r\n      <ng-content/>\r\n    }\r\n\r\n    @if (_isNativeHtmlTable) {\r\n      <thead role=\"rowgroup\">\r\n        <ng-container headerRowOutlet/>\r\n      </thead>\r\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\r\n        <ng-container rowOutlet/>\r\n        <ng-container noDataRowOutlet/>\r\n      </tbody>\r\n      <tfoot role=\"rowgroup\">\r\n        <ng-container footerRowOutlet/>\r\n      </tfoot>\r\n    } @else {\r\n      <ng-container headerRowOutlet/>\r\n      <ng-container rowOutlet/>\r\n      <ng-container noDataRowOutlet/>\r\n      <ng-container footerRowOutlet/>\r\n    }\r\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTable, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\r\n    <ng-content select=\"caption\"/>\r\n    <ng-content select=\"colgroup, col\"/>\r\n\r\n    <!--\r\n      Unprojected content throws a hydration error so we need this to capture it.\r\n      It gets removed on the client so it doesn't affect the layout.\r\n    -->\r\n    @if (_isServer) {\r\n      <ng-content/>\r\n    }\r\n\r\n    @if (_isNativeHtmlTable) {\r\n      <thead role=\"rowgroup\">\r\n        <ng-container headerRowOutlet/>\r\n      </thead>\r\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\r\n        <ng-container rowOutlet/>\r\n        <ng-container noDataRowOutlet/>\r\n      </tbody>\r\n      <tfoot role=\"rowgroup\">\r\n        <ng-container footerRowOutlet/>\r\n      </tfoot>\r\n    } @else {\r\n      <ng-container headerRowOutlet/>\r\n      <ng-container rowOutlet/>\r\n      <ng-container noDataRowOutlet/>\r\n      <ng-container footerRowOutlet/>\r\n    }\r\n  `, host: {\r\n                        'class': 'mat-mdc-table mdc-data-table__table',\r\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\r\n                    }, providers: [\r\n                        { provide: CdkTable, useExisting: MatTable },\r\n                        { provide: CDK_TABLE, useExisting: MatTable },\r\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\r\n                        //  is only included in the build if used.\r\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\r\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\r\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"] }]\r\n        }] });\r\n\r\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\nclass MatCellDef extends CdkCellDef {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCellDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matCellDef]',\r\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\r\n                }]\r\n        }] });\r\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\nclass MatHeaderCellDef extends CdkHeaderCellDef {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matHeaderCellDef]',\r\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\r\n                }]\r\n        }] });\r\n/**\r\n * Footer cell definition for the mat-table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\nclass MatFooterCellDef extends CdkFooterCellDef {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matFooterCellDef]',\r\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\r\n                }]\r\n        }] });\r\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\r\nclass MatColumnDef extends CdkColumnDef {\r\n    /** Unique name for this column. */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set name(name) {\r\n        this._setNameInput(name);\r\n    }\r\n    /**\r\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\r\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\r\n     * will change from type string[] to string.\r\n     * @docs-private\r\n     */\r\n    _updateColumnCssClassName() {\r\n        super._updateColumnCssClassName();\r\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\r\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\r\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\r\n        ], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatColumnDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matColumnDef]',\r\n                    providers: [\r\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\r\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\r\n                    ],\r\n                }]\r\n        }], propDecorators: { name: [{\r\n                type: Input,\r\n                args: ['matColumnDef']\r\n            }] } });\r\n/** Header cell template container that adds the right classes and role. */\r\nclass MatHeaderCell extends CdkHeaderCell {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-header-cell, th[mat-header-cell]',\r\n                    host: {\r\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\r\n                        'role': 'columnheader',\r\n                    },\r\n                }]\r\n        }] });\r\n/** Footer cell template container that adds the right classes and role. */\r\nclass MatFooterCell extends CdkFooterCell {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCell, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\r\n                    host: {\r\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\r\n                    },\r\n                }]\r\n        }] });\r\n/** Cell template container that adds the right classes and role. */\r\nclass MatCell extends CdkCell {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCell, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-cell, td[mat-cell]',\r\n                    host: {\r\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\r\n                    },\r\n                }]\r\n        }] });\r\n\r\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\r\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\nclass MatHeaderRowDef extends CdkHeaderRowDef {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matHeaderRowDef]',\r\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\r\n                    inputs: [\r\n                        { name: 'columns', alias: 'matHeaderRowDef' },\r\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\r\n                    ],\r\n                }]\r\n        }] });\r\n/**\r\n * Footer row definition for the mat-table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\nclass MatFooterRowDef extends CdkFooterRowDef {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matFooterRowDef]',\r\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\r\n                    inputs: [\r\n                        { name: 'columns', alias: 'matFooterRowDef' },\r\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\r\n                    ],\r\n                }]\r\n        }] });\r\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the data row's template and other properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\nclass MatRowDef extends CdkRowDef {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRowDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matRowDef]',\r\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\r\n                    inputs: [\r\n                        { name: 'columns', alias: 'matRowDefColumns' },\r\n                        { name: 'when', alias: 'matRowDefWhen' },\r\n                    ],\r\n                }]\r\n        }] });\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\nclass MatHeaderRow extends CdkHeaderRow {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'mat-header-row, tr[mat-header-row]',\r\n                    template: ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matHeaderRow',\r\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\r\n                    imports: [CdkCellOutlet],\r\n                }]\r\n        }] });\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\nclass MatFooterRow extends CdkFooterRow {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRow, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\r\n                    template: ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matFooterRow',\r\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\r\n                    imports: [CdkCellOutlet],\r\n                }]\r\n        }] });\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\nclass MatRow extends CdkRow {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRow, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'mat-row, tr[mat-row]',\r\n                    template: ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'mat-mdc-row mdc-data-table__row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matRow',\r\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\r\n                    imports: [CdkCellOutlet],\r\n                }]\r\n        }] });\r\n/** Row that can be used to display a message when no data is shown in the table. */\r\nclass MatNoDataRow extends CdkNoDataRow {\r\n    _contentClassName = 'mat-mdc-no-data-row';\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'ng-template[matNoDataRow]',\r\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\nclass MatTextColumn extends CdkTextColumn {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\r\n    <ng-container matColumnDef>\r\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTextColumn, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'mat-text-column',\r\n                    template: `\r\n    <ng-container matColumnDef>\r\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\r\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\r\n                }]\r\n        }] });\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n    // Table\r\n    MatTable,\r\n    MatRecycleRows,\r\n    // Template defs\r\n    MatHeaderCellDef,\r\n    MatHeaderRowDef,\r\n    MatColumnDef,\r\n    MatCellDef,\r\n    MatRowDef,\r\n    MatFooterCellDef,\r\n    MatFooterRowDef,\r\n    // Cell directives\r\n    MatHeaderCell,\r\n    MatCell,\r\n    MatFooterCell,\r\n    // Row directives\r\n    MatHeaderRow,\r\n    MatRow,\r\n    MatFooterRow,\r\n    MatNoDataRow,\r\n    MatTextColumn,\r\n];\r\nclass MatTableModule {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \r\n            // Table\r\n            MatTable,\r\n            MatRecycleRows,\r\n            // Template defs\r\n            MatHeaderCellDef,\r\n            MatHeaderRowDef,\r\n            MatColumnDef,\r\n            MatCellDef,\r\n            MatRowDef,\r\n            MatFooterCellDef,\r\n            MatFooterRowDef,\r\n            // Cell directives\r\n            MatHeaderCell,\r\n            MatCell,\r\n            MatFooterCell,\r\n            // Row directives\r\n            MatHeaderRow,\r\n            MatRow,\r\n            MatFooterRow,\r\n            MatNoDataRow,\r\n            MatTextColumn], exports: [MatCommonModule, \r\n            // Table\r\n            MatTable,\r\n            MatRecycleRows,\r\n            // Template defs\r\n            MatHeaderCellDef,\r\n            MatHeaderRowDef,\r\n            MatColumnDef,\r\n            MatCellDef,\r\n            MatRowDef,\r\n            MatFooterCellDef,\r\n            MatFooterRowDef,\r\n            // Cell directives\r\n            MatHeaderCell,\r\n            MatCell,\r\n            MatFooterCell,\r\n            // Row directives\r\n            MatHeaderRow,\r\n            MatRow,\r\n            MatFooterRow,\r\n            MatNoDataRow,\r\n            MatTextColumn] });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\r\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n */\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\r\n * which defines how row data is converted to a string for filter matching.\r\n *\r\n * **Note:** This class is meant to be a simple data source to help you get started. As such\r\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\r\n * interactions. If your app needs to support more advanced use cases, consider implementing your\r\n * own `DataSource`.\r\n */\r\nclass MatTableDataSource extends DataSource {\r\n    /** Stream that emits when a new data array is set on the data source. */\r\n    _data;\r\n    /** Stream emitting render data to the table (depends on ordered data changes). */\r\n    _renderData = new BehaviorSubject([]);\r\n    /** Stream that emits when a new filter string is set on the data source. */\r\n    _filter = new BehaviorSubject('');\r\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\r\n    _internalPageChanges = new Subject();\r\n    /**\r\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n     * as filtering, sorting, pagination, or base data changes.\r\n     */\r\n    _renderChangesSubscription = null;\r\n    /**\r\n     * The filtered set of data that has been matched by the filter string, or all the data if there\r\n     * is no filter. Useful for knowing the set of data the table represents.\r\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n     * shown to the user rather than all the data.\r\n     */\r\n    filteredData;\r\n    /** Array of data that should be rendered by the table, where each object represents one row. */\r\n    get data() {\r\n        return this._data.value;\r\n    }\r\n    set data(data) {\r\n        data = Array.isArray(data) ? data : [];\r\n        this._data.next(data);\r\n        // Normally the `filteredData` is updated by the re-render\r\n        // subscription, but that won't happen if it's inactive.\r\n        if (!this._renderChangesSubscription) {\r\n            this._filterData(data);\r\n        }\r\n    }\r\n    /**\r\n     * Filter term that should be used to filter out objects from the data array. To override how\r\n     * data objects match to this filter string, provide a custom function for filterPredicate.\r\n     */\r\n    get filter() {\r\n        return this._filter.value;\r\n    }\r\n    set filter(filter) {\r\n        this._filter.next(filter);\r\n        // Normally the `filteredData` is updated by the re-render\r\n        // subscription, but that won't happen if it's inactive.\r\n        if (!this._renderChangesSubscription) {\r\n            this._filterData(this.data);\r\n        }\r\n    }\r\n    /**\r\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n     * emitted by the MatSort will trigger an update to the table's rendered data.\r\n     */\r\n    get sort() {\r\n        return this._sort;\r\n    }\r\n    set sort(sort) {\r\n        this._sort = sort;\r\n        this._updateChangeSubscription();\r\n    }\r\n    _sort;\r\n    /**\r\n     * Instance of the paginator component used by the table to control what page of the data is\r\n     * displayed. Page changes emitted by the paginator will trigger an update to the\r\n     * table's rendered data.\r\n     *\r\n     * Note that the data source uses the paginator's properties to calculate which page of data\r\n     * should be displayed. If the paginator receives its properties as template inputs,\r\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n     * initialized before assigning it to this data source.\r\n     */\r\n    get paginator() {\r\n        return this._paginator;\r\n    }\r\n    set paginator(paginator) {\r\n        this._paginator = paginator;\r\n        this._updateChangeSubscription();\r\n    }\r\n    _paginator;\r\n    /**\r\n     * Data accessor function that is used for accessing data properties for sorting through\r\n     * the default sortData function.\r\n     * This default function assumes that the sort header IDs (which defaults to the column name)\r\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n     * May be set to a custom function for different behavior.\r\n     * @param data Data object that is being accessed.\r\n     * @param sortHeaderId The name of the column that represents the data.\r\n     */\r\n    sortingDataAccessor = (data, sortHeaderId) => {\r\n        const value = data[sortHeaderId];\r\n        if (_isNumberValue(value)) {\r\n            const numberValue = Number(value);\r\n            // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\r\n            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\r\n            return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n     * By default, the function retrieves the active sort and its direction and compares data\r\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n     * of data ordering.\r\n     * @param data The array of data that should be sorted.\r\n     * @param sort The connected MatSort that holds the current sort state.\r\n     */\r\n    sortData = (data, sort) => {\r\n        const active = sort.active;\r\n        const direction = sort.direction;\r\n        if (!active || direction == '') {\r\n            return data;\r\n        }\r\n        return data.sort((a, b) => {\r\n            let valueA = this.sortingDataAccessor(a, active);\r\n            let valueB = this.sortingDataAccessor(b, active);\r\n            // If there are data in the column that can be converted to a number,\r\n            // it must be ensured that the rest of the data\r\n            // is of the same type so as not to order incorrectly.\r\n            const valueAType = typeof valueA;\r\n            const valueBType = typeof valueB;\r\n            if (valueAType !== valueBType) {\r\n                if (valueAType === 'number') {\r\n                    valueA += '';\r\n                }\r\n                if (valueBType === 'number') {\r\n                    valueB += '';\r\n                }\r\n            }\r\n            // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n            // one value exists while the other doesn't. In this case, existing value should come last.\r\n            // This avoids inconsistent results when comparing values to undefined/null.\r\n            // If neither value exists, return 0 (equal).\r\n            let comparatorResult = 0;\r\n            if (valueA != null && valueB != null) {\r\n                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n                if (valueA > valueB) {\r\n                    comparatorResult = 1;\r\n                }\r\n                else if (valueA < valueB) {\r\n                    comparatorResult = -1;\r\n                }\r\n            }\r\n            else if (valueA != null) {\r\n                comparatorResult = 1;\r\n            }\r\n            else if (valueB != null) {\r\n                comparatorResult = -1;\r\n            }\r\n            return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n        });\r\n    };\r\n    /**\r\n     * Checks if a data object matches the data source's filter string. By default, each data object\r\n     * is converted to a string of its properties and returns true if the filter has\r\n     * at least one occurrence in that string. By default, the filter string has its whitespace\r\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n     * filter matching.\r\n     * @param data Data object used to check against the filter.\r\n     * @param filter Filter string that has been set on the data source.\r\n     * @returns Whether the filter matches against the data\r\n     */\r\n    filterPredicate = (data, filter) => {\r\n        // Transform the filter by converting it to lowercase and removing whitespace.\r\n        const transformedFilter = filter.trim().toLowerCase();\r\n        // Loops over the values in the array and returns true if any of them match the filter string\r\n        return Object.values(data).some(value => `${value}`.toLowerCase().includes(transformedFilter));\r\n    };\r\n    constructor(initialData = []) {\r\n        super();\r\n        this._data = new BehaviorSubject(initialData);\r\n        this._updateChangeSubscription();\r\n    }\r\n    /**\r\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n     * changes occur, process the current state of the filter, sort, and pagination along with\r\n     * the provided base data and send it to the table for rendering.\r\n     */\r\n    _updateChangeSubscription() {\r\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\r\n        // The events should emit whenever the component emits a change or initializes, or if no\r\n        // component is provided, a stream with just a null event should be provided.\r\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\r\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\r\n        // they purely act as a signal to progress in the pipeline.\r\n        const sortChange = this._sort\r\n            ? merge(this._sort.sortChange, this._sort.initialized)\r\n            : of(null);\r\n        const pageChange = this._paginator\r\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\r\n            : of(null);\r\n        const dataStream = this._data;\r\n        // Watch for base data or filter changes to provide a filtered set of data.\r\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\r\n        // Watch for filtered data or sort changes to provide an ordered set of data.\r\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\r\n        // Watch for ordered data or page changes to provide a paged set of data.\r\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\r\n        // Watched for paged data changes and send the result to the table to render.\r\n        this._renderChangesSubscription?.unsubscribe();\r\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\r\n    }\r\n    /**\r\n     * Returns a filtered data array where each filter object contains the filter string within\r\n     * the result of the filterPredicate function. If no filter is set, returns the data array\r\n     * as provided.\r\n     */\r\n    _filterData(data) {\r\n        // If there is a filter string, filter out data that does not contain it.\r\n        // Each data object is converted to a string using the function defined by filterPredicate.\r\n        // May be overridden for customization.\r\n        this.filteredData =\r\n            this.filter == null || this.filter === ''\r\n                ? data\r\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n        if (this.paginator) {\r\n            this._updatePaginator(this.filteredData.length);\r\n        }\r\n        return this.filteredData;\r\n    }\r\n    /**\r\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n     * data array as provided. Uses the default data accessor for data lookup, unless a\r\n     * sortDataAccessor function is defined.\r\n     */\r\n    _orderData(data) {\r\n        // If there is no active sort or direction, return the data without trying to sort.\r\n        if (!this.sort) {\r\n            return data;\r\n        }\r\n        return this.sortData(data.slice(), this.sort);\r\n    }\r\n    /**\r\n     * Returns a paged slice of the provided data array according to the provided paginator's page\r\n     * index and length. If there is no paginator provided, returns the data array as provided.\r\n     */\r\n    _pageData(data) {\r\n        if (!this.paginator) {\r\n            return data;\r\n        }\r\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\r\n    }\r\n    /**\r\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n     * guard against making property changes within a round of change detection.\r\n     */\r\n    _updatePaginator(filteredDataLength) {\r\n        Promise.resolve().then(() => {\r\n            const paginator = this.paginator;\r\n            if (!paginator) {\r\n                return;\r\n            }\r\n            paginator.length = filteredDataLength;\r\n            // If the page index is set beyond the page, reduce it to the last page.\r\n            if (paginator.pageIndex > 0) {\r\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\r\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\r\n                if (newPageIndex !== paginator.pageIndex) {\r\n                    paginator.pageIndex = newPageIndex;\r\n                    // Since the paginator only emits after user-generated changes,\r\n                    // we need our own stream so we know to should re-render the data.\r\n                    this._internalPageChanges.next();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Used by the MatTable. Called when it connects to the data source.\r\n     * @docs-private\r\n     */\r\n    connect() {\r\n        if (!this._renderChangesSubscription) {\r\n            this._updateChangeSubscription();\r\n        }\r\n        return this._renderData;\r\n    }\r\n    /**\r\n     * Used by the MatTable. Called when it disconnects from the data source.\r\n     * @docs-private\r\n     */\r\n    disconnect() {\r\n        this._renderChangesSubscription?.unsubscribe();\r\n        this._renderChangesSubscription = null;\r\n    }\r\n}\r\n\r\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\r\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}