{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, NgModuleRef, EnvironmentInjector, createComponent, Injector, inject, TemplateRef, ViewContainerRef, Directive, DOCUMENT, EventEmitter, Input, Output, NgModule } from '@angular/core';\n\n/**\r\n * Throws an exception when attempting to attach a null portal to a host.\r\n * @docs-private\r\n */\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\r\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\n * @docs-private\r\n */\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\r\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\n * @docs-private\r\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\r\n * Throws an exception when attempting to attach an unknown portal type.\r\n * @docs-private\r\n */\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\r\n * Throws an exception when attempting to attach a portal to a null host.\r\n * @docs-private\r\n */\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\r\n * Throws an exception when attempting to detach a portal that is not attached.\r\n * @docs-private\r\n */\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n */\nclass Portal {\n  _attachedHost;\n  /** Attach this portal to a host. */\n  attach(host) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n    this._attachedHost = host;\n    return host.attach(this);\n  }\n  /** Detach this portal from its host */\n  detach() {\n    let host = this._attachedHost;\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\r\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n   */\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n}\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\nclass ComponentPortal extends Portal {\n  /** The type of the component that will be instantiated for attachment. */\n  component;\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\r\n   * The origin is necessary when the host is outside of the Angular application context.\r\n   */\n  viewContainerRef;\n  /** Injector used for the instantiation of the component. */\n  injector;\n  /**\r\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\r\n   */\n  projectableNodes;\n  constructor(component, viewContainerRef, injector, projectableNodes) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.projectableNodes = projectableNodes;\n  }\n}\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\nclass TemplatePortal extends Portal {\n  templateRef;\n  viewContainerRef;\n  context;\n  injector;\n  constructor(/** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef, /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef, /** Contextual data to be passed in to the embedded view. */\n  context, /** The injector to use for the embedded view. */\n  injector) {\n    super();\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n    this.injector = injector;\n  }\n  get origin() {\n    return this.templateRef.elementRef;\n  }\n  /**\r\n   * Attach the portal to the provided `PortalOutlet`.\r\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n   * instance.\r\n   */\n  attach(host, context = this.context) {\n    this.context = context;\n    return super.attach(host);\n  }\n  detach() {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n/**\r\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\r\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\r\n * will be restored to its original position.\r\n */\nclass DomPortal extends Portal {\n  /** DOM node hosting the portal's content. */\n  element;\n  constructor(element) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n/**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n */\nclass BasePortalOutlet {\n  /** The portal currently attached to the host. */\n  _attachedPortal;\n  /** A function that will permanently dispose this host. */\n  _disposeFn;\n  /** Whether this host has already been permanently disposed. */\n  _isDisposed = false;\n  /** Whether this host has an attached portal. */\n  hasAttached() {\n    return !!this._attachedPortal;\n  }\n  /** Attaches a portal. */\n  attach(portal) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  attachDomPortal = null;\n  /** Detaches a previously attached portal. */\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n    this._invokeDisposeFn();\n  }\n  /** Permanently dispose of this portal host. */\n  dispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n  /** @docs-private */\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n  _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n  outletElement;\n  _appRef;\n  _defaultInjector;\n  /**\r\n   * @param outletElement Element into which the content is projected.\r\n   * @param _appRef Reference to the application. Only used in component portals when there\r\n   *   is no `ViewContainerRef` available.\r\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\r\n   *   have one. Only used for component portals.\r\n   */\n  constructor(/** Element into which the content is projected. */\n  outletElement, _appRef, _defaultInjector) {\n    super();\n    this.outletElement = outletElement;\n    this._appRef = _appRef;\n    this._defaultInjector = _defaultInjector;\n  }\n  /**\r\n   * Attach the given ComponentPortal to DOM element.\r\n   * @param portal Portal to be attached\r\n   * @returns Reference to the created component.\r\n   */\n  attachComponentPortal(portal) {\n    let componentRef;\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      const injector = portal.injector || portal.viewContainerRef.injector;\n      const ngModuleRef = injector.get(NgModuleRef, null, {\n        optional: true\n      }) || undefined;\n      componentRef = portal.viewContainerRef.createComponent(portal.component, {\n        index: portal.viewContainerRef.length,\n        injector,\n        ngModuleRef,\n        projectableNodes: portal.projectableNodes || undefined\n      });\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n      const appRef = this._appRef;\n      const elementInjector = portal.injector || this._defaultInjector || Injector.NULL;\n      const environmentInjector = elementInjector.get(EnvironmentInjector, appRef.injector);\n      componentRef = createComponent(portal.component, {\n        elementInjector,\n        environmentInjector,\n        projectableNodes: portal.projectableNodes || undefined\n      });\n      appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (appRef.viewCount > 0) {\n          appRef.detachView(componentRef.hostView);\n        }\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n    return componentRef;\n  }\n  /**\r\n   * Attaches a template portal to the DOM as an embedded view.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\n  attachTemplatePortal(portal) {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector\n    });\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n    this._attachedPortal = portal;\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n  /**\r\n   * Attaches a DOM portal by transferring its content into the outlet.\r\n   * @param portal Portal to be attached.\r\n   * @deprecated To be turned into a method.\r\n   * @breaking-change 10.0.0\r\n   */\n  attachDomPortal = portal => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this.outletElement.ownerDocument.createComment('dom-portal');\n    element.parentNode.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n    this._attachedPortal = portal;\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n  /**\r\n   * Clears out a portal from the DOM.\r\n   */\n  dispose() {\n    super.dispose();\n    this.outletElement.remove();\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n}\n\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\nclass CdkPortal extends TemplatePortal {\n  constructor() {\n    const templateRef = inject(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n    super(templateRef, viewContainerRef);\n  }\n  static ɵfac = function CdkPortal_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkPortal)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkPortal,\n    selectors: [[\"\", \"cdkPortal\", \"\"]],\n    exportAs: [\"cdkPortal\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkPortal, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortal]',\n      exportAs: 'cdkPortal'\n    }]\n  }], () => [], null);\n})();\n/**\r\n * @deprecated Use `CdkPortal` instead.\r\n * @breaking-change 9.0.0\r\n */\nclass TemplatePortalDirective extends CdkPortal {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵTemplatePortalDirective_BaseFactory;\n    return function TemplatePortalDirective_Factory(__ngFactoryType__) {\n      return (ɵTemplatePortalDirective_BaseFactory || (ɵTemplatePortalDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TemplatePortalDirective)))(__ngFactoryType__ || TemplatePortalDirective);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TemplatePortalDirective,\n    selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]],\n    exportAs: [\"cdkPortal\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkPortal,\n      useExisting: TemplatePortalDirective\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TemplatePortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-portal], [portal]',\n      exportAs: 'cdkPortal',\n      providers: [{\n        provide: CdkPortal,\n        useExisting: TemplatePortalDirective\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n  _moduleRef = inject(NgModuleRef, {\n    optional: true\n  });\n  _document = inject(DOCUMENT);\n  _viewContainerRef = inject(ViewContainerRef);\n  /** Whether the portal component is initialized. */\n  _isInitialized = false;\n  /** Reference to the currently-attached component/view ref. */\n  _attachedRef;\n  constructor() {\n    super();\n  }\n  /** Portal associated with the Portal outlet. */\n  get portal() {\n    return this._attachedPortal;\n  }\n  set portal(portal) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n    if (this.hasAttached()) {\n      super.detach();\n    }\n    if (portal) {\n      super.attach(portal);\n    }\n    this._attachedPortal = portal || null;\n  }\n  /** Emits when a portal is attached to the outlet. */\n  attached = new EventEmitter();\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef() {\n    return this._attachedRef;\n  }\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n  /**\r\n   * Attach the given ComponentPortal to this PortalOutlet.\r\n   *\r\n   * @param portal Portal to be attached to the portal outlet.\r\n   * @returns Reference to the created component.\r\n   */\n  attachComponentPortal(portal) {\n    portal.setAttachedHost(this);\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n    const ref = viewContainerRef.createComponent(portal.component, {\n      index: viewContainerRef.length,\n      injector: portal.injector || viewContainerRef.injector,\n      projectableNodes: portal.projectableNodes || undefined,\n      ngModuleRef: this._moduleRef || undefined\n    });\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n    }\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n    return ref;\n  }\n  /**\r\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\n  attachTemplatePortal(portal) {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector\n    });\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n    return viewRef;\n  }\n  /**\r\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\r\n   * @param portal Portal to be attached.\r\n   * @deprecated To be turned into a method.\r\n   * @breaking-change 10.0.0\r\n   */\n  attachDomPortal = portal => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n    portal.setAttachedHost(this);\n    element.parentNode.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n    this._attachedPortal = portal;\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n  /** Gets the root node of the portal outlet. */\n  _getRootNode() {\n    const nativeElement = this._viewContainerRef.element.nativeElement;\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;\n  }\n  static ɵfac = function CdkPortalOutlet_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkPortalOutlet)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkPortalOutlet,\n    selectors: [[\"\", \"cdkPortalOutlet\", \"\"]],\n    inputs: {\n      portal: [0, \"cdkPortalOutlet\", \"portal\"]\n    },\n    outputs: {\n      attached: \"attached\"\n    },\n    exportAs: [\"cdkPortalOutlet\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkPortalOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalOutlet]',\n      exportAs: 'cdkPortalOutlet'\n    }]\n  }], () => [], {\n    portal: [{\n      type: Input,\n      args: ['cdkPortalOutlet']\n    }],\n    attached: [{\n      type: Output\n    }]\n  });\n})();\n/**\r\n * @deprecated Use `CdkPortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵPortalHostDirective_BaseFactory;\n    return function PortalHostDirective_Factory(__ngFactoryType__) {\n      return (ɵPortalHostDirective_BaseFactory || (ɵPortalHostDirective_BaseFactory = i0.ɵɵgetInheritedFactory(PortalHostDirective)))(__ngFactoryType__ || PortalHostDirective);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PortalHostDirective,\n    selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]],\n    inputs: {\n      portal: [0, \"cdkPortalHost\", \"portal\"]\n    },\n    exportAs: [\"cdkPortalHost\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkPortalOutlet,\n      useExisting: PortalHostDirective\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PortalHostDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalHost], [portalHost]',\n      exportAs: 'cdkPortalHost',\n      inputs: [{\n        name: 'portal',\n        alias: 'cdkPortalHost'\n      }],\n      providers: [{\n        provide: CdkPortalOutlet,\n        useExisting: PortalHostDirective\n      }]\n    }]\n  }], null, null);\n})();\nclass PortalModule {\n  static ɵfac = function PortalModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PortalModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PortalModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PortalModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n      exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n    }]\n  }], null, null);\n})();\nexport { BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalOutlet, Portal, PortalHostDirective, PortalModule, TemplatePortal, TemplatePortalDirective };","map":{"version":3,"names":["i0","ElementRef","NgModuleRef","EnvironmentInjector","createComponent","Injector","inject","TemplateRef","ViewContainerRef","Directive","DOCUMENT","EventEmitter","Input","Output","NgModule","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","Portal","_attachedHost","attach","host","ngDevMode","hasAttached","detach","isAttached","setAttachedHost","ComponentPortal","component","viewContainerRef","injector","projectableNodes","constructor","TemplatePortal","templateRef","context","origin","elementRef","undefined","DomPortal","element","nativeElement","BasePortalOutlet","_attachedPortal","_disposeFn","_isDisposed","portal","attachComponentPortal","attachTemplatePortal","attachDomPortal","_invokeDisposeFn","dispose","setDisposeFn","fn","DomPortalOutlet","outletElement","_appRef","_defaultInjector","componentRef","ngModuleRef","get","optional","index","length","destroy","appRef","elementInjector","NULL","environmentInjector","attachView","hostView","viewCount","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","indexOf","remove","parentNode","anchorNode","ownerDocument","createComment","insertBefore","replaceChild","CdkPortal","ɵfac","CdkPortal_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","exportAs","features","ɵɵInheritDefinitionFeature","ɵsetClassMetadata","args","selector","TemplatePortalDirective","ɵTemplatePortalDirective_BaseFactory","TemplatePortalDirective_Factory","ɵɵgetInheritedFactory","ɵɵProvidersFeature","provide","useExisting","providers","CdkPortalOutlet","_moduleRef","_document","_viewContainerRef","_isInitialized","_attachedRef","attached","attachedRef","ngOnInit","ngOnDestroy","ref","_getRootNode","emit","clear","nodeType","ELEMENT_NODE","CdkPortalOutlet_Factory","inputs","outputs","PortalHostDirective","ɵPortalHostDirective_BaseFactory","PortalHostDirective_Factory","name","alias","PortalModule","PortalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/cdk/fesm2022/portal.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { ElementRef, NgModuleRef, EnvironmentInjector, createComponent, Injector, inject, TemplateRef, ViewContainerRef, Directive, DOCUMENT, EventEmitter, Input, Output, NgModule } from '@angular/core';\r\n\r\n/**\r\n * Throws an exception when attempting to attach a null portal to a host.\r\n * @docs-private\r\n */\r\nfunction throwNullPortalError() {\r\n    throw Error('Must provide a portal to attach');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\n * @docs-private\r\n */\r\nfunction throwPortalAlreadyAttachedError() {\r\n    throw Error('Host already has a portal attached');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\n * @docs-private\r\n */\r\nfunction throwPortalOutletAlreadyDisposedError() {\r\n    throw Error('This PortalOutlet has already been disposed');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach an unknown portal type.\r\n * @docs-private\r\n */\r\nfunction throwUnknownPortalTypeError() {\r\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\r\n        'a ComponentPortal or a TemplatePortal.');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach a portal to a null host.\r\n * @docs-private\r\n */\r\nfunction throwNullPortalOutletError() {\r\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\r\n}\r\n/**\r\n * Throws an exception when attempting to detach a portal that is not attached.\r\n * @docs-private\r\n */\r\nfunction throwNoPortalAttachedError() {\r\n    throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n */\r\nclass Portal {\r\n    _attachedHost;\r\n    /** Attach this portal to a host. */\r\n    attach(host) {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (host == null) {\r\n                throwNullPortalOutletError();\r\n            }\r\n            if (host.hasAttached()) {\r\n                throwPortalAlreadyAttachedError();\r\n            }\r\n        }\r\n        this._attachedHost = host;\r\n        return host.attach(this);\r\n    }\r\n    /** Detach this portal from its host */\r\n    detach() {\r\n        let host = this._attachedHost;\r\n        if (host != null) {\r\n            this._attachedHost = null;\r\n            host.detach();\r\n        }\r\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            throwNoPortalAttachedError();\r\n        }\r\n    }\r\n    /** Whether this portal is attached to a host. */\r\n    get isAttached() {\r\n        return this._attachedHost != null;\r\n    }\r\n    /**\r\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n     */\r\n    setAttachedHost(host) {\r\n        this._attachedHost = host;\r\n    }\r\n}\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nclass ComponentPortal extends Portal {\r\n    /** The type of the component that will be instantiated for attachment. */\r\n    component;\r\n    /**\r\n     * Where the attached component should live in Angular's *logical* component tree.\r\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\r\n     * The origin is necessary when the host is outside of the Angular application context.\r\n     */\r\n    viewContainerRef;\r\n    /** Injector used for the instantiation of the component. */\r\n    injector;\r\n    /**\r\n     * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\r\n     */\r\n    projectableNodes;\r\n    constructor(component, viewContainerRef, injector, projectableNodes) {\r\n        super();\r\n        this.component = component;\r\n        this.viewContainerRef = viewContainerRef;\r\n        this.injector = injector;\r\n        this.projectableNodes = projectableNodes;\r\n    }\r\n}\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\r\nclass TemplatePortal extends Portal {\r\n    templateRef;\r\n    viewContainerRef;\r\n    context;\r\n    injector;\r\n    constructor(\r\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\r\n    templateRef, \r\n    /** Reference to the ViewContainer into which the template will be stamped out. */\r\n    viewContainerRef, \r\n    /** Contextual data to be passed in to the embedded view. */\r\n    context, \r\n    /** The injector to use for the embedded view. */\r\n    injector) {\r\n        super();\r\n        this.templateRef = templateRef;\r\n        this.viewContainerRef = viewContainerRef;\r\n        this.context = context;\r\n        this.injector = injector;\r\n    }\r\n    get origin() {\r\n        return this.templateRef.elementRef;\r\n    }\r\n    /**\r\n     * Attach the portal to the provided `PortalOutlet`.\r\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n     * instance.\r\n     */\r\n    attach(host, context = this.context) {\r\n        this.context = context;\r\n        return super.attach(host);\r\n    }\r\n    detach() {\r\n        this.context = undefined;\r\n        return super.detach();\r\n    }\r\n}\r\n/**\r\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\r\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\r\n * will be restored to its original position.\r\n */\r\nclass DomPortal extends Portal {\r\n    /** DOM node hosting the portal's content. */\r\n    element;\r\n    constructor(element) {\r\n        super();\r\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\r\n    }\r\n}\r\n/**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n */\r\nclass BasePortalOutlet {\r\n    /** The portal currently attached to the host. */\r\n    _attachedPortal;\r\n    /** A function that will permanently dispose this host. */\r\n    _disposeFn;\r\n    /** Whether this host has already been permanently disposed. */\r\n    _isDisposed = false;\r\n    /** Whether this host has an attached portal. */\r\n    hasAttached() {\r\n        return !!this._attachedPortal;\r\n    }\r\n    /** Attaches a portal. */\r\n    attach(portal) {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!portal) {\r\n                throwNullPortalError();\r\n            }\r\n            if (this.hasAttached()) {\r\n                throwPortalAlreadyAttachedError();\r\n            }\r\n            if (this._isDisposed) {\r\n                throwPortalOutletAlreadyDisposedError();\r\n            }\r\n        }\r\n        if (portal instanceof ComponentPortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachComponentPortal(portal);\r\n        }\r\n        else if (portal instanceof TemplatePortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachTemplatePortal(portal);\r\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\r\n        }\r\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachDomPortal(portal);\r\n        }\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            throwUnknownPortalTypeError();\r\n        }\r\n    }\r\n    // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\r\n    attachDomPortal = null;\r\n    /** Detaches a previously attached portal. */\r\n    detach() {\r\n        if (this._attachedPortal) {\r\n            this._attachedPortal.setAttachedHost(null);\r\n            this._attachedPortal = null;\r\n        }\r\n        this._invokeDisposeFn();\r\n    }\r\n    /** Permanently dispose of this portal host. */\r\n    dispose() {\r\n        if (this.hasAttached()) {\r\n            this.detach();\r\n        }\r\n        this._invokeDisposeFn();\r\n        this._isDisposed = true;\r\n    }\r\n    /** @docs-private */\r\n    setDisposeFn(fn) {\r\n        this._disposeFn = fn;\r\n    }\r\n    _invokeDisposeFn() {\r\n        if (this._disposeFn) {\r\n            this._disposeFn();\r\n            this._disposeFn = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\r\nclass DomPortalOutlet extends BasePortalOutlet {\r\n    outletElement;\r\n    _appRef;\r\n    _defaultInjector;\r\n    /**\r\n     * @param outletElement Element into which the content is projected.\r\n     * @param _appRef Reference to the application. Only used in component portals when there\r\n     *   is no `ViewContainerRef` available.\r\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\r\n     *   have one. Only used for component portals.\r\n     */\r\n    constructor(\r\n    /** Element into which the content is projected. */\r\n    outletElement, _appRef, _defaultInjector) {\r\n        super();\r\n        this.outletElement = outletElement;\r\n        this._appRef = _appRef;\r\n        this._defaultInjector = _defaultInjector;\r\n    }\r\n    /**\r\n     * Attach the given ComponentPortal to DOM element.\r\n     * @param portal Portal to be attached\r\n     * @returns Reference to the created component.\r\n     */\r\n    attachComponentPortal(portal) {\r\n        let componentRef;\r\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n        // for the component (in terms of Angular's component tree, not rendering).\r\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n        // and then manually attach the view to the application.\r\n        if (portal.viewContainerRef) {\r\n            const injector = portal.injector || portal.viewContainerRef.injector;\r\n            const ngModuleRef = injector.get(NgModuleRef, null, { optional: true }) || undefined;\r\n            componentRef = portal.viewContainerRef.createComponent(portal.component, {\r\n                index: portal.viewContainerRef.length,\r\n                injector,\r\n                ngModuleRef,\r\n                projectableNodes: portal.projectableNodes || undefined,\r\n            });\r\n            this.setDisposeFn(() => componentRef.destroy());\r\n        }\r\n        else {\r\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\r\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\r\n            }\r\n            const appRef = this._appRef;\r\n            const elementInjector = portal.injector || this._defaultInjector || Injector.NULL;\r\n            const environmentInjector = elementInjector.get(EnvironmentInjector, appRef.injector);\r\n            componentRef = createComponent(portal.component, {\r\n                elementInjector,\r\n                environmentInjector,\r\n                projectableNodes: portal.projectableNodes || undefined,\r\n            });\r\n            appRef.attachView(componentRef.hostView);\r\n            this.setDisposeFn(() => {\r\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\r\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\r\n                if (appRef.viewCount > 0) {\r\n                    appRef.detachView(componentRef.hostView);\r\n                }\r\n                componentRef.destroy();\r\n            });\r\n        }\r\n        // At this point the component has been instantiated, so we move it to the location in the DOM\r\n        // where we want it to be rendered.\r\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\r\n        this._attachedPortal = portal;\r\n        return componentRef;\r\n    }\r\n    /**\r\n     * Attaches a template portal to the DOM as an embedded view.\r\n     * @param portal Portal to be attached.\r\n     * @returns Reference to the created embedded view.\r\n     */\r\n    attachTemplatePortal(portal) {\r\n        let viewContainer = portal.viewContainerRef;\r\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\r\n            injector: portal.injector,\r\n        });\r\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\r\n        // (e.g Overlay Container) To move the view to the specified host element. We just\r\n        // re-append the existing root nodes.\r\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\r\n        // Note that we want to detect changes after the nodes have been moved so that\r\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\r\n        // hook won't be invoked too early.\r\n        viewRef.detectChanges();\r\n        this.setDisposeFn(() => {\r\n            let index = viewContainer.indexOf(viewRef);\r\n            if (index !== -1) {\r\n                viewContainer.remove(index);\r\n            }\r\n        });\r\n        this._attachedPortal = portal;\r\n        // TODO(jelbourn): Return locals from view.\r\n        return viewRef;\r\n    }\r\n    /**\r\n     * Attaches a DOM portal by transferring its content into the outlet.\r\n     * @param portal Portal to be attached.\r\n     * @deprecated To be turned into a method.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    attachDomPortal = (portal) => {\r\n        const element = portal.element;\r\n        if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw Error('DOM portal content must be attached to a parent node.');\r\n        }\r\n        // Anchor used to save the element's previous position so\r\n        // that we can restore it when the portal is detached.\r\n        const anchorNode = this.outletElement.ownerDocument.createComment('dom-portal');\r\n        element.parentNode.insertBefore(anchorNode, element);\r\n        this.outletElement.appendChild(element);\r\n        this._attachedPortal = portal;\r\n        super.setDisposeFn(() => {\r\n            // We can't use `replaceWith` here because IE doesn't support it.\r\n            if (anchorNode.parentNode) {\r\n                anchorNode.parentNode.replaceChild(element, anchorNode);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Clears out a portal from the DOM.\r\n     */\r\n    dispose() {\r\n        super.dispose();\r\n        this.outletElement.remove();\r\n    }\r\n    /** Gets the root HTMLElement for an instantiated component. */\r\n    _getComponentRootNode(componentRef) {\r\n        return componentRef.hostView.rootNodes[0];\r\n    }\r\n}\r\n\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\r\nclass CdkPortal extends TemplatePortal {\r\n    constructor() {\r\n        const templateRef = inject(TemplateRef);\r\n        const viewContainerRef = inject(ViewContainerRef);\r\n        super(templateRef, viewContainerRef);\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkPortal, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkPortal, isStandalone: true, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkPortal, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkPortal]',\r\n                    exportAs: 'cdkPortal',\r\n                }]\r\n        }], ctorParameters: () => [] });\r\n/**\r\n * @deprecated Use `CdkPortal` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nclass TemplatePortalDirective extends CdkPortal {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: TemplatePortalDirective, isStandalone: true, selector: \"[cdk-portal], [portal]\", providers: [\r\n            {\r\n                provide: CdkPortal,\r\n                useExisting: TemplatePortalDirective,\r\n            },\r\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdk-portal], [portal]',\r\n                    exportAs: 'cdkPortal',\r\n                    providers: [\r\n                        {\r\n                            provide: CdkPortal,\r\n                            useExisting: TemplatePortalDirective,\r\n                        },\r\n                    ],\r\n                }]\r\n        }] });\r\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\r\nclass CdkPortalOutlet extends BasePortalOutlet {\r\n    _moduleRef = inject(NgModuleRef, { optional: true });\r\n    _document = inject(DOCUMENT);\r\n    _viewContainerRef = inject(ViewContainerRef);\r\n    /** Whether the portal component is initialized. */\r\n    _isInitialized = false;\r\n    /** Reference to the currently-attached component/view ref. */\r\n    _attachedRef;\r\n    constructor() {\r\n        super();\r\n    }\r\n    /** Portal associated with the Portal outlet. */\r\n    get portal() {\r\n        return this._attachedPortal;\r\n    }\r\n    set portal(portal) {\r\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\r\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\r\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\r\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\r\n        if (this.hasAttached() && !portal && !this._isInitialized) {\r\n            return;\r\n        }\r\n        if (this.hasAttached()) {\r\n            super.detach();\r\n        }\r\n        if (portal) {\r\n            super.attach(portal);\r\n        }\r\n        this._attachedPortal = portal || null;\r\n    }\r\n    /** Emits when a portal is attached to the outlet. */\r\n    attached = new EventEmitter();\r\n    /** Component or view reference that is attached to the portal. */\r\n    get attachedRef() {\r\n        return this._attachedRef;\r\n    }\r\n    ngOnInit() {\r\n        this._isInitialized = true;\r\n    }\r\n    ngOnDestroy() {\r\n        super.dispose();\r\n        this._attachedRef = this._attachedPortal = null;\r\n    }\r\n    /**\r\n     * Attach the given ComponentPortal to this PortalOutlet.\r\n     *\r\n     * @param portal Portal to be attached to the portal outlet.\r\n     * @returns Reference to the created component.\r\n     */\r\n    attachComponentPortal(portal) {\r\n        portal.setAttachedHost(this);\r\n        // If the portal specifies an origin, use that as the logical location of the component\r\n        // in the application tree. Otherwise use the location of this PortalOutlet.\r\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\r\n        const ref = viewContainerRef.createComponent(portal.component, {\r\n            index: viewContainerRef.length,\r\n            injector: portal.injector || viewContainerRef.injector,\r\n            projectableNodes: portal.projectableNodes || undefined,\r\n            ngModuleRef: this._moduleRef || undefined,\r\n        });\r\n        // If we're using a view container that's different from the injected one (e.g. when the portal\r\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\r\n        // inside of the alternate view container.\r\n        if (viewContainerRef !== this._viewContainerRef) {\r\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\r\n        }\r\n        super.setDisposeFn(() => ref.destroy());\r\n        this._attachedPortal = portal;\r\n        this._attachedRef = ref;\r\n        this.attached.emit(ref);\r\n        return ref;\r\n    }\r\n    /**\r\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\r\n     * @param portal Portal to be attached.\r\n     * @returns Reference to the created embedded view.\r\n     */\r\n    attachTemplatePortal(portal) {\r\n        portal.setAttachedHost(this);\r\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\r\n            injector: portal.injector,\r\n        });\r\n        super.setDisposeFn(() => this._viewContainerRef.clear());\r\n        this._attachedPortal = portal;\r\n        this._attachedRef = viewRef;\r\n        this.attached.emit(viewRef);\r\n        return viewRef;\r\n    }\r\n    /**\r\n     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\r\n     * @param portal Portal to be attached.\r\n     * @deprecated To be turned into a method.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    attachDomPortal = (portal) => {\r\n        const element = portal.element;\r\n        if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw Error('DOM portal content must be attached to a parent node.');\r\n        }\r\n        // Anchor used to save the element's previous position so\r\n        // that we can restore it when the portal is detached.\r\n        const anchorNode = this._document.createComment('dom-portal');\r\n        portal.setAttachedHost(this);\r\n        element.parentNode.insertBefore(anchorNode, element);\r\n        this._getRootNode().appendChild(element);\r\n        this._attachedPortal = portal;\r\n        super.setDisposeFn(() => {\r\n            if (anchorNode.parentNode) {\r\n                anchorNode.parentNode.replaceChild(element, anchorNode);\r\n            }\r\n        });\r\n    };\r\n    /** Gets the root node of the portal outlet. */\r\n    _getRootNode() {\r\n        const nativeElement = this._viewContainerRef.element.nativeElement;\r\n        // The directive could be set on a template which will result in a comment\r\n        // node being the root. Use the comment's parent node if that is the case.\r\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\r\n            ? nativeElement\r\n            : nativeElement.parentNode);\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkPortalOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkPortalOutlet, isStandalone: true, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkPortalOutlet]',\r\n                    exportAs: 'cdkPortalOutlet',\r\n                }]\r\n        }], ctorParameters: () => [], propDecorators: { portal: [{\r\n                type: Input,\r\n                args: ['cdkPortalOutlet']\r\n            }], attached: [{\r\n                type: Output\r\n            }] } });\r\n/**\r\n * @deprecated Use `CdkPortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nclass PortalHostDirective extends CdkPortalOutlet {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: PortalHostDirective, isStandalone: true, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\r\n            {\r\n                provide: CdkPortalOutlet,\r\n                useExisting: PortalHostDirective,\r\n            },\r\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkPortalHost], [portalHost]',\r\n                    exportAs: 'cdkPortalHost',\r\n                    inputs: [{ name: 'portal', alias: 'cdkPortalHost' }],\r\n                    providers: [\r\n                        {\r\n                            provide: CdkPortalOutlet,\r\n                            useExisting: PortalHostDirective,\r\n                        },\r\n                    ],\r\n                }]\r\n        }] });\r\nclass PortalModule {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: PortalModule, imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: PortalModule });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: PortalModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\r\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\r\n                }]\r\n        }] });\r\n\r\nexport { BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalOutlet, Portal, PortalHostDirective, PortalModule, TemplatePortal, TemplatePortalDirective };\r\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}