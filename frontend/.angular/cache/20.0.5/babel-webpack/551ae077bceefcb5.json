{"ast":null,"code":"/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport { Attribute } from '../attribute.mjs';\n\n/** All properties that are used by jsaction. */\nconst Property = {\n  /**\r\n   * The parsed value of the jsaction attribute is stored in this\r\n   * property on the DOM node. The parsed value is an Object. The\r\n   * property names of the object are the events; the values are the\r\n   * names of the actions. This property is attached even on nodes\r\n   * that don't have a jsaction attribute as an optimization, because\r\n   * property lookup is faster than attribute access.\r\n   */\n  JSACTION: '__jsaction',\n  /**\r\n   * The owner property references an a logical owner for a DOM node. JSAction\r\n   * will follow this reference instead of parentNode when traversing the DOM\r\n   * to find jsaction attributes. This allows overlaying a logical structure\r\n   * over a document where the DOM structure can't reflect that structure.\r\n   */\n  OWNER: '__owner'\n};\n\n/**\r\n * Map from jsaction annotation to a parsed map from event name to action name.\r\n */\nconst parseCache = {};\n/**\r\n * Reads the jsaction parser cache from the given DOM Element.\r\n */\nfunction get(element) {\n  return element[Property.JSACTION];\n}\n/**\r\n * Reads the jsaction parser cache for the given DOM element. If no cache is yet present,\r\n * creates an empty one.\r\n */\nfunction getDefaulted(element) {\n  const cache = get(element) ?? {};\n  set(element, cache);\n  return cache;\n}\n/**\r\n * Writes the jsaction parser cache to the given DOM Element.\r\n */\nfunction set(element, actionMap) {\n  element[Property.JSACTION] = actionMap;\n}\n/**\r\n * Looks up the parsed action map from the source jsaction attribute value.\r\n *\r\n * @param text Unparsed jsaction attribute value.\r\n * @return Parsed jsaction attribute value, if already present in the cache.\r\n */\nfunction getParsed(text) {\n  return parseCache[text];\n}\n/**\r\n * Inserts the parse result for the given source jsaction value into the cache.\r\n *\r\n * @param text Unparsed jsaction attribute value.\r\n * @param parsed Attribute value parsed into the action map.\r\n */\nfunction setParsed(text, parsed) {\n  parseCache[text] = parsed;\n}\n\n/*\r\n * Names of events that are special to jsaction. These are not all\r\n * event types that are legal to use in either HTML or the addEvent()\r\n * API, but these are the ones that are treated specially. All other\r\n * DOM events can be used in either addEvent() or in the value of the\r\n * jsaction attribute. Beware of browser specific events or events\r\n * that don't bubble though: If they are not mentioned here, then\r\n * event contract doesn't work around their peculiarities.\r\n */\nconst EventType = {\n  /**\r\n   * Mouse middle click, introduced in Chrome 55 and not yet supported on\r\n   * other browsers.\r\n   */\n  AUXCLICK: 'auxclick',\n  /**\r\n   * The change event fired by browsers when the `value` attribute of input,\r\n   * select, and textarea elements are changed.\r\n   */\n  CHANGE: 'change',\n  /**\r\n   * The click event. In addEvent() refers to all click events, in the\r\n   * jsaction attribute it refers to the unmodified click and Enter/Space\r\n   * keypress events.  In the latter case, a jsaction click will be triggered,\r\n   * for accessibility reasons.  See clickmod and clickonly, below.\r\n   */\n  CLICK: 'click',\n  /**\r\n   * Specifies the jsaction for a modified click event (i.e. a mouse\r\n   * click with the modifier key Cmd/Ctrl pressed). This event isn't\r\n   * separately enabled in addEvent(), because in the DOM, it's just a\r\n   * click event.\r\n   */\n  CLICKMOD: 'clickmod',\n  /**\r\n   * Specifies the jsaction for a click-only event.  Click-only doesn't take\r\n   * into account the case where an element with focus receives an Enter/Space\r\n   * keypress.  This event isn't separately enabled in addEvent().\r\n   */\n  CLICKONLY: 'clickonly',\n  /**\r\n   * The dblclick event.\r\n   */\n  DBLCLICK: 'dblclick',\n  /**\r\n   * Focus doesn't bubble, but you can use it in addEvent() and\r\n   * jsaction anyway. EventContract does the right thing under the\r\n   * hood.\r\n   */\n  FOCUS: 'focus',\n  /**\r\n   * This event only exists in IE. For addEvent() and jsaction, use\r\n   * focus instead; EventContract does the right thing even though\r\n   * focus doesn't bubble.\r\n   */\n  FOCUSIN: 'focusin',\n  /**\r\n   * Analog to focus.\r\n   */\n  BLUR: 'blur',\n  /**\r\n   * Analog to focusin.\r\n   */\n  FOCUSOUT: 'focusout',\n  /**\r\n   * Submit doesn't bubble, so it cannot be used with event\r\n   * contract. However, the browser helpfully fires a click event on\r\n   * the submit button of a form (even if the form is not submitted by\r\n   * a click on the submit button). So you should handle click on the\r\n   * submit button instead.\r\n   */\n  SUBMIT: 'submit',\n  /**\r\n   * The keydown event. In addEvent() and non-click jsaction it represents the\r\n   * regular DOM keydown event. It represents click actions in non-Gecko\r\n   * browsers.\r\n   */\n  KEYDOWN: 'keydown',\n  /**\r\n   * The keypress event. In addEvent() and non-click jsaction it represents the\r\n   * regular DOM keypress event. It represents click actions in Gecko browsers.\r\n   */\n  KEYPRESS: 'keypress',\n  /**\r\n   * The keyup event. In addEvent() and non-click jsaction it represents the\r\n   * regular DOM keyup event. It represents click actions in non-Gecko\r\n   * browsers.\r\n   */\n  KEYUP: 'keyup',\n  /**\r\n   * The mouseup event. Can either be used directly or used implicitly to\r\n   * capture mouseup events. In addEvent(), it represents a regular DOM\r\n   * mouseup event.\r\n   */\n  MOUSEUP: 'mouseup',\n  /**\r\n   * The mousedown event. Can either be used directly or used implicitly to\r\n   * capture mouseenter events. In addEvent(), it represents a regular DOM\r\n   * mouseover event.\r\n   */\n  MOUSEDOWN: 'mousedown',\n  /**\r\n   * The mouseover event. Can either be used directly or used implicitly to\r\n   * capture mouseenter events. In addEvent(), it represents a regular DOM\r\n   * mouseover event.\r\n   */\n  MOUSEOVER: 'mouseover',\n  /**\r\n   * The mouseout event. Can either be used directly or used implicitly to\r\n   * capture mouseover events. In addEvent(), it represents a regular DOM\r\n   * mouseout event.\r\n   */\n  MOUSEOUT: 'mouseout',\n  /**\r\n   * The mouseenter event. Does not bubble and fires individually on each\r\n   * element being entered within a DOM tree.\r\n   */\n  MOUSEENTER: 'mouseenter',\n  /**\r\n   * The mouseleave event. Does not bubble and fires individually on each\r\n   * element being entered within a DOM tree.\r\n   */\n  MOUSELEAVE: 'mouseleave',\n  /**\r\n   * The mousemove event.\r\n   */\n  MOUSEMOVE: 'mousemove',\n  /**\r\n   * The pointerup event. Can either be used directly or used implicitly to\r\n   * capture pointerup events. In addEvent(), it represents a regular DOM\r\n   * pointerup event.\r\n   */\n  POINTERUP: 'pointerup',\n  /**\r\n   * The pointerdown event. Can either be used directly or used implicitly to\r\n   * capture pointerenter events. In addEvent(), it represents a regular DOM\r\n   * mouseover event.\r\n   */\n  POINTERDOWN: 'pointerdown',\n  /**\r\n   * The pointerover event. Can either be used directly or used implicitly to\r\n   * capture pointerenter events. In addEvent(), it represents a regular DOM\r\n   * pointerover event.\r\n   */\n  POINTEROVER: 'pointerover',\n  /**\r\n   * The pointerout event. Can either be used directly or used implicitly to\r\n   * capture pointerover events. In addEvent(), it represents a regular DOM\r\n   * pointerout event.\r\n   */\n  POINTEROUT: 'pointerout',\n  /**\r\n   * The pointerenter event. Does not bubble and fires individually on each\r\n   * element being entered within a DOM tree.\r\n   */\n  POINTERENTER: 'pointerenter',\n  /**\r\n   * The pointerleave event. Does not bubble and fires individually on each\r\n   * element being entered within a DOM tree.\r\n   */\n  POINTERLEAVE: 'pointerleave',\n  /**\r\n   * The pointermove event.\r\n   */\n  POINTERMOVE: 'pointermove',\n  /**\r\n   * The pointercancel event.\r\n   */\n  POINTERCANCEL: 'pointercancel',\n  /**\r\n   * The gotpointercapture event is fired when\r\n   * Element.setPointerCapture(pointerId) is called on a mouse input, or\r\n   * implicitly when a touch input begins.\r\n   */\n  GOTPOINTERCAPTURE: 'gotpointercapture',\n  /**\r\n   * The lostpointercapture event is fired when\r\n   * Element.releasePointerCapture(pointerId) is called, or implicitly after a\r\n   * touch input ends.\r\n   */\n  LOSTPOINTERCAPTURE: 'lostpointercapture',\n  /**\r\n   * The error event. The error event doesn't bubble, but you can use it in\r\n   * addEvent() and jsaction anyway. EventContract does the right thing under\r\n   * the hood (except in IE8 which does not use error events).\r\n   */\n  ERROR: 'error',\n  /**\r\n   * The load event. The load event doesn't bubble, but you can use it in\r\n   * addEvent() and jsaction anyway. EventContract does the right thing\r\n   * under the hood.\r\n   */\n  LOAD: 'load',\n  /**\r\n   * The unload event.\r\n   */\n  UNLOAD: 'unload',\n  /**\r\n   * The touchstart event. Bubbles, will only ever fire in browsers with\r\n   * touch support.\r\n   */\n  TOUCHSTART: 'touchstart',\n  /**\r\n   * The touchend event. Bubbles, will only ever fire in browsers with\r\n   * touch support.\r\n   */\n  TOUCHEND: 'touchend',\n  /**\r\n   * The touchmove event. Bubbles, will only ever fire in browsers with\r\n   * touch support.\r\n   */\n  TOUCHMOVE: 'touchmove',\n  /**\r\n   * The input event.\r\n   */\n  INPUT: 'input',\n  /**\r\n   * The scroll event.\r\n   */\n  SCROLL: 'scroll',\n  /**\r\n   * The toggle event. The toggle event doesn't bubble, but you can use it in\r\n   * addEvent() and jsaction anyway. EventContract does the right thing\r\n   * under the hood.\r\n   */\n  TOGGLE: 'toggle',\n  /**\r\n   * A custom event. The actual custom event type is declared as the 'type'\r\n   * field in the event details. Supported in Firefox 6+, IE 9+, and all Chrome\r\n   * versions.\r\n   *\r\n   * This is an internal name. Users should use jsaction's fireCustomEvent to\r\n   * fire custom events instead of relying on this type to create them.\r\n   */\n  CUSTOM: '_custom'\n};\n/** All event types that do not bubble or capture and need a polyfill. */\nconst MOUSE_SPECIAL_EVENT_TYPES = [EventType.MOUSEENTER, EventType.MOUSELEAVE, 'pointerenter', 'pointerleave'];\n/** All event types that are registered in the bubble phase. */\nconst BUBBLE_EVENT_TYPES = [EventType.CLICK, EventType.DBLCLICK, EventType.FOCUSIN, EventType.FOCUSOUT, EventType.KEYDOWN, EventType.KEYUP, EventType.KEYPRESS, EventType.MOUSEOVER, EventType.MOUSEOUT, EventType.SUBMIT, EventType.TOUCHSTART, EventType.TOUCHEND, EventType.TOUCHMOVE, 'touchcancel', 'auxclick', 'change', 'compositionstart', 'compositionupdate', 'compositionend', 'beforeinput', 'input', 'select', 'copy', 'cut', 'paste', 'mousedown', 'mouseup', 'wheel', 'contextmenu', 'dragover', 'dragenter', 'dragleave', 'drop', 'dragstart', 'dragend', 'pointerdown', 'pointermove', 'pointerup', 'pointercancel', 'pointerover', 'pointerout', 'gotpointercapture', 'lostpointercapture',\n// Video events.\n'ended', 'loadedmetadata',\n// Page visibility events.\n'pagehide', 'pageshow', 'visibilitychange',\n// Content visibility events.\n'beforematch'];\n/** All event types that are registered in the capture phase. */\nconst CAPTURE_EVENT_TYPES = [EventType.FOCUS, EventType.BLUR, EventType.ERROR, EventType.LOAD, EventType.TOGGLE];\n/**\r\n * Whether or not an event type should be registered in the capture phase.\r\n * @param eventType\r\n * @returns bool\r\n */\nconst isCaptureEventType = eventType => CAPTURE_EVENT_TYPES.indexOf(eventType) >= 0;\n/** All event types that are registered early.  */\nconst EARLY_EVENT_TYPES = BUBBLE_EVENT_TYPES.concat(CAPTURE_EVENT_TYPES);\n/**\r\n * Whether or not an event type is registered in the early contract.\r\n */\nconst isEarlyEventType = eventType => EARLY_EVENT_TYPES.indexOf(eventType) >= 0;\n\n/**\r\n * Gets a browser event type, if it would differ from the JSAction event type.\r\n */\nfunction getBrowserEventType(eventType) {\n  // Mouseenter and mouseleave events are not handled directly because they\n  // are not available everywhere. In browsers where they are available, they\n  // don't bubble and aren't visible at the container boundary. Instead, we\n  // synthesize the mouseenter and mouseleave events from mouseover and\n  // mouseout events, respectively. Cf. eventcontract.js.\n  if (eventType === EventType.MOUSEENTER) {\n    return EventType.MOUSEOVER;\n  } else if (eventType === EventType.MOUSELEAVE) {\n    return EventType.MOUSEOUT;\n  } else if (eventType === EventType.POINTERENTER) {\n    return EventType.POINTEROVER;\n  } else if (eventType === EventType.POINTERLEAVE) {\n    return EventType.POINTEROUT;\n  }\n  return eventType;\n}\n/**\r\n * Registers the event handler function with the given DOM element for\r\n * the given event type.\r\n *\r\n * @param element The element.\r\n * @param eventType The event type.\r\n * @param handler The handler function to install.\r\n * @param passive A boolean value that, if `true`, indicates that the function\r\n *     specified by `handler` will never call `preventDefault()`.\r\n * @return Information needed to uninstall the event handler eventually.\r\n */\nfunction addEventListener(element, eventType, handler, passive) {\n  // All event handlers are registered in the bubbling\n  // phase.\n  //\n  // All browsers support focus and blur, but these events only are propagated\n  // in the capture phase. Very legacy browsers do not support focusin or\n  // focusout.\n  //\n  // It would be a bad idea to register all event handlers in the\n  // capture phase because then regular onclick handlers would not be\n  // executed at all on events that trigger a jsaction. That's not\n  // entirely what we want, at least for now.\n  //\n  // Error and load events (i.e. on images) do not bubble so they are also\n  // handled in the capture phase.\n  let capture = false;\n  if (isCaptureEventType(eventType)) {\n    capture = true;\n  }\n  const options = typeof passive === 'boolean' ? {\n    capture,\n    passive\n  } : capture;\n  element.addEventListener(eventType, handler, options);\n  return {\n    eventType,\n    handler,\n    capture,\n    passive\n  };\n}\n/**\r\n * Removes the event handler for the given event from the element.\r\n * the given event type.\r\n *\r\n * @param element The element.\r\n * @param info The information needed to deregister the handler, as returned by\r\n *     addEventListener(), above.\r\n */\nfunction removeEventListener(element, info) {\n  if (element.removeEventListener) {\n    // It's worth noting that some browser releases have been inconsistent on this, and unless\n    // you have specific reasons otherwise, it's probably wise to use the same values used for\n    // the call to addEventListener() when calling removeEventListener().\n    const options = typeof info.passive === 'boolean' ? {\n      capture: info.capture\n    } : info.capture;\n    element.removeEventListener(info.eventType, info.handler, options);\n    // `detachEvent` is an old DOM API.\n  } else if (element.detachEvent) {\n    // `detachEvent` is an old DOM API.\n    element.detachEvent(`on${info.eventType}`, info.handler);\n  }\n}\n/**\r\n * Prevents the default action of an event.\r\n * @param e The event to prevent the default action for.\r\n */\nfunction preventDefault(e) {\n  e.preventDefault ? e.preventDefault() : e.returnValue = false;\n}\n/**\r\n * Whether we are on a Mac. Not pulling in useragent just for this.\r\n */\nlet isMac = typeof navigator !== 'undefined' && /Macintosh/.test(navigator.userAgent);\n/**\r\n * Determines and returns whether the given event (which is assumed to be a\r\n * click event) is a middle click.\r\n * NOTE: There is not a consistent way to identify middle click\r\n * http://www.unixpapa.com/js/mouse.html\r\n */\nfunction isMiddleClick(e) {\n  return (\n    // `which` is an old DOM API.\n    e.which === 2 ||\n    // `which` is an old DOM API.\n    e.which == null &&\n    // `button` is an old DOM API.\n    e.button === 4 // middle click for IE\n  );\n}\n/**\r\n * Determines and returns whether the given event (which is assumed\r\n * to be a click event) is modified. A middle click is considered a modified\r\n * click to retain the default browser action, which opens a link in a new tab.\r\n * @param e The event.\r\n * @return Whether the given event is modified.\r\n */\nfunction isModifiedClickEvent(e) {\n  return (\n    // `metaKey` is an old DOM API.\n    isMac && e.metaKey ||\n    // `ctrlKey` is an old DOM API.\n    !isMac && e.ctrlKey || isMiddleClick(e) ||\n    // `shiftKey` is an old DOM API.\n    e.shiftKey\n  );\n}\n/**\r\n * Determines whether the event corresponds to a non-bubbling mouse\r\n * event type (mouseenter, mouseleave, pointerenter, and pointerleave).\r\n *\r\n * During mouseover (mouseenter) and pointerover (pointerenter), the\r\n * relatedTarget is the element being entered from. During mouseout (mouseleave)\r\n * and pointerout (pointerleave), the relatedTarget is the element being exited\r\n * to.\r\n *\r\n * In both cases, if relatedTarget is outside target, then the corresponding\r\n * special event has occurred, otherwise it hasn't.\r\n *\r\n * @param e The mouseover/mouseout event.\r\n * @param type The type of the mouse special event.\r\n * @param element The element on which the jsaction for the\r\n *     mouseenter/mouseleave event is defined.\r\n * @return True if the event is a mouseenter/mouseleave event.\r\n */\nfunction isMouseSpecialEvent(e, type, element) {\n  // `relatedTarget` is an old DOM API.\n  const related = e.relatedTarget;\n  return (e.type === EventType.MOUSEOVER && type === EventType.MOUSEENTER || e.type === EventType.MOUSEOUT && type === EventType.MOUSELEAVE || e.type === EventType.POINTEROVER && type === EventType.POINTERENTER || e.type === EventType.POINTEROUT && type === EventType.POINTERLEAVE) && (!related || related !== element && !element.contains(related));\n}\n/**\r\n * Creates a new EventLike object for a mouseenter/mouseleave event that's\r\n * derived from the original corresponding mouseover/mouseout event.\r\n * @param e The event.\r\n * @param target The element on which the jsaction for the mouseenter/mouseleave\r\n *     event is defined.\r\n * @return A modified event-like object copied from the event object passed into\r\n *     this function.\r\n */\nfunction createMouseSpecialEvent(e, target) {\n  // We have to create a copy of the event object because we need to mutate\n  // its fields. We do this for the special mouse events because the event\n  // target needs to be retargeted to the action element rather than the real\n  // element (since we are simulating the special mouse events with mouseover/\n  // mouseout).\n  //\n  // Since we're making a copy anyways, we might as well attempt to convert\n  // this event into a pseudo-real mouseenter/mouseleave event by adjusting\n  // its type.\n  //\n  const copy = {};\n  for (const property in e) {\n    if (property === 'srcElement' || property === 'target') {\n      continue;\n    }\n    const key = property;\n    // Making a copy requires iterating through all properties of `Event`.\n    const value = e[key];\n    if (typeof value === 'function') {\n      continue;\n    }\n    // Value should be the expected type, but the value of `key` is not known\n    // statically.\n    copy[key] = value;\n  }\n  if (e.type === EventType.MOUSEOVER) {\n    copy['type'] = EventType.MOUSEENTER;\n  } else if (e.type === EventType.MOUSEOUT) {\n    copy['type'] = EventType.MOUSELEAVE;\n  } else if (e.type === EventType.POINTEROVER) {\n    copy['type'] = EventType.POINTERENTER;\n  } else {\n    copy['type'] = EventType.POINTERLEAVE;\n  }\n  copy['target'] = copy['srcElement'] = target;\n  copy['bubbles'] = false;\n  copy['_originalEvent'] = e;\n  return copy;\n}\n\n/**\r\n * Whether the user agent is running on iOS.\r\n */\nconst isIos = typeof navigator !== 'undefined' && /iPhone|iPad|iPod/.test(navigator.userAgent);\n/**\r\n * A class representing a container node and all the event handlers\r\n * installed on it. Used so that handlers can be cleaned up if the\r\n * container is removed from the contract.\r\n */\nclass EventContractContainer {\n  element;\n  /**\r\n   * Array of event handlers and their corresponding event types that are\r\n   * installed on this container.\r\n   *\r\n   */\n  handlerInfos = [];\n  /**\r\n   * @param element The container Element.\r\n   */\n  constructor(element) {\n    this.element = element;\n  }\n  /**\r\n   * Installs the provided installer on the element owned by this container,\r\n   * and maintains a reference to resulting handler in order to remove it\r\n   * later if desired.\r\n   */\n  addEventListener(eventType, getHandler, passive) {\n    // In iOS, event bubbling doesn't happen automatically in any DOM element,\n    // unless it has an onclick attribute or DOM event handler attached to it.\n    // This breaks JsAction in some cases. See \"Making Elements Clickable\"\n    // section at http://goo.gl/2VoGnB.\n    //\n    // A workaround for this issue is to change the CSS cursor style to 'pointer'\n    // for the container element, which magically turns on event bubbling. This\n    // solution is described in the comments section at http://goo.gl/6pEO1z.\n    //\n    // We use a navigator.userAgent check here as this problem is present both\n    // on Mobile Safari and thin WebKit wrappers, such as Chrome for iOS.\n    if (isIos) {\n      this.element.style.cursor = 'pointer';\n    }\n    this.handlerInfos.push(addEventListener(this.element, eventType, getHandler(this.element), passive));\n  }\n  /**\r\n   * Removes all the handlers installed on this container.\r\n   */\n  cleanUp() {\n    for (let i = 0; i < this.handlerInfos.length; i++) {\n      removeEventListener(this.element, this.handlerInfos[i]);\n    }\n    this.handlerInfos = [];\n  }\n}\nconst Char = {\n  /**\r\n   * The separator between the namespace and the action name in the\r\n   * jsaction attribute value.\r\n   */\n  NAMESPACE_ACTION_SEPARATOR: '.',\n  /**\r\n   * The separator between the event name and action in the jsaction\r\n   * attribute value.\r\n   */\n  EVENT_ACTION_SEPARATOR: ':'\n};\n\n/** Added for readability when accessing stable property names. */\nfunction getEventType(eventInfo) {\n  return eventInfo.eventType;\n}\n/** Added for readability when accessing stable property names. */\nfunction setEventType(eventInfo, eventType) {\n  eventInfo.eventType = eventType;\n}\n/** Added for readability when accessing stable property names. */\nfunction getEvent(eventInfo) {\n  return eventInfo.event;\n}\n/** Added for readability when accessing stable property names. */\nfunction setEvent(eventInfo, event) {\n  eventInfo.event = event;\n}\n/** Added for readability when accessing stable property names. */\nfunction getTargetElement(eventInfo) {\n  return eventInfo.targetElement;\n}\n/** Added for readability when accessing stable property names. */\nfunction setTargetElement(eventInfo, targetElement) {\n  eventInfo.targetElement = targetElement;\n}\n/** Added for readability when accessing stable property names. */\nfunction getContainer(eventInfo) {\n  return eventInfo.eic;\n}\n/** Added for readability when accessing stable property names. */\nfunction setContainer(eventInfo, container) {\n  eventInfo.eic = container;\n}\n/** Added for readability when accessing stable property names. */\nfunction getTimestamp(eventInfo) {\n  return eventInfo.timeStamp;\n}\n/** Added for readability when accessing stable property names. */\nfunction setTimestamp(eventInfo, timestamp) {\n  eventInfo.timeStamp = timestamp;\n}\n/** Added for readability when accessing stable property names. */\nfunction getAction(eventInfo) {\n  return eventInfo.eia;\n}\n/** Added for readability when accessing stable property names. */\nfunction setAction(eventInfo, actionName, actionElement) {\n  eventInfo.eia = [actionName, actionElement];\n}\n/** Added for readability when accessing stable property names. */\nfunction unsetAction(eventInfo) {\n  eventInfo.eia = undefined;\n}\n/** Added for readability when accessing stable property names. */\nfunction getActionElement(actionInfo) {\n  return actionInfo[1];\n}\n/** Added for readability when accessing stable property names. */\nfunction getIsReplay(eventInfo) {\n  return eventInfo.eirp;\n}\n/** Added for readability when accessing stable property names. */\nfunction setIsReplay(eventInfo, replay) {\n  eventInfo.eirp = replay;\n}\n/** Added for readability when accessing stable property names. */\nfunction getResolved(eventInfo) {\n  return eventInfo.eir;\n}\n/** Added for readability when accessing stable property names. */\nfunction setResolved(eventInfo, resolved) {\n  eventInfo.eir = resolved;\n}\n/** Clones an `EventInfo` */\nfunction cloneEventInfo(eventInfo) {\n  return {\n    eventType: eventInfo.eventType,\n    event: eventInfo.event,\n    targetElement: eventInfo.targetElement,\n    eic: eventInfo.eic,\n    eia: eventInfo.eia,\n    timeStamp: eventInfo.timeStamp,\n    eirp: eventInfo.eirp,\n    eiack: eventInfo.eiack,\n    eir: eventInfo.eir\n  };\n}\n/**\r\n * Utility function for creating an `EventInfo`.\r\n *\r\n * This can be used from code-size sensitive compilation units, as taking\r\n * parameters vs. an `Object` literal reduces code size.\r\n */\nfunction createEventInfoFromParameters(eventType, event, targetElement, container, timestamp, action, isReplay, a11yClickKey) {\n  return {\n    eventType,\n    event,\n    targetElement,\n    eic: container,\n    timeStamp: timestamp,\n    eia: action,\n    eirp: isReplay,\n    eiack: a11yClickKey\n  };\n}\n/**\r\n * Utility class around an `EventInfo`.\r\n *\r\n * This should be used in compilation units that are less sensitive to code\r\n * size.\r\n */\nclass EventInfoWrapper {\n  eventInfo;\n  constructor(eventInfo) {\n    this.eventInfo = eventInfo;\n  }\n  getEventType() {\n    return getEventType(this.eventInfo);\n  }\n  setEventType(eventType) {\n    setEventType(this.eventInfo, eventType);\n  }\n  getEvent() {\n    return getEvent(this.eventInfo);\n  }\n  setEvent(event) {\n    setEvent(this.eventInfo, event);\n  }\n  getTargetElement() {\n    return getTargetElement(this.eventInfo);\n  }\n  setTargetElement(targetElement) {\n    setTargetElement(this.eventInfo, targetElement);\n  }\n  getContainer() {\n    return getContainer(this.eventInfo);\n  }\n  setContainer(container) {\n    setContainer(this.eventInfo, container);\n  }\n  getTimestamp() {\n    return getTimestamp(this.eventInfo);\n  }\n  setTimestamp(timestamp) {\n    setTimestamp(this.eventInfo, timestamp);\n  }\n  getAction() {\n    const action = getAction(this.eventInfo);\n    if (!action) return undefined;\n    return {\n      name: action[0],\n      element: action[1]\n    };\n  }\n  setAction(action) {\n    if (!action) {\n      unsetAction(this.eventInfo);\n      return;\n    }\n    setAction(this.eventInfo, action.name, action.element);\n  }\n  getIsReplay() {\n    return getIsReplay(this.eventInfo);\n  }\n  setIsReplay(replay) {\n    setIsReplay(this.eventInfo, replay);\n  }\n  getResolved() {\n    return getResolved(this.eventInfo);\n  }\n  setResolved(resolved) {\n    setResolved(this.eventInfo, resolved);\n  }\n  clone() {\n    return new EventInfoWrapper(cloneEventInfo(this.eventInfo));\n  }\n}\n\n/**\r\n * Since maps from event to action are immutable we can use a single map\r\n * to represent the empty map.\r\n */\nconst EMPTY_ACTION_MAP = {};\n/**\r\n * This regular expression matches a semicolon.\r\n */\nconst REGEXP_SEMICOLON = /\\s*;\\s*/;\n/** If no event type is defined, defaults to `click`. */\nconst DEFAULT_EVENT_TYPE = EventType.CLICK;\n/** Resolves actions for Events. */\nclass ActionResolver {\n  a11yClickSupport = false;\n  clickModSupport = true;\n  syntheticMouseEventSupport;\n  updateEventInfoForA11yClick = undefined;\n  preventDefaultForA11yClick = undefined;\n  populateClickOnlyAction = undefined;\n  constructor({\n    syntheticMouseEventSupport = false,\n    clickModSupport = true\n  } = {}) {\n    this.syntheticMouseEventSupport = syntheticMouseEventSupport;\n    this.clickModSupport = clickModSupport;\n  }\n  resolveEventType(eventInfo) {\n    // We distinguish modified and plain clicks in order to support the\n    // default browser behavior of modified clicks on links; usually to\n    // open the URL of the link in new tab or new window on ctrl/cmd\n    // click. A DOM 'click' event is mapped to the jsaction 'click'\n    // event iff there is no modifier present on the event. If there is\n    // a modifier, it's mapped to 'clickmod' instead.\n    //\n    // It's allowed to omit the event in the jsaction attribute. In that\n    // case, 'click' is assumed. Thus the following two are equivalent:\n    //\n    //   <a href=\"someurl\" jsaction=\"gna.fu\">\n    //   <a href=\"someurl\" jsaction=\"click:gna.fu\">\n    //\n    // For unmodified clicks, EventContract invokes the jsaction\n    // 'gna.fu'. For modified clicks, EventContract won't find a\n    // suitable action and leave the event to be handled by the\n    // browser.\n    //\n    // In order to also invoke a jsaction handler for a modifier click,\n    // 'clickmod' needs to be used:\n    //\n    //   <a href=\"someurl\" jsaction=\"clickmod:gna.fu\">\n    //\n    // EventContract invokes the jsaction 'gna.fu' for modified\n    // clicks. Unmodified clicks are left to the browser.\n    //\n    // In order to set up the event contract to handle both clickonly and\n    // clickmod, only addEvent(EventType.CLICK) is necessary.\n    //\n    // In order to set up the event contract to handle click,\n    // addEvent() is necessary for CLICK, KEYDOWN, and KEYPRESS event types.  If\n    // a11y click support is enabled, addEvent() will set up the appropriate key\n    // event handler automatically.\n    if (this.clickModSupport && getEventType(eventInfo) === EventType.CLICK && isModifiedClickEvent(getEvent(eventInfo))) {\n      setEventType(eventInfo, EventType.CLICKMOD);\n    } else if (this.a11yClickSupport) {\n      this.updateEventInfoForA11yClick(eventInfo);\n    }\n  }\n  resolveAction(eventInfo) {\n    if (getResolved(eventInfo)) {\n      return;\n    }\n    this.populateAction(eventInfo, getTargetElement(eventInfo));\n    setResolved(eventInfo, true);\n  }\n  resolveParentAction(eventInfo) {\n    const action = getAction(eventInfo);\n    const actionElement = action && getActionElement(action);\n    unsetAction(eventInfo);\n    const parentNode = actionElement && this.getParentNode(actionElement);\n    if (!parentNode) {\n      return;\n    }\n    this.populateAction(eventInfo, parentNode);\n  }\n  /**\r\n   * Searches for a jsaction that the DOM event maps to and creates an\r\n   * object containing event information used for dispatching by\r\n   * jsaction.Dispatcher. This method populates the `action` and `actionElement`\r\n   * fields of the EventInfo object passed in by finding the first\r\n   * jsaction attribute above the target Node of the event, and below\r\n   * the container Node, that specifies a jsaction for the event\r\n   * type. If no such jsaction is found, then action is undefined.\r\n   *\r\n   * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\r\n   *    action is found on any `Element` in the path of the `Event`.\r\n   */\n  populateAction(eventInfo, currentTarget) {\n    let actionElement = currentTarget;\n    while (actionElement && actionElement !== getContainer(eventInfo)) {\n      if (actionElement.nodeType === Node.ELEMENT_NODE) {\n        this.populateActionOnElement(actionElement, eventInfo);\n      }\n      if (getAction(eventInfo)) {\n        // An event is handled by at most one jsaction. Thus we stop at the\n        // first matching jsaction specified in a jsaction attribute up the\n        // ancestor chain of the event target node.\n        break;\n      }\n      actionElement = this.getParentNode(actionElement);\n    }\n    const action = getAction(eventInfo);\n    if (!action) {\n      // No action found.\n      return;\n    }\n    if (this.a11yClickSupport) {\n      this.preventDefaultForA11yClick(eventInfo);\n    }\n    // We attempt to handle the mouseenter/mouseleave events here by\n    // detecting whether the mouseover/mouseout events correspond to\n    // entering/leaving an element.\n    if (this.syntheticMouseEventSupport) {\n      if (getEventType(eventInfo) === EventType.MOUSEENTER || getEventType(eventInfo) === EventType.MOUSELEAVE || getEventType(eventInfo) === EventType.POINTERENTER || getEventType(eventInfo) === EventType.POINTERLEAVE) {\n        // We attempt to handle the mouseenter/mouseleave events here by\n        // detecting whether the mouseover/mouseout events correspond to\n        // entering/leaving an element.\n        if (isMouseSpecialEvent(getEvent(eventInfo), getEventType(eventInfo), getActionElement(action))) {\n          // If both mouseover/mouseout and mouseenter/mouseleave events are\n          // enabled, two separate handlers for mouseover/mouseout are\n          // registered. Both handlers will see the same event instance\n          // so we create a copy to avoid interfering with the dispatching of\n          // the mouseover/mouseout event.\n          const copiedEvent = createMouseSpecialEvent(getEvent(eventInfo), getActionElement(action));\n          setEvent(eventInfo, copiedEvent);\n          // Since the mouseenter/mouseleave events do not bubble, the target\n          // of the event is technically the `actionElement` (the node with the\n          // `jsaction` attribute)\n          setTargetElement(eventInfo, getActionElement(action));\n        } else {\n          unsetAction(eventInfo);\n        }\n      }\n    }\n  }\n  /**\r\n   * Walk to the parent node, unless the node has a different owner in\r\n   * which case we walk to the owner. Attempt to walk to host of a\r\n   * shadow root if needed.\r\n   */\n  getParentNode(element) {\n    const owner = element[Property.OWNER];\n    if (owner) {\n      return owner;\n    }\n    const parentNode = element.parentNode;\n    if (parentNode?.nodeName === '#document-fragment') {\n      return parentNode?.host ?? null;\n    }\n    return parentNode;\n  }\n  /**\r\n   * Accesses the jsaction map on a node and retrieves the name of the\r\n   * action the given event is mapped to, if any. It parses the\r\n   * attribute value and stores it in a property on the node for\r\n   * subsequent retrieval without re-parsing and re-accessing the\r\n   * attribute.\r\n   *\r\n   * @param actionElement The DOM node to retrieve the jsaction map from.\r\n   * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\r\n   *    action is found on the `actionElement`.\r\n   */\n  populateActionOnElement(actionElement, eventInfo) {\n    const actionMap = this.parseActions(actionElement);\n    const actionName = actionMap[getEventType(eventInfo)];\n    if (actionName !== undefined) {\n      setAction(eventInfo, actionName, actionElement);\n    }\n    if (this.a11yClickSupport) {\n      this.populateClickOnlyAction(actionElement, eventInfo, actionMap);\n    }\n  }\n  /**\r\n   * Parses and caches an element's jsaction element into a map.\r\n   *\r\n   * This is primarily for internal use.\r\n   *\r\n   * @param actionElement The DOM node to retrieve the jsaction map from.\r\n   * @return Map from event to qualified name of the jsaction bound to it.\r\n   */\n  parseActions(actionElement) {\n    let actionMap = get(actionElement);\n    if (!actionMap) {\n      const jsactionAttribute = actionElement.getAttribute(Attribute.JSACTION);\n      if (!jsactionAttribute) {\n        actionMap = EMPTY_ACTION_MAP;\n        set(actionElement, actionMap);\n      } else {\n        actionMap = getParsed(jsactionAttribute);\n        if (!actionMap) {\n          actionMap = {};\n          const values = jsactionAttribute.split(REGEXP_SEMICOLON);\n          for (let idx = 0; idx < values.length; idx++) {\n            const value = values[idx];\n            if (!value) {\n              continue;\n            }\n            const colon = value.indexOf(Char.EVENT_ACTION_SEPARATOR);\n            const hasColon = colon !== -1;\n            const type = hasColon ? value.substr(0, colon).trim() : DEFAULT_EVENT_TYPE;\n            const action = hasColon ? value.substr(colon + 1).trim() : value;\n            actionMap[type] = action;\n          }\n          setParsed(jsactionAttribute, actionMap);\n        }\n        set(actionElement, actionMap);\n      }\n    }\n    return actionMap;\n  }\n  addA11yClickSupport(updateEventInfoForA11yClick, preventDefaultForA11yClick, populateClickOnlyAction) {\n    this.a11yClickSupport = true;\n    this.updateEventInfoForA11yClick = updateEventInfoForA11yClick;\n    this.preventDefaultForA11yClick = preventDefaultForA11yClick;\n    this.populateClickOnlyAction = populateClickOnlyAction;\n  }\n}\n\n/**\r\n * @fileoverview An enum to control who can call certain jsaction APIs.\r\n */\nvar Restriction;\n(function (Restriction) {\n  Restriction[Restriction[\"I_AM_THE_JSACTION_FRAMEWORK\"] = 0] = \"I_AM_THE_JSACTION_FRAMEWORK\";\n})(Restriction || (Restriction = {}));\n\n/**\r\n * Receives a DOM event, determines the jsaction associated with the source\r\n * element of the DOM event, and invokes the handler associated with the\r\n * jsaction.\r\n */\nclass Dispatcher {\n  dispatchDelegate;\n  // The ActionResolver to use to resolve actions.\n  actionResolver;\n  /** The replayer function to be called when there are queued events. */\n  eventReplayer;\n  /** Whether the event replay is scheduled. */\n  eventReplayScheduled = false;\n  /** The queue of events. */\n  replayEventInfoWrappers = [];\n  /**\r\n   * Options are:\r\n   *   - `eventReplayer`: When the event contract dispatches replay events\r\n   *      to the Dispatcher, the Dispatcher collects them and in the next tick\r\n   *      dispatches them to the `eventReplayer`. Defaults to dispatching to `dispatchDelegate`.\r\n   * @param dispatchDelegate A function that should handle dispatching an `EventInfoWrapper` to handlers.\r\n   */\n  constructor(dispatchDelegate, {\n    actionResolver,\n    eventReplayer\n  } = {}) {\n    this.dispatchDelegate = dispatchDelegate;\n    this.actionResolver = actionResolver;\n    this.eventReplayer = eventReplayer;\n  }\n  /**\r\n   * Receives an event or the event queue from the EventContract. The event\r\n   * queue is copied and it attempts to replay.\r\n   * If event info is passed in it looks for an action handler that can handle\r\n   * the given event.  If there is no handler registered queues the event and\r\n   * checks if a loader is registered for the given namespace. If so, calls it.\r\n   *\r\n   * Alternatively, if in global dispatch mode, calls all registered global\r\n   * handlers for the appropriate event type.\r\n   *\r\n   * The three functionalities of this call are deliberately not split into\r\n   * three methods (and then declared as an abstract interface), because the\r\n   * interface is used by EventContract, which lives in a different jsbinary.\r\n   * Therefore the interface between the three is defined entirely in terms that\r\n   * are invariant under jscompiler processing (Function and Array, as opposed\r\n   * to a custom type with method names).\r\n   *\r\n   * @param eventInfo The info for the event that triggered this call or the\r\n   *     queue of events from EventContract.\r\n   */\n  dispatch(eventInfo) {\n    const eventInfoWrapper = new EventInfoWrapper(eventInfo);\n    this.actionResolver?.resolveEventType(eventInfo);\n    this.actionResolver?.resolveAction(eventInfo);\n    const action = eventInfoWrapper.getAction();\n    if (action && shouldPreventDefaultBeforeDispatching(action.element, eventInfoWrapper)) {\n      preventDefault(eventInfoWrapper.getEvent());\n    }\n    if (this.eventReplayer && eventInfoWrapper.getIsReplay()) {\n      this.scheduleEventInfoWrapperReplay(eventInfoWrapper);\n      return;\n    }\n    this.dispatchDelegate(eventInfoWrapper);\n  }\n  /**\r\n   * Schedules an `EventInfoWrapper` for replay. The replaying will happen in its own\r\n   * stack once the current flow cedes control. This is done to mimic\r\n   * browser event handling.\r\n   */\n  scheduleEventInfoWrapperReplay(eventInfoWrapper) {\n    this.replayEventInfoWrappers.push(eventInfoWrapper);\n    if (this.eventReplayScheduled) {\n      return;\n    }\n    this.eventReplayScheduled = true;\n    Promise.resolve().then(() => {\n      this.eventReplayScheduled = false;\n      this.eventReplayer(this.replayEventInfoWrappers);\n    });\n  }\n}\n/**\r\n * Returns true if the default action of this event should be prevented before\r\n * this event is dispatched.\r\n */\nfunction shouldPreventDefaultBeforeDispatching(actionElement, eventInfoWrapper) {\n  // Prevent browser from following <a> node links if a jsaction is present\n  // and we are dispatching the action now. Note that the targetElement may be\n  // a child of an anchor that has a jsaction attached. For that reason, we\n  // need to check the actionElement rather than the targetElement.\n  return actionElement.tagName === 'A' && (eventInfoWrapper.getEventType() === EventType.CLICK || eventInfoWrapper.getEventType() === EventType.CLICKMOD);\n}\n\n/** An internal symbol used to indicate whether propagation should be stopped or not. */\nconst PROPAGATION_STOPPED_SYMBOL = /* @__PURE__ */Symbol.for('propagationStopped');\n/** Extra event phases beyond what the browser provides. */\nconst EventPhase = {\n  REPLAY: 101\n};\nconst PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS = ' Because event replay occurs after browser dispatch, `preventDefault` would have no ' + 'effect. You can check whether an event is being replayed by accessing the event phase: ' + '`event.eventPhase === EventPhase.REPLAY`.';\nconst PREVENT_DEFAULT_ERROR_MESSAGE = `\\`preventDefault\\` called during event replay.`;\nconst COMPOSED_PATH_ERROR_MESSAGE_DETAILS = ' Because event replay occurs after browser ' + 'dispatch, `composedPath()` will be empty. Iterate parent nodes from `event.target` or ' + '`event.currentTarget` if you need to check elements in the event path.';\nconst COMPOSED_PATH_ERROR_MESSAGE = `\\`composedPath\\` called during event replay.`;\n/**\r\n * A dispatcher that uses browser-based `Event` semantics, for example bubbling, `stopPropagation`,\r\n * `currentTarget`, etc.\r\n */\nclass EventDispatcher {\n  dispatchDelegate;\n  clickModSupport;\n  actionResolver;\n  dispatcher;\n  constructor(dispatchDelegate, clickModSupport = true) {\n    this.dispatchDelegate = dispatchDelegate;\n    this.clickModSupport = clickModSupport;\n    this.actionResolver = new ActionResolver({\n      clickModSupport\n    });\n    this.dispatcher = new Dispatcher(eventInfoWrapper => {\n      this.dispatchToDelegate(eventInfoWrapper);\n    }, {\n      actionResolver: this.actionResolver\n    });\n  }\n  /**\r\n   * The entrypoint for the `EventContract` dispatch.\r\n   */\n  dispatch(eventInfo) {\n    this.dispatcher.dispatch(eventInfo);\n  }\n  /** Internal method that does basic disaptching. */\n  dispatchToDelegate(eventInfoWrapper) {\n    if (eventInfoWrapper.getIsReplay()) {\n      prepareEventForReplay(eventInfoWrapper);\n    }\n    prepareEventForBubbling(eventInfoWrapper);\n    while (eventInfoWrapper.getAction()) {\n      prepareEventForDispatch(eventInfoWrapper);\n      // If this is a capture event, ONLY dispatch if the action element is the target.\n      if (isCaptureEventType(eventInfoWrapper.getEventType()) && eventInfoWrapper.getAction().element !== eventInfoWrapper.getTargetElement()) {\n        return;\n      }\n      this.dispatchDelegate(eventInfoWrapper.getEvent(), eventInfoWrapper.getAction().name);\n      if (propagationStopped(eventInfoWrapper)) {\n        return;\n      }\n      this.actionResolver.resolveParentAction(eventInfoWrapper.eventInfo);\n    }\n  }\n}\nfunction prepareEventForBubbling(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  const originalStopPropagation = eventInfoWrapper.getEvent().stopPropagation.bind(event);\n  const stopPropagation = () => {\n    event[PROPAGATION_STOPPED_SYMBOL] = true;\n    originalStopPropagation();\n  };\n  patchEventInstance(event, 'stopPropagation', stopPropagation);\n  patchEventInstance(event, 'stopImmediatePropagation', stopPropagation);\n}\nfunction propagationStopped(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  return !!event[PROPAGATION_STOPPED_SYMBOL];\n}\nfunction prepareEventForReplay(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  const target = eventInfoWrapper.getTargetElement();\n  const originalPreventDefault = event.preventDefault.bind(event);\n  patchEventInstance(event, 'target', target);\n  patchEventInstance(event, 'eventPhase', EventPhase.REPLAY);\n  patchEventInstance(event, 'preventDefault', () => {\n    originalPreventDefault();\n    throw new Error(PREVENT_DEFAULT_ERROR_MESSAGE + (ngDevMode ? PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS : ''));\n  });\n  patchEventInstance(event, 'composedPath', () => {\n    throw new Error(COMPOSED_PATH_ERROR_MESSAGE + (ngDevMode ? COMPOSED_PATH_ERROR_MESSAGE_DETAILS : ''));\n  });\n}\nfunction prepareEventForDispatch(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  const currentTarget = eventInfoWrapper.getAction()?.element;\n  if (currentTarget) {\n    patchEventInstance(event, 'currentTarget', currentTarget, {\n      // `currentTarget` is going to get reassigned every dispatch.\n      configurable: true\n    });\n  }\n}\n/**\r\n * Patch `Event` instance during non-standard `Event` dispatch. This patches just the `Event`\r\n * instance that the browser created, it does not patch global properties or methods.\r\n *\r\n * This is necessary because dispatching an `Event` outside of browser dispatch results in\r\n * incorrect properties and methods that need to be polyfilled or do not work.\r\n *\r\n * JSAction dispatch adds two extra \"phases\" to event dispatch:\r\n * 1. Event delegation - the event is being dispatched by a delegating event handler on a container\r\n *    (typically `window.document.documentElement`), to a delegated event handler on some child\r\n *    element. Certain `Event` properties will be unintuitive, such as `currentTarget`, which would\r\n *    be the container rather than the child element. Bubbling would also not work. In order to\r\n *    emulate the browser, these properties and methods on the `Event` are patched.\r\n * 2. Event replay - the event is being dispatched by the framework once the handlers have been\r\n *    loaded (during hydration, or late-loaded). Certain `Event` properties can be unset by the\r\n *    browser because the `Event` is no longer actively being dispatched, such as `target`. Other\r\n *    methods have no effect because the `Event` has already been dispatched, such as\r\n *    `preventDefault`. Bubbling would also not work. These properties and methods are patched,\r\n *    either to fill in information that the browser may have removed, or to throw errors in methods\r\n *    that no longer behave as expected.\r\n */\nfunction patchEventInstance(event, property, value, {\n  configurable = false\n} = {}) {\n  Object.defineProperty(event, property, {\n    value,\n    configurable\n  });\n}\n/**\r\n * Registers deferred functionality for an EventContract and a Jsaction\r\n * Dispatcher.\r\n */\nfunction registerDispatcher$1(eventContract, dispatcher) {\n  eventContract.ecrd(eventInfo => {\n    dispatcher.dispatch(eventInfo);\n  }, Restriction.I_AM_THE_JSACTION_FRAMEWORK);\n}\n\n/** Creates an `EarlyJsactionData` object. */\nfunction createEarlyJsactionData(container) {\n  const q = [];\n  const d = eventInfo => {\n    q.push(eventInfo);\n  };\n  const h = event => {\n    d(createEventInfoFromParameters(event.type, event, event.target, container, Date.now()));\n  };\n  return {\n    c: container,\n    q,\n    et: [],\n    etc: [],\n    d,\n    h\n  };\n}\n/** Add all the events to the container stored in the `EarlyJsactionData`. */\nfunction addEvents(earlyJsactionData, types, capture) {\n  for (let i = 0; i < types.length; i++) {\n    const eventType = types[i];\n    const eventTypes = capture ? earlyJsactionData.etc : earlyJsactionData.et;\n    eventTypes.push(eventType);\n    earlyJsactionData.c.addEventListener(eventType, earlyJsactionData.h, capture);\n  }\n}\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\nfunction getQueuedEventInfos(earlyJsactionData) {\n  return earlyJsactionData?.q ?? [];\n}\n/** Register a different dispatcher function on the `EarlyJsactionData`. */\nfunction registerDispatcher(earlyJsactionData, dispatcher) {\n  if (!earlyJsactionData) {\n    return;\n  }\n  earlyJsactionData.d = dispatcher;\n}\n/** Removes all event listener handlers. */\nfunction removeAllEventListeners(earlyJsactionData) {\n  if (!earlyJsactionData) {\n    return;\n  }\n  removeEventListeners(earlyJsactionData.c, earlyJsactionData.et, earlyJsactionData.h);\n  removeEventListeners(earlyJsactionData.c, earlyJsactionData.etc, earlyJsactionData.h, true);\n}\nfunction removeEventListeners(container, eventTypes, earlyEventHandler, capture) {\n  for (let i = 0; i < eventTypes.length; i++) {\n    container.removeEventListener(eventTypes[i], earlyEventHandler, /* useCapture */capture);\n  }\n}\n\n/**\r\n * @define Support for the non-bubbling mouseenter and mouseleave events.  This\r\n * flag can be overridden in a build rule.\r\n */\nconst MOUSE_SPECIAL_SUPPORT = false;\n\n/**\r\n * @fileoverview Implements the local event handling contract. This\r\n * allows DOM objects in a container that enters into this contract to\r\n * define event handlers which are executed in a local context.\r\n *\r\n * One EventContract instance can manage the contract for multiple\r\n * containers, which are added using the addContainer() method.\r\n *\r\n * Events can be registered using the addEvent() method.\r\n *\r\n * A Dispatcher is added using the registerDispatcher() method. Until there is\r\n * a dispatcher, events are queued. The idea is that the EventContract\r\n * class is inlined in the HTML of the top level page and instantiated\r\n * right after the start of <body>. The Dispatcher class is contained\r\n * in the external deferred js, and instantiated and registered with\r\n * EventContract when the external javascript in the page loads. The\r\n * external javascript will also register the jsaction handlers, which\r\n * then pick up the queued events at the time of registration.\r\n *\r\n * Since this class is meant to be inlined in the main page HTML, the\r\n * size of the binary compiled from this file MUST be kept as small as\r\n * possible and thus its dependencies to a minimum.\r\n */\n/**\r\n * EventContract intercepts events in the bubbling phase at the\r\n * boundary of a container element, and maps them to generic actions\r\n * which are specified using the custom jsaction attribute in\r\n * HTML. Behavior of the application is then specified in terms of\r\n * handler for such actions, cf. jsaction.Dispatcher in dispatcher.js.\r\n *\r\n * This has several benefits: (1) No DOM event handlers need to be\r\n * registered on the specific elements in the UI. (2) The set of\r\n * events that the application has to handle can be specified in terms\r\n * of the semantics of the application, rather than in terms of DOM\r\n * events. (3) Invocation of handlers can be delayed and handlers can\r\n * be delay loaded in a generic way.\r\n */\nclass EventContract {\n  static MOUSE_SPECIAL_SUPPORT = MOUSE_SPECIAL_SUPPORT;\n  containerManager;\n  /**\r\n   * The DOM events which this contract covers. Used to prevent double\r\n   * registration of event types. The value of the map is the\r\n   * internally created DOM event handler function that handles the\r\n   * DOM events. See addEvent().\r\n   *\r\n   */\n  eventHandlers = {};\n  browserEventTypeToExtraEventTypes = {};\n  /**\r\n   * The dispatcher function. Events are passed to this function for\r\n   * handling once it was set using the registerDispatcher() method. This is\r\n   * done because the function is passed from another jsbinary, so passing the\r\n   * instance and invoking the method here would require to leave the method\r\n   * unobfuscated.\r\n   */\n  dispatcher = null;\n  /**\r\n   * The list of suspended `EventInfo` that will be dispatched\r\n   * as soon as the `Dispatcher` is registered.\r\n   */\n  queuedEventInfos = [];\n  constructor(containerManager) {\n    this.containerManager = containerManager;\n  }\n  handleEvent(eventType, event, container) {\n    const eventInfo = createEventInfoFromParameters(/* eventType= */eventType, /* event= */event, /* targetElement= */event.target, /* container= */container, /* timestamp= */Date.now());\n    this.handleEventInfo(eventInfo);\n  }\n  /**\r\n   * Handle an `EventInfo`.\r\n   */\n  handleEventInfo(eventInfo) {\n    if (!this.dispatcher) {\n      // All events are queued when the dispatcher isn't yet loaded.\n      setIsReplay(eventInfo, true);\n      this.queuedEventInfos?.push(eventInfo);\n      return;\n    }\n    this.dispatcher(eventInfo);\n  }\n  /**\r\n   * Enables jsaction handlers to be called for the event type given by\r\n   * name.\r\n   *\r\n   * If the event is already registered, this does nothing.\r\n   *\r\n   * @param prefixedEventType If supplied, this event is used in\r\n   *     the actual browser event registration instead of the name that is\r\n   *     exposed to jsaction. Use this if you e.g. want users to be able\r\n   *     to subscribe to jsaction=\"transitionEnd:foo\" while the underlying\r\n   *     event is webkitTransitionEnd in one browser and mozTransitionEnd\r\n   *     in another.\r\n   *\r\n   * @param passive A boolean value that, if `true`, indicates that the event\r\n   *     handler will never call `preventDefault()`.\r\n   */\n  addEvent(eventType, prefixedEventType, passive) {\n    if (eventType in this.eventHandlers || !this.containerManager) {\n      return;\n    }\n    if (!EventContract.MOUSE_SPECIAL_SUPPORT && MOUSE_SPECIAL_EVENT_TYPES.indexOf(eventType) >= 0) {\n      return;\n    }\n    const eventHandler = (eventType, event, container) => {\n      this.handleEvent(eventType, event, container);\n    };\n    // Store the callback to allow us to replay events.\n    this.eventHandlers[eventType] = eventHandler;\n    const browserEventType = getBrowserEventType(prefixedEventType || eventType);\n    if (browserEventType !== eventType) {\n      const eventTypes = this.browserEventTypeToExtraEventTypes[browserEventType] || [];\n      eventTypes.push(eventType);\n      this.browserEventTypeToExtraEventTypes[browserEventType] = eventTypes;\n    }\n    this.containerManager.addEventListener(browserEventType, element => {\n      return event => {\n        eventHandler(eventType, event, element);\n      };\n    }, passive);\n  }\n  /**\r\n   * Gets the queued early events and replay them using the appropriate handler\r\n   * in the provided event contract. Once all the events are replayed, it cleans\r\n   * up the early contract.\r\n   */\n  replayEarlyEvents(earlyJsactionData = window._ejsa) {\n    // Check if the early contract is present and prevent calling this function\n    // more than once.\n    if (!earlyJsactionData) {\n      return;\n    }\n    // Replay the early contract events.\n    this.replayEarlyEventInfos(earlyJsactionData.q);\n    // Clean up the early contract.\n    removeAllEventListeners(earlyJsactionData);\n    delete window._ejsa;\n  }\n  /**\r\n   * Replays all the early `EventInfo` objects, dispatching them through the normal\r\n   * `EventContract` flow.\r\n   */\n  replayEarlyEventInfos(earlyEventInfos) {\n    for (let i = 0; i < earlyEventInfos.length; i++) {\n      const earlyEventInfo = earlyEventInfos[i];\n      const eventTypes = this.getEventTypesForBrowserEventType(earlyEventInfo.eventType);\n      for (let j = 0; j < eventTypes.length; j++) {\n        const eventInfo = cloneEventInfo(earlyEventInfo);\n        // EventInfo eventType maps to JSAction's internal event type,\n        // rather than the browser event type.\n        setEventType(eventInfo, eventTypes[j]);\n        this.handleEventInfo(eventInfo);\n      }\n    }\n  }\n  /**\r\n   * Returns all JSAction event types that have been registered for a given\r\n   * browser event type.\r\n   */\n  getEventTypesForBrowserEventType(browserEventType) {\n    const eventTypes = [];\n    if (this.eventHandlers[browserEventType]) {\n      eventTypes.push(browserEventType);\n    }\n    if (this.browserEventTypeToExtraEventTypes[browserEventType]) {\n      eventTypes.push(...this.browserEventTypeToExtraEventTypes[browserEventType]);\n    }\n    return eventTypes;\n  }\n  /**\r\n   * Returns the event handler function for a given event type.\r\n   */\n  handler(eventType) {\n    return this.eventHandlers[eventType];\n  }\n  /**\r\n   * Cleans up the event contract. This resets all of the `EventContract`'s\r\n   * internal state. Users are responsible for not using this `EventContract`\r\n   * after it has been cleaned up.\r\n   */\n  cleanUp() {\n    this.containerManager?.cleanUp();\n    this.containerManager = null;\n    this.eventHandlers = {};\n    this.browserEventTypeToExtraEventTypes = {};\n    this.dispatcher = null;\n    this.queuedEventInfos = [];\n  }\n  /**\r\n   * Register a dispatcher function. Event info of each event mapped to\r\n   * a jsaction is passed for handling to this callback. The queued\r\n   * events are passed as well to the dispatcher for later replaying\r\n   * once the dispatcher is registered. Clears the event queue to null.\r\n   *\r\n   * @param dispatcher The dispatcher function.\r\n   * @param restriction\r\n   */\n  registerDispatcher(dispatcher, restriction) {\n    this.ecrd(dispatcher, restriction);\n  }\n  /**\r\n   * Unrenamed alias for registerDispatcher. Necessary for any codebases that\r\n   * split the `EventContract` and `Dispatcher` code into different compilation\r\n   * units.\r\n   */\n  ecrd(dispatcher, restriction) {\n    this.dispatcher = dispatcher;\n    if (this.queuedEventInfos?.length) {\n      for (let i = 0; i < this.queuedEventInfos.length; i++) {\n        this.handleEventInfo(this.queuedEventInfos[i]);\n      }\n      this.queuedEventInfos = null;\n    }\n  }\n}\n\n/**\r\n * Creates an `EarlyJsactionData`, adds events to it, and populates it on a nested object on\r\n * the window.\r\n */\nfunction bootstrapAppScopedEarlyEventContract(container, appId, bubbleEventTypes, captureEventTypes, dataContainer = window) {\n  const earlyJsactionData = createEarlyJsactionData(container);\n  if (!dataContainer._ejsas) {\n    dataContainer._ejsas = {};\n  }\n  dataContainer._ejsas[appId] = earlyJsactionData;\n  addEvents(earlyJsactionData, bubbleEventTypes);\n  addEvents(earlyJsactionData, captureEventTypes, /* capture= */true);\n}\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\nfunction getAppScopedQueuedEventInfos(appId, dataContainer = window) {\n  return getQueuedEventInfos(dataContainer._ejsas?.[appId]);\n}\n/**\r\n * Registers a dispatcher function on the `EarlyJsactionData` present on the nested object on the\r\n * window.\r\n */\nfunction registerAppScopedDispatcher(restriction, appId, dispatcher, dataContainer = window) {\n  registerDispatcher(dataContainer._ejsas?.[appId], dispatcher);\n}\n/** Removes all event listener handlers. */\nfunction removeAllAppScopedEventListeners(appId, dataContainer = window) {\n  removeAllEventListeners(dataContainer._ejsas?.[appId]);\n}\n/** Clear the early event contract. */\nfunction clearAppScopedEarlyEventContract(appId, dataContainer = window) {\n  if (!dataContainer._ejsas) {\n    return;\n  }\n  dataContainer._ejsas[appId] = undefined;\n}\nexport { Attribute, EventContract, EventContractContainer, EventDispatcher, EventInfoWrapper, EventPhase, bootstrapAppScopedEarlyEventContract, clearAppScopedEarlyEventContract, getDefaulted as getActionCache, getAppScopedQueuedEventInfos, isCaptureEventType, isEarlyEventType, registerAppScopedDispatcher, registerDispatcher$1 as registerDispatcher, removeAllAppScopedEventListeners };","map":{"version":3,"names":["Attribute","Property","JSACTION","OWNER","parseCache","get","element","getDefaulted","cache","set","actionMap","getParsed","text","setParsed","parsed","EventType","AUXCLICK","CHANGE","CLICK","CLICKMOD","CLICKONLY","DBLCLICK","FOCUS","FOCUSIN","BLUR","FOCUSOUT","SUBMIT","KEYDOWN","KEYPRESS","KEYUP","MOUSEUP","MOUSEDOWN","MOUSEOVER","MOUSEOUT","MOUSEENTER","MOUSELEAVE","MOUSEMOVE","POINTERUP","POINTERDOWN","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERMOVE","POINTERCANCEL","GOTPOINTERCAPTURE","LOSTPOINTERCAPTURE","ERROR","LOAD","UNLOAD","TOUCHSTART","TOUCHEND","TOUCHMOVE","INPUT","SCROLL","TOGGLE","CUSTOM","MOUSE_SPECIAL_EVENT_TYPES","BUBBLE_EVENT_TYPES","CAPTURE_EVENT_TYPES","isCaptureEventType","eventType","indexOf","EARLY_EVENT_TYPES","concat","isEarlyEventType","getBrowserEventType","addEventListener","handler","passive","capture","options","removeEventListener","info","detachEvent","preventDefault","e","returnValue","isMac","navigator","test","userAgent","isMiddleClick","which","button","isModifiedClickEvent","metaKey","ctrlKey","shiftKey","isMouseSpecialEvent","type","related","relatedTarget","contains","createMouseSpecialEvent","target","copy","property","key","value","isIos","EventContractContainer","handlerInfos","constructor","getHandler","style","cursor","push","cleanUp","i","length","Char","NAMESPACE_ACTION_SEPARATOR","EVENT_ACTION_SEPARATOR","getEventType","eventInfo","setEventType","getEvent","event","setEvent","getTargetElement","targetElement","setTargetElement","getContainer","eic","setContainer","container","getTimestamp","timeStamp","setTimestamp","timestamp","getAction","eia","setAction","actionName","actionElement","unsetAction","undefined","getActionElement","actionInfo","getIsReplay","eirp","setIsReplay","replay","getResolved","eir","setResolved","resolved","cloneEventInfo","eiack","createEventInfoFromParameters","action","isReplay","a11yClickKey","EventInfoWrapper","name","clone","EMPTY_ACTION_MAP","REGEXP_SEMICOLON","DEFAULT_EVENT_TYPE","ActionResolver","a11yClickSupport","clickModSupport","syntheticMouseEventSupport","updateEventInfoForA11yClick","preventDefaultForA11yClick","populateClickOnlyAction","resolveEventType","resolveAction","populateAction","resolveParentAction","parentNode","getParentNode","currentTarget","nodeType","Node","ELEMENT_NODE","populateActionOnElement","copiedEvent","owner","nodeName","host","parseActions","jsactionAttribute","getAttribute","values","split","idx","colon","hasColon","substr","trim","addA11yClickSupport","Restriction","Dispatcher","dispatchDelegate","actionResolver","eventReplayer","eventReplayScheduled","replayEventInfoWrappers","dispatch","eventInfoWrapper","shouldPreventDefaultBeforeDispatching","scheduleEventInfoWrapperReplay","Promise","resolve","then","tagName","PROPAGATION_STOPPED_SYMBOL","Symbol","for","EventPhase","REPLAY","PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS","PREVENT_DEFAULT_ERROR_MESSAGE","COMPOSED_PATH_ERROR_MESSAGE_DETAILS","COMPOSED_PATH_ERROR_MESSAGE","EventDispatcher","dispatcher","dispatchToDelegate","prepareEventForReplay","prepareEventForBubbling","prepareEventForDispatch","propagationStopped","originalStopPropagation","stopPropagation","bind","patchEventInstance","originalPreventDefault","Error","ngDevMode","configurable","Object","defineProperty","registerDispatcher$1","eventContract","ecrd","I_AM_THE_JSACTION_FRAMEWORK","createEarlyJsactionData","q","d","h","Date","now","c","et","etc","addEvents","earlyJsactionData","types","eventTypes","getQueuedEventInfos","registerDispatcher","removeAllEventListeners","removeEventListeners","earlyEventHandler","MOUSE_SPECIAL_SUPPORT","EventContract","containerManager","eventHandlers","browserEventTypeToExtraEventTypes","queuedEventInfos","handleEvent","handleEventInfo","addEvent","prefixedEventType","eventHandler","browserEventType","replayEarlyEvents","window","_ejsa","replayEarlyEventInfos","earlyEventInfos","earlyEventInfo","getEventTypesForBrowserEventType","j","restriction","bootstrapAppScopedEarlyEventContract","appId","bubbleEventTypes","captureEventTypes","dataContainer","_ejsas","getAppScopedQueuedEventInfos","registerAppScopedDispatcher","removeAllAppScopedEventListeners","clearAppScopedEarlyEventContract","getActionCache"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/core/fesm2022/primitives/event-dispatch.mjs"],"sourcesContent":["/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { Attribute } from '../attribute.mjs';\r\n\r\n/** All properties that are used by jsaction. */\r\nconst Property = {\r\n    /**\r\n     * The parsed value of the jsaction attribute is stored in this\r\n     * property on the DOM node. The parsed value is an Object. The\r\n     * property names of the object are the events; the values are the\r\n     * names of the actions. This property is attached even on nodes\r\n     * that don't have a jsaction attribute as an optimization, because\r\n     * property lookup is faster than attribute access.\r\n     */\r\n    JSACTION: '__jsaction',\r\n    /**\r\n     * The owner property references an a logical owner for a DOM node. JSAction\r\n     * will follow this reference instead of parentNode when traversing the DOM\r\n     * to find jsaction attributes. This allows overlaying a logical structure\r\n     * over a document where the DOM structure can't reflect that structure.\r\n     */\r\n    OWNER: '__owner',\r\n};\r\n\r\n/**\r\n * Map from jsaction annotation to a parsed map from event name to action name.\r\n */\r\nconst parseCache = {};\r\n/**\r\n * Reads the jsaction parser cache from the given DOM Element.\r\n */\r\nfunction get(element) {\r\n    return element[Property.JSACTION];\r\n}\r\n/**\r\n * Reads the jsaction parser cache for the given DOM element. If no cache is yet present,\r\n * creates an empty one.\r\n */\r\nfunction getDefaulted(element) {\r\n    const cache = get(element) ?? {};\r\n    set(element, cache);\r\n    return cache;\r\n}\r\n/**\r\n * Writes the jsaction parser cache to the given DOM Element.\r\n */\r\nfunction set(element, actionMap) {\r\n    element[Property.JSACTION] = actionMap;\r\n}\r\n/**\r\n * Looks up the parsed action map from the source jsaction attribute value.\r\n *\r\n * @param text Unparsed jsaction attribute value.\r\n * @return Parsed jsaction attribute value, if already present in the cache.\r\n */\r\nfunction getParsed(text) {\r\n    return parseCache[text];\r\n}\r\n/**\r\n * Inserts the parse result for the given source jsaction value into the cache.\r\n *\r\n * @param text Unparsed jsaction attribute value.\r\n * @param parsed Attribute value parsed into the action map.\r\n */\r\nfunction setParsed(text, parsed) {\r\n    parseCache[text] = parsed;\r\n}\r\n\r\n/*\r\n * Names of events that are special to jsaction. These are not all\r\n * event types that are legal to use in either HTML or the addEvent()\r\n * API, but these are the ones that are treated specially. All other\r\n * DOM events can be used in either addEvent() or in the value of the\r\n * jsaction attribute. Beware of browser specific events or events\r\n * that don't bubble though: If they are not mentioned here, then\r\n * event contract doesn't work around their peculiarities.\r\n */\r\nconst EventType = {\r\n    /**\r\n     * Mouse middle click, introduced in Chrome 55 and not yet supported on\r\n     * other browsers.\r\n     */\r\n    AUXCLICK: 'auxclick',\r\n    /**\r\n     * The change event fired by browsers when the `value` attribute of input,\r\n     * select, and textarea elements are changed.\r\n     */\r\n    CHANGE: 'change',\r\n    /**\r\n     * The click event. In addEvent() refers to all click events, in the\r\n     * jsaction attribute it refers to the unmodified click and Enter/Space\r\n     * keypress events.  In the latter case, a jsaction click will be triggered,\r\n     * for accessibility reasons.  See clickmod and clickonly, below.\r\n     */\r\n    CLICK: 'click',\r\n    /**\r\n     * Specifies the jsaction for a modified click event (i.e. a mouse\r\n     * click with the modifier key Cmd/Ctrl pressed). This event isn't\r\n     * separately enabled in addEvent(), because in the DOM, it's just a\r\n     * click event.\r\n     */\r\n    CLICKMOD: 'clickmod',\r\n    /**\r\n     * Specifies the jsaction for a click-only event.  Click-only doesn't take\r\n     * into account the case where an element with focus receives an Enter/Space\r\n     * keypress.  This event isn't separately enabled in addEvent().\r\n     */\r\n    CLICKONLY: 'clickonly',\r\n    /**\r\n     * The dblclick event.\r\n     */\r\n    DBLCLICK: 'dblclick',\r\n    /**\r\n     * Focus doesn't bubble, but you can use it in addEvent() and\r\n     * jsaction anyway. EventContract does the right thing under the\r\n     * hood.\r\n     */\r\n    FOCUS: 'focus',\r\n    /**\r\n     * This event only exists in IE. For addEvent() and jsaction, use\r\n     * focus instead; EventContract does the right thing even though\r\n     * focus doesn't bubble.\r\n     */\r\n    FOCUSIN: 'focusin',\r\n    /**\r\n     * Analog to focus.\r\n     */\r\n    BLUR: 'blur',\r\n    /**\r\n     * Analog to focusin.\r\n     */\r\n    FOCUSOUT: 'focusout',\r\n    /**\r\n     * Submit doesn't bubble, so it cannot be used with event\r\n     * contract. However, the browser helpfully fires a click event on\r\n     * the submit button of a form (even if the form is not submitted by\r\n     * a click on the submit button). So you should handle click on the\r\n     * submit button instead.\r\n     */\r\n    SUBMIT: 'submit',\r\n    /**\r\n     * The keydown event. In addEvent() and non-click jsaction it represents the\r\n     * regular DOM keydown event. It represents click actions in non-Gecko\r\n     * browsers.\r\n     */\r\n    KEYDOWN: 'keydown',\r\n    /**\r\n     * The keypress event. In addEvent() and non-click jsaction it represents the\r\n     * regular DOM keypress event. It represents click actions in Gecko browsers.\r\n     */\r\n    KEYPRESS: 'keypress',\r\n    /**\r\n     * The keyup event. In addEvent() and non-click jsaction it represents the\r\n     * regular DOM keyup event. It represents click actions in non-Gecko\r\n     * browsers.\r\n     */\r\n    KEYUP: 'keyup',\r\n    /**\r\n     * The mouseup event. Can either be used directly or used implicitly to\r\n     * capture mouseup events. In addEvent(), it represents a regular DOM\r\n     * mouseup event.\r\n     */\r\n    MOUSEUP: 'mouseup',\r\n    /**\r\n     * The mousedown event. Can either be used directly or used implicitly to\r\n     * capture mouseenter events. In addEvent(), it represents a regular DOM\r\n     * mouseover event.\r\n     */\r\n    MOUSEDOWN: 'mousedown',\r\n    /**\r\n     * The mouseover event. Can either be used directly or used implicitly to\r\n     * capture mouseenter events. In addEvent(), it represents a regular DOM\r\n     * mouseover event.\r\n     */\r\n    MOUSEOVER: 'mouseover',\r\n    /**\r\n     * The mouseout event. Can either be used directly or used implicitly to\r\n     * capture mouseover events. In addEvent(), it represents a regular DOM\r\n     * mouseout event.\r\n     */\r\n    MOUSEOUT: 'mouseout',\r\n    /**\r\n     * The mouseenter event. Does not bubble and fires individually on each\r\n     * element being entered within a DOM tree.\r\n     */\r\n    MOUSEENTER: 'mouseenter',\r\n    /**\r\n     * The mouseleave event. Does not bubble and fires individually on each\r\n     * element being entered within a DOM tree.\r\n     */\r\n    MOUSELEAVE: 'mouseleave',\r\n    /**\r\n     * The mousemove event.\r\n     */\r\n    MOUSEMOVE: 'mousemove',\r\n    /**\r\n     * The pointerup event. Can either be used directly or used implicitly to\r\n     * capture pointerup events. In addEvent(), it represents a regular DOM\r\n     * pointerup event.\r\n     */\r\n    POINTERUP: 'pointerup',\r\n    /**\r\n     * The pointerdown event. Can either be used directly or used implicitly to\r\n     * capture pointerenter events. In addEvent(), it represents a regular DOM\r\n     * mouseover event.\r\n     */\r\n    POINTERDOWN: 'pointerdown',\r\n    /**\r\n     * The pointerover event. Can either be used directly or used implicitly to\r\n     * capture pointerenter events. In addEvent(), it represents a regular DOM\r\n     * pointerover event.\r\n     */\r\n    POINTEROVER: 'pointerover',\r\n    /**\r\n     * The pointerout event. Can either be used directly or used implicitly to\r\n     * capture pointerover events. In addEvent(), it represents a regular DOM\r\n     * pointerout event.\r\n     */\r\n    POINTEROUT: 'pointerout',\r\n    /**\r\n     * The pointerenter event. Does not bubble and fires individually on each\r\n     * element being entered within a DOM tree.\r\n     */\r\n    POINTERENTER: 'pointerenter',\r\n    /**\r\n     * The pointerleave event. Does not bubble and fires individually on each\r\n     * element being entered within a DOM tree.\r\n     */\r\n    POINTERLEAVE: 'pointerleave',\r\n    /**\r\n     * The pointermove event.\r\n     */\r\n    POINTERMOVE: 'pointermove',\r\n    /**\r\n     * The pointercancel event.\r\n     */\r\n    POINTERCANCEL: 'pointercancel',\r\n    /**\r\n     * The gotpointercapture event is fired when\r\n     * Element.setPointerCapture(pointerId) is called on a mouse input, or\r\n     * implicitly when a touch input begins.\r\n     */\r\n    GOTPOINTERCAPTURE: 'gotpointercapture',\r\n    /**\r\n     * The lostpointercapture event is fired when\r\n     * Element.releasePointerCapture(pointerId) is called, or implicitly after a\r\n     * touch input ends.\r\n     */\r\n    LOSTPOINTERCAPTURE: 'lostpointercapture',\r\n    /**\r\n     * The error event. The error event doesn't bubble, but you can use it in\r\n     * addEvent() and jsaction anyway. EventContract does the right thing under\r\n     * the hood (except in IE8 which does not use error events).\r\n     */\r\n    ERROR: 'error',\r\n    /**\r\n     * The load event. The load event doesn't bubble, but you can use it in\r\n     * addEvent() and jsaction anyway. EventContract does the right thing\r\n     * under the hood.\r\n     */\r\n    LOAD: 'load',\r\n    /**\r\n     * The unload event.\r\n     */\r\n    UNLOAD: 'unload',\r\n    /**\r\n     * The touchstart event. Bubbles, will only ever fire in browsers with\r\n     * touch support.\r\n     */\r\n    TOUCHSTART: 'touchstart',\r\n    /**\r\n     * The touchend event. Bubbles, will only ever fire in browsers with\r\n     * touch support.\r\n     */\r\n    TOUCHEND: 'touchend',\r\n    /**\r\n     * The touchmove event. Bubbles, will only ever fire in browsers with\r\n     * touch support.\r\n     */\r\n    TOUCHMOVE: 'touchmove',\r\n    /**\r\n     * The input event.\r\n     */\r\n    INPUT: 'input',\r\n    /**\r\n     * The scroll event.\r\n     */\r\n    SCROLL: 'scroll',\r\n    /**\r\n     * The toggle event. The toggle event doesn't bubble, but you can use it in\r\n     * addEvent() and jsaction anyway. EventContract does the right thing\r\n     * under the hood.\r\n     */\r\n    TOGGLE: 'toggle',\r\n    /**\r\n     * A custom event. The actual custom event type is declared as the 'type'\r\n     * field in the event details. Supported in Firefox 6+, IE 9+, and all Chrome\r\n     * versions.\r\n     *\r\n     * This is an internal name. Users should use jsaction's fireCustomEvent to\r\n     * fire custom events instead of relying on this type to create them.\r\n     */\r\n    CUSTOM: '_custom',\r\n};\r\n/** All event types that do not bubble or capture and need a polyfill. */\r\nconst MOUSE_SPECIAL_EVENT_TYPES = [\r\n    EventType.MOUSEENTER,\r\n    EventType.MOUSELEAVE,\r\n    'pointerenter',\r\n    'pointerleave',\r\n];\r\n/** All event types that are registered in the bubble phase. */\r\nconst BUBBLE_EVENT_TYPES = [\r\n    EventType.CLICK,\r\n    EventType.DBLCLICK,\r\n    EventType.FOCUSIN,\r\n    EventType.FOCUSOUT,\r\n    EventType.KEYDOWN,\r\n    EventType.KEYUP,\r\n    EventType.KEYPRESS,\r\n    EventType.MOUSEOVER,\r\n    EventType.MOUSEOUT,\r\n    EventType.SUBMIT,\r\n    EventType.TOUCHSTART,\r\n    EventType.TOUCHEND,\r\n    EventType.TOUCHMOVE,\r\n    'touchcancel',\r\n    'auxclick',\r\n    'change',\r\n    'compositionstart',\r\n    'compositionupdate',\r\n    'compositionend',\r\n    'beforeinput',\r\n    'input',\r\n    'select',\r\n    'copy',\r\n    'cut',\r\n    'paste',\r\n    'mousedown',\r\n    'mouseup',\r\n    'wheel',\r\n    'contextmenu',\r\n    'dragover',\r\n    'dragenter',\r\n    'dragleave',\r\n    'drop',\r\n    'dragstart',\r\n    'dragend',\r\n    'pointerdown',\r\n    'pointermove',\r\n    'pointerup',\r\n    'pointercancel',\r\n    'pointerover',\r\n    'pointerout',\r\n    'gotpointercapture',\r\n    'lostpointercapture',\r\n    // Video events.\r\n    'ended',\r\n    'loadedmetadata',\r\n    // Page visibility events.\r\n    'pagehide',\r\n    'pageshow',\r\n    'visibilitychange',\r\n    // Content visibility events.\r\n    'beforematch',\r\n];\r\n/** All event types that are registered in the capture phase. */\r\nconst CAPTURE_EVENT_TYPES = [\r\n    EventType.FOCUS,\r\n    EventType.BLUR,\r\n    EventType.ERROR,\r\n    EventType.LOAD,\r\n    EventType.TOGGLE,\r\n];\r\n/**\r\n * Whether or not an event type should be registered in the capture phase.\r\n * @param eventType\r\n * @returns bool\r\n */\r\nconst isCaptureEventType = (eventType) => CAPTURE_EVENT_TYPES.indexOf(eventType) >= 0;\r\n/** All event types that are registered early.  */\r\nconst EARLY_EVENT_TYPES = BUBBLE_EVENT_TYPES.concat(CAPTURE_EVENT_TYPES);\r\n/**\r\n * Whether or not an event type is registered in the early contract.\r\n */\r\nconst isEarlyEventType = (eventType) => EARLY_EVENT_TYPES.indexOf(eventType) >= 0;\r\n\r\n/**\r\n * Gets a browser event type, if it would differ from the JSAction event type.\r\n */\r\nfunction getBrowserEventType(eventType) {\r\n    // Mouseenter and mouseleave events are not handled directly because they\r\n    // are not available everywhere. In browsers where they are available, they\r\n    // don't bubble and aren't visible at the container boundary. Instead, we\r\n    // synthesize the mouseenter and mouseleave events from mouseover and\r\n    // mouseout events, respectively. Cf. eventcontract.js.\r\n    if (eventType === EventType.MOUSEENTER) {\r\n        return EventType.MOUSEOVER;\r\n    }\r\n    else if (eventType === EventType.MOUSELEAVE) {\r\n        return EventType.MOUSEOUT;\r\n    }\r\n    else if (eventType === EventType.POINTERENTER) {\r\n        return EventType.POINTEROVER;\r\n    }\r\n    else if (eventType === EventType.POINTERLEAVE) {\r\n        return EventType.POINTEROUT;\r\n    }\r\n    return eventType;\r\n}\r\n/**\r\n * Registers the event handler function with the given DOM element for\r\n * the given event type.\r\n *\r\n * @param element The element.\r\n * @param eventType The event type.\r\n * @param handler The handler function to install.\r\n * @param passive A boolean value that, if `true`, indicates that the function\r\n *     specified by `handler` will never call `preventDefault()`.\r\n * @return Information needed to uninstall the event handler eventually.\r\n */\r\nfunction addEventListener(element, eventType, handler, passive) {\r\n    // All event handlers are registered in the bubbling\r\n    // phase.\r\n    //\r\n    // All browsers support focus and blur, but these events only are propagated\r\n    // in the capture phase. Very legacy browsers do not support focusin or\r\n    // focusout.\r\n    //\r\n    // It would be a bad idea to register all event handlers in the\r\n    // capture phase because then regular onclick handlers would not be\r\n    // executed at all on events that trigger a jsaction. That's not\r\n    // entirely what we want, at least for now.\r\n    //\r\n    // Error and load events (i.e. on images) do not bubble so they are also\r\n    // handled in the capture phase.\r\n    let capture = false;\r\n    if (isCaptureEventType(eventType)) {\r\n        capture = true;\r\n    }\r\n    const options = typeof passive === 'boolean' ? { capture, passive } : capture;\r\n    element.addEventListener(eventType, handler, options);\r\n    return { eventType, handler, capture, passive };\r\n}\r\n/**\r\n * Removes the event handler for the given event from the element.\r\n * the given event type.\r\n *\r\n * @param element The element.\r\n * @param info The information needed to deregister the handler, as returned by\r\n *     addEventListener(), above.\r\n */\r\nfunction removeEventListener(element, info) {\r\n    if (element.removeEventListener) {\r\n        // It's worth noting that some browser releases have been inconsistent on this, and unless\r\n        // you have specific reasons otherwise, it's probably wise to use the same values used for\r\n        // the call to addEventListener() when calling removeEventListener().\r\n        const options = typeof info.passive === 'boolean' ? { capture: info.capture } : info.capture;\r\n        element.removeEventListener(info.eventType, info.handler, options);\r\n        // `detachEvent` is an old DOM API.\r\n    }\r\n    else if (element.detachEvent) {\r\n        // `detachEvent` is an old DOM API.\r\n        element.detachEvent(`on${info.eventType}`, info.handler);\r\n    }\r\n}\r\n/**\r\n * Prevents the default action of an event.\r\n * @param e The event to prevent the default action for.\r\n */\r\nfunction preventDefault(e) {\r\n    e.preventDefault ? e.preventDefault() : (e.returnValue = false);\r\n}\r\n/**\r\n * Whether we are on a Mac. Not pulling in useragent just for this.\r\n */\r\nlet isMac = typeof navigator !== 'undefined' && /Macintosh/.test(navigator.userAgent);\r\n/**\r\n * Determines and returns whether the given event (which is assumed to be a\r\n * click event) is a middle click.\r\n * NOTE: There is not a consistent way to identify middle click\r\n * http://www.unixpapa.com/js/mouse.html\r\n */\r\nfunction isMiddleClick(e) {\r\n    return (\r\n    // `which` is an old DOM API.\r\n    e.which === 2 ||\r\n        // `which` is an old DOM API.\r\n        (e.which == null &&\r\n            // `button` is an old DOM API.\r\n            e.button === 4) // middle click for IE\r\n    );\r\n}\r\n/**\r\n * Determines and returns whether the given event (which is assumed\r\n * to be a click event) is modified. A middle click is considered a modified\r\n * click to retain the default browser action, which opens a link in a new tab.\r\n * @param e The event.\r\n * @return Whether the given event is modified.\r\n */\r\nfunction isModifiedClickEvent(e) {\r\n    return (\r\n    // `metaKey` is an old DOM API.\r\n    (isMac && e.metaKey) ||\r\n        // `ctrlKey` is an old DOM API.\r\n        (!isMac && e.ctrlKey) ||\r\n        isMiddleClick(e) ||\r\n        // `shiftKey` is an old DOM API.\r\n        e.shiftKey);\r\n}\r\n/**\r\n * Determines whether the event corresponds to a non-bubbling mouse\r\n * event type (mouseenter, mouseleave, pointerenter, and pointerleave).\r\n *\r\n * During mouseover (mouseenter) and pointerover (pointerenter), the\r\n * relatedTarget is the element being entered from. During mouseout (mouseleave)\r\n * and pointerout (pointerleave), the relatedTarget is the element being exited\r\n * to.\r\n *\r\n * In both cases, if relatedTarget is outside target, then the corresponding\r\n * special event has occurred, otherwise it hasn't.\r\n *\r\n * @param e The mouseover/mouseout event.\r\n * @param type The type of the mouse special event.\r\n * @param element The element on which the jsaction for the\r\n *     mouseenter/mouseleave event is defined.\r\n * @return True if the event is a mouseenter/mouseleave event.\r\n */\r\nfunction isMouseSpecialEvent(e, type, element) {\r\n    // `relatedTarget` is an old DOM API.\r\n    const related = e.relatedTarget;\r\n    return (((e.type === EventType.MOUSEOVER && type === EventType.MOUSEENTER) ||\r\n        (e.type === EventType.MOUSEOUT && type === EventType.MOUSELEAVE) ||\r\n        (e.type === EventType.POINTEROVER && type === EventType.POINTERENTER) ||\r\n        (e.type === EventType.POINTEROUT && type === EventType.POINTERLEAVE)) &&\r\n        (!related || (related !== element && !element.contains(related))));\r\n}\r\n/**\r\n * Creates a new EventLike object for a mouseenter/mouseleave event that's\r\n * derived from the original corresponding mouseover/mouseout event.\r\n * @param e The event.\r\n * @param target The element on which the jsaction for the mouseenter/mouseleave\r\n *     event is defined.\r\n * @return A modified event-like object copied from the event object passed into\r\n *     this function.\r\n */\r\nfunction createMouseSpecialEvent(e, target) {\r\n    // We have to create a copy of the event object because we need to mutate\r\n    // its fields. We do this for the special mouse events because the event\r\n    // target needs to be retargeted to the action element rather than the real\r\n    // element (since we are simulating the special mouse events with mouseover/\r\n    // mouseout).\r\n    //\r\n    // Since we're making a copy anyways, we might as well attempt to convert\r\n    // this event into a pseudo-real mouseenter/mouseleave event by adjusting\r\n    // its type.\r\n    //\r\n    const copy = {};\r\n    for (const property in e) {\r\n        if (property === 'srcElement' || property === 'target') {\r\n            continue;\r\n        }\r\n        const key = property;\r\n        // Making a copy requires iterating through all properties of `Event`.\r\n        const value = e[key];\r\n        if (typeof value === 'function') {\r\n            continue;\r\n        }\r\n        // Value should be the expected type, but the value of `key` is not known\r\n        // statically.\r\n        copy[key] = value;\r\n    }\r\n    if (e.type === EventType.MOUSEOVER) {\r\n        copy['type'] = EventType.MOUSEENTER;\r\n    }\r\n    else if (e.type === EventType.MOUSEOUT) {\r\n        copy['type'] = EventType.MOUSELEAVE;\r\n    }\r\n    else if (e.type === EventType.POINTEROVER) {\r\n        copy['type'] = EventType.POINTERENTER;\r\n    }\r\n    else {\r\n        copy['type'] = EventType.POINTERLEAVE;\r\n    }\r\n    copy['target'] = copy['srcElement'] = target;\r\n    copy['bubbles'] = false;\r\n    copy['_originalEvent'] = e;\r\n    return copy;\r\n}\r\n\r\n/**\r\n * Whether the user agent is running on iOS.\r\n */\r\nconst isIos = typeof navigator !== 'undefined' && /iPhone|iPad|iPod/.test(navigator.userAgent);\r\n/**\r\n * A class representing a container node and all the event handlers\r\n * installed on it. Used so that handlers can be cleaned up if the\r\n * container is removed from the contract.\r\n */\r\nclass EventContractContainer {\r\n    element;\r\n    /**\r\n     * Array of event handlers and their corresponding event types that are\r\n     * installed on this container.\r\n     *\r\n     */\r\n    handlerInfos = [];\r\n    /**\r\n     * @param element The container Element.\r\n     */\r\n    constructor(element) {\r\n        this.element = element;\r\n    }\r\n    /**\r\n     * Installs the provided installer on the element owned by this container,\r\n     * and maintains a reference to resulting handler in order to remove it\r\n     * later if desired.\r\n     */\r\n    addEventListener(eventType, getHandler, passive) {\r\n        // In iOS, event bubbling doesn't happen automatically in any DOM element,\r\n        // unless it has an onclick attribute or DOM event handler attached to it.\r\n        // This breaks JsAction in some cases. See \"Making Elements Clickable\"\r\n        // section at http://goo.gl/2VoGnB.\r\n        //\r\n        // A workaround for this issue is to change the CSS cursor style to 'pointer'\r\n        // for the container element, which magically turns on event bubbling. This\r\n        // solution is described in the comments section at http://goo.gl/6pEO1z.\r\n        //\r\n        // We use a navigator.userAgent check here as this problem is present both\r\n        // on Mobile Safari and thin WebKit wrappers, such as Chrome for iOS.\r\n        if (isIos) {\r\n            this.element.style.cursor = 'pointer';\r\n        }\r\n        this.handlerInfos.push(addEventListener(this.element, eventType, getHandler(this.element), passive));\r\n    }\r\n    /**\r\n     * Removes all the handlers installed on this container.\r\n     */\r\n    cleanUp() {\r\n        for (let i = 0; i < this.handlerInfos.length; i++) {\r\n            removeEventListener(this.element, this.handlerInfos[i]);\r\n        }\r\n        this.handlerInfos = [];\r\n    }\r\n}\r\n\r\nconst Char = {\r\n    /**\r\n     * The separator between the namespace and the action name in the\r\n     * jsaction attribute value.\r\n     */\r\n    NAMESPACE_ACTION_SEPARATOR: '.',\r\n    /**\r\n     * The separator between the event name and action in the jsaction\r\n     * attribute value.\r\n     */\r\n    EVENT_ACTION_SEPARATOR: ':',\r\n};\r\n\r\n/** Added for readability when accessing stable property names. */\r\nfunction getEventType(eventInfo) {\r\n    return eventInfo.eventType;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setEventType(eventInfo, eventType) {\r\n    eventInfo.eventType = eventType;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getEvent(eventInfo) {\r\n    return eventInfo.event;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setEvent(eventInfo, event) {\r\n    eventInfo.event = event;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getTargetElement(eventInfo) {\r\n    return eventInfo.targetElement;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setTargetElement(eventInfo, targetElement) {\r\n    eventInfo.targetElement = targetElement;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getContainer(eventInfo) {\r\n    return eventInfo.eic;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setContainer(eventInfo, container) {\r\n    eventInfo.eic = container;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getTimestamp(eventInfo) {\r\n    return eventInfo.timeStamp;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setTimestamp(eventInfo, timestamp) {\r\n    eventInfo.timeStamp = timestamp;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getAction(eventInfo) {\r\n    return eventInfo.eia;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setAction(eventInfo, actionName, actionElement) {\r\n    eventInfo.eia = [actionName, actionElement];\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction unsetAction(eventInfo) {\r\n    eventInfo.eia = undefined;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getActionElement(actionInfo) {\r\n    return actionInfo[1];\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getIsReplay(eventInfo) {\r\n    return eventInfo.eirp;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setIsReplay(eventInfo, replay) {\r\n    eventInfo.eirp = replay;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction getResolved(eventInfo) {\r\n    return eventInfo.eir;\r\n}\r\n/** Added for readability when accessing stable property names. */\r\nfunction setResolved(eventInfo, resolved) {\r\n    eventInfo.eir = resolved;\r\n}\r\n/** Clones an `EventInfo` */\r\nfunction cloneEventInfo(eventInfo) {\r\n    return {\r\n        eventType: eventInfo.eventType,\r\n        event: eventInfo.event,\r\n        targetElement: eventInfo.targetElement,\r\n        eic: eventInfo.eic,\r\n        eia: eventInfo.eia,\r\n        timeStamp: eventInfo.timeStamp,\r\n        eirp: eventInfo.eirp,\r\n        eiack: eventInfo.eiack,\r\n        eir: eventInfo.eir,\r\n    };\r\n}\r\n/**\r\n * Utility function for creating an `EventInfo`.\r\n *\r\n * This can be used from code-size sensitive compilation units, as taking\r\n * parameters vs. an `Object` literal reduces code size.\r\n */\r\nfunction createEventInfoFromParameters(eventType, event, targetElement, container, timestamp, action, isReplay, a11yClickKey) {\r\n    return {\r\n        eventType,\r\n        event,\r\n        targetElement,\r\n        eic: container,\r\n        timeStamp: timestamp,\r\n        eia: action,\r\n        eirp: isReplay,\r\n        eiack: a11yClickKey,\r\n    };\r\n}\r\n/**\r\n * Utility class around an `EventInfo`.\r\n *\r\n * This should be used in compilation units that are less sensitive to code\r\n * size.\r\n */\r\nclass EventInfoWrapper {\r\n    eventInfo;\r\n    constructor(eventInfo) {\r\n        this.eventInfo = eventInfo;\r\n    }\r\n    getEventType() {\r\n        return getEventType(this.eventInfo);\r\n    }\r\n    setEventType(eventType) {\r\n        setEventType(this.eventInfo, eventType);\r\n    }\r\n    getEvent() {\r\n        return getEvent(this.eventInfo);\r\n    }\r\n    setEvent(event) {\r\n        setEvent(this.eventInfo, event);\r\n    }\r\n    getTargetElement() {\r\n        return getTargetElement(this.eventInfo);\r\n    }\r\n    setTargetElement(targetElement) {\r\n        setTargetElement(this.eventInfo, targetElement);\r\n    }\r\n    getContainer() {\r\n        return getContainer(this.eventInfo);\r\n    }\r\n    setContainer(container) {\r\n        setContainer(this.eventInfo, container);\r\n    }\r\n    getTimestamp() {\r\n        return getTimestamp(this.eventInfo);\r\n    }\r\n    setTimestamp(timestamp) {\r\n        setTimestamp(this.eventInfo, timestamp);\r\n    }\r\n    getAction() {\r\n        const action = getAction(this.eventInfo);\r\n        if (!action)\r\n            return undefined;\r\n        return {\r\n            name: action[0],\r\n            element: action[1],\r\n        };\r\n    }\r\n    setAction(action) {\r\n        if (!action) {\r\n            unsetAction(this.eventInfo);\r\n            return;\r\n        }\r\n        setAction(this.eventInfo, action.name, action.element);\r\n    }\r\n    getIsReplay() {\r\n        return getIsReplay(this.eventInfo);\r\n    }\r\n    setIsReplay(replay) {\r\n        setIsReplay(this.eventInfo, replay);\r\n    }\r\n    getResolved() {\r\n        return getResolved(this.eventInfo);\r\n    }\r\n    setResolved(resolved) {\r\n        setResolved(this.eventInfo, resolved);\r\n    }\r\n    clone() {\r\n        return new EventInfoWrapper(cloneEventInfo(this.eventInfo));\r\n    }\r\n}\r\n\r\n/**\r\n * Since maps from event to action are immutable we can use a single map\r\n * to represent the empty map.\r\n */\r\nconst EMPTY_ACTION_MAP = {};\r\n/**\r\n * This regular expression matches a semicolon.\r\n */\r\nconst REGEXP_SEMICOLON = /\\s*;\\s*/;\r\n/** If no event type is defined, defaults to `click`. */\r\nconst DEFAULT_EVENT_TYPE = EventType.CLICK;\r\n/** Resolves actions for Events. */\r\nclass ActionResolver {\r\n    a11yClickSupport = false;\r\n    clickModSupport = true;\r\n    syntheticMouseEventSupport;\r\n    updateEventInfoForA11yClick = undefined;\r\n    preventDefaultForA11yClick = undefined;\r\n    populateClickOnlyAction = undefined;\r\n    constructor({ syntheticMouseEventSupport = false, clickModSupport = true, } = {}) {\r\n        this.syntheticMouseEventSupport = syntheticMouseEventSupport;\r\n        this.clickModSupport = clickModSupport;\r\n    }\r\n    resolveEventType(eventInfo) {\r\n        // We distinguish modified and plain clicks in order to support the\r\n        // default browser behavior of modified clicks on links; usually to\r\n        // open the URL of the link in new tab or new window on ctrl/cmd\r\n        // click. A DOM 'click' event is mapped to the jsaction 'click'\r\n        // event iff there is no modifier present on the event. If there is\r\n        // a modifier, it's mapped to 'clickmod' instead.\r\n        //\r\n        // It's allowed to omit the event in the jsaction attribute. In that\r\n        // case, 'click' is assumed. Thus the following two are equivalent:\r\n        //\r\n        //   <a href=\"someurl\" jsaction=\"gna.fu\">\r\n        //   <a href=\"someurl\" jsaction=\"click:gna.fu\">\r\n        //\r\n        // For unmodified clicks, EventContract invokes the jsaction\r\n        // 'gna.fu'. For modified clicks, EventContract won't find a\r\n        // suitable action and leave the event to be handled by the\r\n        // browser.\r\n        //\r\n        // In order to also invoke a jsaction handler for a modifier click,\r\n        // 'clickmod' needs to be used:\r\n        //\r\n        //   <a href=\"someurl\" jsaction=\"clickmod:gna.fu\">\r\n        //\r\n        // EventContract invokes the jsaction 'gna.fu' for modified\r\n        // clicks. Unmodified clicks are left to the browser.\r\n        //\r\n        // In order to set up the event contract to handle both clickonly and\r\n        // clickmod, only addEvent(EventType.CLICK) is necessary.\r\n        //\r\n        // In order to set up the event contract to handle click,\r\n        // addEvent() is necessary for CLICK, KEYDOWN, and KEYPRESS event types.  If\r\n        // a11y click support is enabled, addEvent() will set up the appropriate key\r\n        // event handler automatically.\r\n        if (this.clickModSupport &&\r\n            getEventType(eventInfo) === EventType.CLICK &&\r\n            isModifiedClickEvent(getEvent(eventInfo))) {\r\n            setEventType(eventInfo, EventType.CLICKMOD);\r\n        }\r\n        else if (this.a11yClickSupport) {\r\n            this.updateEventInfoForA11yClick(eventInfo);\r\n        }\r\n    }\r\n    resolveAction(eventInfo) {\r\n        if (getResolved(eventInfo)) {\r\n            return;\r\n        }\r\n        this.populateAction(eventInfo, getTargetElement(eventInfo));\r\n        setResolved(eventInfo, true);\r\n    }\r\n    resolveParentAction(eventInfo) {\r\n        const action = getAction(eventInfo);\r\n        const actionElement = action && getActionElement(action);\r\n        unsetAction(eventInfo);\r\n        const parentNode = actionElement && this.getParentNode(actionElement);\r\n        if (!parentNode) {\r\n            return;\r\n        }\r\n        this.populateAction(eventInfo, parentNode);\r\n    }\r\n    /**\r\n     * Searches for a jsaction that the DOM event maps to and creates an\r\n     * object containing event information used for dispatching by\r\n     * jsaction.Dispatcher. This method populates the `action` and `actionElement`\r\n     * fields of the EventInfo object passed in by finding the first\r\n     * jsaction attribute above the target Node of the event, and below\r\n     * the container Node, that specifies a jsaction for the event\r\n     * type. If no such jsaction is found, then action is undefined.\r\n     *\r\n     * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\r\n     *    action is found on any `Element` in the path of the `Event`.\r\n     */\r\n    populateAction(eventInfo, currentTarget) {\r\n        let actionElement = currentTarget;\r\n        while (actionElement && actionElement !== getContainer(eventInfo)) {\r\n            if (actionElement.nodeType === Node.ELEMENT_NODE) {\r\n                this.populateActionOnElement(actionElement, eventInfo);\r\n            }\r\n            if (getAction(eventInfo)) {\r\n                // An event is handled by at most one jsaction. Thus we stop at the\r\n                // first matching jsaction specified in a jsaction attribute up the\r\n                // ancestor chain of the event target node.\r\n                break;\r\n            }\r\n            actionElement = this.getParentNode(actionElement);\r\n        }\r\n        const action = getAction(eventInfo);\r\n        if (!action) {\r\n            // No action found.\r\n            return;\r\n        }\r\n        if (this.a11yClickSupport) {\r\n            this.preventDefaultForA11yClick(eventInfo);\r\n        }\r\n        // We attempt to handle the mouseenter/mouseleave events here by\r\n        // detecting whether the mouseover/mouseout events correspond to\r\n        // entering/leaving an element.\r\n        if (this.syntheticMouseEventSupport) {\r\n            if (getEventType(eventInfo) === EventType.MOUSEENTER ||\r\n                getEventType(eventInfo) === EventType.MOUSELEAVE ||\r\n                getEventType(eventInfo) === EventType.POINTERENTER ||\r\n                getEventType(eventInfo) === EventType.POINTERLEAVE) {\r\n                // We attempt to handle the mouseenter/mouseleave events here by\r\n                // detecting whether the mouseover/mouseout events correspond to\r\n                // entering/leaving an element.\r\n                if (isMouseSpecialEvent(getEvent(eventInfo), getEventType(eventInfo), getActionElement(action))) {\r\n                    // If both mouseover/mouseout and mouseenter/mouseleave events are\r\n                    // enabled, two separate handlers for mouseover/mouseout are\r\n                    // registered. Both handlers will see the same event instance\r\n                    // so we create a copy to avoid interfering with the dispatching of\r\n                    // the mouseover/mouseout event.\r\n                    const copiedEvent = createMouseSpecialEvent(getEvent(eventInfo), getActionElement(action));\r\n                    setEvent(eventInfo, copiedEvent);\r\n                    // Since the mouseenter/mouseleave events do not bubble, the target\r\n                    // of the event is technically the `actionElement` (the node with the\r\n                    // `jsaction` attribute)\r\n                    setTargetElement(eventInfo, getActionElement(action));\r\n                }\r\n                else {\r\n                    unsetAction(eventInfo);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Walk to the parent node, unless the node has a different owner in\r\n     * which case we walk to the owner. Attempt to walk to host of a\r\n     * shadow root if needed.\r\n     */\r\n    getParentNode(element) {\r\n        const owner = element[Property.OWNER];\r\n        if (owner) {\r\n            return owner;\r\n        }\r\n        const parentNode = element.parentNode;\r\n        if (parentNode?.nodeName === '#document-fragment') {\r\n            return parentNode?.host ?? null;\r\n        }\r\n        return parentNode;\r\n    }\r\n    /**\r\n     * Accesses the jsaction map on a node and retrieves the name of the\r\n     * action the given event is mapped to, if any. It parses the\r\n     * attribute value and stores it in a property on the node for\r\n     * subsequent retrieval without re-parsing and re-accessing the\r\n     * attribute.\r\n     *\r\n     * @param actionElement The DOM node to retrieve the jsaction map from.\r\n     * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\r\n     *    action is found on the `actionElement`.\r\n     */\r\n    populateActionOnElement(actionElement, eventInfo) {\r\n        const actionMap = this.parseActions(actionElement);\r\n        const actionName = actionMap[getEventType(eventInfo)];\r\n        if (actionName !== undefined) {\r\n            setAction(eventInfo, actionName, actionElement);\r\n        }\r\n        if (this.a11yClickSupport) {\r\n            this.populateClickOnlyAction(actionElement, eventInfo, actionMap);\r\n        }\r\n    }\r\n    /**\r\n     * Parses and caches an element's jsaction element into a map.\r\n     *\r\n     * This is primarily for internal use.\r\n     *\r\n     * @param actionElement The DOM node to retrieve the jsaction map from.\r\n     * @return Map from event to qualified name of the jsaction bound to it.\r\n     */\r\n    parseActions(actionElement) {\r\n        let actionMap = get(actionElement);\r\n        if (!actionMap) {\r\n            const jsactionAttribute = actionElement.getAttribute(Attribute.JSACTION);\r\n            if (!jsactionAttribute) {\r\n                actionMap = EMPTY_ACTION_MAP;\r\n                set(actionElement, actionMap);\r\n            }\r\n            else {\r\n                actionMap = getParsed(jsactionAttribute);\r\n                if (!actionMap) {\r\n                    actionMap = {};\r\n                    const values = jsactionAttribute.split(REGEXP_SEMICOLON);\r\n                    for (let idx = 0; idx < values.length; idx++) {\r\n                        const value = values[idx];\r\n                        if (!value) {\r\n                            continue;\r\n                        }\r\n                        const colon = value.indexOf(Char.EVENT_ACTION_SEPARATOR);\r\n                        const hasColon = colon !== -1;\r\n                        const type = hasColon ? value.substr(0, colon).trim() : DEFAULT_EVENT_TYPE;\r\n                        const action = hasColon ? value.substr(colon + 1).trim() : value;\r\n                        actionMap[type] = action;\r\n                    }\r\n                    setParsed(jsactionAttribute, actionMap);\r\n                }\r\n                set(actionElement, actionMap);\r\n            }\r\n        }\r\n        return actionMap;\r\n    }\r\n    addA11yClickSupport(updateEventInfoForA11yClick, preventDefaultForA11yClick, populateClickOnlyAction) {\r\n        this.a11yClickSupport = true;\r\n        this.updateEventInfoForA11yClick = updateEventInfoForA11yClick;\r\n        this.preventDefaultForA11yClick = preventDefaultForA11yClick;\r\n        this.populateClickOnlyAction = populateClickOnlyAction;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview An enum to control who can call certain jsaction APIs.\r\n */\r\nvar Restriction;\r\n(function (Restriction) {\r\n    Restriction[Restriction[\"I_AM_THE_JSACTION_FRAMEWORK\"] = 0] = \"I_AM_THE_JSACTION_FRAMEWORK\";\r\n})(Restriction || (Restriction = {}));\r\n\r\n/**\r\n * Receives a DOM event, determines the jsaction associated with the source\r\n * element of the DOM event, and invokes the handler associated with the\r\n * jsaction.\r\n */\r\nclass Dispatcher {\r\n    dispatchDelegate;\r\n    // The ActionResolver to use to resolve actions.\r\n    actionResolver;\r\n    /** The replayer function to be called when there are queued events. */\r\n    eventReplayer;\r\n    /** Whether the event replay is scheduled. */\r\n    eventReplayScheduled = false;\r\n    /** The queue of events. */\r\n    replayEventInfoWrappers = [];\r\n    /**\r\n     * Options are:\r\n     *   - `eventReplayer`: When the event contract dispatches replay events\r\n     *      to the Dispatcher, the Dispatcher collects them and in the next tick\r\n     *      dispatches them to the `eventReplayer`. Defaults to dispatching to `dispatchDelegate`.\r\n     * @param dispatchDelegate A function that should handle dispatching an `EventInfoWrapper` to handlers.\r\n     */\r\n    constructor(dispatchDelegate, { actionResolver, eventReplayer, } = {}) {\r\n        this.dispatchDelegate = dispatchDelegate;\r\n        this.actionResolver = actionResolver;\r\n        this.eventReplayer = eventReplayer;\r\n    }\r\n    /**\r\n     * Receives an event or the event queue from the EventContract. The event\r\n     * queue is copied and it attempts to replay.\r\n     * If event info is passed in it looks for an action handler that can handle\r\n     * the given event.  If there is no handler registered queues the event and\r\n     * checks if a loader is registered for the given namespace. If so, calls it.\r\n     *\r\n     * Alternatively, if in global dispatch mode, calls all registered global\r\n     * handlers for the appropriate event type.\r\n     *\r\n     * The three functionalities of this call are deliberately not split into\r\n     * three methods (and then declared as an abstract interface), because the\r\n     * interface is used by EventContract, which lives in a different jsbinary.\r\n     * Therefore the interface between the three is defined entirely in terms that\r\n     * are invariant under jscompiler processing (Function and Array, as opposed\r\n     * to a custom type with method names).\r\n     *\r\n     * @param eventInfo The info for the event that triggered this call or the\r\n     *     queue of events from EventContract.\r\n     */\r\n    dispatch(eventInfo) {\r\n        const eventInfoWrapper = new EventInfoWrapper(eventInfo);\r\n        this.actionResolver?.resolveEventType(eventInfo);\r\n        this.actionResolver?.resolveAction(eventInfo);\r\n        const action = eventInfoWrapper.getAction();\r\n        if (action && shouldPreventDefaultBeforeDispatching(action.element, eventInfoWrapper)) {\r\n            preventDefault(eventInfoWrapper.getEvent());\r\n        }\r\n        if (this.eventReplayer && eventInfoWrapper.getIsReplay()) {\r\n            this.scheduleEventInfoWrapperReplay(eventInfoWrapper);\r\n            return;\r\n        }\r\n        this.dispatchDelegate(eventInfoWrapper);\r\n    }\r\n    /**\r\n     * Schedules an `EventInfoWrapper` for replay. The replaying will happen in its own\r\n     * stack once the current flow cedes control. This is done to mimic\r\n     * browser event handling.\r\n     */\r\n    scheduleEventInfoWrapperReplay(eventInfoWrapper) {\r\n        this.replayEventInfoWrappers.push(eventInfoWrapper);\r\n        if (this.eventReplayScheduled) {\r\n            return;\r\n        }\r\n        this.eventReplayScheduled = true;\r\n        Promise.resolve().then(() => {\r\n            this.eventReplayScheduled = false;\r\n            this.eventReplayer(this.replayEventInfoWrappers);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Returns true if the default action of this event should be prevented before\r\n * this event is dispatched.\r\n */\r\nfunction shouldPreventDefaultBeforeDispatching(actionElement, eventInfoWrapper) {\r\n    // Prevent browser from following <a> node links if a jsaction is present\r\n    // and we are dispatching the action now. Note that the targetElement may be\r\n    // a child of an anchor that has a jsaction attached. For that reason, we\r\n    // need to check the actionElement rather than the targetElement.\r\n    return (actionElement.tagName === 'A' &&\r\n        (eventInfoWrapper.getEventType() === EventType.CLICK ||\r\n            eventInfoWrapper.getEventType() === EventType.CLICKMOD));\r\n}\r\n\r\n/** An internal symbol used to indicate whether propagation should be stopped or not. */\r\nconst PROPAGATION_STOPPED_SYMBOL = \r\n/* @__PURE__ */ Symbol.for('propagationStopped');\r\n/** Extra event phases beyond what the browser provides. */\r\nconst EventPhase = {\r\n    REPLAY: 101,\r\n};\r\nconst PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS = ' Because event replay occurs after browser dispatch, `preventDefault` would have no ' +\r\n    'effect. You can check whether an event is being replayed by accessing the event phase: ' +\r\n    '`event.eventPhase === EventPhase.REPLAY`.';\r\nconst PREVENT_DEFAULT_ERROR_MESSAGE = `\\`preventDefault\\` called during event replay.`;\r\nconst COMPOSED_PATH_ERROR_MESSAGE_DETAILS = ' Because event replay occurs after browser ' +\r\n    'dispatch, `composedPath()` will be empty. Iterate parent nodes from `event.target` or ' +\r\n    '`event.currentTarget` if you need to check elements in the event path.';\r\nconst COMPOSED_PATH_ERROR_MESSAGE = `\\`composedPath\\` called during event replay.`;\r\n/**\r\n * A dispatcher that uses browser-based `Event` semantics, for example bubbling, `stopPropagation`,\r\n * `currentTarget`, etc.\r\n */\r\nclass EventDispatcher {\r\n    dispatchDelegate;\r\n    clickModSupport;\r\n    actionResolver;\r\n    dispatcher;\r\n    constructor(dispatchDelegate, clickModSupport = true) {\r\n        this.dispatchDelegate = dispatchDelegate;\r\n        this.clickModSupport = clickModSupport;\r\n        this.actionResolver = new ActionResolver({ clickModSupport });\r\n        this.dispatcher = new Dispatcher((eventInfoWrapper) => {\r\n            this.dispatchToDelegate(eventInfoWrapper);\r\n        }, {\r\n            actionResolver: this.actionResolver,\r\n        });\r\n    }\r\n    /**\r\n     * The entrypoint for the `EventContract` dispatch.\r\n     */\r\n    dispatch(eventInfo) {\r\n        this.dispatcher.dispatch(eventInfo);\r\n    }\r\n    /** Internal method that does basic disaptching. */\r\n    dispatchToDelegate(eventInfoWrapper) {\r\n        if (eventInfoWrapper.getIsReplay()) {\r\n            prepareEventForReplay(eventInfoWrapper);\r\n        }\r\n        prepareEventForBubbling(eventInfoWrapper);\r\n        while (eventInfoWrapper.getAction()) {\r\n            prepareEventForDispatch(eventInfoWrapper);\r\n            // If this is a capture event, ONLY dispatch if the action element is the target.\r\n            if (isCaptureEventType(eventInfoWrapper.getEventType()) &&\r\n                eventInfoWrapper.getAction().element !== eventInfoWrapper.getTargetElement()) {\r\n                return;\r\n            }\r\n            this.dispatchDelegate(eventInfoWrapper.getEvent(), eventInfoWrapper.getAction().name);\r\n            if (propagationStopped(eventInfoWrapper)) {\r\n                return;\r\n            }\r\n            this.actionResolver.resolveParentAction(eventInfoWrapper.eventInfo);\r\n        }\r\n    }\r\n}\r\nfunction prepareEventForBubbling(eventInfoWrapper) {\r\n    const event = eventInfoWrapper.getEvent();\r\n    const originalStopPropagation = eventInfoWrapper.getEvent().stopPropagation.bind(event);\r\n    const stopPropagation = () => {\r\n        event[PROPAGATION_STOPPED_SYMBOL] = true;\r\n        originalStopPropagation();\r\n    };\r\n    patchEventInstance(event, 'stopPropagation', stopPropagation);\r\n    patchEventInstance(event, 'stopImmediatePropagation', stopPropagation);\r\n}\r\nfunction propagationStopped(eventInfoWrapper) {\r\n    const event = eventInfoWrapper.getEvent();\r\n    return !!event[PROPAGATION_STOPPED_SYMBOL];\r\n}\r\nfunction prepareEventForReplay(eventInfoWrapper) {\r\n    const event = eventInfoWrapper.getEvent();\r\n    const target = eventInfoWrapper.getTargetElement();\r\n    const originalPreventDefault = event.preventDefault.bind(event);\r\n    patchEventInstance(event, 'target', target);\r\n    patchEventInstance(event, 'eventPhase', EventPhase.REPLAY);\r\n    patchEventInstance(event, 'preventDefault', () => {\r\n        originalPreventDefault();\r\n        throw new Error(PREVENT_DEFAULT_ERROR_MESSAGE + (ngDevMode ? PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS : ''));\r\n    });\r\n    patchEventInstance(event, 'composedPath', () => {\r\n        throw new Error(COMPOSED_PATH_ERROR_MESSAGE + (ngDevMode ? COMPOSED_PATH_ERROR_MESSAGE_DETAILS : ''));\r\n    });\r\n}\r\nfunction prepareEventForDispatch(eventInfoWrapper) {\r\n    const event = eventInfoWrapper.getEvent();\r\n    const currentTarget = eventInfoWrapper.getAction()?.element;\r\n    if (currentTarget) {\r\n        patchEventInstance(event, 'currentTarget', currentTarget, {\r\n            // `currentTarget` is going to get reassigned every dispatch.\r\n            configurable: true,\r\n        });\r\n    }\r\n}\r\n/**\r\n * Patch `Event` instance during non-standard `Event` dispatch. This patches just the `Event`\r\n * instance that the browser created, it does not patch global properties or methods.\r\n *\r\n * This is necessary because dispatching an `Event` outside of browser dispatch results in\r\n * incorrect properties and methods that need to be polyfilled or do not work.\r\n *\r\n * JSAction dispatch adds two extra \"phases\" to event dispatch:\r\n * 1. Event delegation - the event is being dispatched by a delegating event handler on a container\r\n *    (typically `window.document.documentElement`), to a delegated event handler on some child\r\n *    element. Certain `Event` properties will be unintuitive, such as `currentTarget`, which would\r\n *    be the container rather than the child element. Bubbling would also not work. In order to\r\n *    emulate the browser, these properties and methods on the `Event` are patched.\r\n * 2. Event replay - the event is being dispatched by the framework once the handlers have been\r\n *    loaded (during hydration, or late-loaded). Certain `Event` properties can be unset by the\r\n *    browser because the `Event` is no longer actively being dispatched, such as `target`. Other\r\n *    methods have no effect because the `Event` has already been dispatched, such as\r\n *    `preventDefault`. Bubbling would also not work. These properties and methods are patched,\r\n *    either to fill in information that the browser may have removed, or to throw errors in methods\r\n *    that no longer behave as expected.\r\n */\r\nfunction patchEventInstance(event, property, value, { configurable = false } = {}) {\r\n    Object.defineProperty(event, property, { value, configurable });\r\n}\r\n/**\r\n * Registers deferred functionality for an EventContract and a Jsaction\r\n * Dispatcher.\r\n */\r\nfunction registerDispatcher$1(eventContract, dispatcher) {\r\n    eventContract.ecrd((eventInfo) => {\r\n        dispatcher.dispatch(eventInfo);\r\n    }, Restriction.I_AM_THE_JSACTION_FRAMEWORK);\r\n}\r\n\r\n/** Creates an `EarlyJsactionData` object. */\r\nfunction createEarlyJsactionData(container) {\r\n    const q = [];\r\n    const d = (eventInfo) => {\r\n        q.push(eventInfo);\r\n    };\r\n    const h = (event) => {\r\n        d(createEventInfoFromParameters(event.type, event, event.target, container, Date.now()));\r\n    };\r\n    return {\r\n        c: container,\r\n        q,\r\n        et: [],\r\n        etc: [],\r\n        d,\r\n        h,\r\n    };\r\n}\r\n/** Add all the events to the container stored in the `EarlyJsactionData`. */\r\nfunction addEvents(earlyJsactionData, types, capture) {\r\n    for (let i = 0; i < types.length; i++) {\r\n        const eventType = types[i];\r\n        const eventTypes = capture ? earlyJsactionData.etc : earlyJsactionData.et;\r\n        eventTypes.push(eventType);\r\n        earlyJsactionData.c.addEventListener(eventType, earlyJsactionData.h, capture);\r\n    }\r\n}\r\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\r\nfunction getQueuedEventInfos(earlyJsactionData) {\r\n    return earlyJsactionData?.q ?? [];\r\n}\r\n/** Register a different dispatcher function on the `EarlyJsactionData`. */\r\nfunction registerDispatcher(earlyJsactionData, dispatcher) {\r\n    if (!earlyJsactionData) {\r\n        return;\r\n    }\r\n    earlyJsactionData.d = dispatcher;\r\n}\r\n/** Removes all event listener handlers. */\r\nfunction removeAllEventListeners(earlyJsactionData) {\r\n    if (!earlyJsactionData) {\r\n        return;\r\n    }\r\n    removeEventListeners(earlyJsactionData.c, earlyJsactionData.et, earlyJsactionData.h);\r\n    removeEventListeners(earlyJsactionData.c, earlyJsactionData.etc, earlyJsactionData.h, true);\r\n}\r\nfunction removeEventListeners(container, eventTypes, earlyEventHandler, capture) {\r\n    for (let i = 0; i < eventTypes.length; i++) {\r\n        container.removeEventListener(eventTypes[i], earlyEventHandler, /* useCapture */ capture);\r\n    }\r\n}\r\n\r\n/**\r\n * @define Support for the non-bubbling mouseenter and mouseleave events.  This\r\n * flag can be overridden in a build rule.\r\n */\r\nconst MOUSE_SPECIAL_SUPPORT = false;\r\n\r\n/**\r\n * @fileoverview Implements the local event handling contract. This\r\n * allows DOM objects in a container that enters into this contract to\r\n * define event handlers which are executed in a local context.\r\n *\r\n * One EventContract instance can manage the contract for multiple\r\n * containers, which are added using the addContainer() method.\r\n *\r\n * Events can be registered using the addEvent() method.\r\n *\r\n * A Dispatcher is added using the registerDispatcher() method. Until there is\r\n * a dispatcher, events are queued. The idea is that the EventContract\r\n * class is inlined in the HTML of the top level page and instantiated\r\n * right after the start of <body>. The Dispatcher class is contained\r\n * in the external deferred js, and instantiated and registered with\r\n * EventContract when the external javascript in the page loads. The\r\n * external javascript will also register the jsaction handlers, which\r\n * then pick up the queued events at the time of registration.\r\n *\r\n * Since this class is meant to be inlined in the main page HTML, the\r\n * size of the binary compiled from this file MUST be kept as small as\r\n * possible and thus its dependencies to a minimum.\r\n */\r\n/**\r\n * EventContract intercepts events in the bubbling phase at the\r\n * boundary of a container element, and maps them to generic actions\r\n * which are specified using the custom jsaction attribute in\r\n * HTML. Behavior of the application is then specified in terms of\r\n * handler for such actions, cf. jsaction.Dispatcher in dispatcher.js.\r\n *\r\n * This has several benefits: (1) No DOM event handlers need to be\r\n * registered on the specific elements in the UI. (2) The set of\r\n * events that the application has to handle can be specified in terms\r\n * of the semantics of the application, rather than in terms of DOM\r\n * events. (3) Invocation of handlers can be delayed and handlers can\r\n * be delay loaded in a generic way.\r\n */\r\nclass EventContract {\r\n    static MOUSE_SPECIAL_SUPPORT = MOUSE_SPECIAL_SUPPORT;\r\n    containerManager;\r\n    /**\r\n     * The DOM events which this contract covers. Used to prevent double\r\n     * registration of event types. The value of the map is the\r\n     * internally created DOM event handler function that handles the\r\n     * DOM events. See addEvent().\r\n     *\r\n     */\r\n    eventHandlers = {};\r\n    browserEventTypeToExtraEventTypes = {};\r\n    /**\r\n     * The dispatcher function. Events are passed to this function for\r\n     * handling once it was set using the registerDispatcher() method. This is\r\n     * done because the function is passed from another jsbinary, so passing the\r\n     * instance and invoking the method here would require to leave the method\r\n     * unobfuscated.\r\n     */\r\n    dispatcher = null;\r\n    /**\r\n     * The list of suspended `EventInfo` that will be dispatched\r\n     * as soon as the `Dispatcher` is registered.\r\n     */\r\n    queuedEventInfos = [];\r\n    constructor(containerManager) {\r\n        this.containerManager = containerManager;\r\n    }\r\n    handleEvent(eventType, event, container) {\r\n        const eventInfo = createEventInfoFromParameters(\r\n        /* eventType= */ eventType, \r\n        /* event= */ event, \r\n        /* targetElement= */ event.target, \r\n        /* container= */ container, \r\n        /* timestamp= */ Date.now());\r\n        this.handleEventInfo(eventInfo);\r\n    }\r\n    /**\r\n     * Handle an `EventInfo`.\r\n     */\r\n    handleEventInfo(eventInfo) {\r\n        if (!this.dispatcher) {\r\n            // All events are queued when the dispatcher isn't yet loaded.\r\n            setIsReplay(eventInfo, true);\r\n            this.queuedEventInfos?.push(eventInfo);\r\n            return;\r\n        }\r\n        this.dispatcher(eventInfo);\r\n    }\r\n    /**\r\n     * Enables jsaction handlers to be called for the event type given by\r\n     * name.\r\n     *\r\n     * If the event is already registered, this does nothing.\r\n     *\r\n     * @param prefixedEventType If supplied, this event is used in\r\n     *     the actual browser event registration instead of the name that is\r\n     *     exposed to jsaction. Use this if you e.g. want users to be able\r\n     *     to subscribe to jsaction=\"transitionEnd:foo\" while the underlying\r\n     *     event is webkitTransitionEnd in one browser and mozTransitionEnd\r\n     *     in another.\r\n     *\r\n     * @param passive A boolean value that, if `true`, indicates that the event\r\n     *     handler will never call `preventDefault()`.\r\n     */\r\n    addEvent(eventType, prefixedEventType, passive) {\r\n        if (eventType in this.eventHandlers || !this.containerManager) {\r\n            return;\r\n        }\r\n        if (!EventContract.MOUSE_SPECIAL_SUPPORT && MOUSE_SPECIAL_EVENT_TYPES.indexOf(eventType) >= 0) {\r\n            return;\r\n        }\r\n        const eventHandler = (eventType, event, container) => {\r\n            this.handleEvent(eventType, event, container);\r\n        };\r\n        // Store the callback to allow us to replay events.\r\n        this.eventHandlers[eventType] = eventHandler;\r\n        const browserEventType = getBrowserEventType(prefixedEventType || eventType);\r\n        if (browserEventType !== eventType) {\r\n            const eventTypes = this.browserEventTypeToExtraEventTypes[browserEventType] || [];\r\n            eventTypes.push(eventType);\r\n            this.browserEventTypeToExtraEventTypes[browserEventType] = eventTypes;\r\n        }\r\n        this.containerManager.addEventListener(browserEventType, (element) => {\r\n            return (event) => {\r\n                eventHandler(eventType, event, element);\r\n            };\r\n        }, passive);\r\n    }\r\n    /**\r\n     * Gets the queued early events and replay them using the appropriate handler\r\n     * in the provided event contract. Once all the events are replayed, it cleans\r\n     * up the early contract.\r\n     */\r\n    replayEarlyEvents(earlyJsactionData = window._ejsa) {\r\n        // Check if the early contract is present and prevent calling this function\r\n        // more than once.\r\n        if (!earlyJsactionData) {\r\n            return;\r\n        }\r\n        // Replay the early contract events.\r\n        this.replayEarlyEventInfos(earlyJsactionData.q);\r\n        // Clean up the early contract.\r\n        removeAllEventListeners(earlyJsactionData);\r\n        delete window._ejsa;\r\n    }\r\n    /**\r\n     * Replays all the early `EventInfo` objects, dispatching them through the normal\r\n     * `EventContract` flow.\r\n     */\r\n    replayEarlyEventInfos(earlyEventInfos) {\r\n        for (let i = 0; i < earlyEventInfos.length; i++) {\r\n            const earlyEventInfo = earlyEventInfos[i];\r\n            const eventTypes = this.getEventTypesForBrowserEventType(earlyEventInfo.eventType);\r\n            for (let j = 0; j < eventTypes.length; j++) {\r\n                const eventInfo = cloneEventInfo(earlyEventInfo);\r\n                // EventInfo eventType maps to JSAction's internal event type,\r\n                // rather than the browser event type.\r\n                setEventType(eventInfo, eventTypes[j]);\r\n                this.handleEventInfo(eventInfo);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns all JSAction event types that have been registered for a given\r\n     * browser event type.\r\n     */\r\n    getEventTypesForBrowserEventType(browserEventType) {\r\n        const eventTypes = [];\r\n        if (this.eventHandlers[browserEventType]) {\r\n            eventTypes.push(browserEventType);\r\n        }\r\n        if (this.browserEventTypeToExtraEventTypes[browserEventType]) {\r\n            eventTypes.push(...this.browserEventTypeToExtraEventTypes[browserEventType]);\r\n        }\r\n        return eventTypes;\r\n    }\r\n    /**\r\n     * Returns the event handler function for a given event type.\r\n     */\r\n    handler(eventType) {\r\n        return this.eventHandlers[eventType];\r\n    }\r\n    /**\r\n     * Cleans up the event contract. This resets all of the `EventContract`'s\r\n     * internal state. Users are responsible for not using this `EventContract`\r\n     * after it has been cleaned up.\r\n     */\r\n    cleanUp() {\r\n        this.containerManager?.cleanUp();\r\n        this.containerManager = null;\r\n        this.eventHandlers = {};\r\n        this.browserEventTypeToExtraEventTypes = {};\r\n        this.dispatcher = null;\r\n        this.queuedEventInfos = [];\r\n    }\r\n    /**\r\n     * Register a dispatcher function. Event info of each event mapped to\r\n     * a jsaction is passed for handling to this callback. The queued\r\n     * events are passed as well to the dispatcher for later replaying\r\n     * once the dispatcher is registered. Clears the event queue to null.\r\n     *\r\n     * @param dispatcher The dispatcher function.\r\n     * @param restriction\r\n     */\r\n    registerDispatcher(dispatcher, restriction) {\r\n        this.ecrd(dispatcher, restriction);\r\n    }\r\n    /**\r\n     * Unrenamed alias for registerDispatcher. Necessary for any codebases that\r\n     * split the `EventContract` and `Dispatcher` code into different compilation\r\n     * units.\r\n     */\r\n    ecrd(dispatcher, restriction) {\r\n        this.dispatcher = dispatcher;\r\n        if (this.queuedEventInfos?.length) {\r\n            for (let i = 0; i < this.queuedEventInfos.length; i++) {\r\n                this.handleEventInfo(this.queuedEventInfos[i]);\r\n            }\r\n            this.queuedEventInfos = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an `EarlyJsactionData`, adds events to it, and populates it on a nested object on\r\n * the window.\r\n */\r\nfunction bootstrapAppScopedEarlyEventContract(container, appId, bubbleEventTypes, captureEventTypes, dataContainer = window) {\r\n    const earlyJsactionData = createEarlyJsactionData(container);\r\n    if (!dataContainer._ejsas) {\r\n        dataContainer._ejsas = {};\r\n    }\r\n    dataContainer._ejsas[appId] = earlyJsactionData;\r\n    addEvents(earlyJsactionData, bubbleEventTypes);\r\n    addEvents(earlyJsactionData, captureEventTypes, /* capture= */ true);\r\n}\r\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\r\nfunction getAppScopedQueuedEventInfos(appId, dataContainer = window) {\r\n    return getQueuedEventInfos(dataContainer._ejsas?.[appId]);\r\n}\r\n/**\r\n * Registers a dispatcher function on the `EarlyJsactionData` present on the nested object on the\r\n * window.\r\n */\r\nfunction registerAppScopedDispatcher(restriction, appId, dispatcher, dataContainer = window) {\r\n    registerDispatcher(dataContainer._ejsas?.[appId], dispatcher);\r\n}\r\n/** Removes all event listener handlers. */\r\nfunction removeAllAppScopedEventListeners(appId, dataContainer = window) {\r\n    removeAllEventListeners(dataContainer._ejsas?.[appId]);\r\n}\r\n/** Clear the early event contract. */\r\nfunction clearAppScopedEarlyEventContract(appId, dataContainer = window) {\r\n    if (!dataContainer._ejsas) {\r\n        return;\r\n    }\r\n    dataContainer._ejsas[appId] = undefined;\r\n}\r\n\r\nexport { Attribute, EventContract, EventContractContainer, EventDispatcher, EventInfoWrapper, EventPhase, bootstrapAppScopedEarlyEventContract, clearAppScopedEarlyEventContract, getDefaulted as getActionCache, getAppScopedQueuedEventInfos, isCaptureEventType, isEarlyEventType, registerAppScopedDispatcher, registerDispatcher$1 as registerDispatcher, removeAllAppScopedEventListeners };\r\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}