{"ast":null,"code":"/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport { isNotFound, getCurrentInjector, setCurrentInjector } from './primitives/di.mjs';\nimport { getActiveConsumer, SIGNAL, createSignal } from './signal.mjs';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { NotFoundError, isNotFound as isNotFound$1 } from '@angular/core/primitives/di';\nimport { setActiveConsumer } from '@angular/core/primitives/signals';\n\n/**\r\n * Base URL for the error details page.\r\n *\r\n * Keep this constant in sync across:\r\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\r\n *  - packages/core/src/error_details_base_url.ts\r\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.dev/errors';\n/**\r\n * URL for the XSS security documentation.\r\n */\nconst XSS_SECURITY_URL = 'https://angular.dev/best-practices/security#preventing-cross-site-scripting-xss';\n\n/**\r\n * Class that represents a runtime error.\r\n * Formats and outputs the error message in a consistent way.\r\n *\r\n * Example:\r\n * ```ts\r\n *  throw new RuntimeError(\r\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\r\n *    ngDevMode && 'Injector has already been destroyed.');\r\n * ```\r\n *\r\n * Note: the `message` argument contains a descriptive error message as a string in development\r\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\r\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\r\n * logic.\r\n */\nclass RuntimeError extends Error {\n  code;\n  constructor(code, message) {\n    super(formatRuntimeError(code, message));\n    this.code = code;\n  }\n}\nfunction formatRuntimeErrorCode(code) {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  return `NG0${Math.abs(code)}`;\n}\n/**\r\n * Called to format a runtime error.\r\n * See additional info on the `message` argument type in the `RuntimeError` class description.\r\n */\nfunction formatRuntimeError(code, message) {\n  const fullCode = formatRuntimeErrorCode(code);\n  let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\nconst _global = globalThis;\nfunction ngDevModeResetPerfCounters() {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters = {\n    hydratedNodes: 0,\n    hydratedComponents: 0,\n    dehydratedViewsRemoved: 0,\n    dehydratedViewsCleanupRuns: 0,\n    componentsSkippedHydration: 0,\n    deferBlocksWithIncrementalHydration: 0\n  };\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  if (!allowNgDevModeTrue) {\n    _global['ngDevMode'] = false;\n  } else {\n    if (typeof _global['ngDevMode'] !== 'object') {\n      _global['ngDevMode'] = {};\n    }\n    Object.assign(_global['ngDevMode'], newCounters);\n  }\n  return newCounters;\n}\n/**\r\n * This function checks to see if the `ngDevMode` has been set. If yes,\r\n * then we honor it, otherwise we default to dev mode with additional checks.\r\n *\r\n * The idea is that unless we are doing production build where we explicitly\r\n * set `ngDevMode == false` we should be helping the developer by providing\r\n * as much early warning and errors as possible.\r\n *\r\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\r\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\r\n * is defined for the entire instruction set.\r\n *\r\n * When checking `ngDevMode` on toplevel, always init it before referencing it\r\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\r\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\r\n *\r\n * Details on possible values for `ngDevMode` can be found on its docstring.\r\n */\nfunction initNgDevMode() {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object' || Object.keys(ngDevMode).length === 0) {\n      ngDevModeResetPerfCounters();\n    }\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n  return false;\n}\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n      return key;\n    }\n  }\n  // Cannot change it to `RuntimeError` because the `util` target cannot\n  // circularly depend on the `core` target.\n  throw Error(typeof ngDevMode !== 'undefined' && ngDevMode ? 'Could not find renamed property on target object.' : '');\n}\n/**\r\n * Sets properties on a target object from a source object, but only if\r\n * the property doesn't already exist on the target object.\r\n * @param target The target to set properties on\r\n * @param source The source of the property keys and values to set\r\n */\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (Array.isArray(token)) {\n    return `[${token.map(stringify).join(', ')}]`;\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  const name = token.overriddenName || token.name;\n  if (name) {\n    return `${name}`;\n  }\n  const result = token.toString();\n  if (result == null) {\n    return '' + result;\n  }\n  const newLineIndex = result.indexOf('\\n');\n  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;\n}\n/**\r\n * Concatenates two strings with separator, allocating new strings only when necessary.\r\n *\r\n * @param before before string.\r\n * @param separator separator string.\r\n * @param after after string.\r\n * @returns concatenated string.\r\n */\nfunction concatStringsWithSpace(before, after) {\n  if (!before) return after || '';\n  if (!after) return before;\n  return `${before} ${after}`;\n}\n/**\r\n * Ellipses the string in the middle when longer than the max length\r\n *\r\n * @param string\r\n * @param maxLength of the output string\r\n * @returns ellipsed string with ... in the middle\r\n */\nfunction truncateMiddle(str, maxLength = 100) {\n  if (!str || maxLength < 1 || str.length <= maxLength) return str;\n  if (maxLength == 1) return str.substring(0, 1) + '...';\n  const halfLimit = Math.round(maxLength / 2);\n  return str.substring(0, halfLimit) + '...' + str.substring(str.length - halfLimit);\n}\nconst __forward_ref__ = getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\r\n * Allows to refer to references which are not yet defined.\r\n *\r\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\r\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\r\n * a query is not yet defined.\r\n *\r\n * `forwardRef` is also used to break circularities in standalone components imports.\r\n *\r\n * @usageNotes\r\n * ### Circular dependency example\r\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\r\n *\r\n * ### Circular standalone reference import example\r\n * ```angular-ts\r\n * @Component({\r\n *   imports: [ChildComponent],\r\n *   selector: 'app-parent',\r\n *   template: `<app-child [hideParent]=\"hideParent()\"></app-child>`,\r\n * })\r\n * export class ParentComponent {\r\n *    hideParent = input.required<boolean>();\r\n * }\r\n *\r\n *\r\n * @Component({\r\n *   imports: [forwardRef(() => ParentComponent)],\r\n *   selector: 'app-child',\r\n *   template: `\r\n *    @if(!hideParent() {\r\n *       <app-parent/>\r\n *    }\r\n *  `,\r\n * })\r\n * export class ChildComponent {\r\n *    hideParent = input.required<boolean>();\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction forwardRef(forwardRefFn) {\n  forwardRefFn.__forward_ref__ = forwardRef;\n  forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n  return forwardRefFn;\n}\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n *\r\n * Acts as the identity function when given a non-forward-ref value.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\r\n *\r\n * @see {@link forwardRef}\r\n * @publicApi\r\n */\nfunction resolveForwardRef(type) {\n  return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;\n}\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\nfunction assertNumber(actual, msg) {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\nfunction assertFunction(actual, msg) {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\nfunction assertEqual(actual, expected, msg) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\nfunction assertNotEqual(actual, expected, msg) {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\nfunction assertSame(actual, expected, msg) {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\nfunction assertNotSame(actual, expected, msg) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\nfunction assertLessThan(actual, expected, msg) {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\nfunction assertNotDefined(actual, msg) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\nfunction throwError(msg, actual, expected, comparison) {\n  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n  if (!(node instanceof Node)) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\nfunction assertElement(node) {\n  if (!(node instanceof Element)) {\n    throwError(`The provided value must be an element but got ${stringify(node)}`);\n  }\n}\nfunction assertIndexInRange(arr, index) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\nfunction assertOneOf(value, ...validValues) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\nfunction assertNotReactive(fn) {\n  if (getActiveConsumer() !== null) {\n    throwError(`${fn}() should never be called in a reactive context.`);\n  }\n}\n\n/**\r\n * Construct an injectable definition which defines how a token will be constructed by the DI\r\n * system, and in which injectors (if any) it will be available.\r\n *\r\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\r\n * `InjectableType`.\r\n *\r\n * Options:\r\n * * `providedIn` determines which injectors will include the injectable, by either associating it\r\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\r\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\r\n * * `factory` gives the zero argument function which will create an instance of the injectable.\r\n *   The factory can call [`inject`](api/core/inject) to access the `Injector` and request injection\r\n * of dependencies.\r\n *\r\n * @codeGenApi\r\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\r\n */\nfunction ɵɵdefineInjectable(opts) {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn || null,\n    factory: opts.factory,\n    value: undefined\n  };\n}\n/**\r\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\r\n * code should now use ɵɵdefineInjectable instead.\r\n * @publicApi\r\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\r\n * Construct an `InjectorDef` which configures an injector.\r\n *\r\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\r\n * `InjectorType`.\r\n *\r\n * Options:\r\n *\r\n * * `providers`: an optional array of providers to add to the injector. Each provider must\r\n *   either have a factory or point to a type which has a `ɵprov` static property (the\r\n *   type must be an `InjectableType`).\r\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\r\n *   whose providers will also be added to the injector. Locally provided types will override\r\n *   providers from imports.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdefineInjector(options) {\n  return {\n    providers: options.providers || [],\n    imports: options.imports || []\n  };\n}\n/**\r\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\r\n * inherited value.\r\n *\r\n * @param type A type which may have its own (non-inherited) `ɵprov`.\r\n */\nfunction getInjectableDef(type) {\n  return getOwnDefinition(type, NG_PROV_DEF);\n}\nfunction isInjectable(type) {\n  return getInjectableDef(type) !== null;\n}\n/**\r\n * Return definition only if it is defined directly on `type` and is not inherited from a base\r\n * class of `type`.\r\n */\nfunction getOwnDefinition(type, field) {\n  // if the ɵprov prop exist but is undefined we still want to return null\n  return type.hasOwnProperty(field) && type[field] || null;\n}\n/**\r\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\r\n *\r\n * @param type A type which may have `ɵprov`, via inheritance.\r\n *\r\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\r\n *     scenario if we find the `ɵprov` on an ancestor only.\r\n */\nfunction getInheritedInjectableDef(type) {\n  // if the ɵprov prop exist but is undefined we still want to return null\n  const def = type?.[NG_PROV_DEF] ?? null;\n  if (def) {\n    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\r\n *\r\n * @param type type which may have an injector def (`ɵinj`)\r\n */\nfunction getInjectorDef(type) {\n  return type && type.hasOwnProperty(NG_INJ_DEF) ? type[NG_INJ_DEF] : null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({\n  ɵprov: getClosureSafeProperty\n});\nconst NG_INJ_DEF = getClosureSafeProperty({\n  ɵinj: getClosureSafeProperty\n});\n\n/**\r\n * Creates a token that can be used in a DI Provider.\r\n *\r\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\r\n * runtime representation) such as when injecting an interface, callable type, array or\r\n * parameterized type.\r\n *\r\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\r\n * the `Injector`. This provides an additional level of type safety.\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n * **Important Note**: Ensure that you use the same instance of the `InjectionToken` in both the\r\n * provider and the injection call. Creating a new instance of `InjectionToken` in different places,\r\n * even with the same description, will be treated as different tokens by Angular's DI system,\r\n * leading to a `NullInjectorError`.\r\n *\r\n * </div>\r\n *\r\n * {@example injection-token/src/main.ts region='InjectionToken'}\r\n *\r\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\r\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\r\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\r\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\r\n * dependencies, it can do so using the [`inject`](api/core/inject) function.\r\n * As you can see in the Tree-shakable InjectionToken example below.\r\n *\r\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\r\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\r\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\r\n * `providedIn`.\r\n *\r\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\r\n *\r\n * @usageNotes\r\n * ### Basic Examples\r\n *\r\n * ### Plain InjectionToken\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\r\n *\r\n * ### Tree-shakable InjectionToken\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\r\n *\r\n * @publicApi\r\n */\nclass InjectionToken {\n  _desc;\n  /** @internal */\n  ngMetadataName = 'InjectionToken';\n  ɵprov;\n  /**\r\n   * @param _desc   Description for the token,\r\n   *                used only for debugging purposes,\r\n   *                it should but does not need to be unique\r\n   * @param options Options for the token's usage, as described above\r\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      this.__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    }\n  }\n  /**\r\n   * @internal\r\n   */\n  get multi() {\n    return this;\n  }\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n}\nlet _injectorProfilerContext;\nfunction getInjectorProfilerContext() {\n  !ngDevMode && throwError('getInjectorProfilerContext should never be called in production mode');\n  return _injectorProfilerContext;\n}\nfunction setInjectorProfilerContext(context) {\n  !ngDevMode && throwError('setInjectorProfilerContext should never be called in production mode');\n  const previous = _injectorProfilerContext;\n  _injectorProfilerContext = context;\n  return previous;\n}\nconst injectorProfilerCallbacks = [];\nconst NOOP_PROFILER_REMOVAL = () => {};\nfunction removeProfiler(profiler) {\n  const profilerIdx = injectorProfilerCallbacks.indexOf(profiler);\n  if (profilerIdx !== -1) {\n    injectorProfilerCallbacks.splice(profilerIdx, 1);\n  }\n}\n/**\r\n * Adds a callback function which will be invoked during certain DI events within the\r\n * runtime (for example: injecting services, creating injectable instances, configuring providers).\r\n * Multiple profiler callbacks can be set: in this case profiling events are\r\n * reported to every registered callback.\r\n *\r\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\r\n * The contract of the function might be changed in any release and/or the function can be removed\r\n * completely.\r\n *\r\n * @param profiler function provided by the caller or null value to disable profiling.\r\n * @returns a cleanup function that, when invoked, removes a given profiler callback.\r\n */\nfunction setInjectorProfiler(injectorProfiler) {\n  !ngDevMode && throwError('setInjectorProfiler should never be called in production mode');\n  if (injectorProfiler !== null) {\n    if (!injectorProfilerCallbacks.includes(injectorProfiler)) {\n      injectorProfilerCallbacks.push(injectorProfiler);\n    }\n    return () => removeProfiler(injectorProfiler);\n  } else {\n    injectorProfilerCallbacks.length = 0;\n    return NOOP_PROFILER_REMOVAL;\n  }\n}\n/**\r\n * Injector profiler function which emits on DI events executed by the runtime.\r\n *\r\n * @param event InjectorProfilerEvent corresponding to the DI event being emitted\r\n */\nfunction injectorProfiler(event) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  for (let i = 0; i < injectorProfilerCallbacks.length; i++) {\n    const injectorProfilerCallback = injectorProfilerCallbacks[i];\n    injectorProfilerCallback(event);\n  }\n}\n/**\r\n * Emits an InjectorProfilerEventType.ProviderConfigured to the injector profiler. The data in the\r\n * emitted event includes the raw provider, as well as the token that provider is providing.\r\n *\r\n * @param eventProvider A provider object\r\n */\nfunction emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  let token;\n  // if the provider is a TypeProvider (typeof provider is function) then the token is the\n  // provider itself\n  if (typeof eventProvider === 'function') {\n    token = eventProvider;\n  }\n  // if the provider is an injection token, then the token is the injection token.\n  else if (eventProvider instanceof InjectionToken) {\n    token = eventProvider;\n  }\n  // in all other cases we can access the token via the `provide` property of the provider\n  else {\n    token = resolveForwardRef(eventProvider.provide);\n  }\n  let provider = eventProvider;\n  // Injection tokens may define their own default provider which gets attached to the token itself\n  // as `ɵprov`. In this case, we want to emit the provider that is attached to the token, not the\n  // token itself.\n  if (eventProvider instanceof InjectionToken) {\n    provider = eventProvider.ɵprov || eventProvider;\n  }\n  injectorProfiler({\n    type: 2 /* InjectorProfilerEventType.ProviderConfigured */,\n    context: getInjectorProfilerContext(),\n    providerRecord: {\n      token,\n      provider,\n      isViewProvider\n    }\n  });\n}\n/**\r\n * Emits an event to the injector profiler when an instance corresponding to a given token is about to be created be an injector. Note that\r\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\r\n *\r\n * @param instance an object created by an injector\r\n */\nfunction emitInjectorToCreateInstanceEvent(token) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 4 /* InjectorProfilerEventType.InjectorToCreateInstanceEvent */,\n    context: getInjectorProfilerContext(),\n    token: token\n  });\n}\n/**\r\n * Emits an event to the injector profiler with the instance that was created. Note that\r\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\r\n *\r\n * @param instance an object created by an injector\r\n */\nfunction emitInstanceCreatedByInjectorEvent(instance) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */,\n    context: getInjectorProfilerContext(),\n    instance: {\n      value: instance\n    }\n  });\n}\n/**\r\n * @param token DI token associated with injected service\r\n * @param value the instance of the injected service (i.e the result of `inject(token)`)\r\n * @param flags the flags that the token was injected with\r\n */\nfunction emitInjectEvent(token, value, flags) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 0 /* InjectorProfilerEventType.Inject */,\n    context: getInjectorProfilerContext(),\n    service: {\n      token,\n      value,\n      flags\n    }\n  });\n}\nfunction emitEffectCreatedEvent(effect) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 3 /* InjectorProfilerEventType.EffectCreated */,\n    context: getInjectorProfilerContext(),\n    effect\n  });\n}\nfunction runInInjectorProfilerContext(injector, token, callback) {\n  !ngDevMode && throwError('runInInjectorProfilerContext should never be called in production mode');\n  const prevInjectContext = setInjectorProfilerContext({\n    injector,\n    token\n  });\n  try {\n    callback();\n  } finally {\n    setInjectorProfilerContext(prevInjectContext);\n  }\n}\nfunction isEnvironmentProviders(value) {\n  return value && !!value.ɵproviders;\n}\nconst NG_COMP_DEF = getClosureSafeProperty({\n  ɵcmp: getClosureSafeProperty\n});\nconst NG_DIR_DEF = getClosureSafeProperty({\n  ɵdir: getClosureSafeProperty\n});\nconst NG_PIPE_DEF = getClosureSafeProperty({\n  ɵpipe: getClosureSafeProperty\n});\nconst NG_MOD_DEF = getClosureSafeProperty({\n  ɵmod: getClosureSafeProperty\n});\nconst NG_FACTORY_DEF = getClosureSafeProperty({\n  ɵfac: getClosureSafeProperty\n});\n/**\r\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\r\n * the key and the directive's unique ID as the value. This allows us to map directives to their\r\n * bloom filter bit for DI.\r\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n/**\r\n * The `NG_ENV_ID` field on a DI token indicates special processing in the `EnvironmentInjector`:\r\n * getting such tokens from the `EnvironmentInjector` will bypass the standard DI resolution\r\n * strategy and instead will return implementation produced by the `NG_ENV_ID` factory function.\r\n *\r\n * This particular retrieval of DI tokens is mostly done to eliminate circular dependencies and\r\n * improve tree-shaking.\r\n */\nconst NG_ENV_ID = getClosureSafeProperty({\n  __NG_ENV_ID__: getClosureSafeProperty\n});\n\n/**\r\n * Used for stringify render output in Ivy.\r\n * Important! This function is very performance-sensitive and we should\r\n * be extra careful not to introduce megamorphic reads in it.\r\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\r\n */\nfunction renderStringify(value) {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n/**\r\n * Used to stringify a value so that it can be displayed in an error message.\r\n *\r\n * Important! This function contains a megamorphic read and should only be\r\n * used for error messages.\r\n */\nfunction stringifyForError(value) {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n  return renderStringify(value);\n}\n/**\r\n * Used to stringify a `Type` and including the file path and line number in which it is defined, if\r\n * possible, for better debugging experience.\r\n *\r\n * Important! This function contains a megamorphic read and should only be used for error messages.\r\n */\nfunction debugStringifyTypeForError(type) {\n  // TODO(pmvald): Do some refactoring so that we can use getComponentDef here without creating\n  // circular deps.\n  let componentDef = type[NG_COMP_DEF] || null;\n  if (componentDef !== null && componentDef.debugInfo) {\n    return stringifyTypeFromDebugInfo(componentDef.debugInfo);\n  }\n  return stringifyForError(type);\n}\n// TODO(pmvald): Do some refactoring so that we can use the type ClassDebugInfo for the param\n// debugInfo here without creating circular deps.\nfunction stringifyTypeFromDebugInfo(debugInfo) {\n  if (!debugInfo.filePath || !debugInfo.lineNumber) {\n    return debugInfo.className;\n  } else {\n    return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;\n  }\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n  throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, ngDevMode ? `Circular dependency in DI detected for ${token}${path ? `. Dependency path: ${path.join(' > ')} > ${token}` : ''}` : token);\n}\nfunction throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    } else {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n  const errorMessage = ngDevMode && `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ''}`;\n  throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, errorMessage);\n}\n\n/**\r\n * Current implementation of inject.\r\n *\r\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\r\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\r\n * way for two reasons:\r\n *  1. `Injector` should not depend on ivy logic.\r\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\r\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n  return _injectImplementation;\n}\n/**\r\n * Sets the current inject implementation.\r\n */\nfunction setInjectImplementation(impl) {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\r\n * Injects `root` tokens in limp mode.\r\n *\r\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\r\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\r\n * injectable definition.\r\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  const injectableDef = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n  if (flags & 8 /* InternalInjectFlags.Optional */) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(token, 'Injector');\n}\n/**\r\n * Assert that `_injectImplementation` is not `fn`.\r\n *\r\n * This is useful, to prevent infinite recursion.\r\n *\r\n * @param fn Function which it should not equal to\r\n */\nfunction assertInjectImplementationNotEqual(fn) {\n  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\r\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\r\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\r\n * in the code, thus making them tree-shakable.\r\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\n/**\r\n * A wrapper around an `Injector` that implements the `PrimitivesInjector` interface.\r\n *\r\n * This is used to allow the `inject` function to be used with the new primitives-based DI system.\r\n */\nclass RetrievingInjector {\n  injector;\n  constructor(injector) {\n    this.injector = injector;\n  }\n  retrieve(token, options) {\n    const flags = convertToBitFlags(options) || 0 /* InternalInjectFlags.Default */;\n    try {\n      return this.injector.get(token,\n      // When a dependency is requested with an optional flag, DI returns null as the default value.\n      flags & 8 /* InternalInjectFlags.Optional */ ? null : THROW_IF_NOT_FOUND, flags);\n    } catch (e) {\n      if (isNotFound(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n}\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\nfunction injectInjectorOnly(token, flags = 0 /* InternalInjectFlags.Default */) {\n  const currentInjector = getCurrentInjector();\n  if (currentInjector === undefined) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && `The \\`${stringify(token)}\\` token injection failed. \\`inject()\\` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`runInInjectionContext\\`.`);\n  } else if (currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    const options = convertToInjectOptions(flags);\n    const value = currentInjector.retrieve(token, options);\n    ngDevMode && emitInjectEvent(token, value, flags);\n    if (isNotFound(value)) {\n      if (options.optional) {\n        return null;\n      }\n      throw value;\n    }\n    return value;\n  }\n}\nfunction ɵɵinject(token, flags = 0 /* InternalInjectFlags.Default */) {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\r\n * Throws an error indicating that a factory function could not be generated by the compiler for a\r\n * particular class.\r\n *\r\n * The name of the class is not mentioned here, but will be in the generated factory function name\r\n * and thus in the stack trace.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵinvalidFactoryDep(index) {\n  throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\r\n * Injects a token from the currently active injector.\r\n * `inject` is only supported in an [injection context](guide/di/dependency-injection-context). It\r\n * can be used during:\r\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\r\n * as an `@Injectable` or `@Component`.\r\n * - In the initializer for fields of such classes.\r\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\r\n * - In the `factory` function specified for an `InjectionToken`.\r\n * - In a stackframe of a function call in a DI context\r\n *\r\n * @param token A token that represents a dependency that should be injected.\r\n * @param flags Optional flags that control how injection is executed.\r\n * The flags correspond to injection strategies that can be specified with\r\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\r\n * @returns the injected value if operation is successful, `null` otherwise.\r\n * @throws if called outside of a supported context.\r\n *\r\n * @usageNotes\r\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\r\n * field initializer:\r\n *\r\n * ```ts\r\n * @Injectable({providedIn: 'root'})\r\n * export class Car {\r\n *   radio: Radio|undefined;\r\n *   // OK: field initializer\r\n *   spareTyre = inject(Tyre);\r\n *\r\n *   constructor() {\r\n *     // OK: constructor body\r\n *     this.radio = inject(Radio);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * It is also legal to call `inject` from a provider's factory:\r\n *\r\n * ```ts\r\n * providers: [\r\n *   {provide: Car, useFactory: () => {\r\n *     // OK: a class factory\r\n *     const engine = inject(Engine);\r\n *     return new Car(engine);\r\n *   }}\r\n * ]\r\n * ```\r\n *\r\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\r\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\r\n * (including lifecycle hooks):\r\n *\r\n * ```ts\r\n * @Component({ ... })\r\n * export class CarComponent {\r\n *   ngOnInit() {\r\n *     // ERROR: too late, the component instance was already created\r\n *     const engine = inject(Engine);\r\n *     engine.start();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction inject(token, options) {\n  // The `as any` here _shouldn't_ be necessary, but without it JSCompiler\n  // throws a disambiguation  error due to the multiple signatures.\n  return ɵɵinject(token, convertToBitFlags(options));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return 0 /* InternalInjectFlags.Default */ | (\n  // comment to force a line break in the formatter\n  flags.optional && 8 /* InternalInjectFlags.Optional */) | (flags.host && 1 /* InternalInjectFlags.Host */) | (flags.self && 2 /* InternalInjectFlags.Self */) | (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */);\n}\n// Converts bitflags to inject options\nfunction convertToInjectOptions(flags) {\n  return {\n    optional: !!(flags & 8 /* InternalInjectFlags.Optional */),\n    host: !!(flags & 1 /* InternalInjectFlags.Host */),\n    self: !!(flags & 2 /* InternalInjectFlags.Self */),\n    skipSelf: !!(flags & 4 /* InternalInjectFlags.SkipSelf */)\n  };\n}\nfunction injectArgs(types) {\n  const args = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n      }\n      let type = undefined;\n      let flags = 0 /* InternalInjectFlags.Default */;\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === -1 /* DecoratorFlags.Inject */) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n      args.push(ɵɵinject(type, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n/**\r\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\r\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\r\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\r\n * attach the flag to make it available both as a static property and as a field on decorator\r\n * instance.\r\n *\r\n * @param decorator Provided DI decorator.\r\n * @param flag InjectFlag that should be applied.\r\n */\nfunction attachInjectFlag(decorator, flag) {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n/**\r\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\r\n *\r\n * @param token Token that may contain monkey-patched DI flags property.\r\n */\nfunction getInjectFlag(token) {\n  return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n  const tokenPath = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = [];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\nfunction getFactoryDef(type, throwNotFound) {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\r\n * Determines if the contents of two arrays is identical\r\n *\r\n * @param a first array\r\n * @param b second array\r\n * @param identityAccessor Optional function for extracting stable object identity from a value in\r\n *     the array.\r\n */\nfunction arrayEquals(a, b, identityAccessor) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA);\n      valueB = identityAccessor(valueB);\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * Flattens an array.\r\n */\nfunction flatten(list) {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\nfunction newArray(size, value) {\n  const list = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n  return list;\n}\n/**\r\n * Remove item from array (Same as `Array.splice()` but faster.)\r\n *\r\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\r\n * removed. This causes memory pressure and slows down code when most of the time we don't\r\n * care about the deleted items array.\r\n *\r\n * https://jsperf.com/fast-array-splice (About 20x faster)\r\n *\r\n * @param array Array to splice\r\n * @param index Index of element in array to remove.\r\n * @param count Number of items to remove.\r\n */\nfunction arraySplice(array, index, count) {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n/**\r\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\r\n *\r\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\r\n * removed. This causes memory pressure and slows down code when most of the time we don't\r\n * care about the deleted items array.\r\n *\r\n * @param array Array to splice.\r\n * @param index Index in array where the `value` should be added.\r\n * @param value1 Value to add to array.\r\n * @param value2 Value to add to array.\r\n */\nfunction arrayInsert2(array, index, value1, value2) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, \"Can't insert past array end.\");\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n/**\r\n * Set a `value` for a `key`.\r\n *\r\n * @param keyValueArray to modify.\r\n * @param key The key to locate or create.\r\n * @param value The value to set for a `key`.\r\n * @returns index (always even) of where the value vas set.\r\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n/**\r\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\r\n *\r\n * @param keyValueArray to search.\r\n * @param key The key to locate.\r\n * @return The `value` stored at the `key` location or `undefined if not found.\r\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1];\n  }\n  return undefined;\n}\n/**\r\n * Retrieve a `key` index value in the array or `-1` if not found.\r\n *\r\n * @param keyValueArray to search.\r\n * @param key The key to locate.\r\n * @returns index of where the key is (or should have been.)\r\n *   - positive (even) index if key found.\r\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\r\n *     been inserted.)\r\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n  return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\r\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\r\n *\r\n * NOTE:\r\n * - This uses binary search algorithm for fast removals.\r\n *\r\n * @param array A sorted array to binary search.\r\n * @param value The value to look for.\r\n * @param shift grouping shift.\r\n *   - `0` means look at every location\r\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\r\n *         they are values.)\r\n * @returns index of the value.\r\n *   - positive index if value found.\r\n *   - negative index if value not found. (`~index` to get the value where it should have been\r\n * inserted)\r\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + (end - start >> 1); // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n  return ~(end << shift);\n}\n\n/**\r\n * This file contains reuseable \"empty\" symbols that can be used as default return values\r\n * in different parts of the rendering code. Because the same symbols are returned, this\r\n * allows for identity checks against these values to be consistently used by the framework\r\n * code.\r\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n\n/**\r\n * A multi-provider token for initialization functions that will run upon construction of an\r\n * environment injector.\r\n *\r\n * @deprecated from v19.0.0, use provideEnvironmentInitializer instead\r\n *\r\n * @see {@link provideEnvironmentInitializer}\r\n *\r\n * Note: As opposed to the `APP_INITIALIZER` token, the `ENVIRONMENT_INITIALIZER` functions are not awaited,\r\n * hence they should not be `async`.\r\n *\r\n * @publicApi\r\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken(ngDevMode ? 'ENVIRONMENT_INITIALIZER' : '');\n\n/**\r\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\r\n *\r\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\r\n * project.\r\n *\r\n * @publicApi\r\n */\nconst INJECTOR$1 = new InjectionToken(ngDevMode ? 'INJECTOR' : '',\n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\nconst INJECTOR_DEF_TYPES = new InjectionToken(ngDevMode ? 'INJECTOR_DEF_TYPES' : '');\nclass NullInjector {\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new NotFoundError(`NullInjectorError: No provider for ${stringify(token)}!`);\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\nfunction getNgModuleDef(type) {\n  return type[NG_MOD_DEF] || null;\n}\nfunction getNgModuleDefOrThrow(type) {\n  const ngModuleDef = getNgModuleDef(type);\n  if (!ngModuleDef) {\n    throw new RuntimeError(915 /* RuntimeErrorCode.MISSING_NG_MODULE_DEFINITION */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\n/**\r\n * The following getter methods retrieve the definition from the type. Currently the retrieval\r\n * honors inheritance, but in the future we may change the rule to require that definitions are\r\n * explicit. This would require some sort of migration strategy.\r\n */\nfunction getComponentDef(type) {\n  return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDefOrThrow(type) {\n  const def = getDirectiveDef(type);\n  if (!def) {\n    throw new RuntimeError(916 /* RuntimeErrorCode.MISSING_DIRECTIVE_DEFINITION */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Type ${stringify(type)} does not have 'ɵdir' property.`);\n  }\n  return def;\n}\nfunction getDirectiveDef(type) {\n  return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef(type) {\n  return type[NG_PIPE_DEF] || null;\n}\n/**\r\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\r\n * This will return false if passed anything other than a Component, Directive, or Pipe class\r\n * See [this guide](guide/components/importing) for additional information:\r\n *\r\n * @param type A reference to a Component, Directive or Pipe.\r\n * @publicApi\r\n */\nfunction isStandalone(type) {\n  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n  return def !== null && def.standalone;\n}\n\n/**\r\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\r\n * referenced in `@Component` in a component injector.\r\n *\r\n * @publicApi\r\n */\nfunction makeEnvironmentProviders(providers) {\n  return {\n    ɵproviders: providers\n  };\n}\n/**\r\n * @description\r\n * This function is used to provide initialization functions that will be executed upon construction\r\n * of an environment injector.\r\n *\r\n * Note that the provided initializer is run in the injection context.\r\n *\r\n * Previously, this was achieved using the `ENVIRONMENT_INITIALIZER` token which is now deprecated.\r\n *\r\n * @see {@link ENVIRONMENT_INITIALIZER}\r\n *\r\n * @usageNotes\r\n * The following example illustrates how to configure an initialization function using\r\n * `provideEnvironmentInitializer()`\r\n * ```ts\r\n * createEnvironmentInjector(\r\n *   [\r\n *     provideEnvironmentInitializer(() => {\r\n *       console.log('environment initialized');\r\n *     }),\r\n *   ],\r\n *   parentInjector\r\n * );\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction provideEnvironmentInitializer(initializerFn) {\n  return makeEnvironmentProviders([{\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useValue: initializerFn\n  }]);\n}\n/**\r\n * Collects providers from all NgModules and standalone components, including transitively imported\r\n * ones.\r\n *\r\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\r\n * another environment injector (such as a route injector). They should not be used in component\r\n * providers.\r\n *\r\n * More information about standalone components can be found in [this\r\n * guide](guide/components/importing).\r\n *\r\n * @usageNotes\r\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\r\n *\r\n * ```ts\r\n * await bootstrapApplication(RootComponent, {\r\n *   providers: [\r\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\r\n * standalone component is used:\r\n *\r\n * ```ts\r\n * export const ROUTES: Route[] = [\r\n *   {\r\n *     path: 'foo',\r\n *     providers: [\r\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\r\n *     ],\r\n *     component: YourStandaloneComponent\r\n *   }\r\n * ];\r\n * ```\r\n *\r\n * @returns Collected providers from the specified list of types.\r\n * @publicApi\r\n */\nfunction importProvidersFrom(...sources) {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true\n  };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n  const providersOut = [];\n  const dedup = new Set(); // already seen types\n  let injectorTypesWithProviders;\n  const collectProviders = provider => {\n    providersOut.push(provider);\n  };\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef(source);\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n      }\n    }\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source;\n    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {\n      injectorTypesWithProviders ||= [];\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);\n  }\n  return providersOut;\n}\n/**\r\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\r\n * array.\r\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, visitor) {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {\n      ngModule,\n      providers\n    } = typesWithProviders[i];\n    deepForEachProvider(providers, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      visitor(provider, ngModule);\n    });\n  }\n}\n/**\r\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\r\n * `ComponentType`, and all of its transitive providers and collects providers.\r\n *\r\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\r\n * the function will return \"true\" to indicate that the providers of the type definition need\r\n * to be processed. This allows us to process providers of injector types after all imports of\r\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\r\n */\nfunction walkProviderTree(container, visitor, parents, dedup) {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType = null;\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule = container.ngModule;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container;\n  }\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  }\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n    if (cmpDef.dependencies) {\n      const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, visitor, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n      let importTypesWithProviders;\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, visitor, parents, dedup)) {\n            importTypesWithProviders ||= [];\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, visitor);\n      }\n    }\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType());\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n      // Provider to create `defType` using its factory.\n      visitor({\n        provide: defType,\n        useFactory: factory,\n        deps: EMPTY_ARRAY\n      }, defType);\n      // Make this `defType` available to an internal logic that calculates injector scope.\n      visitor({\n        provide: INJECTOR_DEF_TYPES,\n        useValue: defType,\n        multi: true\n      }, defType);\n      // Provider to eagerly instantiate `defType` via `INJECTOR_INITIALIZER`.\n      visitor({\n        provide: ENVIRONMENT_INITIALIZER,\n        useValue: () => ɵɵinject(defType),\n        multi: true\n      }, defType);\n    }\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container;\n      deepForEachProvider(defProviders, provider => {\n        ngDevMode && validateProvider(provider, defProviders, injectorType);\n        visitor(provider, injectorType);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n  return defType !== container && container.providers !== undefined;\n}\nfunction validateProvider(provider, providers, containerType) {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {\n    return;\n  }\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\nfunction deepForEachProvider(providers, fn) {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isValueProvider(value) {\n  return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\nfunction isExistingProvider(value) {\n  return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n  return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n  return !!value.useClass;\n}\n\n/**\r\n * An internal token whose presence in an injector indicates that the injector should treat itself\r\n * as a root scoped injector when processing requests for unknown tokens which may indicate\r\n * they are provided in the root scope.\r\n */\nconst INJECTOR_SCOPE = new InjectionToken(ngDevMode ? 'Set Injector scope.' : '');\n\n/**\r\n * Marker which indicates that a value has not yet been created from the factory function.\r\n */\nconst NOT_YET = {};\n/**\r\n * Marker which indicates that the factory function for a token is in the process of being called.\r\n *\r\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\r\n * injection of a dependency has recursively attempted to inject the original token, and there is\r\n * a circular dependency among the providers.\r\n */\nconst CIRCULAR = {};\n/**\r\n * A lazily initialized NullInjector.\r\n */\nlet NULL_INJECTOR = undefined;\nfunction getNullInjector() {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n/**\r\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\r\n * component tree.\r\n *\r\n * @publicApi\r\n */\nclass EnvironmentInjector {}\nclass R3Injector extends EnvironmentInjector {\n  parent;\n  source;\n  scopes;\n  /**\r\n   * Map of tokens to records which contain the instances of those tokens.\r\n   * - `null` value implies that we don't have the record. Used by tree-shakable injectors\r\n   * to prevent further searches.\r\n   */\n  records = new Map();\n  /**\r\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\r\n   */\n  _ngOnDestroyHooks = new Set();\n  _onDestroyHooks = [];\n  /**\r\n   * Flag indicating that this injector was previously destroyed.\r\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  _destroyed = false;\n  injectorDefTypes;\n  constructor(providers, parent, source, scopes) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.scopes = scopes;\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(providers, provider => this.processProvider(provider));\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR$1, makeRecord(undefined, this));\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value);\n    }\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, {\n      self: true\n    }));\n  }\n  retrieve(token, options) {\n    const flags = convertToBitFlags(options) || 0 /* InternalInjectFlags.Default */;\n    try {\n      return this.get(token,\n      // When a dependency is requested with an optional flag, DI returns null as the default value.\n      THROW_IF_NOT_FOUND, flags);\n    } catch (e) {\n      if (isNotFound$1(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  /**\r\n   * Destroy the injector and release references to every instance or provider associated with it.\r\n   *\r\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n   * hook was found.\r\n   */\n  destroy() {\n    assertNotDestroyed(this);\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      const onDestroyHooks = this._onDestroyHooks;\n      // Reset the _onDestroyHooks array before iterating over it to prevent hooks that unregister\n      // themselves from mutating the array during iteration.\n      this._onDestroyHooks = [];\n      for (const hook of onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  onDestroy(callback) {\n    assertNotDestroyed(this);\n    this._onDestroyHooks.push(callback);\n    return () => this.removeOnDestroy(callback);\n  }\n  runInContext(fn) {\n    assertNotDestroyed(this);\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: null\n      });\n    }\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, options) {\n    assertNotDestroyed(this);\n    if (token.hasOwnProperty(NG_ENV_ID)) {\n      return token[NG_ENV_ID](this);\n    }\n    const flags = convertToBitFlags(options);\n    // Set the injection context.\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: token\n      });\n    }\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & 4 /* InternalInjectFlags.SkipSelf */)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            if (ngDevMode) {\n              runInInjectorProfilerContext(this, token, () => {\n                emitProviderConfiguredEvent(token);\n              });\n            }\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & 2 /* InternalInjectFlags.Self */) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = flags & 8 /* InternalInjectFlags.Optional */ && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (isNotFound$1(e)) {\n        // @ts-ignore\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  /** @internal */\n  resolveInjectorInitializers() {\n    const prevConsumer = setActiveConsumer(null);\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: null\n      });\n    }\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, {\n        self: true\n      });\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' + `(expected an array, but got ${typeof initializers}). ` + 'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  toString() {\n    const tokens = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n  /**\r\n   * Process a `SingleProvider` and add it.\r\n   */\n  processProvider(provider) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n    if (ngDevMode) {\n      runInInjectorProfilerContext(this, token, () => {\n        // Emit InjectorProfilerEventType.Create if provider is a value provider because\n        // these are the only providers that do not go through the value hydration logic\n        // where this event would normally be emitted from.\n        if (isValueProvider(provider)) {\n          emitInjectorToCreateInstanceEvent(token);\n          emitInstanceCreatedByInjectorEvent(provider.useValue);\n        }\n        emitProviderConfiguredEvent(provider);\n      });\n    }\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord.multi);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi.push(provider);\n    } else {\n      if (ngDevMode) {\n        const existing = this.records.get(token);\n        if (existing && existing.multi !== undefined) {\n          throwMixedMultiProviderError();\n        }\n      }\n    }\n    this.records.set(token, record);\n  }\n  hydrate(token, record) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      if (record.value === CIRCULAR) {\n        throwCyclicDependencyError(stringify(token));\n      } else if (record.value === NOT_YET) {\n        record.value = CIRCULAR;\n        if (ngDevMode) {\n          runInInjectorProfilerContext(this, token, () => {\n            emitInjectorToCreateInstanceEvent(token);\n            record.value = record.factory();\n            emitInstanceCreatedByInjectorEvent(record.value);\n          });\n        } else {\n          record.value = record.factory();\n        }\n      }\n      if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n        this._ngOnDestroyHooks.add(record.value);\n      }\n      return record.value;\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n  removeOnDestroy(callback) {\n    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);\n    if (destroyCBIdx !== -1) {\n      this._onDestroyHooks.splice(destroyCBIdx, 1);\n    }\n  }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n  if (factory !== null) {\n    return factory;\n  }\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, '?').join(', ')}).`);\n  }\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token);\n  } else {\n    return () => new token();\n  }\n}\nfunction providerToRecord(provider) {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\r\n * Converts a `SingleProvider` into a factory function.\r\n *\r\n * @param provider provider to convert to factory\r\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n  let factory = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\nfunction assertNotDestroyed(injector) {\n  if (injector.destroyed) {\n    throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n  }\n}\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\nfunction hasDeps(value) {\n  return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value.ngMetadataName === 'InjectionToken';\n}\nfunction forEachSingleProvider(providers, fn) {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\n/**\r\n * Runs the given function in the [context](guide/di/dependency-injection-context) of the given\r\n * `Injector`.\r\n *\r\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\r\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\r\n * any asynchronous callbacks or after any `await` points.\r\n *\r\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\r\n *     is executing\r\n * @param fn the closure to be run in the context of `injector`\r\n * @returns the return value of the function, if any\r\n * @publicApi\r\n */\nfunction runInInjectionContext(injector, fn) {\n  let internalInjector;\n  if (injector instanceof R3Injector) {\n    assertNotDestroyed(injector);\n    internalInjector = injector;\n  } else {\n    internalInjector = new RetrievingInjector(injector);\n  }\n  let prevInjectorProfilerContext;\n  if (ngDevMode) {\n    prevInjectorProfilerContext = setInjectorProfilerContext({\n      injector,\n      token: null\n    });\n  }\n  const prevInjector = setCurrentInjector(internalInjector);\n  const previousInjectImplementation = setInjectImplementation(undefined);\n  try {\n    return fn();\n  } finally {\n    setCurrentInjector(prevInjector);\n    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n/**\r\n * Whether the current stack frame is inside an injection context.\r\n */\nfunction isInInjectionContext() {\n  return getInjectImplementation() !== undefined || getCurrentInjector() != null;\n}\n/**\r\n * Asserts that the current stack frame is within an [injection\r\n * context](guide/di/dependency-injection-context) and has access to `inject`.\r\n *\r\n * @param debugFn a reference to the function making the assertion (used for the error message).\r\n *\r\n * @publicApi\r\n */\nfunction assertInInjectionContext(debugFn) {\n  // Taking a `Function` instead of a string name here prevents the unminified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (!isInInjectionContext()) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && debugFn.name + '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`');\n  }\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\n// Shared with LContainer\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst T_HOST = 5;\n// End shared with LContainer\nconst HYDRATION = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR = 9;\nconst ENVIRONMENT = 10;\nconst RENDERER = 11;\nconst CHILD_HEAD = 12;\nconst CHILD_TAIL = 13;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 14;\nconst DECLARATION_COMPONENT_VIEW = 15;\nconst DECLARATION_LCONTAINER = 16;\nconst PREORDER_HOOK_FLAGS = 17;\nconst QUERIES = 18;\nconst ID = 19;\nconst EMBEDDED_VIEW_INJECTOR = 20;\nconst ON_DESTROY_HOOKS = 21;\nconst EFFECTS_TO_SCHEDULE = 22;\nconst EFFECTS = 23;\nconst REACTIVE_TEMPLATE_CONSUMER = 24;\nconst AFTER_RENDER_SEQUENCES_TO_ADD = 25;\n/**\r\n * Size of LView's header. Necessary to adjust for it when setting slots.\r\n *\r\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\r\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\r\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\r\n */\nconst HEADER_OFFSET = 26;\n\n/**\r\n * Special location which allows easy identification of type. If we have an array which was\r\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\r\n * `LContainer`.\r\n */\nconst TYPE = 1;\n/**\r\n * Below are constants for LContainer indices to help us look up LContainer members\r\n * without having to remember the specific indices.\r\n * Uglify will inline these when minifying so there shouldn't be a cost.\r\n */\n// FLAGS, PARENT, NEXT, and T_HOST are indices 2, 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\nconst DEHYDRATED_VIEWS = 6;\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\r\n * Size of LContainer's header. Represents the index after which all views in the\r\n * container will be inserted. We need to keep a record of current views so we know\r\n * which views are already in the DOM (and don't need to be re-added) and so we can\r\n * remove views from the DOM when they are no longer required.\r\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n\n/**\r\n * True if `value` is `LView`.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\r\n * True if `value` is `LContainer`.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n  return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n  return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\nfunction isComponentDef(def) {\n  return !!def.template;\n}\nfunction isRootView(target) {\n  // Determines whether a given LView is marked as a root view.\n  return (target[FLAGS] & 512 /* LViewFlags.IsRoot */) !== 0;\n}\nfunction isProjectionTNode(tNode) {\n  return (tNode.type & 16 /* TNodeType.Projection */) === 16 /* TNodeType.Projection */;\n}\nfunction hasI18n(lView) {\n  return (lView[FLAGS] & 32 /* LViewFlags.HasI18n */) === 32 /* LViewFlags.HasI18n */;\n}\nfunction isDestroyed(lView) {\n  // Determines whether a given LView is marked as destroyed.\n  return (lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n  assertTNode(tNode);\n  const tData = tView.data;\n  for (let i = HEADER_OFFSET; i < tData.length; i++) {\n    if (tData[i] === tNode) {\n      return;\n    }\n  }\n  throwError('This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n  assertDefined(tNode, 'TNode must be defined');\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\nfunction assertTIcu(tIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\nfunction assertComponentType(actual, msg = \"Type passed in is not ComponentType, it does not have 'ɵcmp' property.\") {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertNgModuleType(actual, msg = \"Type passed in is not NgModuleType, it does not have 'ɵmod' property.\") {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertHasParent(tNode) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n  assertEqual(tView.firstUpdatePass, true, 'Should only be called in first update pass.');\n}\n/**\r\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\r\n * an interface, so we can't do a direct instanceof check.\r\n */\nfunction assertDirectiveDef(obj) {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\nfunction assertIndexInDeclRange(tView, index) {\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, 'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n  assertDefined(lView, \"Component views should always have a parent view (component's host view)\");\n}\n/**\r\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\r\n * NodeInjector data structure.\r\n *\r\n * @param lView `LView` which should be checked.\r\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\r\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n/**\r\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\r\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\r\n * because the storage is sparse. This file contains utilities for dealing with such data types.\r\n *\r\n * How do we know what is stored at a given location in `LView`.\r\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\r\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\r\n *   - `typeof value[TYPE] === 'object'` => `LView`\r\n *      - This happens when we have a component at a given location\r\n *   - `typeof value[TYPE] === true` => `LContainer`\r\n *      - This happens when we have `LContainer` binding at a given location.\r\n *\r\n *\r\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\r\n */\n/**\r\n * Returns `RNode`.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\nfunction unwrapRNode(value) {\n  while (Array.isArray(value)) {\n    value = value[HOST];\n  }\n  return value;\n}\n/**\r\n * Returns `LView` or `null` if not found.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\nfunction unwrapLView(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value;\n    value = value[HOST];\n  }\n  return null;\n}\n/**\r\n * Retrieves an element value from the provided `viewData`, by unwrapping\r\n * from any containers, component views, or style contexts.\r\n */\nfunction getNativeByIndex(index, lView) {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n/**\r\n * Retrieve an `RNode` for a given `TNode` and `LView`.\r\n *\r\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\r\n *\r\n * @param tNode\r\n * @param lView\r\n */\nfunction getNativeByTNode(tNode, lView) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n/**\r\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\r\n *\r\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\r\n *\r\n * @param tNode\r\n * @param lView\r\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const node = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index];\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n  return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\r\n * Returns a boolean for whether the view is attached to the change detection tree.\r\n *\r\n * Note: This determines whether a view should be checked, not whether it's inserted\r\n * into a container. For that, you'll want `viewAttachedToContainer` below.\r\n */\nfunction viewAttachedToChangeDetector(view) {\n  return (view[FLAGS] & 128 /* LViewFlags.Attached */) === 128 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n  return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts, index);\n  return consts[index];\n}\n/**\r\n * Resets the pre-order hook flags of the view.\r\n * @param lView the LView on which the flags are reset\r\n */\nfunction resetPreOrderHookFlags(lView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\r\n * Adds the `RefreshView` flag from the lView and updates HAS_CHILD_VIEWS_TO_REFRESH flag of\r\n * parents.\r\n */\nfunction markViewForRefresh(lView) {\n  if (lView[FLAGS] & 1024 /* LViewFlags.RefreshView */) {\n    return;\n  }\n  lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  if (viewAttachedToChangeDetector(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n/**\r\n * Walks up the LView hierarchy.\r\n * @param nestingLevel Number of times to walk up in hierarchy.\r\n * @param currentView View from which to start the lookup.\r\n */\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n  return currentView;\n}\nfunction requiresRefreshOrTraversal(lView) {\n  return !!(lView[FLAGS] & (1024 /* LViewFlags.RefreshView */ | 8192 /* LViewFlags.HasChildViewsToRefresh */) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);\n}\n/**\r\n * Updates the `HasChildViewsToRefresh` flag on the parents of the `LView` as well as the\r\n * parents above.\r\n */\nfunction updateAncestorTraversalFlagsOnAttach(lView) {\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(8 /* NotificationSource.ViewAttached */);\n  if (lView[FLAGS] & 64 /* LViewFlags.Dirty */) {\n    lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  }\n  if (requiresRefreshOrTraversal(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n/**\r\n * Ensures views above the given `lView` are traversed during change detection even when they are\r\n * not dirty.\r\n *\r\n * This is done by setting the `HAS_CHILD_VIEWS_TO_REFRESH` flag up to the root, stopping when the\r\n * flag is already `true` or the `lView` is detached.\r\n */\nfunction markAncestorsForTraversal(lView) {\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(0 /* NotificationSource.MarkAncestorsForTraversal */);\n  let parent = getLViewParent(lView);\n  while (parent !== null) {\n    // We stop adding markers to the ancestors once we reach one that already has the marker. This\n    // is to avoid needlessly traversing all the way to the root when the marker already exists.\n    if (parent[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n      break;\n    }\n    parent[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n    if (!viewAttachedToChangeDetector(parent)) {\n      break;\n    }\n    parent = getLViewParent(parent);\n  }\n}\n/**\r\n * Stores a LView-specific destroy callback.\r\n */\nfunction storeLViewOnDestroy(lView, onDestroyCallback) {\n  if (isDestroyed(lView)) {\n    throw new RuntimeError(911 /* RuntimeErrorCode.VIEW_ALREADY_DESTROYED */, ngDevMode && 'View has already been destroyed.');\n  }\n  if (lView[ON_DESTROY_HOOKS] === null) {\n    lView[ON_DESTROY_HOOKS] = [];\n  }\n  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);\n}\n/**\r\n * Removes previously registered LView-specific destroy callback.\r\n */\nfunction removeLViewOnDestroy(lView, onDestroyCallback) {\n  if (lView[ON_DESTROY_HOOKS] === null) return;\n  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);\n  if (destroyCBIdx !== -1) {\n    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);\n  }\n}\n/**\r\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\r\n * that LContainer, which is an LView\r\n * @param lView the lView whose parent to get\r\n */\nfunction getLViewParent(lView) {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\nfunction getOrCreateLViewCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] ??= [];\n}\nfunction getOrCreateTViewCleanup(tView) {\n  return tView.cleanup ??= [];\n}\n/**\r\n * Saves context for this cleanup function in LView.cleanupInstances.\r\n *\r\n * On the first template pass, saves in TView:\r\n * - Cleanup function\r\n * - Index of context we just saved in LView.cleanupInstances\r\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  // Historically the `storeCleanupWithContext` was used to register both framework-level and\n  // user-defined cleanup callbacks, but over time those two types of cleanups were separated.\n  // This dev mode checks assures that user-level cleanup callbacks are _not_ stored in data\n  // structures reserved for framework-specific hooks.\n  ngDevMode && assertDefined(context, 'Cleanup context is mandatory when registering framework-level destroy hooks');\n  lCleanup.push(context);\n  if (tView.firstCreatePass) {\n    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n  } else {\n    // Make sure that no new framework-level cleanup functions are registered after the first\n    // template pass is done (and TView data structures are meant to fully constructed).\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n  }\n}\nconst instructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true,\n  skipHydrationRootTNode: null\n};\nvar CheckNoChangesMode;\n(function (CheckNoChangesMode) {\n  CheckNoChangesMode[CheckNoChangesMode[\"Off\"] = 0] = \"Off\";\n  CheckNoChangesMode[CheckNoChangesMode[\"Exhaustive\"] = 1] = \"Exhaustive\";\n  CheckNoChangesMode[CheckNoChangesMode[\"OnlyDirtyViews\"] = 2] = \"OnlyDirtyViews\";\n})(CheckNoChangesMode || (CheckNoChangesMode = {}));\n/**\r\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\r\n *\r\n * Necessary to support ChangeDetectorRef.checkNoChanges().\r\n *\r\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\r\n * changes exist in the change detector or its children.\r\n */\nlet _checkNoChangesMode = 0; /* CheckNoChangesMode.Off */\n/**\r\n * Flag used to indicate that we are in the middle running change detection on a view\r\n *\r\n * @see detectChangesInViewWhileDirty\r\n */\nlet _isRefreshingViews = false;\nfunction getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n  return instructionState.bindingsEnabled;\n}\n/**\r\n * Returns true if currently inside a skip hydration block.\r\n * @returns boolean\r\n */\nfunction isInSkipHydrationBlock() {\n  return instructionState.skipHydrationRootTNode !== null;\n}\n/**\r\n * Returns true if this is the root TNode of the skip hydration block.\r\n * @param tNode the current TNode\r\n * @returns boolean\r\n */\nfunction isSkipHydrationRootTNode(tNode) {\n  return instructionState.skipHydrationRootTNode === tNode;\n}\n/**\r\n * Enables directive matching on elements.\r\n *\r\n *  * Example:\r\n * ```html\r\n * <my-comp my-directive>\r\n *   Should match component / directive.\r\n * </my-comp>\r\n * <div ngNonBindable>\r\n *   <!-- ɵɵdisableBindings() -->\r\n *   <my-comp my-directive>\r\n *     Should not match component / directive because we are in ngNonBindable.\r\n *   </my-comp>\r\n *   <!-- ɵɵenableBindings() -->\r\n * </div>\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵenableBindings() {\n  instructionState.bindingsEnabled = true;\n}\n/**\r\n * Sets a flag to specify that the TNode is in a skip hydration block.\r\n * @param tNode the current TNode\r\n */\nfunction enterSkipHydrationBlock(tNode) {\n  instructionState.skipHydrationRootTNode = tNode;\n}\n/**\r\n * Disables directive matching on element.\r\n *\r\n *  * Example:\r\n * ```html\r\n * <my-comp my-directive>\r\n *   Should match component / directive.\r\n * </my-comp>\r\n * <div ngNonBindable>\r\n *   <!-- ɵɵdisableBindings() -->\r\n *   <my-comp my-directive>\r\n *     Should not match component / directive because we are in ngNonBindable.\r\n *   </my-comp>\r\n *   <!-- ɵɵenableBindings() -->\r\n * </div>\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdisableBindings() {\n  instructionState.bindingsEnabled = false;\n}\n/**\r\n * Clears the root skip hydration node when leaving a skip hydration block.\r\n */\nfunction leaveSkipHydrationBlock() {\n  instructionState.skipHydrationRootTNode = null;\n}\n/**\r\n * Return the current `LView`.\r\n */\nfunction getLView() {\n  return instructionState.lFrame.lView;\n}\n/**\r\n * Return the current `TView`.\r\n */\nfunction getTView() {\n  return instructionState.lFrame.tView;\n}\n/**\r\n * Restores `contextViewData` to the given OpaqueViewState instance.\r\n *\r\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\r\n * of the current view and restore it when listeners are invoked. This allows\r\n * walking the declaration view tree in listeners to get vars from parent views.\r\n *\r\n * @param viewToRestore The OpaqueViewState instance to restore.\r\n * @returns Context of the restored OpaqueViewState instance.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵrestoreView(viewToRestore) {\n  instructionState.lFrame.contextLView = viewToRestore;\n  return viewToRestore[CONTEXT];\n}\n/**\r\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\r\n * value so that it can be used as a return value of an instruction.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵresetView(value) {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\nfunction getCurrentTNode() {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n  return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n  return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n  instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _checkNoChangesMode !== CheckNoChangesMode.Off;\n}\nfunction isExhaustiveCheckNoChanges() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _checkNoChangesMode = mode;\n}\nfunction isRefreshingViews() {\n  return _isRefreshingViews;\n}\nfunction setIsRefreshingViews(mode) {\n  const prev = _isRefreshingViews;\n  _isRefreshingViews = mode;\n  return prev;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\nfunction getBindingIndex() {\n  return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n  return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n  return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\nfunction isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\r\n * Set a new binding root index so that host template functions can execute.\r\n *\r\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\r\n * how many host bindings we have we can't pre-compute them. For this reason they are all\r\n * 0 index and we just shift the root so that they match next available location in the LView.\r\n *\r\n * @param bindingRootIndex Root index for `hostBindings`\r\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\r\n *        whose `hostBindings` are being processed.\r\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\r\n * When host binding is executing this points to the directive index.\r\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\r\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\r\n */\nfunction getCurrentDirectiveIndex() {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\r\n * Sets an index of a directive whose `hostBindings` are being processed.\r\n *\r\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\r\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\r\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\r\n * executed.\r\n *\r\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\r\n */\nfunction getCurrentDirectiveDef(tData) {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n  return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n/**\r\n * Returns a `TNode` of the location where the current `LView` is declared at.\r\n *\r\n * @param lView an `LView` that we want to find parent `TNode` for.\r\n */\nfunction getDeclarationTNode(lView) {\n  const tView = lView[TVIEW];\n  // Return the declaration parent for embedded views\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === 1 /* TViewType.Component */) {\n    return lView[T_HOST];\n  }\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n/**\r\n * This is a light weight version of the `enterView` which is needed by the DI system.\r\n *\r\n * @param lView `LView` location of the DI context.\r\n * @param tNode `TNode` for DI context\r\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\r\n *     tree from `tNode`  until we find parent declared `TElementNode`.\r\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\r\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\r\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\r\n *     - If `true` than this call must be fallowed by `leaveDI`\r\n *     - If `false` than this call failed and we should NOT call `leaveDI`\r\n */\nfunction enterDI(lView, tNode, flags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n  if (flags & 4 /* InternalInjectFlags.SkipSelf */) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n    let parentTNode = tNode;\n    let parentLView = lView;\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode.parent;\n      if (parentTNode === null && !(flags & 1 /* InternalInjectFlags.Host */)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW];\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n  return true;\n}\n/**\r\n * Swap the current lView with a new lView.\r\n *\r\n * For performance reasons we store the lView in the top level of the module.\r\n * This way we minimize the number of properties to read. Whenever a new view\r\n * is entered we have to store the lView for later, and when the view is\r\n * exited the state has to be restored\r\n *\r\n * @param newView New lView to become active\r\n * @returns the previously active lView;\r\n */\nfunction enterView(newView) {\n  ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n/**\r\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\r\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\nfunction createLFrame(parent) {\n  const lFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null,\n    tView: null,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent,\n    child: null,\n    inI18n: false\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n  return lFrame;\n}\n/**\r\n * A lightweight version of leave which is used with DI.\r\n *\r\n * This function only resets `currentTNode` and `LView` as those are the only properties\r\n * used with DI (`enterDI()`).\r\n *\r\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\r\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\r\n */\nfunction leaveViewLight() {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null;\n  oldLFrame.lView = null;\n  return oldLFrame;\n}\n/**\r\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\r\n *\r\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\r\n * return type.\r\n */\nconst leaveDI = leaveViewLight;\n/**\r\n * Leave the current `LView`\r\n *\r\n * This pops the `LFrame` with the associated `LView` from the stack.\r\n *\r\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\r\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\r\n */\nfunction leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);\n  return contextLView[CONTEXT];\n}\n/**\r\n * Gets the currently selected element index.\r\n *\r\n * Used with {@link property} instruction (and more in the future) to identify the index in the\r\n * current `LView` to act on.\r\n */\nfunction getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n/**\r\n * Sets the most recent index passed to {@link select}\r\n *\r\n * Used with {@link property} instruction (and more in the future) to identify the index in the\r\n * current `LView` to act on.\r\n *\r\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\r\n * run if and when the provided `index` value is different from the current selected index value.)\r\n */\nfunction setSelectedIndex(index) {\n  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, \"Can't set index passed end of LView\");\n  instructionState.lFrame.selectedIndex = index;\n}\n/**\r\n * Gets the `tNode` that represents currently selected element.\r\n */\nfunction getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\r\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\r\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\r\n * Sets the namespace used to create elements to `null`, which forces element creation to use\r\n * `createElement` rather than `createElementNS`.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n/**\r\n * Sets the namespace used to create elements to `null`, which forces element creation to use\r\n * `createElement` rather than `createElementNS`.\r\n */\nfunction namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace() {\n  return instructionState.lFrame.currentNamespace;\n}\nlet _wasLastNodeCreated = true;\n/**\r\n * Retrieves a global flag that indicates whether the most recent DOM node\r\n * was created or hydrated.\r\n */\nfunction wasLastNodeCreated() {\n  return _wasLastNodeCreated;\n}\n/**\r\n * Sets a global flag to indicate whether the most recent DOM node\r\n * was created or hydrated.\r\n */\nfunction lastNodeWasCreated(flag) {\n  _wasLastNodeCreated = flag;\n}\n\n/**\r\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\r\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n/**\r\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\r\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\r\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\r\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\r\n * Concrete injectors implement this interface. Injectors are configured\r\n * with [providers](guide/di/dependency-injection-providers) that associate\r\n * dependencies of various types with [injection tokens](guide/di/dependency-injection-providers).\r\n *\r\n * @see [DI Providers](guide/di/dependency-injection-providers).\r\n * @see {@link StaticProvider}\r\n *\r\n * @usageNotes\r\n *\r\n *  The following example creates a service injector instance.\r\n *\r\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n *\r\n * ### Usage example\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='Injector'}\r\n *\r\n * `Injector` returns itself when given `Injector` as a token:\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\r\n *\r\n * @publicApi\r\n */\nclass Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL = new NullInjector();\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return createInjector({\n        name: ''\n      }, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({\n        name\n      }, options.parent, options.providers, name);\n    }\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR$1)\n  });\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n}\n\n/**\r\n * A DI Token representing the main rendering context.\r\n * In a browser and SSR this is the DOM Document.\r\n * When using SSR, that document is created by [Domino](https://github.com/angular/domino).\r\n *\r\n * @publicApi\r\n */\nconst DOCUMENT = new InjectionToken(ngDevMode ? 'DocumentToken' : '');\n\n/**\r\n * `DestroyRef` lets you set callbacks to run for any cleanup or destruction behavior.\r\n * The scope of this destruction depends on where `DestroyRef` is injected. If `DestroyRef`\r\n * is injected in a component or directive, the callbacks run when that component or\r\n * directive is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.\r\n *\r\n * @publicApi\r\n */\nclass DestroyRef {\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = injectDestroyRef;\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ENV_ID__ = injector => injector;\n}\nclass NodeInjectorDestroyRef extends DestroyRef {\n  _lView;\n  constructor(_lView) {\n    super();\n    this._lView = _lView;\n  }\n  get destroyed() {\n    return isDestroyed(this._lView);\n  }\n  onDestroy(callback) {\n    const lView = this._lView;\n    storeLViewOnDestroy(lView, callback);\n    return () => removeLViewOnDestroy(lView, callback);\n  }\n}\nfunction injectDestroyRef() {\n  return new NodeInjectorDestroyRef(getLView());\n}\n\n/**\r\n * Provides a hook for centralized exception handling.\r\n *\r\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\r\n * intercept error handling, write a custom exception handler that replaces this default as\r\n * appropriate for your app.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```ts\r\n * class MyErrorHandler implements ErrorHandler {\r\n *   handleError(error) {\r\n *     // do something with the exception\r\n *   }\r\n * }\r\n *\r\n * // Provide in standalone apps\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n *\r\n * // Provide in module-based apps\r\n * @NgModule({\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n * class MyModule {}\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass ErrorHandler {\n  /**\r\n   * @internal\r\n   */\n  _console = console;\n  handleError(error) {\n    this._console.error('ERROR', error);\n  }\n}\n/**\r\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\r\n */\nconst INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'internal error handler' : '', {\n  providedIn: 'root',\n  factory: () => {\n    // The user's error handler may depend on things that create a circular dependency\n    // so we inject it lazily.\n    const injector = inject(EnvironmentInjector);\n    let userErrorHandler;\n    return e => {\n      if (injector.destroyed && !userErrorHandler) {\n        setTimeout(() => {\n          throw e;\n        });\n      } else {\n        userErrorHandler ??= injector.get(ErrorHandler);\n        userErrorHandler.handleError(e);\n      }\n    };\n  }\n});\nconst errorHandlerEnvironmentInitializer = {\n  provide: ENVIRONMENT_INITIALIZER,\n  useValue: () => void inject(ErrorHandler),\n  multi: true\n};\nconst globalErrorListeners = new InjectionToken(ngDevMode ? 'GlobalErrorListeners' : '', {\n  providedIn: 'root',\n  factory: () => {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      return;\n    }\n    const window = inject(DOCUMENT).defaultView;\n    if (!window) {\n      return;\n    }\n    const errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    const rejectionListener = e => {\n      errorHandler(e.reason);\n      e.preventDefault();\n    };\n    const errorListener = e => {\n      if (e.error) {\n        errorHandler(e.error);\n      } else {\n        errorHandler(new Error(ngDevMode ? `An ErrorEvent with no error occurred. See Error.cause for details: ${e.message}` : e.message, {\n          cause: e\n        }));\n      }\n      e.preventDefault();\n    };\n    const setupEventListeners = () => {\n      window.addEventListener('unhandledrejection', rejectionListener);\n      window.addEventListener('error', errorListener);\n    };\n    // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\n    // the scope of this functionality.\n    if (typeof Zone !== 'undefined') {\n      Zone.root.run(setupEventListeners);\n    } else {\n      setupEventListeners();\n    }\n    inject(DestroyRef).onDestroy(() => {\n      window.removeEventListener('error', errorListener);\n      window.removeEventListener('unhandledrejection', rejectionListener);\n    });\n  }\n});\n/**\r\n * Provides an environment initializer which forwards unhandled errors to the ErrorHandler.\r\n *\r\n * The listeners added are for the window's 'unhandledrejection' and 'error' events.\r\n *\r\n * @publicApi\r\n */\nfunction provideBrowserGlobalErrorListeners() {\n  return makeEnvironmentProviders([provideEnvironmentInitializer(() => void inject(globalErrorListeners))]);\n}\n\n/**\r\n * Checks if the given `value` is a reactive `Signal`.\r\n *\r\n * @publicApi 17.0\r\n */\nfunction isSignal(value) {\n  return typeof value === 'function' && value[SIGNAL] !== undefined;\n}\n\n/**\r\n * Utility function used during template type checking to extract the value from a `WritableSignal`.\r\n * @codeGenApi\r\n */\nfunction ɵunwrapWritableSignal(value) {\n  // Note: the function uses `WRITABLE_SIGNAL` as a brand instead of `WritableSignal<T>`,\n  // because the latter incorrectly unwraps non-signal getter functions.\n  return null;\n}\n/**\r\n * Create a `Signal` that can be set or updated directly.\r\n */\nfunction signal(initialValue, options) {\n  const [get, set, update] = createSignal(initialValue, options?.equal);\n  const signalFn = get;\n  const node = signalFn[SIGNAL];\n  signalFn.set = set;\n  signalFn.update = update;\n  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);\n  if (ngDevMode) {\n    signalFn.toString = () => `[Signal: ${signalFn()}]`;\n    node.debugName = options?.debugName;\n  }\n  return signalFn;\n}\nfunction signalAsReadonlyFn() {\n  const node = this[SIGNAL];\n  if (node.readonlyFn === undefined) {\n    const readonlyFn = () => this();\n    readonlyFn[SIGNAL] = node;\n    node.readonlyFn = readonlyFn;\n  }\n  return node.readonlyFn;\n}\n/**\r\n * Checks if the given `value` is a writeable signal.\r\n */\nfunction isWritableSignal(value) {\n  return isSignal(value) && typeof value.set === 'function';\n}\n\n/**\r\n * Injectable that is notified when an `LView` is made aware of changes to application state.\r\n */\nclass ChangeDetectionScheduler {}\n/** Token used to indicate if zoneless was enabled via provideZonelessChangeDetection(). */\nconst ZONELESS_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless enabled' : '', {\n  providedIn: 'root',\n  factory: () => false\n});\n/** Token used to indicate `provideZonelessChangeDetection` was used. */\nconst PROVIDED_ZONELESS = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless provided' : '', {\n  providedIn: 'root',\n  factory: () => false\n});\nconst ZONELESS_SCHEDULER_DISABLED = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'scheduler disabled' : '');\n// TODO(atscott): Remove in v19. Scheduler should be done with runOutsideAngular.\nconst SCHEDULE_IN_ROOT_ZONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'run changes outside zone in root' : '');\n\n/**\r\n * Asserts that the current stack frame is not within a reactive context. Useful\r\n * to disallow certain code from running inside a reactive context (see {@link /api/core/rxjs-interop/toSignal toSignal})\r\n *\r\n * @param debugFn a reference to the function making the assertion (used for the error message).\r\n *\r\n * @publicApi\r\n */\nfunction assertNotInReactiveContext(debugFn, extraContext) {\n  // Taking a `Function` instead of a string name here prevents the un-minified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (getActiveConsumer() !== null) {\n    throw new RuntimeError(-602 /* RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT */, ngDevMode && `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ''}`);\n  }\n}\nclass ViewContext {\n  view;\n  node;\n  constructor(view, node) {\n    this.view = view;\n    this.node = node;\n  }\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = injectViewContext;\n}\nfunction injectViewContext() {\n  return new ViewContext(getLView(), getCurrentTNode());\n}\n\n/**\r\n * Internal implementation of the pending tasks service.\r\n */\nclass PendingTasksInternal {\n  taskId = 0;\n  pendingTasks = new Set();\n  destroyed = false;\n  pendingTask = new BehaviorSubject(false);\n  get hasPendingTasks() {\n    // Accessing the value of a closed `BehaviorSubject` throws an error.\n    return this.destroyed ? false : this.pendingTask.value;\n  }\n  /**\r\n   * In case the service is about to be destroyed, return a self-completing observable.\r\n   * Otherwise, return the observable that emits the current state of pending tasks.\r\n   */\n  get hasPendingTasksObservable() {\n    if (this.destroyed) {\n      // Manually creating the observable pulls less symbols from RxJS than `of(false)`.\n      return new Observable(subscriber => {\n        subscriber.next(false);\n        subscriber.complete();\n      });\n    }\n    return this.pendingTask;\n  }\n  add() {\n    // Emitting a value to a closed subject throws an error.\n    if (!this.hasPendingTasks && !this.destroyed) {\n      this.pendingTask.next(true);\n    }\n    const taskId = this.taskId++;\n    this.pendingTasks.add(taskId);\n    return taskId;\n  }\n  has(taskId) {\n    return this.pendingTasks.has(taskId);\n  }\n  remove(taskId) {\n    this.pendingTasks.delete(taskId);\n    if (this.pendingTasks.size === 0 && this.hasPendingTasks) {\n      this.pendingTask.next(false);\n    }\n  }\n  ngOnDestroy() {\n    this.pendingTasks.clear();\n    if (this.hasPendingTasks) {\n      this.pendingTask.next(false);\n    }\n    // We call `unsubscribe()` to release observers, as users may forget to\n    // unsubscribe manually when subscribing to `isStable`. We do not call\n    // `complete()` because it is unsafe; if someone subscribes using the `first`\n    // operator and the observable completes before emitting a value,\n    // RxJS will throw an error.\n    this.destroyed = true;\n    this.pendingTask.unsubscribe();\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n    token: PendingTasksInternal,\n    providedIn: 'root',\n    factory: () => new PendingTasksInternal()\n  });\n}\n/**\r\n * Service that keeps track of pending tasks contributing to the stableness of Angular\r\n * application. While several existing Angular services (ex.: `HttpClient`) will internally manage\r\n * tasks influencing stability, this API gives control over stability to library and application\r\n * developers for specific cases not covered by Angular internals.\r\n *\r\n * The concept of stability comes into play in several important scenarios:\r\n * - SSR process needs to wait for the application stability before serializing and sending rendered\r\n * HTML;\r\n * - tests might want to delay assertions until the application becomes stable;\r\n *\r\n * @usageNotes\r\n * ```ts\r\n * const pendingTasks = inject(PendingTasks);\r\n * const taskCleanup = pendingTasks.add();\r\n * // do work that should block application's stability and then:\r\n * taskCleanup();\r\n * ```\r\n *\r\n * @publicApi 20.0\r\n */\nclass PendingTasks {\n  internalPendingTasks = inject(PendingTasksInternal);\n  scheduler = inject(ChangeDetectionScheduler);\n  errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n  /**\r\n   * Adds a new task that should block application's stability.\r\n   * @returns A cleanup function that removes a task when called.\r\n   */\n  add() {\n    const taskId = this.internalPendingTasks.add();\n    return () => {\n      if (!this.internalPendingTasks.has(taskId)) {\n        // This pending task has already been cleared.\n        return;\n      }\n      // Notifying the scheduler will hold application stability open until the next tick.\n      this.scheduler.notify(11 /* NotificationSource.PendingTaskRemoved */);\n      this.internalPendingTasks.remove(taskId);\n    };\n  }\n  /**\r\n   * Runs an asynchronous function and blocks the application's stability until the function completes.\r\n   *\r\n   * ```ts\r\n   * pendingTasks.run(async () => {\r\n   *   const userData = await fetch('/api/user');\r\n   *   this.userData.set(userData);\r\n   * });\r\n   * ```\r\n   *\r\n   * @param fn The asynchronous function to execute\r\n   * @developerPreview 19.0\r\n   */\n  run(fn) {\n    const removeTask = this.add();\n    fn().catch(this.errorHandler).finally(removeTask);\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n    token: PendingTasks,\n    providedIn: 'root',\n    factory: () => new PendingTasks()\n  });\n}\nfunction noop(...args) {\n  // Do nothing.\n}\n\n/**\r\n * A scheduler which manages the execution of effects.\r\n */\nclass EffectScheduler {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n    token: EffectScheduler,\n    providedIn: 'root',\n    factory: () => new ZoneAwareEffectScheduler()\n  });\n}\n/**\r\n * A wrapper around `ZoneAwareQueueingScheduler` that schedules flushing via the microtask queue\r\n * when.\r\n */\nclass ZoneAwareEffectScheduler {\n  dirtyEffectCount = 0;\n  queues = new Map();\n  add(handle) {\n    this.enqueue(handle);\n    this.schedule(handle);\n  }\n  schedule(handle) {\n    if (!handle.dirty) {\n      return;\n    }\n    this.dirtyEffectCount++;\n  }\n  remove(handle) {\n    const zone = handle.zone;\n    const queue = this.queues.get(zone);\n    if (!queue.has(handle)) {\n      return;\n    }\n    queue.delete(handle);\n    if (handle.dirty) {\n      this.dirtyEffectCount--;\n    }\n  }\n  enqueue(handle) {\n    const zone = handle.zone;\n    if (!this.queues.has(zone)) {\n      this.queues.set(zone, new Set());\n    }\n    const queue = this.queues.get(zone);\n    if (queue.has(handle)) {\n      return;\n    }\n    queue.add(handle);\n  }\n  /**\r\n   * Run all scheduled effects.\r\n   *\r\n   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no\r\n   * ordering guarantee between effects scheduled in different zones.\r\n   */\n  flush() {\n    while (this.dirtyEffectCount > 0) {\n      let ranOneEffect = false;\n      for (const [zone, queue] of this.queues) {\n        // `zone` here must be defined.\n        if (zone === null) {\n          ranOneEffect ||= this.flushQueue(queue);\n        } else {\n          ranOneEffect ||= zone.run(() => this.flushQueue(queue));\n        }\n      }\n      // Safeguard against infinite looping if somehow our dirty effect count gets out of sync with\n      // the dirty flag across all the effects.\n      if (!ranOneEffect) {\n        this.dirtyEffectCount = 0;\n      }\n    }\n  }\n  flushQueue(queue) {\n    let ranOneEffect = false;\n    for (const handle of queue) {\n      if (!handle.dirty) {\n        continue;\n      }\n      this.dirtyEffectCount--;\n      ranOneEffect = true;\n      // TODO: what happens if this throws an error?\n      handle.run();\n    }\n    return ranOneEffect;\n  }\n}\nexport { AFTER_RENDER_SEQUENCES_TO_ADD, CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTAINER_HEADER_OFFSET, CONTEXT, ChangeDetectionScheduler, CheckNoChangesMode, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, DECLARATION_VIEW, DEHYDRATED_VIEWS, DOCUMENT, DestroyRef, EFFECTS, EFFECTS_TO_SCHEDULE, EMBEDDED_VIEW_INJECTOR, EMPTY_ARRAY, EMPTY_OBJ, ENVIRONMENT, ENVIRONMENT_INITIALIZER, EffectScheduler, EnvironmentInjector, ErrorHandler, FLAGS, HEADER_OFFSET, HOST, HYDRATION, ID, INJECTOR$1 as INJECTOR, INJECTOR as INJECTOR$1, INJECTOR_DEF_TYPES, INJECTOR_SCOPE, INTERNAL_APPLICATION_ERROR_HANDLER, InjectionToken, Injector, MATH_ML_NAMESPACE, MOVED_VIEWS, NATIVE, NEXT, NG_COMP_DEF, NG_DIR_DEF, NG_ELEMENT_ID, NG_FACTORY_DEF, NG_INJ_DEF, NG_MOD_DEF, NG_PIPE_DEF, NG_PROV_DEF, NodeInjectorDestroyRef, NullInjector, ON_DESTROY_HOOKS, PARENT, PREORDER_HOOK_FLAGS, PROVIDED_ZONELESS, PendingTasks, PendingTasksInternal, QUERIES, R3Injector, REACTIVE_TEMPLATE_CONSUMER, RENDERER, RuntimeError, SCHEDULE_IN_ROOT_ZONE, SVG_NAMESPACE, TVIEW, T_HOST, VIEW_REFS, ViewContext, XSS_SECURITY_URL, ZONELESS_ENABLED, ZONELESS_SCHEDULER_DISABLED, _global, addToArray, arrayEquals, arrayInsert2, arraySplice, assertComponentType, assertDefined, assertDirectiveDef, assertDomNode, assertElement, assertEqual, assertFirstCreatePass, assertFirstUpdatePass, assertFunction, assertGreaterThan, assertGreaterThanOrEqual, assertHasParent, assertInInjectionContext, assertIndexInDeclRange, assertIndexInExpandoRange, assertIndexInRange, assertInjectImplementationNotEqual, assertLContainer, assertLView, assertLessThan, assertNgModuleType, assertNodeInjector, assertNotDefined, assertNotEqual, assertNotInReactiveContext, assertNotReactive, assertNotSame, assertNumber, assertNumberInRange, assertOneOf, assertParentView, assertProjectionSlots, assertSame, assertString, assertTIcu, assertTNode, assertTNodeForLView, assertTNodeForTView, attachInjectFlag, concatStringsWithSpace, convertToBitFlags, createInjector, createInjectorWithoutInjectorInstances, debugStringifyTypeForError, decreaseElementDepthCount, deepForEach, defineInjectable, emitEffectCreatedEvent, emitInjectEvent, emitInjectorToCreateInstanceEvent, emitInstanceCreatedByInjectorEvent, emitProviderConfiguredEvent, enterDI, enterSkipHydrationBlock, enterView, errorHandlerEnvironmentInitializer, fillProperties, flatten, formatRuntimeError, forwardRef, getBindingIndex, getBindingRoot, getBindingsEnabled, getClosureSafeProperty, getComponentDef, getComponentLViewByIndex, getConstant, getContextLView, getCurrentDirectiveDef, getCurrentDirectiveIndex, getCurrentParentTNode, getCurrentQueryIndex, getCurrentTNode, getCurrentTNodePlaceholderOk, getDirectiveDef, getDirectiveDefOrThrow, getElementDepthCount, getFactoryDef, getInjectableDef, getInjectorDef, getLView, getLViewParent, getNamespace, getNativeByIndex, getNativeByTNode, getNativeByTNodeOrNull, getNgModuleDef, getNgModuleDefOrThrow, getNullInjector, getOrCreateLViewCleanup, getOrCreateTViewCleanup, getPipeDef, getSelectedIndex, getSelectedTNode, getTNode, getTView, hasI18n, importProvidersFrom, increaseElementDepthCount, incrementBindingIndex, initNgDevMode, inject, injectRootLimpMode, internalImportProvidersFrom, isClassProvider, isComponentDef, isComponentHost, isContentQueryHost, isCreationMode, isCurrentTNodeParent, isDestroyed, isDirectiveHost, isEnvironmentProviders, isExhaustiveCheckNoChanges, isForwardRef, isInCheckNoChangesMode, isInI18nBlock, isInInjectionContext, isInSkipHydrationBlock, isInjectable, isLContainer, isLView, isProjectionTNode, isRefreshingViews, isRootView, isSignal, isSkipHydrationRootTNode, isStandalone, isTypeProvider, isWritableSignal, keyValueArrayGet, keyValueArrayIndexOf, keyValueArraySet, lastNodeWasCreated, leaveDI, leaveSkipHydrationBlock, leaveView, load, makeEnvironmentProviders, markAncestorsForTraversal, markViewForRefresh, newArray, nextBindingIndex, nextContextImpl, noop, provideBrowserGlobalErrorListeners, provideEnvironmentInitializer, providerToFactory, removeFromArray, removeLViewOnDestroy, renderStringify, requiresRefreshOrTraversal, resetPreOrderHookFlags, resolveForwardRef, runInInjectionContext, runInInjectorProfilerContext, setBindingIndex, setBindingRootForHostBindings, setCurrentDirectiveIndex, setCurrentQueryIndex, setCurrentTNode, setCurrentTNodeAsNotParent, setInI18nBlock, setInjectImplementation, setInjectorProfiler, setInjectorProfilerContext, setIsInCheckNoChangesMode, setIsRefreshingViews, setSelectedIndex, signal, signalAsReadonlyFn, store, storeCleanupWithContext, storeLViewOnDestroy, stringify, stringifyForError, throwCyclicDependencyError, throwError, throwProviderNotFoundError, truncateMiddle, unwrapLView, unwrapRNode, updateAncestorTraversalFlagsOnAttach, viewAttachedToChangeDetector, viewAttachedToContainer, walkProviderTree, walkUpViews, wasLastNodeCreated, ɵunwrapWritableSignal, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdisableBindings, ɵɵenableBindings, ɵɵinject, ɵɵinvalidFactoryDep, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵresetView, ɵɵrestoreView };","map":{"version":3,"names":["isNotFound","getCurrentInjector","setCurrentInjector","getActiveConsumer","SIGNAL","createSignal","BehaviorSubject","Observable","NotFoundError","isNotFound$1","setActiveConsumer","ERROR_DETAILS_PAGE_BASE_URL","XSS_SECURITY_URL","RuntimeError","Error","code","constructor","message","formatRuntimeError","formatRuntimeErrorCode","Math","abs","fullCode","errorMessage","ngDevMode","addPeriodSeparator","match","separator","_global","globalThis","ngDevModeResetPerfCounters","locationString","location","toString","newCounters","hydratedNodes","hydratedComponents","dehydratedViewsRemoved","dehydratedViewsCleanupRuns","componentsSkippedHydration","deferBlocksWithIncrementalHydration","allowNgDevModeTrue","indexOf","Object","assign","initNgDevMode","keys","length","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","hasOwnProperty","stringify","token","Array","isArray","map","join","name","overriddenName","result","newLineIndex","slice","concatStringsWithSpace","before","after","truncateMiddle","str","maxLength","substring","halfLimit","round","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","isForwardRef","fn","assertNumber","actual","msg","throwError","assertNumberInRange","minInclusive","maxInclusive","assertLessThanOrEqual","assertGreaterThanOrEqual","assertString","assertFunction","assertEqual","expected","assertNotEqual","assertSame","assertNotSame","assertLessThan","assertGreaterThan","assertNotDefined","assertDefined","comparison","assertDomNode","node","Node","assertElement","Element","assertIndexInRange","arr","index","maxLen","assertOneOf","value","validValues","JSON","assertNotReactive","ɵɵdefineInjectable","opts","providedIn","factory","undefined","defineInjectable","ɵɵdefineInjector","options","providers","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","isInjectable","field","getInheritedInjectableDef","def","console","warn","getInjectorDef","NG_INJ_DEF","ɵprov","ɵinj","InjectionToken","_desc","ngMetadataName","__NG_ELEMENT_ID__","multi","_injectorProfilerContext","getInjectorProfilerContext","setInjectorProfilerContext","context","previous","injectorProfilerCallbacks","NOOP_PROFILER_REMOVAL","removeProfiler","profiler","profilerIdx","splice","setInjectorProfiler","injectorProfiler","includes","push","event","i","injectorProfilerCallback","emitProviderConfiguredEvent","eventProvider","isViewProvider","provide","provider","providerRecord","emitInjectorToCreateInstanceEvent","emitInstanceCreatedByInjectorEvent","instance","emitInjectEvent","flags","service","emitEffectCreatedEvent","effect","runInInjectorProfilerContext","injector","callback","prevInjectContext","isEnvironmentProviders","ɵproviders","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","NG_ENV_ID","__NG_ENV_ID__","renderStringify","String","stringifyForError","debugStringifyTypeForError","componentDef","debugInfo","stringifyTypeFromDebugInfo","filePath","lineNumber","className","throwCyclicDependencyError","path","throwMixedMultiProviderError","throwInvalidProviderError","ngModuleType","providerDetail","v","ɵfromNgModule","throwProviderNotFoundError","injectorName","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","injectRootLimpMode","notFoundValue","injectableDef","assertInjectImplementationNotEqual","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","RetrievingInjector","retrieve","convertToBitFlags","get","e","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","injectInjectorOnly","currentInjector","convertToInjectOptions","optional","ɵɵinject","ɵɵinvalidFactoryDep","inject","host","self","skipSelf","injectArgs","types","args","arg","j","meta","flag","getInjectFlag","attachInjectFlag","decorator","prototype","catchInjectorError","injectorErrorName","tokenPath","unshift","formatError","text","obj","charAt","parts","replace","getFactoryDef","throwNotFound","hasFactoryDef","arrayEquals","a","b","identityAccessor","valueA","valueB","flatten","list","flat","Number","POSITIVE_INFINITY","deepForEach","input","forEach","addToArray","removeFromArray","pop","newArray","size","arraySplice","array","count","arrayInsert2","value1","value2","end","previousEnd","keyValueArraySet","keyValueArray","keyValueArrayIndexOf","keyValueArrayGet","_arrayIndexOfSorted","shift","start","middle","current","EMPTY_OBJ","EMPTY_ARRAY","freeze","ENVIRONMENT_INITIALIZER","INJECTOR$1","INJECTOR_DEF_TYPES","NullInjector","error","getNgModuleDef","getNgModuleDefOrThrow","ngModuleDef","getComponentDef","getDirectiveDefOrThrow","getDirectiveDef","getPipeDef","isStandalone","standalone","makeEnvironmentProviders","provideEnvironmentInitializer","initializerFn","useValue","importProvidersFrom","sources","internalImportProvidersFrom","checkForStandaloneCmp","providersOut","dedup","Set","injectorTypesWithProviders","collectProviders","cmpDef","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","visitor","ngModule","deepForEachProvider","validateProvider","container","parents","defType","injDef","defName","isDuplicate","has","add","dependencies","deps","dep","importTypesWithProviders","imported","useFactory","defProviders","injectorType","containerType","isTypeProvider","isValueProvider","isFactoryProvider","isExistingProvider","classRef","useClass","USE_VALUE","useExisting","isClassProvider","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR","getNullInjector","EnvironmentInjector","R3Injector","parent","scopes","records","Map","_ngOnDestroyHooks","_onDestroyHooks","destroyed","_destroyed","injectorDefTypes","forEachSingleProvider","processProvider","set","makeRecord","record","destroy","assertNotDestroyed","prevConsumer","ngOnDestroy","onDestroyHooks","hook","clear","onDestroy","removeOnDestroy","runInContext","previousInjector","previousInjectImplementation","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","resolveInjectorInitializers","initializers","initializer","tokens","providerToRecord","multiRecord","existing","hasOnDestroy","destroyCBIdx","Function","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","providerToFactory","unwrappedProvider","hasDeps","runInInjectionContext","internalInjector","prevInjectorProfilerContext","prevInjector","isInInjectionContext","assertInInjectionContext","debugFn","HOST","TVIEW","FLAGS","PARENT","NEXT","T_HOST","HYDRATION","CLEANUP","CONTEXT","INJECTOR","ENVIRONMENT","RENDERER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","ON_DESTROY_HOOKS","EFFECTS_TO_SCHEDULE","EFFECTS","REACTIVE_TEMPLATE_CONSUMER","AFTER_RENDER_SEQUENCES_TO_ADD","HEADER_OFFSET","TYPE","DEHYDRATED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","isLView","isLContainer","isContentQueryHost","tNode","isComponentHost","componentOffset","isDirectiveHost","isComponentDef","template","isRootView","isProjectionTNode","hasI18n","lView","isDestroyed","assertTNodeForLView","assertTNodeForTView","tView","assertTNode","tData","data","assertTIcu","tIcu","currentCaseLViewIndex","assertComponentType","assertNgModuleType","assertHasParent","assertLContainer","assertLViewOrUndefined","assertLView","assertFirstCreatePass","errMessage","firstCreatePass","assertFirstUpdatePass","firstUpdatePass","assertDirectiveDef","selectors","inputs","assertIndexInDeclRange","assertBetween","bindingStartIndex","assertIndexInExpandoRange","expandoStartIndex","lower","upper","assertProjectionSlots","projection","assertParentView","assertNodeInjector","injectorIndex","SVG_NAMESPACE","MATH_ML_NAMESPACE","unwrapRNode","unwrapLView","getNativeByIndex","getNativeByTNode","getNativeByTNodeOrNull","getTNode","load","view","store","blueprint","getComponentLViewByIndex","nodeIndex","hostView","slotValue","isCreationMode","viewAttachedToChangeDetector","viewAttachedToContainer","getConstant","consts","resetPreOrderHookFlags","markViewForRefresh","markAncestorsForTraversal","walkUpViews","nestingLevel","currentView","requiresRefreshOrTraversal","dirty","updateAncestorTraversalFlagsOnAttach","changeDetectionScheduler","notify","getLViewParent","storeLViewOnDestroy","onDestroyCallback","removeLViewOnDestroy","getOrCreateLViewCleanup","getOrCreateTViewCleanup","cleanup","storeCleanupWithContext","cleanupFn","lCleanup","instructionState","lFrame","createLFrame","bindingsEnabled","skipHydrationRootTNode","CheckNoChangesMode","_checkNoChangesMode","_isRefreshingViews","getElementDepthCount","elementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","isInSkipHydrationBlock","isSkipHydrationRootTNode","ɵɵenableBindings","enterSkipHydrationBlock","ɵɵdisableBindings","leaveSkipHydrationBlock","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","ɵɵresetView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","isParent","setCurrentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","getContextLView","isInCheckNoChangesMode","Off","isExhaustiveCheckNoChanges","Exhaustive","setIsInCheckNoChangesMode","mode","isRefreshingViews","setIsRefreshingViews","prev","getBindingRoot","bindingRootIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","isInI18nBlock","inI18n","setInI18nBlock","setBindingRootForHostBindings","currentDirectiveIndex","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","parentTNode","parentLView","allocLFrame","enterView","newView","newLFrame","selectedIndex","currentNamespace","firstChild","currentLFrame","childLFrame","child","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","getSelectedIndex","setSelectedIndex","getSelectedTNode","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","getNamespace","_wasLastNodeCreated","wasLastNodeCreated","lastNodeWasCreated","createInjector","additionalProviders","createInjectorWithoutInjectorInstances","Injector","NULL","create","DOCUMENT","DestroyRef","injectDestroyRef","NodeInjectorDestroyRef","_lView","ErrorHandler","_console","handleError","INTERNAL_APPLICATION_ERROR_HANDLER","userErrorHandler","setTimeout","errorHandlerEnvironmentInitializer","globalErrorListeners","ngServerMode","window","defaultView","errorHandler","rejectionListener","reason","preventDefault","errorListener","cause","setupEventListeners","addEventListener","Zone","root","run","removeEventListener","provideBrowserGlobalErrorListeners","isSignal","ɵunwrapWritableSignal","signal","initialValue","update","equal","signalFn","asReadonly","signalAsReadonlyFn","bind","debugName","readonlyFn","isWritableSignal","ChangeDetectionScheduler","ZONELESS_ENABLED","PROVIDED_ZONELESS","ZONELESS_SCHEDULER_DISABLED","SCHEDULE_IN_ROOT_ZONE","assertNotInReactiveContext","extraContext","ViewContext","injectViewContext","PendingTasksInternal","taskId","pendingTasks","pendingTask","hasPendingTasks","hasPendingTasksObservable","subscriber","next","complete","remove","delete","unsubscribe","PendingTasks","internalPendingTasks","scheduler","removeTask","catch","finally","noop","EffectScheduler","ZoneAwareEffectScheduler","dirtyEffectCount","queues","handle","enqueue","schedule","zone","queue","flush","ranOneEffect","flushQueue"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/core/fesm2022/root_effect_scheduler.mjs"],"sourcesContent":["/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { isNotFound, getCurrentInjector, setCurrentInjector } from './primitives/di.mjs';\r\nimport { getActiveConsumer, SIGNAL, createSignal } from './signal.mjs';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { NotFoundError, isNotFound as isNotFound$1 } from '@angular/core/primitives/di';\r\nimport { setActiveConsumer } from '@angular/core/primitives/signals';\r\n\r\n/**\r\n * Base URL for the error details page.\r\n *\r\n * Keep this constant in sync across:\r\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\r\n *  - packages/core/src/error_details_base_url.ts\r\n */\r\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.dev/errors';\r\n/**\r\n * URL for the XSS security documentation.\r\n */\r\nconst XSS_SECURITY_URL = 'https://angular.dev/best-practices/security#preventing-cross-site-scripting-xss';\r\n\r\n/**\r\n * Class that represents a runtime error.\r\n * Formats and outputs the error message in a consistent way.\r\n *\r\n * Example:\r\n * ```ts\r\n *  throw new RuntimeError(\r\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\r\n *    ngDevMode && 'Injector has already been destroyed.');\r\n * ```\r\n *\r\n * Note: the `message` argument contains a descriptive error message as a string in development\r\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\r\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\r\n * logic.\r\n */\r\nclass RuntimeError extends Error {\r\n    code;\r\n    constructor(code, message) {\r\n        super(formatRuntimeError(code, message));\r\n        this.code = code;\r\n    }\r\n}\r\nfunction formatRuntimeErrorCode(code) {\r\n    // Error code might be a negative number, which is a special marker that instructs the logic to\r\n    // generate a link to the error details page on angular.io.\r\n    // We also prepend `0` to non-compile-time errors.\r\n    return `NG0${Math.abs(code)}`;\r\n}\r\n/**\r\n * Called to format a runtime error.\r\n * See additional info on the `message` argument type in the `RuntimeError` class description.\r\n */\r\nfunction formatRuntimeError(code, message) {\r\n    const fullCode = formatRuntimeErrorCode(code);\r\n    let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\r\n    if (ngDevMode && code < 0) {\r\n        const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\r\n        const separator = addPeriodSeparator ? '.' : '';\r\n        errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\r\n    }\r\n    return errorMessage;\r\n}\r\n\r\nconst _global = globalThis;\r\n\r\nfunction ngDevModeResetPerfCounters() {\r\n    const locationString = typeof location !== 'undefined' ? location.toString() : '';\r\n    const newCounters = {\r\n        hydratedNodes: 0,\r\n        hydratedComponents: 0,\r\n        dehydratedViewsRemoved: 0,\r\n        dehydratedViewsCleanupRuns: 0,\r\n        componentsSkippedHydration: 0,\r\n        deferBlocksWithIncrementalHydration: 0,\r\n    };\r\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\r\n    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\r\n    if (!allowNgDevModeTrue) {\r\n        _global['ngDevMode'] = false;\r\n    }\r\n    else {\r\n        if (typeof _global['ngDevMode'] !== 'object') {\r\n            _global['ngDevMode'] = {};\r\n        }\r\n        Object.assign(_global['ngDevMode'], newCounters);\r\n    }\r\n    return newCounters;\r\n}\r\n/**\r\n * This function checks to see if the `ngDevMode` has been set. If yes,\r\n * then we honor it, otherwise we default to dev mode with additional checks.\r\n *\r\n * The idea is that unless we are doing production build where we explicitly\r\n * set `ngDevMode == false` we should be helping the developer by providing\r\n * as much early warning and errors as possible.\r\n *\r\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\r\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\r\n * is defined for the entire instruction set.\r\n *\r\n * When checking `ngDevMode` on toplevel, always init it before referencing it\r\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\r\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\r\n *\r\n * Details on possible values for `ngDevMode` can be found on its docstring.\r\n */\r\nfunction initNgDevMode() {\r\n    // The below checks are to ensure that calling `initNgDevMode` multiple times does not\r\n    // reset the counters.\r\n    // If the `ngDevMode` is not an object, then it means we have not created the perf counters\r\n    // yet.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        if (typeof ngDevMode !== 'object' || Object.keys(ngDevMode).length === 0) {\r\n            ngDevModeResetPerfCounters();\r\n        }\r\n        return typeof ngDevMode !== 'undefined' && !!ngDevMode;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\r\n    for (let key in objWithPropertyToExtract) {\r\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\r\n            return key;\r\n        }\r\n    }\r\n    // Cannot change it to `RuntimeError` because the `util` target cannot\r\n    // circularly depend on the `core` target.\r\n    throw Error(typeof ngDevMode !== 'undefined' && ngDevMode\r\n        ? 'Could not find renamed property on target object.'\r\n        : '');\r\n}\r\n/**\r\n * Sets properties on a target object from a source object, but only if\r\n * the property doesn't already exist on the target object.\r\n * @param target The target to set properties on\r\n * @param source The source of the property keys and values to set\r\n */\r\nfunction fillProperties(target, source) {\r\n    for (const key in source) {\r\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\r\n            target[key] = source[key];\r\n        }\r\n    }\r\n}\r\n\r\nfunction stringify(token) {\r\n    if (typeof token === 'string') {\r\n        return token;\r\n    }\r\n    if (Array.isArray(token)) {\r\n        return `[${token.map(stringify).join(', ')}]`;\r\n    }\r\n    if (token == null) {\r\n        return '' + token;\r\n    }\r\n    const name = token.overriddenName || token.name;\r\n    if (name) {\r\n        return `${name}`;\r\n    }\r\n    const result = token.toString();\r\n    if (result == null) {\r\n        return '' + result;\r\n    }\r\n    const newLineIndex = result.indexOf('\\n');\r\n    return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;\r\n}\r\n/**\r\n * Concatenates two strings with separator, allocating new strings only when necessary.\r\n *\r\n * @param before before string.\r\n * @param separator separator string.\r\n * @param after after string.\r\n * @returns concatenated string.\r\n */\r\nfunction concatStringsWithSpace(before, after) {\r\n    if (!before)\r\n        return after || '';\r\n    if (!after)\r\n        return before;\r\n    return `${before} ${after}`;\r\n}\r\n/**\r\n * Ellipses the string in the middle when longer than the max length\r\n *\r\n * @param string\r\n * @param maxLength of the output string\r\n * @returns ellipsed string with ... in the middle\r\n */\r\nfunction truncateMiddle(str, maxLength = 100) {\r\n    if (!str || maxLength < 1 || str.length <= maxLength)\r\n        return str;\r\n    if (maxLength == 1)\r\n        return str.substring(0, 1) + '...';\r\n    const halfLimit = Math.round(maxLength / 2);\r\n    return str.substring(0, halfLimit) + '...' + str.substring(str.length - halfLimit);\r\n}\r\n\r\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\r\n/**\r\n * Allows to refer to references which are not yet defined.\r\n *\r\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\r\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\r\n * a query is not yet defined.\r\n *\r\n * `forwardRef` is also used to break circularities in standalone components imports.\r\n *\r\n * @usageNotes\r\n * ### Circular dependency example\r\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\r\n *\r\n * ### Circular standalone reference import example\r\n * ```angular-ts\r\n * @Component({\r\n *   imports: [ChildComponent],\r\n *   selector: 'app-parent',\r\n *   template: `<app-child [hideParent]=\"hideParent()\"></app-child>`,\r\n * })\r\n * export class ParentComponent {\r\n *    hideParent = input.required<boolean>();\r\n * }\r\n *\r\n *\r\n * @Component({\r\n *   imports: [forwardRef(() => ParentComponent)],\r\n *   selector: 'app-child',\r\n *   template: `\r\n *    @if(!hideParent() {\r\n *       <app-parent/>\r\n *    }\r\n *  `,\r\n * })\r\n * export class ChildComponent {\r\n *    hideParent = input.required<boolean>();\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction forwardRef(forwardRefFn) {\r\n    forwardRefFn.__forward_ref__ = forwardRef;\r\n    forwardRefFn.toString = function () {\r\n        return stringify(this());\r\n    };\r\n    return forwardRefFn;\r\n}\r\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n *\r\n * Acts as the identity function when given a non-forward-ref value.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\r\n *\r\n * @see {@link forwardRef}\r\n * @publicApi\r\n */\r\nfunction resolveForwardRef(type) {\r\n    return isForwardRef(type) ? type() : type;\r\n}\r\n/** Checks whether a function is wrapped by a `forwardRef`. */\r\nfunction isForwardRef(fn) {\r\n    return (typeof fn === 'function' &&\r\n        fn.hasOwnProperty(__forward_ref__) &&\r\n        fn.__forward_ref__ === forwardRef);\r\n}\r\n\r\n// The functions in this file verify that the assumptions we are making\r\n// about state in an instruction are correct before implementing any logic.\r\n// They are meant only to be called in dev mode as sanity checks.\r\nfunction assertNumber(actual, msg) {\r\n    if (!(typeof actual === 'number')) {\r\n        throwError(msg, typeof actual, 'number', '===');\r\n    }\r\n}\r\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\r\n    assertNumber(actual, 'Expected a number');\r\n    assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\r\n    assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\r\n}\r\nfunction assertString(actual, msg) {\r\n    if (!(typeof actual === 'string')) {\r\n        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\r\n    }\r\n}\r\nfunction assertFunction(actual, msg) {\r\n    if (!(typeof actual === 'function')) {\r\n        throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\r\n    }\r\n}\r\nfunction assertEqual(actual, expected, msg) {\r\n    if (!(actual == expected)) {\r\n        throwError(msg, actual, expected, '==');\r\n    }\r\n}\r\nfunction assertNotEqual(actual, expected, msg) {\r\n    if (!(actual != expected)) {\r\n        throwError(msg, actual, expected, '!=');\r\n    }\r\n}\r\nfunction assertSame(actual, expected, msg) {\r\n    if (!(actual === expected)) {\r\n        throwError(msg, actual, expected, '===');\r\n    }\r\n}\r\nfunction assertNotSame(actual, expected, msg) {\r\n    if (!(actual !== expected)) {\r\n        throwError(msg, actual, expected, '!==');\r\n    }\r\n}\r\nfunction assertLessThan(actual, expected, msg) {\r\n    if (!(actual < expected)) {\r\n        throwError(msg, actual, expected, '<');\r\n    }\r\n}\r\nfunction assertLessThanOrEqual(actual, expected, msg) {\r\n    if (!(actual <= expected)) {\r\n        throwError(msg, actual, expected, '<=');\r\n    }\r\n}\r\nfunction assertGreaterThan(actual, expected, msg) {\r\n    if (!(actual > expected)) {\r\n        throwError(msg, actual, expected, '>');\r\n    }\r\n}\r\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\r\n    if (!(actual >= expected)) {\r\n        throwError(msg, actual, expected, '>=');\r\n    }\r\n}\r\nfunction assertNotDefined(actual, msg) {\r\n    if (actual != null) {\r\n        throwError(msg, actual, null, '==');\r\n    }\r\n}\r\nfunction assertDefined(actual, msg) {\r\n    if (actual == null) {\r\n        throwError(msg, actual, null, '!=');\r\n    }\r\n}\r\nfunction throwError(msg, actual, expected, comparison) {\r\n    throw new Error(`ASSERTION ERROR: ${msg}` +\r\n        (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\r\n}\r\nfunction assertDomNode(node) {\r\n    if (!(node instanceof Node)) {\r\n        throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\r\n    }\r\n}\r\nfunction assertElement(node) {\r\n    if (!(node instanceof Element)) {\r\n        throwError(`The provided value must be an element but got ${stringify(node)}`);\r\n    }\r\n}\r\nfunction assertIndexInRange(arr, index) {\r\n    assertDefined(arr, 'Array must be defined.');\r\n    const maxLen = arr.length;\r\n    if (index < 0 || index >= maxLen) {\r\n        throwError(`Index expected to be less than ${maxLen} but got ${index}`);\r\n    }\r\n}\r\nfunction assertOneOf(value, ...validValues) {\r\n    if (validValues.indexOf(value) !== -1)\r\n        return true;\r\n    throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\r\n}\r\nfunction assertNotReactive(fn) {\r\n    if (getActiveConsumer() !== null) {\r\n        throwError(`${fn}() should never be called in a reactive context.`);\r\n    }\r\n}\r\n\r\n/**\r\n * Construct an injectable definition which defines how a token will be constructed by the DI\r\n * system, and in which injectors (if any) it will be available.\r\n *\r\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\r\n * `InjectableType`.\r\n *\r\n * Options:\r\n * * `providedIn` determines which injectors will include the injectable, by either associating it\r\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\r\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\r\n * * `factory` gives the zero argument function which will create an instance of the injectable.\r\n *   The factory can call [`inject`](api/core/inject) to access the `Injector` and request injection\r\n * of dependencies.\r\n *\r\n * @codeGenApi\r\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\r\n */\r\nfunction ɵɵdefineInjectable(opts) {\r\n    return {\r\n        token: opts.token,\r\n        providedIn: opts.providedIn || null,\r\n        factory: opts.factory,\r\n        value: undefined,\r\n    };\r\n}\r\n/**\r\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\r\n * code should now use ɵɵdefineInjectable instead.\r\n * @publicApi\r\n */\r\nconst defineInjectable = ɵɵdefineInjectable;\r\n/**\r\n * Construct an `InjectorDef` which configures an injector.\r\n *\r\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\r\n * `InjectorType`.\r\n *\r\n * Options:\r\n *\r\n * * `providers`: an optional array of providers to add to the injector. Each provider must\r\n *   either have a factory or point to a type which has a `ɵprov` static property (the\r\n *   type must be an `InjectableType`).\r\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\r\n *   whose providers will also be added to the injector. Locally provided types will override\r\n *   providers from imports.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdefineInjector(options) {\r\n    return { providers: options.providers || [], imports: options.imports || [] };\r\n}\r\n/**\r\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\r\n * inherited value.\r\n *\r\n * @param type A type which may have its own (non-inherited) `ɵprov`.\r\n */\r\nfunction getInjectableDef(type) {\r\n    return getOwnDefinition(type, NG_PROV_DEF);\r\n}\r\nfunction isInjectable(type) {\r\n    return getInjectableDef(type) !== null;\r\n}\r\n/**\r\n * Return definition only if it is defined directly on `type` and is not inherited from a base\r\n * class of `type`.\r\n */\r\nfunction getOwnDefinition(type, field) {\r\n    // if the ɵprov prop exist but is undefined we still want to return null\r\n    return (type.hasOwnProperty(field) && type[field]) || null;\r\n}\r\n/**\r\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\r\n *\r\n * @param type A type which may have `ɵprov`, via inheritance.\r\n *\r\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\r\n *     scenario if we find the `ɵprov` on an ancestor only.\r\n */\r\nfunction getInheritedInjectableDef(type) {\r\n    // if the ɵprov prop exist but is undefined we still want to return null\r\n    const def = type?.[NG_PROV_DEF] ?? null;\r\n    if (def) {\r\n        ngDevMode &&\r\n            console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\r\n                `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\r\n        return def;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\r\n *\r\n * @param type type which may have an injector def (`ɵinj`)\r\n */\r\nfunction getInjectorDef(type) {\r\n    return type && type.hasOwnProperty(NG_INJ_DEF) ? type[NG_INJ_DEF] : null;\r\n}\r\nconst NG_PROV_DEF = getClosureSafeProperty({ ɵprov: getClosureSafeProperty });\r\nconst NG_INJ_DEF = getClosureSafeProperty({ ɵinj: getClosureSafeProperty });\r\n\r\n/**\r\n * Creates a token that can be used in a DI Provider.\r\n *\r\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\r\n * runtime representation) such as when injecting an interface, callable type, array or\r\n * parameterized type.\r\n *\r\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\r\n * the `Injector`. This provides an additional level of type safety.\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n * **Important Note**: Ensure that you use the same instance of the `InjectionToken` in both the\r\n * provider and the injection call. Creating a new instance of `InjectionToken` in different places,\r\n * even with the same description, will be treated as different tokens by Angular's DI system,\r\n * leading to a `NullInjectorError`.\r\n *\r\n * </div>\r\n *\r\n * {@example injection-token/src/main.ts region='InjectionToken'}\r\n *\r\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\r\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\r\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\r\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\r\n * dependencies, it can do so using the [`inject`](api/core/inject) function.\r\n * As you can see in the Tree-shakable InjectionToken example below.\r\n *\r\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\r\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\r\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\r\n * `providedIn`.\r\n *\r\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\r\n *\r\n * @usageNotes\r\n * ### Basic Examples\r\n *\r\n * ### Plain InjectionToken\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\r\n *\r\n * ### Tree-shakable InjectionToken\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\r\n *\r\n * @publicApi\r\n */\r\nclass InjectionToken {\r\n    _desc;\r\n    /** @internal */\r\n    ngMetadataName = 'InjectionToken';\r\n    ɵprov;\r\n    /**\r\n     * @param _desc   Description for the token,\r\n     *                used only for debugging purposes,\r\n     *                it should but does not need to be unique\r\n     * @param options Options for the token's usage, as described above\r\n     */\r\n    constructor(_desc, options) {\r\n        this._desc = _desc;\r\n        this.ɵprov = undefined;\r\n        if (typeof options == 'number') {\r\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                assertLessThan(options, 0, 'Only negative numbers are supported here');\r\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\r\n            // See `InjectorMarkers`\r\n            this.__NG_ELEMENT_ID__ = options;\r\n        }\r\n        else if (options !== undefined) {\r\n            this.ɵprov = ɵɵdefineInjectable({\r\n                token: this,\r\n                providedIn: options.providedIn || 'root',\r\n                factory: options.factory,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    get multi() {\r\n        return this;\r\n    }\r\n    toString() {\r\n        return `InjectionToken ${this._desc}`;\r\n    }\r\n}\r\n\r\nlet _injectorProfilerContext;\r\nfunction getInjectorProfilerContext() {\r\n    !ngDevMode && throwError('getInjectorProfilerContext should never be called in production mode');\r\n    return _injectorProfilerContext;\r\n}\r\nfunction setInjectorProfilerContext(context) {\r\n    !ngDevMode && throwError('setInjectorProfilerContext should never be called in production mode');\r\n    const previous = _injectorProfilerContext;\r\n    _injectorProfilerContext = context;\r\n    return previous;\r\n}\r\nconst injectorProfilerCallbacks = [];\r\nconst NOOP_PROFILER_REMOVAL = () => { };\r\nfunction removeProfiler(profiler) {\r\n    const profilerIdx = injectorProfilerCallbacks.indexOf(profiler);\r\n    if (profilerIdx !== -1) {\r\n        injectorProfilerCallbacks.splice(profilerIdx, 1);\r\n    }\r\n}\r\n/**\r\n * Adds a callback function which will be invoked during certain DI events within the\r\n * runtime (for example: injecting services, creating injectable instances, configuring providers).\r\n * Multiple profiler callbacks can be set: in this case profiling events are\r\n * reported to every registered callback.\r\n *\r\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\r\n * The contract of the function might be changed in any release and/or the function can be removed\r\n * completely.\r\n *\r\n * @param profiler function provided by the caller or null value to disable profiling.\r\n * @returns a cleanup function that, when invoked, removes a given profiler callback.\r\n */\r\nfunction setInjectorProfiler(injectorProfiler) {\r\n    !ngDevMode && throwError('setInjectorProfiler should never be called in production mode');\r\n    if (injectorProfiler !== null) {\r\n        if (!injectorProfilerCallbacks.includes(injectorProfiler)) {\r\n            injectorProfilerCallbacks.push(injectorProfiler);\r\n        }\r\n        return () => removeProfiler(injectorProfiler);\r\n    }\r\n    else {\r\n        injectorProfilerCallbacks.length = 0;\r\n        return NOOP_PROFILER_REMOVAL;\r\n    }\r\n}\r\n/**\r\n * Injector profiler function which emits on DI events executed by the runtime.\r\n *\r\n * @param event InjectorProfilerEvent corresponding to the DI event being emitted\r\n */\r\nfunction injectorProfiler(event) {\r\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\r\n    for (let i = 0; i < injectorProfilerCallbacks.length; i++) {\r\n        const injectorProfilerCallback = injectorProfilerCallbacks[i];\r\n        injectorProfilerCallback(event);\r\n    }\r\n}\r\n/**\r\n * Emits an InjectorProfilerEventType.ProviderConfigured to the injector profiler. The data in the\r\n * emitted event includes the raw provider, as well as the token that provider is providing.\r\n *\r\n * @param eventProvider A provider object\r\n */\r\nfunction emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {\r\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\r\n    let token;\r\n    // if the provider is a TypeProvider (typeof provider is function) then the token is the\r\n    // provider itself\r\n    if (typeof eventProvider === 'function') {\r\n        token = eventProvider;\r\n    }\r\n    // if the provider is an injection token, then the token is the injection token.\r\n    else if (eventProvider instanceof InjectionToken) {\r\n        token = eventProvider;\r\n    }\r\n    // in all other cases we can access the token via the `provide` property of the provider\r\n    else {\r\n        token = resolveForwardRef(eventProvider.provide);\r\n    }\r\n    let provider = eventProvider;\r\n    // Injection tokens may define their own default provider which gets attached to the token itself\r\n    // as `ɵprov`. In this case, we want to emit the provider that is attached to the token, not the\r\n    // token itself.\r\n    if (eventProvider instanceof InjectionToken) {\r\n        provider = eventProvider.ɵprov || eventProvider;\r\n    }\r\n    injectorProfiler({\r\n        type: 2 /* InjectorProfilerEventType.ProviderConfigured */,\r\n        context: getInjectorProfilerContext(),\r\n        providerRecord: { token, provider, isViewProvider },\r\n    });\r\n}\r\n/**\r\n * Emits an event to the injector profiler when an instance corresponding to a given token is about to be created be an injector. Note that\r\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\r\n *\r\n * @param instance an object created by an injector\r\n */\r\nfunction emitInjectorToCreateInstanceEvent(token) {\r\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\r\n    injectorProfiler({\r\n        type: 4 /* InjectorProfilerEventType.InjectorToCreateInstanceEvent */,\r\n        context: getInjectorProfilerContext(),\r\n        token: token,\r\n    });\r\n}\r\n/**\r\n * Emits an event to the injector profiler with the instance that was created. Note that\r\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\r\n *\r\n * @param instance an object created by an injector\r\n */\r\nfunction emitInstanceCreatedByInjectorEvent(instance) {\r\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\r\n    injectorProfiler({\r\n        type: 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */,\r\n        context: getInjectorProfilerContext(),\r\n        instance: { value: instance },\r\n    });\r\n}\r\n/**\r\n * @param token DI token associated with injected service\r\n * @param value the instance of the injected service (i.e the result of `inject(token)`)\r\n * @param flags the flags that the token was injected with\r\n */\r\nfunction emitInjectEvent(token, value, flags) {\r\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\r\n    injectorProfiler({\r\n        type: 0 /* InjectorProfilerEventType.Inject */,\r\n        context: getInjectorProfilerContext(),\r\n        service: { token, value, flags },\r\n    });\r\n}\r\nfunction emitEffectCreatedEvent(effect) {\r\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\r\n    injectorProfiler({\r\n        type: 3 /* InjectorProfilerEventType.EffectCreated */,\r\n        context: getInjectorProfilerContext(),\r\n        effect,\r\n    });\r\n}\r\nfunction runInInjectorProfilerContext(injector, token, callback) {\r\n    !ngDevMode &&\r\n        throwError('runInInjectorProfilerContext should never be called in production mode');\r\n    const prevInjectContext = setInjectorProfilerContext({ injector, token });\r\n    try {\r\n        callback();\r\n    }\r\n    finally {\r\n        setInjectorProfilerContext(prevInjectContext);\r\n    }\r\n}\r\n\r\nfunction isEnvironmentProviders(value) {\r\n    return value && !!value.ɵproviders;\r\n}\r\n\r\nconst NG_COMP_DEF = getClosureSafeProperty({ ɵcmp: getClosureSafeProperty });\r\nconst NG_DIR_DEF = getClosureSafeProperty({ ɵdir: getClosureSafeProperty });\r\nconst NG_PIPE_DEF = getClosureSafeProperty({ ɵpipe: getClosureSafeProperty });\r\nconst NG_MOD_DEF = getClosureSafeProperty({ ɵmod: getClosureSafeProperty });\r\nconst NG_FACTORY_DEF = getClosureSafeProperty({ ɵfac: getClosureSafeProperty });\r\n/**\r\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\r\n * the key and the directive's unique ID as the value. This allows us to map directives to their\r\n * bloom filter bit for DI.\r\n */\r\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\r\nconst NG_ELEMENT_ID = getClosureSafeProperty({\r\n    __NG_ELEMENT_ID__: getClosureSafeProperty,\r\n});\r\n/**\r\n * The `NG_ENV_ID` field on a DI token indicates special processing in the `EnvironmentInjector`:\r\n * getting such tokens from the `EnvironmentInjector` will bypass the standard DI resolution\r\n * strategy and instead will return implementation produced by the `NG_ENV_ID` factory function.\r\n *\r\n * This particular retrieval of DI tokens is mostly done to eliminate circular dependencies and\r\n * improve tree-shaking.\r\n */\r\nconst NG_ENV_ID = getClosureSafeProperty({ __NG_ENV_ID__: getClosureSafeProperty });\r\n\r\n/**\r\n * Used for stringify render output in Ivy.\r\n * Important! This function is very performance-sensitive and we should\r\n * be extra careful not to introduce megamorphic reads in it.\r\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\r\n */\r\nfunction renderStringify(value) {\r\n    if (typeof value === 'string')\r\n        return value;\r\n    if (value == null)\r\n        return '';\r\n    // Use `String` so that it invokes the `toString` method of the value. Note that this\r\n    // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\r\n    return String(value);\r\n}\r\n/**\r\n * Used to stringify a value so that it can be displayed in an error message.\r\n *\r\n * Important! This function contains a megamorphic read and should only be\r\n * used for error messages.\r\n */\r\nfunction stringifyForError(value) {\r\n    if (typeof value === 'function')\r\n        return value.name || value.toString();\r\n    if (typeof value === 'object' && value != null && typeof value.type === 'function') {\r\n        return value.type.name || value.type.toString();\r\n    }\r\n    return renderStringify(value);\r\n}\r\n/**\r\n * Used to stringify a `Type` and including the file path and line number in which it is defined, if\r\n * possible, for better debugging experience.\r\n *\r\n * Important! This function contains a megamorphic read and should only be used for error messages.\r\n */\r\nfunction debugStringifyTypeForError(type) {\r\n    // TODO(pmvald): Do some refactoring so that we can use getComponentDef here without creating\r\n    // circular deps.\r\n    let componentDef = type[NG_COMP_DEF] || null;\r\n    if (componentDef !== null && componentDef.debugInfo) {\r\n        return stringifyTypeFromDebugInfo(componentDef.debugInfo);\r\n    }\r\n    return stringifyForError(type);\r\n}\r\n// TODO(pmvald): Do some refactoring so that we can use the type ClassDebugInfo for the param\r\n// debugInfo here without creating circular deps.\r\nfunction stringifyTypeFromDebugInfo(debugInfo) {\r\n    if (!debugInfo.filePath || !debugInfo.lineNumber) {\r\n        return debugInfo.className;\r\n    }\r\n    else {\r\n        return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;\r\n    }\r\n}\r\n\r\n/** Called when directives inject each other (creating a circular dependency) */\r\nfunction throwCyclicDependencyError(token, path) {\r\n    throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, ngDevMode\r\n        ? `Circular dependency in DI detected for ${token}${path ? `. Dependency path: ${path.join(' > ')} > ${token}` : ''}`\r\n        : token);\r\n}\r\nfunction throwMixedMultiProviderError() {\r\n    throw new Error(`Cannot mix multi providers and regular providers`);\r\n}\r\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\r\n    if (ngModuleType && providers) {\r\n        const providerDetail = providers.map((v) => (v == provider ? '?' + provider + '?' : '...'));\r\n        throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\r\n    }\r\n    else if (isEnvironmentProviders(provider)) {\r\n        if (provider.ɵfromNgModule) {\r\n            throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\r\n        }\r\n        else {\r\n            throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid provider');\r\n    }\r\n}\r\n/** Throws an error when a token is not found in DI. */\r\nfunction throwProviderNotFoundError(token, injectorName) {\r\n    const errorMessage = ngDevMode &&\r\n        `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ''}`;\r\n    throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, errorMessage);\r\n}\r\n\r\n/**\r\n * Current implementation of inject.\r\n *\r\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\r\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\r\n * way for two reasons:\r\n *  1. `Injector` should not depend on ivy logic.\r\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\r\n */\r\nlet _injectImplementation;\r\nfunction getInjectImplementation() {\r\n    return _injectImplementation;\r\n}\r\n/**\r\n * Sets the current inject implementation.\r\n */\r\nfunction setInjectImplementation(impl) {\r\n    const previous = _injectImplementation;\r\n    _injectImplementation = impl;\r\n    return previous;\r\n}\r\n/**\r\n * Injects `root` tokens in limp mode.\r\n *\r\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\r\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\r\n * injectable definition.\r\n */\r\nfunction injectRootLimpMode(token, notFoundValue, flags) {\r\n    const injectableDef = getInjectableDef(token);\r\n    if (injectableDef && injectableDef.providedIn == 'root') {\r\n        return injectableDef.value === undefined\r\n            ? (injectableDef.value = injectableDef.factory())\r\n            : injectableDef.value;\r\n    }\r\n    if (flags & 8 /* InternalInjectFlags.Optional */)\r\n        return null;\r\n    if (notFoundValue !== undefined)\r\n        return notFoundValue;\r\n    throwProviderNotFoundError(token, 'Injector');\r\n}\r\n/**\r\n * Assert that `_injectImplementation` is not `fn`.\r\n *\r\n * This is useful, to prevent infinite recursion.\r\n *\r\n * @param fn Function which it should not equal to\r\n */\r\nfunction assertInjectImplementationNotEqual(fn) {\r\n    ngDevMode &&\r\n        assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\r\n}\r\n\r\nconst _THROW_IF_NOT_FOUND = {};\r\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n/*\r\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\r\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\r\n * in the code, thus making them tree-shakable.\r\n */\r\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\r\n/**\r\n * A wrapper around an `Injector` that implements the `PrimitivesInjector` interface.\r\n *\r\n * This is used to allow the `inject` function to be used with the new primitives-based DI system.\r\n */\r\nclass RetrievingInjector {\r\n    injector;\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    retrieve(token, options) {\r\n        const flags = convertToBitFlags(options) || 0 /* InternalInjectFlags.Default */;\r\n        try {\r\n            return this.injector.get(token, \r\n            // When a dependency is requested with an optional flag, DI returns null as the default value.\r\n            (flags & 8 /* InternalInjectFlags.Optional */ ? null : THROW_IF_NOT_FOUND), flags);\r\n        }\r\n        catch (e) {\r\n            if (isNotFound(e)) {\r\n                return e;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n}\r\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\r\nconst NG_TOKEN_PATH = 'ngTokenPath';\r\nconst NEW_LINE = /\\n/gm;\r\nconst NO_NEW_LINE = 'ɵ';\r\nconst SOURCE = '__source';\r\nfunction injectInjectorOnly(token, flags = 0 /* InternalInjectFlags.Default */) {\r\n    const currentInjector = getCurrentInjector();\r\n    if (currentInjector === undefined) {\r\n        throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode &&\r\n            `The \\`${stringify(token)}\\` token injection failed. \\`inject()\\` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`runInInjectionContext\\`.`);\r\n    }\r\n    else if (currentInjector === null) {\r\n        return injectRootLimpMode(token, undefined, flags);\r\n    }\r\n    else {\r\n        const options = convertToInjectOptions(flags);\r\n        const value = currentInjector.retrieve(token, options);\r\n        ngDevMode && emitInjectEvent(token, value, flags);\r\n        if (isNotFound(value)) {\r\n            if (options.optional) {\r\n                return null;\r\n            }\r\n            throw value;\r\n        }\r\n        return value;\r\n    }\r\n}\r\nfunction ɵɵinject(token, flags = 0 /* InternalInjectFlags.Default */) {\r\n    return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\r\n}\r\n/**\r\n * Throws an error indicating that a factory function could not be generated by the compiler for a\r\n * particular class.\r\n *\r\n * The name of the class is not mentioned here, but will be in the generated factory function name\r\n * and thus in the stack trace.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinvalidFactoryDep(index) {\r\n    throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode &&\r\n        `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\r\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\r\n\r\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\r\n}\r\n/**\r\n * Injects a token from the currently active injector.\r\n * `inject` is only supported in an [injection context](guide/di/dependency-injection-context). It\r\n * can be used during:\r\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\r\n * as an `@Injectable` or `@Component`.\r\n * - In the initializer for fields of such classes.\r\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\r\n * - In the `factory` function specified for an `InjectionToken`.\r\n * - In a stackframe of a function call in a DI context\r\n *\r\n * @param token A token that represents a dependency that should be injected.\r\n * @param flags Optional flags that control how injection is executed.\r\n * The flags correspond to injection strategies that can be specified with\r\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\r\n * @returns the injected value if operation is successful, `null` otherwise.\r\n * @throws if called outside of a supported context.\r\n *\r\n * @usageNotes\r\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\r\n * field initializer:\r\n *\r\n * ```ts\r\n * @Injectable({providedIn: 'root'})\r\n * export class Car {\r\n *   radio: Radio|undefined;\r\n *   // OK: field initializer\r\n *   spareTyre = inject(Tyre);\r\n *\r\n *   constructor() {\r\n *     // OK: constructor body\r\n *     this.radio = inject(Radio);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * It is also legal to call `inject` from a provider's factory:\r\n *\r\n * ```ts\r\n * providers: [\r\n *   {provide: Car, useFactory: () => {\r\n *     // OK: a class factory\r\n *     const engine = inject(Engine);\r\n *     return new Car(engine);\r\n *   }}\r\n * ]\r\n * ```\r\n *\r\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\r\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\r\n * (including lifecycle hooks):\r\n *\r\n * ```ts\r\n * @Component({ ... })\r\n * export class CarComponent {\r\n *   ngOnInit() {\r\n *     // ERROR: too late, the component instance was already created\r\n *     const engine = inject(Engine);\r\n *     engine.start();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction inject(token, options) {\r\n    // The `as any` here _shouldn't_ be necessary, but without it JSCompiler\r\n    // throws a disambiguation  error due to the multiple signatures.\r\n    return ɵɵinject(token, convertToBitFlags(options));\r\n}\r\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\r\nfunction convertToBitFlags(flags) {\r\n    if (typeof flags === 'undefined' || typeof flags === 'number') {\r\n        return flags;\r\n    }\r\n    // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\r\n    // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\r\n    // `InjectOptions` to `InjectFlags`.\r\n    return (0 /* InternalInjectFlags.Default */ | // comment to force a line break in the formatter\r\n        (flags.optional && 8 /* InternalInjectFlags.Optional */) |\r\n        (flags.host && 1 /* InternalInjectFlags.Host */) |\r\n        (flags.self && 2 /* InternalInjectFlags.Self */) |\r\n        (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */));\r\n}\r\n// Converts bitflags to inject options\r\nfunction convertToInjectOptions(flags) {\r\n    return {\r\n        optional: !!(flags & 8 /* InternalInjectFlags.Optional */),\r\n        host: !!(flags & 1 /* InternalInjectFlags.Host */),\r\n        self: !!(flags & 2 /* InternalInjectFlags.Self */),\r\n        skipSelf: !!(flags & 4 /* InternalInjectFlags.SkipSelf */),\r\n    };\r\n}\r\nfunction injectArgs(types) {\r\n    const args = [];\r\n    for (let i = 0; i < types.length; i++) {\r\n        const arg = resolveForwardRef(types[i]);\r\n        if (Array.isArray(arg)) {\r\n            if (arg.length === 0) {\r\n                throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\r\n            }\r\n            let type = undefined;\r\n            let flags = 0 /* InternalInjectFlags.Default */;\r\n            for (let j = 0; j < arg.length; j++) {\r\n                const meta = arg[j];\r\n                const flag = getInjectFlag(meta);\r\n                if (typeof flag === 'number') {\r\n                    // Special case when we handle @Inject decorator.\r\n                    if (flag === -1 /* DecoratorFlags.Inject */) {\r\n                        type = meta.token;\r\n                    }\r\n                    else {\r\n                        flags |= flag;\r\n                    }\r\n                }\r\n                else {\r\n                    type = meta;\r\n                }\r\n            }\r\n            args.push(ɵɵinject(type, flags));\r\n        }\r\n        else {\r\n            args.push(ɵɵinject(arg));\r\n        }\r\n    }\r\n    return args;\r\n}\r\n/**\r\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\r\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\r\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\r\n * attach the flag to make it available both as a static property and as a field on decorator\r\n * instance.\r\n *\r\n * @param decorator Provided DI decorator.\r\n * @param flag InjectFlag that should be applied.\r\n */\r\nfunction attachInjectFlag(decorator, flag) {\r\n    decorator[DI_DECORATOR_FLAG] = flag;\r\n    decorator.prototype[DI_DECORATOR_FLAG] = flag;\r\n    return decorator;\r\n}\r\n/**\r\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\r\n *\r\n * @param token Token that may contain monkey-patched DI flags property.\r\n */\r\nfunction getInjectFlag(token) {\r\n    return token[DI_DECORATOR_FLAG];\r\n}\r\nfunction catchInjectorError(e, token, injectorErrorName, source) {\r\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\r\n    if (token[SOURCE]) {\r\n        tokenPath.unshift(token[SOURCE]);\r\n    }\r\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\r\n    e[NG_TOKEN_PATH] = tokenPath;\r\n    e[NG_TEMP_TOKEN_PATH] = null;\r\n    throw e;\r\n}\r\nfunction formatError(text, obj, injectorErrorName, source = null) {\r\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\r\n    let context = stringify(obj);\r\n    if (Array.isArray(obj)) {\r\n        context = obj.map(stringify).join(' -> ');\r\n    }\r\n    else if (typeof obj === 'object') {\r\n        let parts = [];\r\n        for (let key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                let value = obj[key];\r\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\r\n            }\r\n        }\r\n        context = `{${parts.join(', ')}}`;\r\n    }\r\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\r\n}\r\n\r\nfunction getFactoryDef(type, throwNotFound) {\r\n    const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\r\n    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\r\n        throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\r\n    }\r\n    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\r\n}\r\n\r\n/**\r\n * Determines if the contents of two arrays is identical\r\n *\r\n * @param a first array\r\n * @param b second array\r\n * @param identityAccessor Optional function for extracting stable object identity from a value in\r\n *     the array.\r\n */\r\nfunction arrayEquals(a, b, identityAccessor) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++) {\r\n        let valueA = a[i];\r\n        let valueB = b[i];\r\n        if (identityAccessor) {\r\n            valueA = identityAccessor(valueA);\r\n            valueB = identityAccessor(valueB);\r\n        }\r\n        if (valueB !== valueA) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Flattens an array.\r\n */\r\nfunction flatten(list) {\r\n    return list.flat(Number.POSITIVE_INFINITY);\r\n}\r\nfunction deepForEach(input, fn) {\r\n    input.forEach((value) => (Array.isArray(value) ? deepForEach(value, fn) : fn(value)));\r\n}\r\nfunction addToArray(arr, index, value) {\r\n    // perf: array.push is faster than array.splice!\r\n    if (index >= arr.length) {\r\n        arr.push(value);\r\n    }\r\n    else {\r\n        arr.splice(index, 0, value);\r\n    }\r\n}\r\nfunction removeFromArray(arr, index) {\r\n    // perf: array.pop is faster than array.splice!\r\n    if (index >= arr.length - 1) {\r\n        return arr.pop();\r\n    }\r\n    else {\r\n        return arr.splice(index, 1)[0];\r\n    }\r\n}\r\nfunction newArray(size, value) {\r\n    const list = [];\r\n    for (let i = 0; i < size; i++) {\r\n        list.push(value);\r\n    }\r\n    return list;\r\n}\r\n/**\r\n * Remove item from array (Same as `Array.splice()` but faster.)\r\n *\r\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\r\n * removed. This causes memory pressure and slows down code when most of the time we don't\r\n * care about the deleted items array.\r\n *\r\n * https://jsperf.com/fast-array-splice (About 20x faster)\r\n *\r\n * @param array Array to splice\r\n * @param index Index of element in array to remove.\r\n * @param count Number of items to remove.\r\n */\r\nfunction arraySplice(array, index, count) {\r\n    const length = array.length - count;\r\n    while (index < length) {\r\n        array[index] = array[index + count];\r\n        index++;\r\n    }\r\n    while (count--) {\r\n        array.pop(); // shrink the array\r\n    }\r\n}\r\n/**\r\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\r\n *\r\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\r\n * removed. This causes memory pressure and slows down code when most of the time we don't\r\n * care about the deleted items array.\r\n *\r\n * @param array Array to splice.\r\n * @param index Index in array where the `value` should be added.\r\n * @param value1 Value to add to array.\r\n * @param value2 Value to add to array.\r\n */\r\nfunction arrayInsert2(array, index, value1, value2) {\r\n    ngDevMode && assertLessThanOrEqual(index, array.length, \"Can't insert past array end.\");\r\n    let end = array.length;\r\n    if (end == index) {\r\n        // inserting at the end.\r\n        array.push(value1, value2);\r\n    }\r\n    else if (end === 1) {\r\n        // corner case when we have less items in array than we have items to insert.\r\n        array.push(value2, array[0]);\r\n        array[0] = value1;\r\n    }\r\n    else {\r\n        end--;\r\n        array.push(array[end - 1], array[end]);\r\n        while (end > index) {\r\n            const previousEnd = end - 2;\r\n            array[end] = array[previousEnd];\r\n            end--;\r\n        }\r\n        array[index] = value1;\r\n        array[index + 1] = value2;\r\n    }\r\n}\r\n/**\r\n * Set a `value` for a `key`.\r\n *\r\n * @param keyValueArray to modify.\r\n * @param key The key to locate or create.\r\n * @param value The value to set for a `key`.\r\n * @returns index (always even) of where the value vas set.\r\n */\r\nfunction keyValueArraySet(keyValueArray, key, value) {\r\n    let index = keyValueArrayIndexOf(keyValueArray, key);\r\n    if (index >= 0) {\r\n        // if we found it set it.\r\n        keyValueArray[index | 1] = value;\r\n    }\r\n    else {\r\n        index = ~index;\r\n        arrayInsert2(keyValueArray, index, key, value);\r\n    }\r\n    return index;\r\n}\r\n/**\r\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\r\n *\r\n * @param keyValueArray to search.\r\n * @param key The key to locate.\r\n * @return The `value` stored at the `key` location or `undefined if not found.\r\n */\r\nfunction keyValueArrayGet(keyValueArray, key) {\r\n    const index = keyValueArrayIndexOf(keyValueArray, key);\r\n    if (index >= 0) {\r\n        // if we found it retrieve it.\r\n        return keyValueArray[index | 1];\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Retrieve a `key` index value in the array or `-1` if not found.\r\n *\r\n * @param keyValueArray to search.\r\n * @param key The key to locate.\r\n * @returns index of where the key is (or should have been.)\r\n *   - positive (even) index if key found.\r\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\r\n *     been inserted.)\r\n */\r\nfunction keyValueArrayIndexOf(keyValueArray, key) {\r\n    return _arrayIndexOfSorted(keyValueArray, key, 1);\r\n}\r\n/**\r\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\r\n *\r\n * NOTE:\r\n * - This uses binary search algorithm for fast removals.\r\n *\r\n * @param array A sorted array to binary search.\r\n * @param value The value to look for.\r\n * @param shift grouping shift.\r\n *   - `0` means look at every location\r\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\r\n *         they are values.)\r\n * @returns index of the value.\r\n *   - positive index if value found.\r\n *   - negative index if value not found. (`~index` to get the value where it should have been\r\n * inserted)\r\n */\r\nfunction _arrayIndexOfSorted(array, value, shift) {\r\n    ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\r\n    let start = 0;\r\n    let end = array.length >> shift;\r\n    while (end !== start) {\r\n        const middle = start + ((end - start) >> 1); // find the middle.\r\n        const current = array[middle << shift];\r\n        if (value === current) {\r\n            return middle << shift;\r\n        }\r\n        else if (current > value) {\r\n            end = middle;\r\n        }\r\n        else {\r\n            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\r\n        }\r\n    }\r\n    return ~(end << shift);\r\n}\r\n\r\n/**\r\n * This file contains reuseable \"empty\" symbols that can be used as default return values\r\n * in different parts of the rendering code. Because the same symbols are returned, this\r\n * allows for identity checks against these values to be consistently used by the framework\r\n * code.\r\n */\r\nconst EMPTY_OBJ = {};\r\nconst EMPTY_ARRAY = [];\r\n// freezing the values prevents any code from accidentally inserting new values in\r\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\r\n    // These property accesses can be ignored because ngDevMode will be set to false\r\n    // when optimizing code and the whole if statement will be dropped.\r\n    // tslint:disable-next-line:no-toplevel-property-access\r\n    Object.freeze(EMPTY_OBJ);\r\n    // tslint:disable-next-line:no-toplevel-property-access\r\n    Object.freeze(EMPTY_ARRAY);\r\n}\r\n\r\n/**\r\n * A multi-provider token for initialization functions that will run upon construction of an\r\n * environment injector.\r\n *\r\n * @deprecated from v19.0.0, use provideEnvironmentInitializer instead\r\n *\r\n * @see {@link provideEnvironmentInitializer}\r\n *\r\n * Note: As opposed to the `APP_INITIALIZER` token, the `ENVIRONMENT_INITIALIZER` functions are not awaited,\r\n * hence they should not be `async`.\r\n *\r\n * @publicApi\r\n */\r\nconst ENVIRONMENT_INITIALIZER = new InjectionToken(ngDevMode ? 'ENVIRONMENT_INITIALIZER' : '');\r\n\r\n/**\r\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\r\n *\r\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\r\n * project.\r\n *\r\n * @publicApi\r\n */\r\nconst INJECTOR$1 = new InjectionToken(ngDevMode ? 'INJECTOR' : '', \r\n// Disable tslint because this is const enum which gets inlined not top level prop access.\r\n// tslint:disable-next-line: no-toplevel-property-access\r\n-1 /* InjectorMarkers.Injector */);\r\n\r\nconst INJECTOR_DEF_TYPES = new InjectionToken(ngDevMode ? 'INJECTOR_DEF_TYPES' : '');\r\n\r\nclass NullInjector {\r\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\r\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\r\n            const error = new NotFoundError(`NullInjectorError: No provider for ${stringify(token)}!`);\r\n            throw error;\r\n        }\r\n        return notFoundValue;\r\n    }\r\n}\r\n\r\nfunction getNgModuleDef(type) {\r\n    return type[NG_MOD_DEF] || null;\r\n}\r\nfunction getNgModuleDefOrThrow(type) {\r\n    const ngModuleDef = getNgModuleDef(type);\r\n    if (!ngModuleDef) {\r\n        throw new RuntimeError(915 /* RuntimeErrorCode.MISSING_NG_MODULE_DEFINITION */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n            `Type ${stringify(type)} does not have 'ɵmod' property.`);\r\n    }\r\n    return ngModuleDef;\r\n}\r\n/**\r\n * The following getter methods retrieve the definition from the type. Currently the retrieval\r\n * honors inheritance, but in the future we may change the rule to require that definitions are\r\n * explicit. This would require some sort of migration strategy.\r\n */\r\nfunction getComponentDef(type) {\r\n    return type[NG_COMP_DEF] || null;\r\n}\r\nfunction getDirectiveDefOrThrow(type) {\r\n    const def = getDirectiveDef(type);\r\n    if (!def) {\r\n        throw new RuntimeError(916 /* RuntimeErrorCode.MISSING_DIRECTIVE_DEFINITION */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n            `Type ${stringify(type)} does not have 'ɵdir' property.`);\r\n    }\r\n    return def;\r\n}\r\nfunction getDirectiveDef(type) {\r\n    return type[NG_DIR_DEF] || null;\r\n}\r\nfunction getPipeDef(type) {\r\n    return type[NG_PIPE_DEF] || null;\r\n}\r\n/**\r\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\r\n * This will return false if passed anything other than a Component, Directive, or Pipe class\r\n * See [this guide](guide/components/importing) for additional information:\r\n *\r\n * @param type A reference to a Component, Directive or Pipe.\r\n * @publicApi\r\n */\r\nfunction isStandalone(type) {\r\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\r\n    return def !== null && def.standalone;\r\n}\r\n\r\n/**\r\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\r\n * referenced in `@Component` in a component injector.\r\n *\r\n * @publicApi\r\n */\r\nfunction makeEnvironmentProviders(providers) {\r\n    return {\r\n        ɵproviders: providers,\r\n    };\r\n}\r\n/**\r\n * @description\r\n * This function is used to provide initialization functions that will be executed upon construction\r\n * of an environment injector.\r\n *\r\n * Note that the provided initializer is run in the injection context.\r\n *\r\n * Previously, this was achieved using the `ENVIRONMENT_INITIALIZER` token which is now deprecated.\r\n *\r\n * @see {@link ENVIRONMENT_INITIALIZER}\r\n *\r\n * @usageNotes\r\n * The following example illustrates how to configure an initialization function using\r\n * `provideEnvironmentInitializer()`\r\n * ```ts\r\n * createEnvironmentInjector(\r\n *   [\r\n *     provideEnvironmentInitializer(() => {\r\n *       console.log('environment initialized');\r\n *     }),\r\n *   ],\r\n *   parentInjector\r\n * );\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction provideEnvironmentInitializer(initializerFn) {\r\n    return makeEnvironmentProviders([\r\n        {\r\n            provide: ENVIRONMENT_INITIALIZER,\r\n            multi: true,\r\n            useValue: initializerFn,\r\n        },\r\n    ]);\r\n}\r\n/**\r\n * Collects providers from all NgModules and standalone components, including transitively imported\r\n * ones.\r\n *\r\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\r\n * another environment injector (such as a route injector). They should not be used in component\r\n * providers.\r\n *\r\n * More information about standalone components can be found in [this\r\n * guide](guide/components/importing).\r\n *\r\n * @usageNotes\r\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\r\n *\r\n * ```ts\r\n * await bootstrapApplication(RootComponent, {\r\n *   providers: [\r\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\r\n * standalone component is used:\r\n *\r\n * ```ts\r\n * export const ROUTES: Route[] = [\r\n *   {\r\n *     path: 'foo',\r\n *     providers: [\r\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\r\n *     ],\r\n *     component: YourStandaloneComponent\r\n *   }\r\n * ];\r\n * ```\r\n *\r\n * @returns Collected providers from the specified list of types.\r\n * @publicApi\r\n */\r\nfunction importProvidersFrom(...sources) {\r\n    return {\r\n        ɵproviders: internalImportProvidersFrom(true, sources),\r\n        ɵfromNgModule: true,\r\n    };\r\n}\r\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\r\n    const providersOut = [];\r\n    const dedup = new Set(); // already seen types\r\n    let injectorTypesWithProviders;\r\n    const collectProviders = (provider) => {\r\n        providersOut.push(provider);\r\n    };\r\n    deepForEach(sources, (source) => {\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\r\n            const cmpDef = getComponentDef(source);\r\n            if (cmpDef?.standalone) {\r\n                throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\r\n            }\r\n        }\r\n        // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\r\n        const internalSource = source;\r\n        if (walkProviderTree(internalSource, collectProviders, [], dedup)) {\r\n            injectorTypesWithProviders ||= [];\r\n            injectorTypesWithProviders.push(internalSource);\r\n        }\r\n    });\r\n    // Collect all providers from `ModuleWithProviders` types.\r\n    if (injectorTypesWithProviders !== undefined) {\r\n        processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);\r\n    }\r\n    return providersOut;\r\n}\r\n/**\r\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\r\n * array.\r\n */\r\nfunction processInjectorTypesWithProviders(typesWithProviders, visitor) {\r\n    for (let i = 0; i < typesWithProviders.length; i++) {\r\n        const { ngModule, providers } = typesWithProviders[i];\r\n        deepForEachProvider(providers, (provider) => {\r\n            ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\r\n            visitor(provider, ngModule);\r\n        });\r\n    }\r\n}\r\n/**\r\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\r\n * `ComponentType`, and all of its transitive providers and collects providers.\r\n *\r\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\r\n * the function will return \"true\" to indicate that the providers of the type definition need\r\n * to be processed. This allows us to process providers of injector types after all imports of\r\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\r\n */\r\nfunction walkProviderTree(container, visitor, parents, dedup) {\r\n    container = resolveForwardRef(container);\r\n    if (!container)\r\n        return false;\r\n    // The actual type which had the definition. Usually `container`, but may be an unwrapped type\r\n    // from `InjectorTypeWithProviders`.\r\n    let defType = null;\r\n    let injDef = getInjectorDef(container);\r\n    const cmpDef = !injDef && getComponentDef(container);\r\n    if (!injDef && !cmpDef) {\r\n        // `container` is not an injector type or a component type. It might be:\r\n        //  * An `InjectorTypeWithProviders` that wraps an injector type.\r\n        //  * A standalone directive or pipe that got pulled in from a standalone component's\r\n        //    dependencies.\r\n        // Try to unwrap it as an `InjectorTypeWithProviders` first.\r\n        const ngModule = container\r\n            .ngModule;\r\n        injDef = getInjectorDef(ngModule);\r\n        if (injDef) {\r\n            defType = ngModule;\r\n        }\r\n        else {\r\n            // Not a component or injector type, so ignore it.\r\n            return false;\r\n        }\r\n    }\r\n    else if (cmpDef && !cmpDef.standalone) {\r\n        return false;\r\n    }\r\n    else {\r\n        defType = container;\r\n    }\r\n    // Check for circular dependencies.\r\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\r\n        const defName = stringify(defType);\r\n        const path = parents.map(stringify);\r\n        throwCyclicDependencyError(defName, path);\r\n    }\r\n    // Check for multiple imports of the same module\r\n    const isDuplicate = dedup.has(defType);\r\n    if (cmpDef) {\r\n        if (isDuplicate) {\r\n            // This component definition has already been processed.\r\n            return false;\r\n        }\r\n        dedup.add(defType);\r\n        if (cmpDef.dependencies) {\r\n            const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\r\n            for (const dep of deps) {\r\n                walkProviderTree(dep, visitor, parents, dedup);\r\n            }\r\n        }\r\n    }\r\n    else if (injDef) {\r\n        // First, include providers from any imports.\r\n        if (injDef.imports != null && !isDuplicate) {\r\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\r\n            // up deeply importing itself, this can be detected.\r\n            ngDevMode && parents.push(defType);\r\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\r\n            dedup.add(defType);\r\n            let importTypesWithProviders;\r\n            try {\r\n                deepForEach(injDef.imports, (imported) => {\r\n                    if (walkProviderTree(imported, visitor, parents, dedup)) {\r\n                        importTypesWithProviders ||= [];\r\n                        // If the processed import is an injector type with providers, we store it in the\r\n                        // list of import types with providers, so that we can process those afterwards.\r\n                        importTypesWithProviders.push(imported);\r\n                    }\r\n                });\r\n            }\r\n            finally {\r\n                // Remove it from the parents set when finished.\r\n                ngDevMode && parents.pop();\r\n            }\r\n            // Imports which are declared with providers (TypeWithProviders) need to be processed\r\n            // after all imported modules are processed. This is similar to how View Engine\r\n            // processes/merges module imports in the metadata resolver. See: FW-1349.\r\n            if (importTypesWithProviders !== undefined) {\r\n                processInjectorTypesWithProviders(importTypesWithProviders, visitor);\r\n            }\r\n        }\r\n        if (!isDuplicate) {\r\n            // Track the InjectorType and add a provider for it.\r\n            // It's important that this is done after the def's imports.\r\n            const factory = getFactoryDef(defType) || (() => new defType());\r\n            // Append extra providers to make more info available for consumers (to retrieve an injector\r\n            // type), as well as internally (to calculate an injection scope correctly and eagerly\r\n            // instantiate a `defType` when an injector is created).\r\n            // Provider to create `defType` using its factory.\r\n            visitor({ provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, defType);\r\n            // Make this `defType` available to an internal logic that calculates injector scope.\r\n            visitor({ provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, defType);\r\n            // Provider to eagerly instantiate `defType` via `INJECTOR_INITIALIZER`.\r\n            visitor({ provide: ENVIRONMENT_INITIALIZER, useValue: () => ɵɵinject(defType), multi: true }, defType);\r\n        }\r\n        // Next, include providers listed on the definition itself.\r\n        const defProviders = injDef.providers;\r\n        if (defProviders != null && !isDuplicate) {\r\n            const injectorType = container;\r\n            deepForEachProvider(defProviders, (provider) => {\r\n                ngDevMode && validateProvider(provider, defProviders, injectorType);\r\n                visitor(provider, injectorType);\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        // Should not happen, but just in case.\r\n        return false;\r\n    }\r\n    return (defType !== container && container.providers !== undefined);\r\n}\r\nfunction validateProvider(provider, providers, containerType) {\r\n    if (isTypeProvider(provider) ||\r\n        isValueProvider(provider) ||\r\n        isFactoryProvider(provider) ||\r\n        isExistingProvider(provider)) {\r\n        return;\r\n    }\r\n    // Here we expect the provider to be a `useClass` provider (by elimination).\r\n    const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\r\n    if (!classRef) {\r\n        throwInvalidProviderError(containerType, providers, provider);\r\n    }\r\n}\r\nfunction deepForEachProvider(providers, fn) {\r\n    for (let provider of providers) {\r\n        if (isEnvironmentProviders(provider)) {\r\n            provider = provider.ɵproviders;\r\n        }\r\n        if (Array.isArray(provider)) {\r\n            deepForEachProvider(provider, fn);\r\n        }\r\n        else {\r\n            fn(provider);\r\n        }\r\n    }\r\n}\r\nconst USE_VALUE = getClosureSafeProperty({\r\n    provide: String,\r\n    useValue: getClosureSafeProperty,\r\n});\r\nfunction isValueProvider(value) {\r\n    return value !== null && typeof value == 'object' && USE_VALUE in value;\r\n}\r\nfunction isExistingProvider(value) {\r\n    return !!(value && value.useExisting);\r\n}\r\nfunction isFactoryProvider(value) {\r\n    return !!(value && value.useFactory);\r\n}\r\nfunction isTypeProvider(value) {\r\n    return typeof value === 'function';\r\n}\r\nfunction isClassProvider(value) {\r\n    return !!value.useClass;\r\n}\r\n\r\n/**\r\n * An internal token whose presence in an injector indicates that the injector should treat itself\r\n * as a root scoped injector when processing requests for unknown tokens which may indicate\r\n * they are provided in the root scope.\r\n */\r\nconst INJECTOR_SCOPE = new InjectionToken(ngDevMode ? 'Set Injector scope.' : '');\r\n\r\n/**\r\n * Marker which indicates that a value has not yet been created from the factory function.\r\n */\r\nconst NOT_YET = {};\r\n/**\r\n * Marker which indicates that the factory function for a token is in the process of being called.\r\n *\r\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\r\n * injection of a dependency has recursively attempted to inject the original token, and there is\r\n * a circular dependency among the providers.\r\n */\r\nconst CIRCULAR = {};\r\n/**\r\n * A lazily initialized NullInjector.\r\n */\r\nlet NULL_INJECTOR = undefined;\r\nfunction getNullInjector() {\r\n    if (NULL_INJECTOR === undefined) {\r\n        NULL_INJECTOR = new NullInjector();\r\n    }\r\n    return NULL_INJECTOR;\r\n}\r\n/**\r\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\r\n * component tree.\r\n *\r\n * @publicApi\r\n */\r\nclass EnvironmentInjector {\r\n}\r\nclass R3Injector extends EnvironmentInjector {\r\n    parent;\r\n    source;\r\n    scopes;\r\n    /**\r\n     * Map of tokens to records which contain the instances of those tokens.\r\n     * - `null` value implies that we don't have the record. Used by tree-shakable injectors\r\n     * to prevent further searches.\r\n     */\r\n    records = new Map();\r\n    /**\r\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\r\n     */\r\n    _ngOnDestroyHooks = new Set();\r\n    _onDestroyHooks = [];\r\n    /**\r\n     * Flag indicating that this injector was previously destroyed.\r\n     */\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    _destroyed = false;\r\n    injectorDefTypes;\r\n    constructor(providers, parent, source, scopes) {\r\n        super();\r\n        this.parent = parent;\r\n        this.source = source;\r\n        this.scopes = scopes;\r\n        // Start off by creating Records for every provider.\r\n        forEachSingleProvider(providers, (provider) => this.processProvider(provider));\r\n        // Make sure the INJECTOR token provides this injector.\r\n        this.records.set(INJECTOR$1, makeRecord(undefined, this));\r\n        // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\r\n        if (scopes.has('environment')) {\r\n            this.records.set(EnvironmentInjector, makeRecord(undefined, this));\r\n        }\r\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\r\n        // any injectable scoped to APP_ROOT_SCOPE.\r\n        const record = this.records.get(INJECTOR_SCOPE);\r\n        if (record != null && typeof record.value === 'string') {\r\n            this.scopes.add(record.value);\r\n        }\r\n        this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, { self: true }));\r\n    }\r\n    retrieve(token, options) {\r\n        const flags = convertToBitFlags(options) || 0 /* InternalInjectFlags.Default */;\r\n        try {\r\n            return this.get(token, \r\n            // When a dependency is requested with an optional flag, DI returns null as the default value.\r\n            THROW_IF_NOT_FOUND, flags);\r\n        }\r\n        catch (e) {\r\n            if (isNotFound$1(e)) {\r\n                return e;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Destroy the injector and release references to every instance or provider associated with it.\r\n     *\r\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n     * hook was found.\r\n     */\r\n    destroy() {\r\n        assertNotDestroyed(this);\r\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\r\n        this._destroyed = true;\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            // Call all the lifecycle hooks.\r\n            for (const service of this._ngOnDestroyHooks) {\r\n                service.ngOnDestroy();\r\n            }\r\n            const onDestroyHooks = this._onDestroyHooks;\r\n            // Reset the _onDestroyHooks array before iterating over it to prevent hooks that unregister\r\n            // themselves from mutating the array during iteration.\r\n            this._onDestroyHooks = [];\r\n            for (const hook of onDestroyHooks) {\r\n                hook();\r\n            }\r\n        }\r\n        finally {\r\n            // Release all references.\r\n            this.records.clear();\r\n            this._ngOnDestroyHooks.clear();\r\n            this.injectorDefTypes.clear();\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n    onDestroy(callback) {\r\n        assertNotDestroyed(this);\r\n        this._onDestroyHooks.push(callback);\r\n        return () => this.removeOnDestroy(callback);\r\n    }\r\n    runInContext(fn) {\r\n        assertNotDestroyed(this);\r\n        const previousInjector = setCurrentInjector(this);\r\n        const previousInjectImplementation = setInjectImplementation(undefined);\r\n        let prevInjectContext;\r\n        if (ngDevMode) {\r\n            prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });\r\n        }\r\n        try {\r\n            return fn();\r\n        }\r\n        finally {\r\n            setCurrentInjector(previousInjector);\r\n            setInjectImplementation(previousInjectImplementation);\r\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\r\n        }\r\n    }\r\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, options) {\r\n        assertNotDestroyed(this);\r\n        if (token.hasOwnProperty(NG_ENV_ID)) {\r\n            return token[NG_ENV_ID](this);\r\n        }\r\n        const flags = convertToBitFlags(options);\r\n        // Set the injection context.\r\n        let prevInjectContext;\r\n        if (ngDevMode) {\r\n            prevInjectContext = setInjectorProfilerContext({ injector: this, token: token });\r\n        }\r\n        const previousInjector = setCurrentInjector(this);\r\n        const previousInjectImplementation = setInjectImplementation(undefined);\r\n        try {\r\n            // Check for the SkipSelf flag.\r\n            if (!(flags & 4 /* InternalInjectFlags.SkipSelf */)) {\r\n                // SkipSelf isn't set, check if the record belongs to this injector.\r\n                let record = this.records.get(token);\r\n                if (record === undefined) {\r\n                    // No record, but maybe the token is scoped to this injector. Look for an injectable\r\n                    // def with a scope matching this injector.\r\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\r\n                    if (def && this.injectableDefInScope(def)) {\r\n                        // Found an injectable def and it's scoped to this injector. Pretend as if it was here\r\n                        // all along.\r\n                        if (ngDevMode) {\r\n                            runInInjectorProfilerContext(this, token, () => {\r\n                                emitProviderConfiguredEvent(token);\r\n                            });\r\n                        }\r\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\r\n                    }\r\n                    else {\r\n                        record = null;\r\n                    }\r\n                    this.records.set(token, record);\r\n                }\r\n                // If a record was found, get the instance for it and return it.\r\n                if (record != null /* NOT null || undefined */) {\r\n                    return this.hydrate(token, record);\r\n                }\r\n            }\r\n            // Select the next injector based on the Self flag - if self is set, the next injector is\r\n            // the NullInjector, otherwise it's the parent.\r\n            const nextInjector = !(flags & 2 /* InternalInjectFlags.Self */) ? this.parent : getNullInjector();\r\n            // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\r\n            // is undefined, the value is null, otherwise it's the notFoundValue.\r\n            notFoundValue =\r\n                flags & 8 /* InternalInjectFlags.Optional */ && notFoundValue === THROW_IF_NOT_FOUND\r\n                    ? null\r\n                    : notFoundValue;\r\n            return nextInjector.get(token, notFoundValue);\r\n        }\r\n        catch (e) {\r\n            if (isNotFound$1(e)) {\r\n                // @ts-ignore\r\n                const path = (e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || []);\r\n                path.unshift(stringify(token));\r\n                if (previousInjector) {\r\n                    // We still have a parent injector, keep throwing\r\n                    throw e;\r\n                }\r\n                else {\r\n                    // Format & throw the final error message when we don't have any previous injector\r\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\r\n                }\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        finally {\r\n            // Lastly, restore the previous injection context.\r\n            setInjectImplementation(previousInjectImplementation);\r\n            setCurrentInjector(previousInjector);\r\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\r\n        }\r\n    }\r\n    /** @internal */\r\n    resolveInjectorInitializers() {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        const previousInjector = setCurrentInjector(this);\r\n        const previousInjectImplementation = setInjectImplementation(undefined);\r\n        let prevInjectContext;\r\n        if (ngDevMode) {\r\n            prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });\r\n        }\r\n        try {\r\n            const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, { self: true });\r\n            if (ngDevMode && !Array.isArray(initializers)) {\r\n                throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' +\r\n                    `(expected an array, but got ${typeof initializers}). ` +\r\n                    'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' +\r\n                    '`multi: true` provider.');\r\n            }\r\n            for (const initializer of initializers) {\r\n                initializer();\r\n            }\r\n        }\r\n        finally {\r\n            setCurrentInjector(previousInjector);\r\n            setInjectImplementation(previousInjectImplementation);\r\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n    toString() {\r\n        const tokens = [];\r\n        const records = this.records;\r\n        for (const token of records.keys()) {\r\n            tokens.push(stringify(token));\r\n        }\r\n        return `R3Injector[${tokens.join(', ')}]`;\r\n    }\r\n    /**\r\n     * Process a `SingleProvider` and add it.\r\n     */\r\n    processProvider(provider) {\r\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\r\n        // property.\r\n        provider = resolveForwardRef(provider);\r\n        let token = isTypeProvider(provider)\r\n            ? provider\r\n            : resolveForwardRef(provider && provider.provide);\r\n        // Construct a `Record` for the provider.\r\n        const record = providerToRecord(provider);\r\n        if (ngDevMode) {\r\n            runInInjectorProfilerContext(this, token, () => {\r\n                // Emit InjectorProfilerEventType.Create if provider is a value provider because\r\n                // these are the only providers that do not go through the value hydration logic\r\n                // where this event would normally be emitted from.\r\n                if (isValueProvider(provider)) {\r\n                    emitInjectorToCreateInstanceEvent(token);\r\n                    emitInstanceCreatedByInjectorEvent(provider.useValue);\r\n                }\r\n                emitProviderConfiguredEvent(provider);\r\n            });\r\n        }\r\n        if (!isTypeProvider(provider) && provider.multi === true) {\r\n            // If the provider indicates that it's a multi-provider, process it specially.\r\n            // First check whether it's been defined already.\r\n            let multiRecord = this.records.get(token);\r\n            if (multiRecord) {\r\n                // It has. Throw a nice error if\r\n                if (ngDevMode && multiRecord.multi === undefined) {\r\n                    throwMixedMultiProviderError();\r\n                }\r\n            }\r\n            else {\r\n                multiRecord = makeRecord(undefined, NOT_YET, true);\r\n                multiRecord.factory = () => injectArgs(multiRecord.multi);\r\n                this.records.set(token, multiRecord);\r\n            }\r\n            token = provider;\r\n            multiRecord.multi.push(provider);\r\n        }\r\n        else {\r\n            if (ngDevMode) {\r\n                const existing = this.records.get(token);\r\n                if (existing && existing.multi !== undefined) {\r\n                    throwMixedMultiProviderError();\r\n                }\r\n            }\r\n        }\r\n        this.records.set(token, record);\r\n    }\r\n    hydrate(token, record) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            if (record.value === CIRCULAR) {\r\n                throwCyclicDependencyError(stringify(token));\r\n            }\r\n            else if (record.value === NOT_YET) {\r\n                record.value = CIRCULAR;\r\n                if (ngDevMode) {\r\n                    runInInjectorProfilerContext(this, token, () => {\r\n                        emitInjectorToCreateInstanceEvent(token);\r\n                        record.value = record.factory();\r\n                        emitInstanceCreatedByInjectorEvent(record.value);\r\n                    });\r\n                }\r\n                else {\r\n                    record.value = record.factory();\r\n                }\r\n            }\r\n            if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\r\n                this._ngOnDestroyHooks.add(record.value);\r\n            }\r\n            return record.value;\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n    injectableDefInScope(def) {\r\n        if (!def.providedIn) {\r\n            return false;\r\n        }\r\n        const providedIn = resolveForwardRef(def.providedIn);\r\n        if (typeof providedIn === 'string') {\r\n            return providedIn === 'any' || this.scopes.has(providedIn);\r\n        }\r\n        else {\r\n            return this.injectorDefTypes.has(providedIn);\r\n        }\r\n    }\r\n    removeOnDestroy(callback) {\r\n        const destroyCBIdx = this._onDestroyHooks.indexOf(callback);\r\n        if (destroyCBIdx !== -1) {\r\n            this._onDestroyHooks.splice(destroyCBIdx, 1);\r\n        }\r\n    }\r\n}\r\nfunction injectableDefOrInjectorDefFactory(token) {\r\n    // Most tokens will have an injectable def directly on them, which specifies a factory directly.\r\n    const injectableDef = getInjectableDef(token);\r\n    const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\r\n    if (factory !== null) {\r\n        return factory;\r\n    }\r\n    // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\r\n    // If it's missing that, it's an error.\r\n    if (token instanceof InjectionToken) {\r\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\r\n    }\r\n    // Undecorated types can sometimes be created if they have no constructor arguments.\r\n    if (token instanceof Function) {\r\n        return getUndecoratedInjectableFactory(token);\r\n    }\r\n    // There was no way to resolve a factory for this token.\r\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\r\n}\r\nfunction getUndecoratedInjectableFactory(token) {\r\n    // If the token has parameters then it has dependencies that we cannot resolve implicitly.\r\n    const paramLength = token.length;\r\n    if (paramLength > 0) {\r\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode &&\r\n            `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, '?').join(', ')}).`);\r\n    }\r\n    // The constructor function appears to have no parameters.\r\n    // This might be because it inherits from a super-class. In which case, use an injectable\r\n    // def from an ancestor if there is one.\r\n    // Otherwise this really is a simple class with no dependencies, so return a factory that\r\n    // just instantiates the zero-arg constructor.\r\n    const inheritedInjectableDef = getInheritedInjectableDef(token);\r\n    if (inheritedInjectableDef !== null) {\r\n        return () => inheritedInjectableDef.factory(token);\r\n    }\r\n    else {\r\n        return () => new token();\r\n    }\r\n}\r\nfunction providerToRecord(provider) {\r\n    if (isValueProvider(provider)) {\r\n        return makeRecord(undefined, provider.useValue);\r\n    }\r\n    else {\r\n        const factory = providerToFactory(provider);\r\n        return makeRecord(factory, NOT_YET);\r\n    }\r\n}\r\n/**\r\n * Converts a `SingleProvider` into a factory function.\r\n *\r\n * @param provider provider to convert to factory\r\n */\r\nfunction providerToFactory(provider, ngModuleType, providers) {\r\n    let factory = undefined;\r\n    if (ngDevMode && isEnvironmentProviders(provider)) {\r\n        throwInvalidProviderError(undefined, providers, provider);\r\n    }\r\n    if (isTypeProvider(provider)) {\r\n        const unwrappedProvider = resolveForwardRef(provider);\r\n        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\r\n    }\r\n    else {\r\n        if (isValueProvider(provider)) {\r\n            factory = () => resolveForwardRef(provider.useValue);\r\n        }\r\n        else if (isFactoryProvider(provider)) {\r\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\r\n        }\r\n        else if (isExistingProvider(provider)) {\r\n            factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\r\n        }\r\n        else {\r\n            const classRef = resolveForwardRef(provider &&\r\n                (provider.useClass || provider.provide));\r\n            if (ngDevMode && !classRef) {\r\n                throwInvalidProviderError(ngModuleType, providers, provider);\r\n            }\r\n            if (hasDeps(provider)) {\r\n                factory = () => new classRef(...injectArgs(provider.deps));\r\n            }\r\n            else {\r\n                return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\r\n            }\r\n        }\r\n    }\r\n    return factory;\r\n}\r\nfunction assertNotDestroyed(injector) {\r\n    if (injector.destroyed) {\r\n        throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\r\n    }\r\n}\r\nfunction makeRecord(factory, value, multi = false) {\r\n    return {\r\n        factory: factory,\r\n        value: value,\r\n        multi: multi ? [] : undefined,\r\n    };\r\n}\r\nfunction hasDeps(value) {\r\n    return !!value.deps;\r\n}\r\nfunction hasOnDestroy(value) {\r\n    return (value !== null &&\r\n        typeof value === 'object' &&\r\n        typeof value.ngOnDestroy === 'function');\r\n}\r\nfunction couldBeInjectableType(value) {\r\n    return (typeof value === 'function' ||\r\n        (typeof value === 'object' && value.ngMetadataName === 'InjectionToken'));\r\n}\r\nfunction forEachSingleProvider(providers, fn) {\r\n    for (const provider of providers) {\r\n        if (Array.isArray(provider)) {\r\n            forEachSingleProvider(provider, fn);\r\n        }\r\n        else if (provider && isEnvironmentProviders(provider)) {\r\n            forEachSingleProvider(provider.ɵproviders, fn);\r\n        }\r\n        else {\r\n            fn(provider);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Runs the given function in the [context](guide/di/dependency-injection-context) of the given\r\n * `Injector`.\r\n *\r\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\r\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\r\n * any asynchronous callbacks or after any `await` points.\r\n *\r\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\r\n *     is executing\r\n * @param fn the closure to be run in the context of `injector`\r\n * @returns the return value of the function, if any\r\n * @publicApi\r\n */\r\nfunction runInInjectionContext(injector, fn) {\r\n    let internalInjector;\r\n    if (injector instanceof R3Injector) {\r\n        assertNotDestroyed(injector);\r\n        internalInjector = injector;\r\n    }\r\n    else {\r\n        internalInjector = new RetrievingInjector(injector);\r\n    }\r\n    let prevInjectorProfilerContext;\r\n    if (ngDevMode) {\r\n        prevInjectorProfilerContext = setInjectorProfilerContext({ injector, token: null });\r\n    }\r\n    const prevInjector = setCurrentInjector(internalInjector);\r\n    const previousInjectImplementation = setInjectImplementation(undefined);\r\n    try {\r\n        return fn();\r\n    }\r\n    finally {\r\n        setCurrentInjector(prevInjector);\r\n        ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);\r\n        setInjectImplementation(previousInjectImplementation);\r\n    }\r\n}\r\n/**\r\n * Whether the current stack frame is inside an injection context.\r\n */\r\nfunction isInInjectionContext() {\r\n    return getInjectImplementation() !== undefined || getCurrentInjector() != null;\r\n}\r\n/**\r\n * Asserts that the current stack frame is within an [injection\r\n * context](guide/di/dependency-injection-context) and has access to `inject`.\r\n *\r\n * @param debugFn a reference to the function making the assertion (used for the error message).\r\n *\r\n * @publicApi\r\n */\r\nfunction assertInInjectionContext(debugFn) {\r\n    // Taking a `Function` instead of a string name here prevents the unminified name of the function\r\n    // from being retained in the bundle regardless of minification.\r\n    if (!isInInjectionContext()) {\r\n        throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode &&\r\n            debugFn.name +\r\n                '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`');\r\n    }\r\n}\r\n\r\n// Below are constants for LView indices to help us look up LView members\r\n// without having to remember the specific indices.\r\n// Uglify will inline these when minifying so there shouldn't be a cost.\r\nconst HOST = 0;\r\nconst TVIEW = 1;\r\n// Shared with LContainer\r\nconst FLAGS = 2;\r\nconst PARENT = 3;\r\nconst NEXT = 4;\r\nconst T_HOST = 5;\r\n// End shared with LContainer\r\nconst HYDRATION = 6;\r\nconst CLEANUP = 7;\r\nconst CONTEXT = 8;\r\nconst INJECTOR = 9;\r\nconst ENVIRONMENT = 10;\r\nconst RENDERER = 11;\r\nconst CHILD_HEAD = 12;\r\nconst CHILD_TAIL = 13;\r\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\r\nconst DECLARATION_VIEW = 14;\r\nconst DECLARATION_COMPONENT_VIEW = 15;\r\nconst DECLARATION_LCONTAINER = 16;\r\nconst PREORDER_HOOK_FLAGS = 17;\r\nconst QUERIES = 18;\r\nconst ID = 19;\r\nconst EMBEDDED_VIEW_INJECTOR = 20;\r\nconst ON_DESTROY_HOOKS = 21;\r\nconst EFFECTS_TO_SCHEDULE = 22;\r\nconst EFFECTS = 23;\r\nconst REACTIVE_TEMPLATE_CONSUMER = 24;\r\nconst AFTER_RENDER_SEQUENCES_TO_ADD = 25;\r\n/**\r\n * Size of LView's header. Necessary to adjust for it when setting slots.\r\n *\r\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\r\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\r\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\r\n */\r\nconst HEADER_OFFSET = 26;\r\n\r\n/**\r\n * Special location which allows easy identification of type. If we have an array which was\r\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\r\n * `LContainer`.\r\n */\r\nconst TYPE = 1;\r\n/**\r\n * Below are constants for LContainer indices to help us look up LContainer members\r\n * without having to remember the specific indices.\r\n * Uglify will inline these when minifying so there shouldn't be a cost.\r\n */\r\n// FLAGS, PARENT, NEXT, and T_HOST are indices 2, 3, 4, and 5\r\n// As we already have these constants in LView, we don't need to re-create them.\r\nconst DEHYDRATED_VIEWS = 6;\r\nconst NATIVE = 7;\r\nconst VIEW_REFS = 8;\r\nconst MOVED_VIEWS = 9;\r\n/**\r\n * Size of LContainer's header. Represents the index after which all views in the\r\n * container will be inserted. We need to keep a record of current views so we know\r\n * which views are already in the DOM (and don't need to be re-added) and so we can\r\n * remove views from the DOM when they are no longer required.\r\n */\r\nconst CONTAINER_HEADER_OFFSET = 10;\r\n\r\n/**\r\n * True if `value` is `LView`.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\r\nfunction isLView(value) {\r\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\r\n}\r\n/**\r\n * True if `value` is `LContainer`.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\r\nfunction isLContainer(value) {\r\n    return Array.isArray(value) && value[TYPE] === true;\r\n}\r\nfunction isContentQueryHost(tNode) {\r\n    return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\r\n}\r\nfunction isComponentHost(tNode) {\r\n    return tNode.componentOffset > -1;\r\n}\r\nfunction isDirectiveHost(tNode) {\r\n    return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\r\n}\r\nfunction isComponentDef(def) {\r\n    return !!def.template;\r\n}\r\nfunction isRootView(target) {\r\n    // Determines whether a given LView is marked as a root view.\r\n    return (target[FLAGS] & 512 /* LViewFlags.IsRoot */) !== 0;\r\n}\r\nfunction isProjectionTNode(tNode) {\r\n    return (tNode.type & 16 /* TNodeType.Projection */) === 16 /* TNodeType.Projection */;\r\n}\r\nfunction hasI18n(lView) {\r\n    return (lView[FLAGS] & 32 /* LViewFlags.HasI18n */) === 32 /* LViewFlags.HasI18n */;\r\n}\r\nfunction isDestroyed(lView) {\r\n    // Determines whether a given LView is marked as destroyed.\r\n    return (lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\r\n}\r\n\r\n// [Assert functions do not constraint type when they are guarded by a truthy\r\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\r\nfunction assertTNodeForLView(tNode, lView) {\r\n    assertTNodeForTView(tNode, lView[TVIEW]);\r\n}\r\nfunction assertTNodeForTView(tNode, tView) {\r\n    assertTNode(tNode);\r\n    const tData = tView.data;\r\n    for (let i = HEADER_OFFSET; i < tData.length; i++) {\r\n        if (tData[i] === tNode) {\r\n            return;\r\n        }\r\n    }\r\n    throwError('This TNode does not belong to this TView.');\r\n}\r\nfunction assertTNode(tNode) {\r\n    assertDefined(tNode, 'TNode must be defined');\r\n    if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\r\n        throwError('Not of type TNode, got: ' + tNode);\r\n    }\r\n}\r\nfunction assertTIcu(tIcu) {\r\n    assertDefined(tIcu, 'Expected TIcu to be defined');\r\n    if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\r\n        throwError('Object is not of TIcu type.');\r\n    }\r\n}\r\nfunction assertComponentType(actual, msg = \"Type passed in is not ComponentType, it does not have 'ɵcmp' property.\") {\r\n    if (!getComponentDef(actual)) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertNgModuleType(actual, msg = \"Type passed in is not NgModuleType, it does not have 'ɵmod' property.\") {\r\n    if (!getNgModuleDef(actual)) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertHasParent(tNode) {\r\n    assertDefined(tNode, 'currentTNode should exist!');\r\n    assertDefined(tNode.parent, 'currentTNode should have a parent');\r\n}\r\nfunction assertLContainer(value) {\r\n    assertDefined(value, 'LContainer must be defined');\r\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\r\n}\r\nfunction assertLViewOrUndefined(value) {\r\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\r\n}\r\nfunction assertLView(value) {\r\n    assertDefined(value, 'LView must be defined');\r\n    assertEqual(isLView(value), true, 'Expecting LView');\r\n}\r\nfunction assertFirstCreatePass(tView, errMessage) {\r\n    assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\r\n}\r\nfunction assertFirstUpdatePass(tView, errMessage) {\r\n    assertEqual(tView.firstUpdatePass, true, 'Should only be called in first update pass.');\r\n}\r\n/**\r\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\r\n * an interface, so we can't do a direct instanceof check.\r\n */\r\nfunction assertDirectiveDef(obj) {\r\n    if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\r\n        throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\r\n    }\r\n}\r\nfunction assertIndexInDeclRange(tView, index) {\r\n    assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\r\n}\r\nfunction assertIndexInExpandoRange(lView, index) {\r\n    const tView = lView[1];\r\n    assertBetween(tView.expandoStartIndex, lView.length, index);\r\n}\r\nfunction assertBetween(lower, upper, index) {\r\n    if (!(lower <= index && index < upper)) {\r\n        throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\r\n    }\r\n}\r\nfunction assertProjectionSlots(lView, errMessage) {\r\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\r\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, 'Components with projection nodes (<ng-content>) must have projection slots defined.');\r\n}\r\nfunction assertParentView(lView, errMessage) {\r\n    assertDefined(lView, \"Component views should always have a parent view (component's host view)\");\r\n}\r\n/**\r\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\r\n * NodeInjector data structure.\r\n *\r\n * @param lView `LView` which should be checked.\r\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\r\n */\r\nfunction assertNodeInjector(lView, injectorIndex) {\r\n    assertIndexInExpandoRange(lView, injectorIndex);\r\n    assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\r\n    assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\r\n    assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\r\n}\r\n\r\nconst SVG_NAMESPACE = 'svg';\r\nconst MATH_ML_NAMESPACE = 'math';\r\n\r\n/**\r\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\r\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\r\n * because the storage is sparse. This file contains utilities for dealing with such data types.\r\n *\r\n * How do we know what is stored at a given location in `LView`.\r\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\r\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\r\n *   - `typeof value[TYPE] === 'object'` => `LView`\r\n *      - This happens when we have a component at a given location\r\n *   - `typeof value[TYPE] === true` => `LContainer`\r\n *      - This happens when we have `LContainer` binding at a given location.\r\n *\r\n *\r\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\r\n */\r\n/**\r\n * Returns `RNode`.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\r\nfunction unwrapRNode(value) {\r\n    while (Array.isArray(value)) {\r\n        value = value[HOST];\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns `LView` or `null` if not found.\r\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\r\n */\r\nfunction unwrapLView(value) {\r\n    while (Array.isArray(value)) {\r\n        // This check is same as `isLView()` but we don't call at as we don't want to call\r\n        // `Array.isArray()` twice and give JITer more work for inlining.\r\n        if (typeof value[TYPE] === 'object')\r\n            return value;\r\n        value = value[HOST];\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Retrieves an element value from the provided `viewData`, by unwrapping\r\n * from any containers, component views, or style contexts.\r\n */\r\nfunction getNativeByIndex(index, lView) {\r\n    ngDevMode && assertIndexInRange(lView, index);\r\n    ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\r\n    return unwrapRNode(lView[index]);\r\n}\r\n/**\r\n * Retrieve an `RNode` for a given `TNode` and `LView`.\r\n *\r\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\r\n *\r\n * @param tNode\r\n * @param lView\r\n */\r\nfunction getNativeByTNode(tNode, lView) {\r\n    ngDevMode && assertTNodeForLView(tNode, lView);\r\n    ngDevMode && assertIndexInRange(lView, tNode.index);\r\n    const node = unwrapRNode(lView[tNode.index]);\r\n    return node;\r\n}\r\n/**\r\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\r\n *\r\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\r\n *\r\n * @param tNode\r\n * @param lView\r\n */\r\nfunction getNativeByTNodeOrNull(tNode, lView) {\r\n    const index = tNode === null ? -1 : tNode.index;\r\n    if (index !== -1) {\r\n        ngDevMode && assertTNodeForLView(tNode, lView);\r\n        const node = unwrapRNode(lView[index]);\r\n        return node;\r\n    }\r\n    return null;\r\n}\r\n// fixme(misko): The return Type should be `TNode|null`\r\nfunction getTNode(tView, index) {\r\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\r\n    ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\r\n    const tNode = tView.data[index];\r\n    ngDevMode && tNode !== null && assertTNode(tNode);\r\n    return tNode;\r\n}\r\n/** Retrieves a value from any `LView` or `TData`. */\r\nfunction load(view, index) {\r\n    ngDevMode && assertIndexInRange(view, index);\r\n    return view[index];\r\n}\r\n/** Store a value in the `data` at a given `index`. */\r\nfunction store(tView, lView, index, value) {\r\n    // We don't store any static data for local variables, so the first time\r\n    // we see the template, we should store as null to avoid a sparse array\r\n    if (index >= tView.data.length) {\r\n        tView.data[index] = null;\r\n        tView.blueprint[index] = null;\r\n    }\r\n    lView[index] = value;\r\n}\r\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\r\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\r\n    ngDevMode && assertIndexInRange(hostView, nodeIndex);\r\n    const slotValue = hostView[nodeIndex];\r\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\r\n    return lView;\r\n}\r\n/** Checks whether a given view is in creation mode */\r\nfunction isCreationMode(view) {\r\n    return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\r\n}\r\n/**\r\n * Returns a boolean for whether the view is attached to the change detection tree.\r\n *\r\n * Note: This determines whether a view should be checked, not whether it's inserted\r\n * into a container. For that, you'll want `viewAttachedToContainer` below.\r\n */\r\nfunction viewAttachedToChangeDetector(view) {\r\n    return (view[FLAGS] & 128 /* LViewFlags.Attached */) === 128 /* LViewFlags.Attached */;\r\n}\r\n/** Returns a boolean for whether the view is attached to a container. */\r\nfunction viewAttachedToContainer(view) {\r\n    return isLContainer(view[PARENT]);\r\n}\r\nfunction getConstant(consts, index) {\r\n    if (index === null || index === undefined)\r\n        return null;\r\n    ngDevMode && assertIndexInRange(consts, index);\r\n    return consts[index];\r\n}\r\n/**\r\n * Resets the pre-order hook flags of the view.\r\n * @param lView the LView on which the flags are reset\r\n */\r\nfunction resetPreOrderHookFlags(lView) {\r\n    lView[PREORDER_HOOK_FLAGS] = 0;\r\n}\r\n/**\r\n * Adds the `RefreshView` flag from the lView and updates HAS_CHILD_VIEWS_TO_REFRESH flag of\r\n * parents.\r\n */\r\nfunction markViewForRefresh(lView) {\r\n    if (lView[FLAGS] & 1024 /* LViewFlags.RefreshView */) {\r\n        return;\r\n    }\r\n    lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\r\n    if (viewAttachedToChangeDetector(lView)) {\r\n        markAncestorsForTraversal(lView);\r\n    }\r\n}\r\n/**\r\n * Walks up the LView hierarchy.\r\n * @param nestingLevel Number of times to walk up in hierarchy.\r\n * @param currentView View from which to start the lookup.\r\n */\r\nfunction walkUpViews(nestingLevel, currentView) {\r\n    while (nestingLevel > 0) {\r\n        ngDevMode &&\r\n            assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\r\n        currentView = currentView[DECLARATION_VIEW];\r\n        nestingLevel--;\r\n    }\r\n    return currentView;\r\n}\r\nfunction requiresRefreshOrTraversal(lView) {\r\n    return !!(lView[FLAGS] & (1024 /* LViewFlags.RefreshView */ | 8192 /* LViewFlags.HasChildViewsToRefresh */) ||\r\n        lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);\r\n}\r\n/**\r\n * Updates the `HasChildViewsToRefresh` flag on the parents of the `LView` as well as the\r\n * parents above.\r\n */\r\nfunction updateAncestorTraversalFlagsOnAttach(lView) {\r\n    lView[ENVIRONMENT].changeDetectionScheduler?.notify(8 /* NotificationSource.ViewAttached */);\r\n    if (lView[FLAGS] & 64 /* LViewFlags.Dirty */) {\r\n        lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\r\n    }\r\n    if (requiresRefreshOrTraversal(lView)) {\r\n        markAncestorsForTraversal(lView);\r\n    }\r\n}\r\n/**\r\n * Ensures views above the given `lView` are traversed during change detection even when they are\r\n * not dirty.\r\n *\r\n * This is done by setting the `HAS_CHILD_VIEWS_TO_REFRESH` flag up to the root, stopping when the\r\n * flag is already `true` or the `lView` is detached.\r\n */\r\nfunction markAncestorsForTraversal(lView) {\r\n    lView[ENVIRONMENT].changeDetectionScheduler?.notify(0 /* NotificationSource.MarkAncestorsForTraversal */);\r\n    let parent = getLViewParent(lView);\r\n    while (parent !== null) {\r\n        // We stop adding markers to the ancestors once we reach one that already has the marker. This\r\n        // is to avoid needlessly traversing all the way to the root when the marker already exists.\r\n        if (parent[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\r\n            break;\r\n        }\r\n        parent[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\r\n        if (!viewAttachedToChangeDetector(parent)) {\r\n            break;\r\n        }\r\n        parent = getLViewParent(parent);\r\n    }\r\n}\r\n/**\r\n * Stores a LView-specific destroy callback.\r\n */\r\nfunction storeLViewOnDestroy(lView, onDestroyCallback) {\r\n    if (isDestroyed(lView)) {\r\n        throw new RuntimeError(911 /* RuntimeErrorCode.VIEW_ALREADY_DESTROYED */, ngDevMode && 'View has already been destroyed.');\r\n    }\r\n    if (lView[ON_DESTROY_HOOKS] === null) {\r\n        lView[ON_DESTROY_HOOKS] = [];\r\n    }\r\n    lView[ON_DESTROY_HOOKS].push(onDestroyCallback);\r\n}\r\n/**\r\n * Removes previously registered LView-specific destroy callback.\r\n */\r\nfunction removeLViewOnDestroy(lView, onDestroyCallback) {\r\n    if (lView[ON_DESTROY_HOOKS] === null)\r\n        return;\r\n    const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);\r\n    if (destroyCBIdx !== -1) {\r\n        lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);\r\n    }\r\n}\r\n/**\r\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\r\n * that LContainer, which is an LView\r\n * @param lView the lView whose parent to get\r\n */\r\nfunction getLViewParent(lView) {\r\n    ngDevMode && assertLView(lView);\r\n    const parent = lView[PARENT];\r\n    return isLContainer(parent) ? parent[PARENT] : parent;\r\n}\r\nfunction getOrCreateLViewCleanup(view) {\r\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\r\n    return (view[CLEANUP] ??= []);\r\n}\r\nfunction getOrCreateTViewCleanup(tView) {\r\n    return (tView.cleanup ??= []);\r\n}\r\n/**\r\n * Saves context for this cleanup function in LView.cleanupInstances.\r\n *\r\n * On the first template pass, saves in TView:\r\n * - Cleanup function\r\n * - Index of context we just saved in LView.cleanupInstances\r\n */\r\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\r\n    const lCleanup = getOrCreateLViewCleanup(lView);\r\n    // Historically the `storeCleanupWithContext` was used to register both framework-level and\r\n    // user-defined cleanup callbacks, but over time those two types of cleanups were separated.\r\n    // This dev mode checks assures that user-level cleanup callbacks are _not_ stored in data\r\n    // structures reserved for framework-specific hooks.\r\n    ngDevMode &&\r\n        assertDefined(context, 'Cleanup context is mandatory when registering framework-level destroy hooks');\r\n    lCleanup.push(context);\r\n    if (tView.firstCreatePass) {\r\n        getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\r\n    }\r\n    else {\r\n        // Make sure that no new framework-level cleanup functions are registered after the first\r\n        // template pass is done (and TView data structures are meant to fully constructed).\r\n        if (ngDevMode) {\r\n            Object.freeze(getOrCreateTViewCleanup(tView));\r\n        }\r\n    }\r\n}\r\n\r\nconst instructionState = {\r\n    lFrame: createLFrame(null),\r\n    bindingsEnabled: true,\r\n    skipHydrationRootTNode: null,\r\n};\r\nvar CheckNoChangesMode;\r\n(function (CheckNoChangesMode) {\r\n    CheckNoChangesMode[CheckNoChangesMode[\"Off\"] = 0] = \"Off\";\r\n    CheckNoChangesMode[CheckNoChangesMode[\"Exhaustive\"] = 1] = \"Exhaustive\";\r\n    CheckNoChangesMode[CheckNoChangesMode[\"OnlyDirtyViews\"] = 2] = \"OnlyDirtyViews\";\r\n})(CheckNoChangesMode || (CheckNoChangesMode = {}));\r\n/**\r\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\r\n *\r\n * Necessary to support ChangeDetectorRef.checkNoChanges().\r\n *\r\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\r\n * changes exist in the change detector or its children.\r\n */\r\nlet _checkNoChangesMode = 0; /* CheckNoChangesMode.Off */\r\n/**\r\n * Flag used to indicate that we are in the middle running change detection on a view\r\n *\r\n * @see detectChangesInViewWhileDirty\r\n */\r\nlet _isRefreshingViews = false;\r\nfunction getElementDepthCount() {\r\n    return instructionState.lFrame.elementDepthCount;\r\n}\r\nfunction increaseElementDepthCount() {\r\n    instructionState.lFrame.elementDepthCount++;\r\n}\r\nfunction decreaseElementDepthCount() {\r\n    instructionState.lFrame.elementDepthCount--;\r\n}\r\nfunction getBindingsEnabled() {\r\n    return instructionState.bindingsEnabled;\r\n}\r\n/**\r\n * Returns true if currently inside a skip hydration block.\r\n * @returns boolean\r\n */\r\nfunction isInSkipHydrationBlock() {\r\n    return instructionState.skipHydrationRootTNode !== null;\r\n}\r\n/**\r\n * Returns true if this is the root TNode of the skip hydration block.\r\n * @param tNode the current TNode\r\n * @returns boolean\r\n */\r\nfunction isSkipHydrationRootTNode(tNode) {\r\n    return instructionState.skipHydrationRootTNode === tNode;\r\n}\r\n/**\r\n * Enables directive matching on elements.\r\n *\r\n *  * Example:\r\n * ```html\r\n * <my-comp my-directive>\r\n *   Should match component / directive.\r\n * </my-comp>\r\n * <div ngNonBindable>\r\n *   <!-- ɵɵdisableBindings() -->\r\n *   <my-comp my-directive>\r\n *     Should not match component / directive because we are in ngNonBindable.\r\n *   </my-comp>\r\n *   <!-- ɵɵenableBindings() -->\r\n * </div>\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵenableBindings() {\r\n    instructionState.bindingsEnabled = true;\r\n}\r\n/**\r\n * Sets a flag to specify that the TNode is in a skip hydration block.\r\n * @param tNode the current TNode\r\n */\r\nfunction enterSkipHydrationBlock(tNode) {\r\n    instructionState.skipHydrationRootTNode = tNode;\r\n}\r\n/**\r\n * Disables directive matching on element.\r\n *\r\n *  * Example:\r\n * ```html\r\n * <my-comp my-directive>\r\n *   Should match component / directive.\r\n * </my-comp>\r\n * <div ngNonBindable>\r\n *   <!-- ɵɵdisableBindings() -->\r\n *   <my-comp my-directive>\r\n *     Should not match component / directive because we are in ngNonBindable.\r\n *   </my-comp>\r\n *   <!-- ɵɵenableBindings() -->\r\n * </div>\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdisableBindings() {\r\n    instructionState.bindingsEnabled = false;\r\n}\r\n/**\r\n * Clears the root skip hydration node when leaving a skip hydration block.\r\n */\r\nfunction leaveSkipHydrationBlock() {\r\n    instructionState.skipHydrationRootTNode = null;\r\n}\r\n/**\r\n * Return the current `LView`.\r\n */\r\nfunction getLView() {\r\n    return instructionState.lFrame.lView;\r\n}\r\n/**\r\n * Return the current `TView`.\r\n */\r\nfunction getTView() {\r\n    return instructionState.lFrame.tView;\r\n}\r\n/**\r\n * Restores `contextViewData` to the given OpaqueViewState instance.\r\n *\r\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\r\n * of the current view and restore it when listeners are invoked. This allows\r\n * walking the declaration view tree in listeners to get vars from parent views.\r\n *\r\n * @param viewToRestore The OpaqueViewState instance to restore.\r\n * @returns Context of the restored OpaqueViewState instance.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵrestoreView(viewToRestore) {\r\n    instructionState.lFrame.contextLView = viewToRestore;\r\n    return viewToRestore[CONTEXT];\r\n}\r\n/**\r\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\r\n * value so that it can be used as a return value of an instruction.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵresetView(value) {\r\n    instructionState.lFrame.contextLView = null;\r\n    return value;\r\n}\r\nfunction getCurrentTNode() {\r\n    let currentTNode = getCurrentTNodePlaceholderOk();\r\n    while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\r\n        currentTNode = currentTNode.parent;\r\n    }\r\n    return currentTNode;\r\n}\r\nfunction getCurrentTNodePlaceholderOk() {\r\n    return instructionState.lFrame.currentTNode;\r\n}\r\nfunction getCurrentParentTNode() {\r\n    const lFrame = instructionState.lFrame;\r\n    const currentTNode = lFrame.currentTNode;\r\n    return lFrame.isParent ? currentTNode : currentTNode.parent;\r\n}\r\nfunction setCurrentTNode(tNode, isParent) {\r\n    ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\r\n    const lFrame = instructionState.lFrame;\r\n    lFrame.currentTNode = tNode;\r\n    lFrame.isParent = isParent;\r\n}\r\nfunction isCurrentTNodeParent() {\r\n    return instructionState.lFrame.isParent;\r\n}\r\nfunction setCurrentTNodeAsNotParent() {\r\n    instructionState.lFrame.isParent = false;\r\n}\r\nfunction getContextLView() {\r\n    const contextLView = instructionState.lFrame.contextLView;\r\n    ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\r\n    return contextLView;\r\n}\r\nfunction isInCheckNoChangesMode() {\r\n    !ngDevMode && throwError('Must never be called in production mode');\r\n    return _checkNoChangesMode !== CheckNoChangesMode.Off;\r\n}\r\nfunction isExhaustiveCheckNoChanges() {\r\n    !ngDevMode && throwError('Must never be called in production mode');\r\n    return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;\r\n}\r\nfunction setIsInCheckNoChangesMode(mode) {\r\n    !ngDevMode && throwError('Must never be called in production mode');\r\n    _checkNoChangesMode = mode;\r\n}\r\nfunction isRefreshingViews() {\r\n    return _isRefreshingViews;\r\n}\r\nfunction setIsRefreshingViews(mode) {\r\n    const prev = _isRefreshingViews;\r\n    _isRefreshingViews = mode;\r\n    return prev;\r\n}\r\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\r\nfunction getBindingRoot() {\r\n    const lFrame = instructionState.lFrame;\r\n    let index = lFrame.bindingRootIndex;\r\n    if (index === -1) {\r\n        index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\r\n    }\r\n    return index;\r\n}\r\nfunction getBindingIndex() {\r\n    return instructionState.lFrame.bindingIndex;\r\n}\r\nfunction setBindingIndex(value) {\r\n    return (instructionState.lFrame.bindingIndex = value);\r\n}\r\nfunction nextBindingIndex() {\r\n    return instructionState.lFrame.bindingIndex++;\r\n}\r\nfunction incrementBindingIndex(count) {\r\n    const lFrame = instructionState.lFrame;\r\n    const index = lFrame.bindingIndex;\r\n    lFrame.bindingIndex = lFrame.bindingIndex + count;\r\n    return index;\r\n}\r\nfunction isInI18nBlock() {\r\n    return instructionState.lFrame.inI18n;\r\n}\r\nfunction setInI18nBlock(isInI18nBlock) {\r\n    instructionState.lFrame.inI18n = isInI18nBlock;\r\n}\r\n/**\r\n * Set a new binding root index so that host template functions can execute.\r\n *\r\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\r\n * how many host bindings we have we can't pre-compute them. For this reason they are all\r\n * 0 index and we just shift the root so that they match next available location in the LView.\r\n *\r\n * @param bindingRootIndex Root index for `hostBindings`\r\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\r\n *        whose `hostBindings` are being processed.\r\n */\r\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\r\n    const lFrame = instructionState.lFrame;\r\n    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\r\n    setCurrentDirectiveIndex(currentDirectiveIndex);\r\n}\r\n/**\r\n * When host binding is executing this points to the directive index.\r\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\r\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\r\n */\r\nfunction getCurrentDirectiveIndex() {\r\n    return instructionState.lFrame.currentDirectiveIndex;\r\n}\r\n/**\r\n * Sets an index of a directive whose `hostBindings` are being processed.\r\n *\r\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\r\n */\r\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\r\n    instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\r\n}\r\n/**\r\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\r\n * executed.\r\n *\r\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\r\n */\r\nfunction getCurrentDirectiveDef(tData) {\r\n    const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\r\n    return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\r\n}\r\nfunction getCurrentQueryIndex() {\r\n    return instructionState.lFrame.currentQueryIndex;\r\n}\r\nfunction setCurrentQueryIndex(value) {\r\n    instructionState.lFrame.currentQueryIndex = value;\r\n}\r\n/**\r\n * Returns a `TNode` of the location where the current `LView` is declared at.\r\n *\r\n * @param lView an `LView` that we want to find parent `TNode` for.\r\n */\r\nfunction getDeclarationTNode(lView) {\r\n    const tView = lView[TVIEW];\r\n    // Return the declaration parent for embedded views\r\n    if (tView.type === 2 /* TViewType.Embedded */) {\r\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\r\n        return tView.declTNode;\r\n    }\r\n    // Components don't have `TView.declTNode` because each instance of component could be\r\n    // inserted in different location, hence `TView.declTNode` is meaningless.\r\n    // Falling back to `T_HOST` in case we cross component boundary.\r\n    if (tView.type === 1 /* TViewType.Component */) {\r\n        return lView[T_HOST];\r\n    }\r\n    // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\r\n    return null;\r\n}\r\n/**\r\n * This is a light weight version of the `enterView` which is needed by the DI system.\r\n *\r\n * @param lView `LView` location of the DI context.\r\n * @param tNode `TNode` for DI context\r\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\r\n *     tree from `tNode`  until we find parent declared `TElementNode`.\r\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\r\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\r\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\r\n *     - If `true` than this call must be fallowed by `leaveDI`\r\n *     - If `false` than this call failed and we should NOT call `leaveDI`\r\n */\r\nfunction enterDI(lView, tNode, flags) {\r\n    ngDevMode && assertLViewOrUndefined(lView);\r\n    if (flags & 4 /* InternalInjectFlags.SkipSelf */) {\r\n        ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\r\n        let parentTNode = tNode;\r\n        let parentLView = lView;\r\n        while (true) {\r\n            ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\r\n            parentTNode = parentTNode.parent;\r\n            if (parentTNode === null && !(flags & 1 /* InternalInjectFlags.Host */)) {\r\n                parentTNode = getDeclarationTNode(parentLView);\r\n                if (parentTNode === null)\r\n                    break;\r\n                // In this case, a parent exists and is definitely an element. So it will definitely\r\n                // have an existing lView as the declaration view, which is why we can assume it's defined.\r\n                ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\r\n                parentLView = parentLView[DECLARATION_VIEW];\r\n                // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\r\n                // We want to skip those and look only at Elements and ElementContainers to ensure\r\n                // we're looking at true parent nodes, and not content or other types.\r\n                if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (parentTNode === null) {\r\n            // If we failed to find a parent TNode this means that we should use module injector.\r\n            return false;\r\n        }\r\n        else {\r\n            tNode = parentTNode;\r\n            lView = parentLView;\r\n        }\r\n    }\r\n    ngDevMode && assertTNodeForLView(tNode, lView);\r\n    const lFrame = (instructionState.lFrame = allocLFrame());\r\n    lFrame.currentTNode = tNode;\r\n    lFrame.lView = lView;\r\n    return true;\r\n}\r\n/**\r\n * Swap the current lView with a new lView.\r\n *\r\n * For performance reasons we store the lView in the top level of the module.\r\n * This way we minimize the number of properties to read. Whenever a new view\r\n * is entered we have to store the lView for later, and when the view is\r\n * exited the state has to be restored\r\n *\r\n * @param newView New lView to become active\r\n * @returns the previously active lView;\r\n */\r\nfunction enterView(newView) {\r\n    ngDevMode && assertNotEqual(newView[0], newView[1], '????');\r\n    ngDevMode && assertLViewOrUndefined(newView);\r\n    const newLFrame = allocLFrame();\r\n    if (ngDevMode) {\r\n        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\r\n        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\r\n    }\r\n    const tView = newView[TVIEW];\r\n    instructionState.lFrame = newLFrame;\r\n    ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\r\n    newLFrame.currentTNode = tView.firstChild;\r\n    newLFrame.lView = newView;\r\n    newLFrame.tView = tView;\r\n    newLFrame.contextLView = newView;\r\n    newLFrame.bindingIndex = tView.bindingStartIndex;\r\n    newLFrame.inI18n = false;\r\n}\r\n/**\r\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\r\n */\r\nfunction allocLFrame() {\r\n    const currentLFrame = instructionState.lFrame;\r\n    const childLFrame = currentLFrame === null ? null : currentLFrame.child;\r\n    const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\r\n    return newLFrame;\r\n}\r\nfunction createLFrame(parent) {\r\n    const lFrame = {\r\n        currentTNode: null,\r\n        isParent: true,\r\n        lView: null,\r\n        tView: null,\r\n        selectedIndex: -1,\r\n        contextLView: null,\r\n        elementDepthCount: 0,\r\n        currentNamespace: null,\r\n        currentDirectiveIndex: -1,\r\n        bindingRootIndex: -1,\r\n        bindingIndex: -1,\r\n        currentQueryIndex: 0,\r\n        parent: parent,\r\n        child: null,\r\n        inI18n: false,\r\n    };\r\n    parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\r\n    return lFrame;\r\n}\r\n/**\r\n * A lightweight version of leave which is used with DI.\r\n *\r\n * This function only resets `currentTNode` and `LView` as those are the only properties\r\n * used with DI (`enterDI()`).\r\n *\r\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\r\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\r\n */\r\nfunction leaveViewLight() {\r\n    const oldLFrame = instructionState.lFrame;\r\n    instructionState.lFrame = oldLFrame.parent;\r\n    oldLFrame.currentTNode = null;\r\n    oldLFrame.lView = null;\r\n    return oldLFrame;\r\n}\r\n/**\r\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\r\n *\r\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\r\n * return type.\r\n */\r\nconst leaveDI = leaveViewLight;\r\n/**\r\n * Leave the current `LView`\r\n *\r\n * This pops the `LFrame` with the associated `LView` from the stack.\r\n *\r\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\r\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\r\n */\r\nfunction leaveView() {\r\n    const oldLFrame = leaveViewLight();\r\n    oldLFrame.isParent = true;\r\n    oldLFrame.tView = null;\r\n    oldLFrame.selectedIndex = -1;\r\n    oldLFrame.contextLView = null;\r\n    oldLFrame.elementDepthCount = 0;\r\n    oldLFrame.currentDirectiveIndex = -1;\r\n    oldLFrame.currentNamespace = null;\r\n    oldLFrame.bindingRootIndex = -1;\r\n    oldLFrame.bindingIndex = -1;\r\n    oldLFrame.currentQueryIndex = 0;\r\n}\r\nfunction nextContextImpl(level) {\r\n    const contextLView = (instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView));\r\n    return contextLView[CONTEXT];\r\n}\r\n/**\r\n * Gets the currently selected element index.\r\n *\r\n * Used with {@link property} instruction (and more in the future) to identify the index in the\r\n * current `LView` to act on.\r\n */\r\nfunction getSelectedIndex() {\r\n    return instructionState.lFrame.selectedIndex;\r\n}\r\n/**\r\n * Sets the most recent index passed to {@link select}\r\n *\r\n * Used with {@link property} instruction (and more in the future) to identify the index in the\r\n * current `LView` to act on.\r\n *\r\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\r\n * run if and when the provided `index` value is different from the current selected index value.)\r\n */\r\nfunction setSelectedIndex(index) {\r\n    ngDevMode &&\r\n        index !== -1 &&\r\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\r\n    ngDevMode &&\r\n        assertLessThan(index, instructionState.lFrame.lView.length, \"Can't set index passed end of LView\");\r\n    instructionState.lFrame.selectedIndex = index;\r\n}\r\n/**\r\n * Gets the `tNode` that represents currently selected element.\r\n */\r\nfunction getSelectedTNode() {\r\n    const lFrame = instructionState.lFrame;\r\n    return getTNode(lFrame.tView, lFrame.selectedIndex);\r\n}\r\n/**\r\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵnamespaceSVG() {\r\n    instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\r\n}\r\n/**\r\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵnamespaceMathML() {\r\n    instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\r\n}\r\n/**\r\n * Sets the namespace used to create elements to `null`, which forces element creation to use\r\n * `createElement` rather than `createElementNS`.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵnamespaceHTML() {\r\n    namespaceHTMLInternal();\r\n}\r\n/**\r\n * Sets the namespace used to create elements to `null`, which forces element creation to use\r\n * `createElement` rather than `createElementNS`.\r\n */\r\nfunction namespaceHTMLInternal() {\r\n    instructionState.lFrame.currentNamespace = null;\r\n}\r\nfunction getNamespace() {\r\n    return instructionState.lFrame.currentNamespace;\r\n}\r\nlet _wasLastNodeCreated = true;\r\n/**\r\n * Retrieves a global flag that indicates whether the most recent DOM node\r\n * was created or hydrated.\r\n */\r\nfunction wasLastNodeCreated() {\r\n    return _wasLastNodeCreated;\r\n}\r\n/**\r\n * Sets a global flag to indicate whether the most recent DOM node\r\n * was created or hydrated.\r\n */\r\nfunction lastNodeWasCreated(flag) {\r\n    _wasLastNodeCreated = flag;\r\n}\r\n\r\n/**\r\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\r\n */\r\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\r\n    const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\r\n    injector.resolveInjectorInitializers();\r\n    return injector;\r\n}\r\n/**\r\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\r\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\r\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\r\n */\r\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\r\n    const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\r\n    name = name || (typeof defType === 'object' ? undefined : stringify(defType));\r\n    return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\r\n}\r\n\r\n/**\r\n * Concrete injectors implement this interface. Injectors are configured\r\n * with [providers](guide/di/dependency-injection-providers) that associate\r\n * dependencies of various types with [injection tokens](guide/di/dependency-injection-providers).\r\n *\r\n * @see [DI Providers](guide/di/dependency-injection-providers).\r\n * @see {@link StaticProvider}\r\n *\r\n * @usageNotes\r\n *\r\n *  The following example creates a service injector instance.\r\n *\r\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n *\r\n * ### Usage example\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='Injector'}\r\n *\r\n * `Injector` returns itself when given `Injector` as a token:\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\r\n *\r\n * @publicApi\r\n */\r\nclass Injector {\r\n    static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\r\n    static NULL = new NullInjector();\r\n    static create(options, parent) {\r\n        if (Array.isArray(options)) {\r\n            return createInjector({ name: '' }, parent, options, '');\r\n        }\r\n        else {\r\n            const name = options.name ?? '';\r\n            return createInjector({ name }, options.parent, options.providers, name);\r\n        }\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\r\n        token: Injector,\r\n        providedIn: 'any',\r\n        factory: () => ɵɵinject(INJECTOR$1),\r\n    });\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\r\n}\r\n\r\n/**\r\n * A DI Token representing the main rendering context.\r\n * In a browser and SSR this is the DOM Document.\r\n * When using SSR, that document is created by [Domino](https://github.com/angular/domino).\r\n *\r\n * @publicApi\r\n */\r\nconst DOCUMENT = new InjectionToken(ngDevMode ? 'DocumentToken' : '');\r\n\r\n/**\r\n * `DestroyRef` lets you set callbacks to run for any cleanup or destruction behavior.\r\n * The scope of this destruction depends on where `DestroyRef` is injected. If `DestroyRef`\r\n * is injected in a component or directive, the callbacks run when that component or\r\n * directive is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.\r\n *\r\n * @publicApi\r\n */\r\nclass DestroyRef {\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = injectDestroyRef;\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ENV_ID__ = (injector) => injector;\r\n}\r\nclass NodeInjectorDestroyRef extends DestroyRef {\r\n    _lView;\r\n    constructor(_lView) {\r\n        super();\r\n        this._lView = _lView;\r\n    }\r\n    get destroyed() {\r\n        return isDestroyed(this._lView);\r\n    }\r\n    onDestroy(callback) {\r\n        const lView = this._lView;\r\n        storeLViewOnDestroy(lView, callback);\r\n        return () => removeLViewOnDestroy(lView, callback);\r\n    }\r\n}\r\nfunction injectDestroyRef() {\r\n    return new NodeInjectorDestroyRef(getLView());\r\n}\r\n\r\n/**\r\n * Provides a hook for centralized exception handling.\r\n *\r\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\r\n * intercept error handling, write a custom exception handler that replaces this default as\r\n * appropriate for your app.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```ts\r\n * class MyErrorHandler implements ErrorHandler {\r\n *   handleError(error) {\r\n *     // do something with the exception\r\n *   }\r\n * }\r\n *\r\n * // Provide in standalone apps\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n *\r\n * // Provide in module-based apps\r\n * @NgModule({\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n * class MyModule {}\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass ErrorHandler {\r\n    /**\r\n     * @internal\r\n     */\r\n    _console = console;\r\n    handleError(error) {\r\n        this._console.error('ERROR', error);\r\n    }\r\n}\r\n/**\r\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\r\n */\r\nconst INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'internal error handler' : '', {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n        // The user's error handler may depend on things that create a circular dependency\r\n        // so we inject it lazily.\r\n        const injector = inject(EnvironmentInjector);\r\n        let userErrorHandler;\r\n        return (e) => {\r\n            if (injector.destroyed && !userErrorHandler) {\r\n                setTimeout(() => {\r\n                    throw e;\r\n                });\r\n            }\r\n            else {\r\n                userErrorHandler ??= injector.get(ErrorHandler);\r\n                userErrorHandler.handleError(e);\r\n            }\r\n        };\r\n    },\r\n});\r\nconst errorHandlerEnvironmentInitializer = {\r\n    provide: ENVIRONMENT_INITIALIZER,\r\n    useValue: () => void inject(ErrorHandler),\r\n    multi: true,\r\n};\r\nconst globalErrorListeners = new InjectionToken(ngDevMode ? 'GlobalErrorListeners' : '', {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n        if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n            return;\r\n        }\r\n        const window = inject(DOCUMENT).defaultView;\r\n        if (!window) {\r\n            return;\r\n        }\r\n        const errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\r\n        const rejectionListener = (e) => {\r\n            errorHandler(e.reason);\r\n            e.preventDefault();\r\n        };\r\n        const errorListener = (e) => {\r\n            if (e.error) {\r\n                errorHandler(e.error);\r\n            }\r\n            else {\r\n                errorHandler(new Error(ngDevMode\r\n                    ? `An ErrorEvent with no error occurred. See Error.cause for details: ${e.message}`\r\n                    : e.message, { cause: e }));\r\n            }\r\n            e.preventDefault();\r\n        };\r\n        const setupEventListeners = () => {\r\n            window.addEventListener('unhandledrejection', rejectionListener);\r\n            window.addEventListener('error', errorListener);\r\n        };\r\n        // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\r\n        // the scope of this functionality.\r\n        if (typeof Zone !== 'undefined') {\r\n            Zone.root.run(setupEventListeners);\r\n        }\r\n        else {\r\n            setupEventListeners();\r\n        }\r\n        inject(DestroyRef).onDestroy(() => {\r\n            window.removeEventListener('error', errorListener);\r\n            window.removeEventListener('unhandledrejection', rejectionListener);\r\n        });\r\n    },\r\n});\r\n/**\r\n * Provides an environment initializer which forwards unhandled errors to the ErrorHandler.\r\n *\r\n * The listeners added are for the window's 'unhandledrejection' and 'error' events.\r\n *\r\n * @publicApi\r\n */\r\nfunction provideBrowserGlobalErrorListeners() {\r\n    return makeEnvironmentProviders([\r\n        provideEnvironmentInitializer(() => void inject(globalErrorListeners)),\r\n    ]);\r\n}\r\n\r\n/**\r\n * Checks if the given `value` is a reactive `Signal`.\r\n *\r\n * @publicApi 17.0\r\n */\r\nfunction isSignal(value) {\r\n    return typeof value === 'function' && value[SIGNAL] !== undefined;\r\n}\r\n\r\n/**\r\n * Utility function used during template type checking to extract the value from a `WritableSignal`.\r\n * @codeGenApi\r\n */\r\nfunction ɵunwrapWritableSignal(value) {\r\n    // Note: the function uses `WRITABLE_SIGNAL` as a brand instead of `WritableSignal<T>`,\r\n    // because the latter incorrectly unwraps non-signal getter functions.\r\n    return null;\r\n}\r\n/**\r\n * Create a `Signal` that can be set or updated directly.\r\n */\r\nfunction signal(initialValue, options) {\r\n    const [get, set, update] = createSignal(initialValue, options?.equal);\r\n    const signalFn = get;\r\n    const node = signalFn[SIGNAL];\r\n    signalFn.set = set;\r\n    signalFn.update = update;\r\n    signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);\r\n    if (ngDevMode) {\r\n        signalFn.toString = () => `[Signal: ${signalFn()}]`;\r\n        node.debugName = options?.debugName;\r\n    }\r\n    return signalFn;\r\n}\r\nfunction signalAsReadonlyFn() {\r\n    const node = this[SIGNAL];\r\n    if (node.readonlyFn === undefined) {\r\n        const readonlyFn = () => this();\r\n        readonlyFn[SIGNAL] = node;\r\n        node.readonlyFn = readonlyFn;\r\n    }\r\n    return node.readonlyFn;\r\n}\r\n/**\r\n * Checks if the given `value` is a writeable signal.\r\n */\r\nfunction isWritableSignal(value) {\r\n    return isSignal(value) && typeof value.set === 'function';\r\n}\r\n\r\n/**\r\n * Injectable that is notified when an `LView` is made aware of changes to application state.\r\n */\r\nclass ChangeDetectionScheduler {\r\n}\r\n/** Token used to indicate if zoneless was enabled via provideZonelessChangeDetection(). */\r\nconst ZONELESS_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless enabled' : '', { providedIn: 'root', factory: () => false });\r\n/** Token used to indicate `provideZonelessChangeDetection` was used. */\r\nconst PROVIDED_ZONELESS = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless provided' : '', { providedIn: 'root', factory: () => false });\r\nconst ZONELESS_SCHEDULER_DISABLED = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'scheduler disabled' : '');\r\n// TODO(atscott): Remove in v19. Scheduler should be done with runOutsideAngular.\r\nconst SCHEDULE_IN_ROOT_ZONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'run changes outside zone in root' : '');\r\n\r\n/**\r\n * Asserts that the current stack frame is not within a reactive context. Useful\r\n * to disallow certain code from running inside a reactive context (see {@link /api/core/rxjs-interop/toSignal toSignal})\r\n *\r\n * @param debugFn a reference to the function making the assertion (used for the error message).\r\n *\r\n * @publicApi\r\n */\r\nfunction assertNotInReactiveContext(debugFn, extraContext) {\r\n    // Taking a `Function` instead of a string name here prevents the un-minified name of the function\r\n    // from being retained in the bundle regardless of minification.\r\n    if (getActiveConsumer() !== null) {\r\n        throw new RuntimeError(-602 /* RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT */, ngDevMode &&\r\n            `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ''}`);\r\n    }\r\n}\r\n\r\nclass ViewContext {\r\n    view;\r\n    node;\r\n    constructor(view, node) {\r\n        this.view = view;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = injectViewContext;\r\n}\r\nfunction injectViewContext() {\r\n    return new ViewContext(getLView(), getCurrentTNode());\r\n}\r\n\r\n/**\r\n * Internal implementation of the pending tasks service.\r\n */\r\nclass PendingTasksInternal {\r\n    taskId = 0;\r\n    pendingTasks = new Set();\r\n    destroyed = false;\r\n    pendingTask = new BehaviorSubject(false);\r\n    get hasPendingTasks() {\r\n        // Accessing the value of a closed `BehaviorSubject` throws an error.\r\n        return this.destroyed ? false : this.pendingTask.value;\r\n    }\r\n    /**\r\n     * In case the service is about to be destroyed, return a self-completing observable.\r\n     * Otherwise, return the observable that emits the current state of pending tasks.\r\n     */\r\n    get hasPendingTasksObservable() {\r\n        if (this.destroyed) {\r\n            // Manually creating the observable pulls less symbols from RxJS than `of(false)`.\r\n            return new Observable((subscriber) => {\r\n                subscriber.next(false);\r\n                subscriber.complete();\r\n            });\r\n        }\r\n        return this.pendingTask;\r\n    }\r\n    add() {\r\n        // Emitting a value to a closed subject throws an error.\r\n        if (!this.hasPendingTasks && !this.destroyed) {\r\n            this.pendingTask.next(true);\r\n        }\r\n        const taskId = this.taskId++;\r\n        this.pendingTasks.add(taskId);\r\n        return taskId;\r\n    }\r\n    has(taskId) {\r\n        return this.pendingTasks.has(taskId);\r\n    }\r\n    remove(taskId) {\r\n        this.pendingTasks.delete(taskId);\r\n        if (this.pendingTasks.size === 0 && this.hasPendingTasks) {\r\n            this.pendingTask.next(false);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.pendingTasks.clear();\r\n        if (this.hasPendingTasks) {\r\n            this.pendingTask.next(false);\r\n        }\r\n        // We call `unsubscribe()` to release observers, as users may forget to\r\n        // unsubscribe manually when subscribing to `isStable`. We do not call\r\n        // `complete()` because it is unsafe; if someone subscribes using the `first`\r\n        // operator and the observable completes before emitting a value,\r\n        // RxJS will throw an error.\r\n        this.destroyed = true;\r\n        this.pendingTask.unsubscribe();\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\r\n        token: PendingTasksInternal,\r\n        providedIn: 'root',\r\n        factory: () => new PendingTasksInternal(),\r\n    });\r\n}\r\n/**\r\n * Service that keeps track of pending tasks contributing to the stableness of Angular\r\n * application. While several existing Angular services (ex.: `HttpClient`) will internally manage\r\n * tasks influencing stability, this API gives control over stability to library and application\r\n * developers for specific cases not covered by Angular internals.\r\n *\r\n * The concept of stability comes into play in several important scenarios:\r\n * - SSR process needs to wait for the application stability before serializing and sending rendered\r\n * HTML;\r\n * - tests might want to delay assertions until the application becomes stable;\r\n *\r\n * @usageNotes\r\n * ```ts\r\n * const pendingTasks = inject(PendingTasks);\r\n * const taskCleanup = pendingTasks.add();\r\n * // do work that should block application's stability and then:\r\n * taskCleanup();\r\n * ```\r\n *\r\n * @publicApi 20.0\r\n */\r\nclass PendingTasks {\r\n    internalPendingTasks = inject(PendingTasksInternal);\r\n    scheduler = inject(ChangeDetectionScheduler);\r\n    errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\r\n    /**\r\n     * Adds a new task that should block application's stability.\r\n     * @returns A cleanup function that removes a task when called.\r\n     */\r\n    add() {\r\n        const taskId = this.internalPendingTasks.add();\r\n        return () => {\r\n            if (!this.internalPendingTasks.has(taskId)) {\r\n                // This pending task has already been cleared.\r\n                return;\r\n            }\r\n            // Notifying the scheduler will hold application stability open until the next tick.\r\n            this.scheduler.notify(11 /* NotificationSource.PendingTaskRemoved */);\r\n            this.internalPendingTasks.remove(taskId);\r\n        };\r\n    }\r\n    /**\r\n     * Runs an asynchronous function and blocks the application's stability until the function completes.\r\n     *\r\n     * ```ts\r\n     * pendingTasks.run(async () => {\r\n     *   const userData = await fetch('/api/user');\r\n     *   this.userData.set(userData);\r\n     * });\r\n     * ```\r\n     *\r\n     * @param fn The asynchronous function to execute\r\n     * @developerPreview 19.0\r\n     */\r\n    run(fn) {\r\n        const removeTask = this.add();\r\n        fn().catch(this.errorHandler).finally(removeTask);\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\r\n        token: PendingTasks,\r\n        providedIn: 'root',\r\n        factory: () => new PendingTasks(),\r\n    });\r\n}\r\n\r\nfunction noop(...args) {\r\n    // Do nothing.\r\n}\r\n\r\n/**\r\n * A scheduler which manages the execution of effects.\r\n */\r\nclass EffectScheduler {\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\r\n        token: EffectScheduler,\r\n        providedIn: 'root',\r\n        factory: () => new ZoneAwareEffectScheduler(),\r\n    });\r\n}\r\n/**\r\n * A wrapper around `ZoneAwareQueueingScheduler` that schedules flushing via the microtask queue\r\n * when.\r\n */\r\nclass ZoneAwareEffectScheduler {\r\n    dirtyEffectCount = 0;\r\n    queues = new Map();\r\n    add(handle) {\r\n        this.enqueue(handle);\r\n        this.schedule(handle);\r\n    }\r\n    schedule(handle) {\r\n        if (!handle.dirty) {\r\n            return;\r\n        }\r\n        this.dirtyEffectCount++;\r\n    }\r\n    remove(handle) {\r\n        const zone = handle.zone;\r\n        const queue = this.queues.get(zone);\r\n        if (!queue.has(handle)) {\r\n            return;\r\n        }\r\n        queue.delete(handle);\r\n        if (handle.dirty) {\r\n            this.dirtyEffectCount--;\r\n        }\r\n    }\r\n    enqueue(handle) {\r\n        const zone = handle.zone;\r\n        if (!this.queues.has(zone)) {\r\n            this.queues.set(zone, new Set());\r\n        }\r\n        const queue = this.queues.get(zone);\r\n        if (queue.has(handle)) {\r\n            return;\r\n        }\r\n        queue.add(handle);\r\n    }\r\n    /**\r\n     * Run all scheduled effects.\r\n     *\r\n     * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no\r\n     * ordering guarantee between effects scheduled in different zones.\r\n     */\r\n    flush() {\r\n        while (this.dirtyEffectCount > 0) {\r\n            let ranOneEffect = false;\r\n            for (const [zone, queue] of this.queues) {\r\n                // `zone` here must be defined.\r\n                if (zone === null) {\r\n                    ranOneEffect ||= this.flushQueue(queue);\r\n                }\r\n                else {\r\n                    ranOneEffect ||= zone.run(() => this.flushQueue(queue));\r\n                }\r\n            }\r\n            // Safeguard against infinite looping if somehow our dirty effect count gets out of sync with\r\n            // the dirty flag across all the effects.\r\n            if (!ranOneEffect) {\r\n                this.dirtyEffectCount = 0;\r\n            }\r\n        }\r\n    }\r\n    flushQueue(queue) {\r\n        let ranOneEffect = false;\r\n        for (const handle of queue) {\r\n            if (!handle.dirty) {\r\n                continue;\r\n            }\r\n            this.dirtyEffectCount--;\r\n            ranOneEffect = true;\r\n            // TODO: what happens if this throws an error?\r\n            handle.run();\r\n        }\r\n        return ranOneEffect;\r\n    }\r\n}\r\n\r\nexport { AFTER_RENDER_SEQUENCES_TO_ADD, CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTAINER_HEADER_OFFSET, CONTEXT, ChangeDetectionScheduler, CheckNoChangesMode, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, DECLARATION_VIEW, DEHYDRATED_VIEWS, DOCUMENT, DestroyRef, EFFECTS, EFFECTS_TO_SCHEDULE, EMBEDDED_VIEW_INJECTOR, EMPTY_ARRAY, EMPTY_OBJ, ENVIRONMENT, ENVIRONMENT_INITIALIZER, EffectScheduler, EnvironmentInjector, ErrorHandler, FLAGS, HEADER_OFFSET, HOST, HYDRATION, ID, INJECTOR$1 as INJECTOR, INJECTOR as INJECTOR$1, INJECTOR_DEF_TYPES, INJECTOR_SCOPE, INTERNAL_APPLICATION_ERROR_HANDLER, InjectionToken, Injector, MATH_ML_NAMESPACE, MOVED_VIEWS, NATIVE, NEXT, NG_COMP_DEF, NG_DIR_DEF, NG_ELEMENT_ID, NG_FACTORY_DEF, NG_INJ_DEF, NG_MOD_DEF, NG_PIPE_DEF, NG_PROV_DEF, NodeInjectorDestroyRef, NullInjector, ON_DESTROY_HOOKS, PARENT, PREORDER_HOOK_FLAGS, PROVIDED_ZONELESS, PendingTasks, PendingTasksInternal, QUERIES, R3Injector, REACTIVE_TEMPLATE_CONSUMER, RENDERER, RuntimeError, SCHEDULE_IN_ROOT_ZONE, SVG_NAMESPACE, TVIEW, T_HOST, VIEW_REFS, ViewContext, XSS_SECURITY_URL, ZONELESS_ENABLED, ZONELESS_SCHEDULER_DISABLED, _global, addToArray, arrayEquals, arrayInsert2, arraySplice, assertComponentType, assertDefined, assertDirectiveDef, assertDomNode, assertElement, assertEqual, assertFirstCreatePass, assertFirstUpdatePass, assertFunction, assertGreaterThan, assertGreaterThanOrEqual, assertHasParent, assertInInjectionContext, assertIndexInDeclRange, assertIndexInExpandoRange, assertIndexInRange, assertInjectImplementationNotEqual, assertLContainer, assertLView, assertLessThan, assertNgModuleType, assertNodeInjector, assertNotDefined, assertNotEqual, assertNotInReactiveContext, assertNotReactive, assertNotSame, assertNumber, assertNumberInRange, assertOneOf, assertParentView, assertProjectionSlots, assertSame, assertString, assertTIcu, assertTNode, assertTNodeForLView, assertTNodeForTView, attachInjectFlag, concatStringsWithSpace, convertToBitFlags, createInjector, createInjectorWithoutInjectorInstances, debugStringifyTypeForError, decreaseElementDepthCount, deepForEach, defineInjectable, emitEffectCreatedEvent, emitInjectEvent, emitInjectorToCreateInstanceEvent, emitInstanceCreatedByInjectorEvent, emitProviderConfiguredEvent, enterDI, enterSkipHydrationBlock, enterView, errorHandlerEnvironmentInitializer, fillProperties, flatten, formatRuntimeError, forwardRef, getBindingIndex, getBindingRoot, getBindingsEnabled, getClosureSafeProperty, getComponentDef, getComponentLViewByIndex, getConstant, getContextLView, getCurrentDirectiveDef, getCurrentDirectiveIndex, getCurrentParentTNode, getCurrentQueryIndex, getCurrentTNode, getCurrentTNodePlaceholderOk, getDirectiveDef, getDirectiveDefOrThrow, getElementDepthCount, getFactoryDef, getInjectableDef, getInjectorDef, getLView, getLViewParent, getNamespace, getNativeByIndex, getNativeByTNode, getNativeByTNodeOrNull, getNgModuleDef, getNgModuleDefOrThrow, getNullInjector, getOrCreateLViewCleanup, getOrCreateTViewCleanup, getPipeDef, getSelectedIndex, getSelectedTNode, getTNode, getTView, hasI18n, importProvidersFrom, increaseElementDepthCount, incrementBindingIndex, initNgDevMode, inject, injectRootLimpMode, internalImportProvidersFrom, isClassProvider, isComponentDef, isComponentHost, isContentQueryHost, isCreationMode, isCurrentTNodeParent, isDestroyed, isDirectiveHost, isEnvironmentProviders, isExhaustiveCheckNoChanges, isForwardRef, isInCheckNoChangesMode, isInI18nBlock, isInInjectionContext, isInSkipHydrationBlock, isInjectable, isLContainer, isLView, isProjectionTNode, isRefreshingViews, isRootView, isSignal, isSkipHydrationRootTNode, isStandalone, isTypeProvider, isWritableSignal, keyValueArrayGet, keyValueArrayIndexOf, keyValueArraySet, lastNodeWasCreated, leaveDI, leaveSkipHydrationBlock, leaveView, load, makeEnvironmentProviders, markAncestorsForTraversal, markViewForRefresh, newArray, nextBindingIndex, nextContextImpl, noop, provideBrowserGlobalErrorListeners, provideEnvironmentInitializer, providerToFactory, removeFromArray, removeLViewOnDestroy, renderStringify, requiresRefreshOrTraversal, resetPreOrderHookFlags, resolveForwardRef, runInInjectionContext, runInInjectorProfilerContext, setBindingIndex, setBindingRootForHostBindings, setCurrentDirectiveIndex, setCurrentQueryIndex, setCurrentTNode, setCurrentTNodeAsNotParent, setInI18nBlock, setInjectImplementation, setInjectorProfiler, setInjectorProfilerContext, setIsInCheckNoChangesMode, setIsRefreshingViews, setSelectedIndex, signal, signalAsReadonlyFn, store, storeCleanupWithContext, storeLViewOnDestroy, stringify, stringifyForError, throwCyclicDependencyError, throwError, throwProviderNotFoundError, truncateMiddle, unwrapLView, unwrapRNode, updateAncestorTraversalFlagsOnAttach, viewAttachedToChangeDetector, viewAttachedToContainer, walkProviderTree, walkUpViews, wasLastNodeCreated, ɵunwrapWritableSignal, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdisableBindings, ɵɵenableBindings, ɵɵinject, ɵɵinvalidFactoryDep, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵresetView, ɵɵrestoreView };\r\n\n"],"mappings":"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,EAAE;EAC3B,OAAOA,IAAI,CAAC0G,UAAU,CAAC,IAAI,IAAI;AACnC;AACA,SAASwI,UAAUA,CAAClP,IAAI,EAAE;EACtB,OAAOA,IAAI,CAAC4G,WAAW,CAAC,IAAI,IAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuI,YAAYA,CAACnP,IAAI,EAAE;EACxB,MAAMsD,GAAG,GAAGyL,eAAe,CAAC/O,IAAI,CAAC,IAAIiP,eAAe,CAACjP,IAAI,CAAC,IAAIkP,UAAU,CAAClP,IAAI,CAAC;EAC9E,OAAOsD,GAAG,KAAK,IAAI,IAAIA,GAAG,CAAC8L,UAAU;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACvM,SAAS,EAAE;EACzC,OAAO;IACHyD,UAAU,EAAEzD;EAChB,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwM,6BAA6BA,CAACC,aAAa,EAAE;EAClD,OAAOF,wBAAwB,CAAC,CAC5B;IACI9J,OAAO,EAAEgJ,uBAAuB;IAChCtK,KAAK,EAAE,IAAI;IACXuL,QAAQ,EAAED;EACd,CAAC,CACJ,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAAC,GAAGC,OAAO,EAAE;EACrC,OAAO;IACHnJ,UAAU,EAAEoJ,2BAA2B,CAAC,IAAI,EAAED,OAAO,CAAC;IACtDpH,aAAa,EAAE;EACnB,CAAC;AACL;AACA,SAASqH,2BAA2BA,CAACC,qBAAqB,EAAE,GAAGF,OAAO,EAAE;EACpE,MAAMG,YAAY,GAAG,EAAE;EACvB,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzB,IAAIC,0BAA0B;EAC9B,MAAMC,gBAAgB,GAAIzK,QAAQ,IAAK;IACnCqK,YAAY,CAAC7K,IAAI,CAACQ,QAAQ,CAAC;EAC/B,CAAC;EACDmH,WAAW,CAAC+C,OAAO,EAAGpR,MAAM,IAAK;IAC7B,IAAI,CAAC,OAAO7B,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKmT,qBAAqB,EAAE;MAC1E,MAAMM,MAAM,GAAGnB,eAAe,CAACzQ,MAAM,CAAC;MACtC,IAAI4R,MAAM,EAAEd,UAAU,EAAE;QACpB,MAAM,IAAItT,YAAY,CAAC,GAAG,CAAC,yDAAyD,gGAAgGyL,iBAAiB,CAACjJ,MAAM,CAAC,GAAG,CAAC;MACrN;IACJ;IACA;IACA,MAAM6R,cAAc,GAAG7R,MAAM;IAC7B,IAAI8R,gBAAgB,CAACD,cAAc,EAAEF,gBAAgB,EAAE,EAAE,EAAEH,KAAK,CAAC,EAAE;MAC/DE,0BAA0B,KAAK,EAAE;MACjCA,0BAA0B,CAAChL,IAAI,CAACmL,cAAc,CAAC;IACnD;EACJ,CAAC,CAAC;EACF;EACA,IAAIH,0BAA0B,KAAKtN,SAAS,EAAE;IAC1C2N,iCAAiC,CAACL,0BAA0B,EAAEC,gBAAgB,CAAC;EACnF;EACA,OAAOJ,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA,SAASQ,iCAAiCA,CAACC,kBAAkB,EAAEC,OAAO,EAAE;EACpE,KAAK,IAAIrL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoL,kBAAkB,CAACtS,MAAM,EAAEkH,CAAC,EAAE,EAAE;IAChD,MAAM;MAAEsL,QAAQ;MAAE1N;IAAU,CAAC,GAAGwN,kBAAkB,CAACpL,CAAC,CAAC;IACrDuL,mBAAmB,CAAC3N,SAAS,EAAG0C,QAAQ,IAAK;MACzC/I,SAAS,IAAIiU,gBAAgB,CAAClL,QAAQ,EAAE1C,SAAS,IAAIuL,WAAW,EAAEmC,QAAQ,CAAC;MAC3ED,OAAO,CAAC/K,QAAQ,EAAEgL,QAAQ,CAAC;IAC/B,CAAC,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,gBAAgBA,CAACO,SAAS,EAAEJ,OAAO,EAAEK,OAAO,EAAEd,KAAK,EAAE;EAC1Da,SAAS,GAAG5Q,iBAAiB,CAAC4Q,SAAS,CAAC;EACxC,IAAI,CAACA,SAAS,EACV,OAAO,KAAK;EAChB;EACA;EACA,IAAIE,OAAO,GAAG,IAAI;EAClB,IAAIC,MAAM,GAAGrN,cAAc,CAACkN,SAAS,CAAC;EACtC,MAAMT,MAAM,GAAG,CAACY,MAAM,IAAI/B,eAAe,CAAC4B,SAAS,CAAC;EACpD,IAAI,CAACG,MAAM,IAAI,CAACZ,MAAM,EAAE;IACpB;IACA;IACA;IACA;IACA;IACA,MAAMM,QAAQ,GAAGG,SAAS,CACrBH,QAAQ;IACbM,MAAM,GAAGrN,cAAc,CAAC+M,QAAQ,CAAC;IACjC,IAAIM,MAAM,EAAE;MACRD,OAAO,GAAGL,QAAQ;IACtB,CAAC,MACI;MACD;MACA,OAAO,KAAK;IAChB;EACJ,CAAC,MACI,IAAIN,MAAM,IAAI,CAACA,MAAM,CAACd,UAAU,EAAE;IACnC,OAAO,KAAK;EAChB,CAAC,MACI;IACDyB,OAAO,GAAGF,SAAS;EACvB;EACA;EACA,IAAIlU,SAAS,IAAImU,OAAO,CAACjT,OAAO,CAACkT,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;IAC9C,MAAME,OAAO,GAAGvS,SAAS,CAACqS,OAAO,CAAC;IAClC,MAAM7I,IAAI,GAAG4I,OAAO,CAAChS,GAAG,CAACJ,SAAS,CAAC;IACnCuJ,0BAA0B,CAACgJ,OAAO,EAAE/I,IAAI,CAAC;EAC7C;EACA;EACA,MAAMgJ,WAAW,GAAGlB,KAAK,CAACmB,GAAG,CAACJ,OAAO,CAAC;EACtC,IAAIX,MAAM,EAAE;IACR,IAAIc,WAAW,EAAE;MACb;MACA,OAAO,KAAK;IAChB;IACAlB,KAAK,CAACoB,GAAG,CAACL,OAAO,CAAC;IAClB,IAAIX,MAAM,CAACiB,YAAY,EAAE;MACrB,MAAMC,IAAI,GAAG,OAAOlB,MAAM,CAACiB,YAAY,KAAK,UAAU,GAAGjB,MAAM,CAACiB,YAAY,CAAC,CAAC,GAAGjB,MAAM,CAACiB,YAAY;MACpG,KAAK,MAAME,GAAG,IAAID,IAAI,EAAE;QACpBhB,gBAAgB,CAACiB,GAAG,EAAEd,OAAO,EAAEK,OAAO,EAAEd,KAAK,CAAC;MAClD;IACJ;EACJ,CAAC,MACI,IAAIgB,MAAM,EAAE;IACb;IACA,IAAIA,MAAM,CAAC/N,OAAO,IAAI,IAAI,IAAI,CAACiO,WAAW,EAAE;MACxC;MACA;MACAvU,SAAS,IAAImU,OAAO,CAAC5L,IAAI,CAAC6L,OAAO,CAAC;MAClC;MACAf,KAAK,CAACoB,GAAG,CAACL,OAAO,CAAC;MAClB,IAAIS,wBAAwB;MAC5B,IAAI;QACA3E,WAAW,CAACmE,MAAM,CAAC/N,OAAO,EAAGwO,QAAQ,IAAK;UACtC,IAAInB,gBAAgB,CAACmB,QAAQ,EAAEhB,OAAO,EAAEK,OAAO,EAAEd,KAAK,CAAC,EAAE;YACrDwB,wBAAwB,KAAK,EAAE;YAC/B;YACA;YACAA,wBAAwB,CAACtM,IAAI,CAACuM,QAAQ,CAAC;UAC3C;QACJ,CAAC,CAAC;MACN,CAAC,SACO;QACJ;QACA9U,SAAS,IAAImU,OAAO,CAAC5D,GAAG,CAAC,CAAC;MAC9B;MACA;MACA;MACA;MACA,IAAIsE,wBAAwB,KAAK5O,SAAS,EAAE;QACxC2N,iCAAiC,CAACiB,wBAAwB,EAAEf,OAAO,CAAC;MACxE;IACJ;IACA,IAAI,CAACS,WAAW,EAAE;MACd;MACA;MACA,MAAMvO,OAAO,GAAGoJ,aAAa,CAACgF,OAAO,CAAC,KAAK,MAAM,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC/D;MACA;MACA;MACA;MACAN,OAAO,CAAC;QAAEhL,OAAO,EAAEsL,OAAO;QAAEW,UAAU,EAAE/O,OAAO;QAAE2O,IAAI,EAAE/C;MAAY,CAAC,EAAEwC,OAAO,CAAC;MAC9E;MACAN,OAAO,CAAC;QAAEhL,OAAO,EAAEkJ,kBAAkB;QAAEe,QAAQ,EAAEqB,OAAO;QAAE5M,KAAK,EAAE;MAAK,CAAC,EAAE4M,OAAO,CAAC;MACjF;MACAN,OAAO,CAAC;QAAEhL,OAAO,EAAEgJ,uBAAuB;QAAEiB,QAAQ,EAAEA,CAAA,KAAMtF,QAAQ,CAAC2G,OAAO,CAAC;QAAE5M,KAAK,EAAE;MAAK,CAAC,EAAE4M,OAAO,CAAC;IAC1G;IACA;IACA,MAAMY,YAAY,GAAGX,MAAM,CAAChO,SAAS;IACrC,IAAI2O,YAAY,IAAI,IAAI,IAAI,CAACT,WAAW,EAAE;MACtC,MAAMU,YAAY,GAAGf,SAAS;MAC9BF,mBAAmB,CAACgB,YAAY,EAAGjM,QAAQ,IAAK;QAC5C/I,SAAS,IAAIiU,gBAAgB,CAAClL,QAAQ,EAAEiM,YAAY,EAAEC,YAAY,CAAC;QACnEnB,OAAO,CAAC/K,QAAQ,EAAEkM,YAAY,CAAC;MACnC,CAAC,CAAC;IACN;EACJ,CAAC,MACI;IACD;IACA,OAAO,KAAK;EAChB;EACA,OAAQb,OAAO,KAAKF,SAAS,IAAIA,SAAS,CAAC7N,SAAS,KAAKJ,SAAS;AACtE;AACA,SAASgO,gBAAgBA,CAAClL,QAAQ,EAAE1C,SAAS,EAAE6O,aAAa,EAAE;EAC1D,IAAIC,cAAc,CAACpM,QAAQ,CAAC,IACxBqM,eAAe,CAACrM,QAAQ,CAAC,IACzBsM,iBAAiB,CAACtM,QAAQ,CAAC,IAC3BuM,kBAAkB,CAACvM,QAAQ,CAAC,EAAE;IAC9B;EACJ;EACA;EACA,MAAMwM,QAAQ,GAAGjS,iBAAiB,CAACyF,QAAQ,KAAKA,QAAQ,CAACyM,QAAQ,IAAIzM,QAAQ,CAACD,OAAO,CAAC,CAAC;EACvF,IAAI,CAACyM,QAAQ,EAAE;IACX9J,yBAAyB,CAACyJ,aAAa,EAAE7O,SAAS,EAAE0C,QAAQ,CAAC;EACjE;AACJ;AACA,SAASiL,mBAAmBA,CAAC3N,SAAS,EAAE5C,EAAE,EAAE;EACxC,KAAK,IAAIsF,QAAQ,IAAI1C,SAAS,EAAE;IAC5B,IAAIwD,sBAAsB,CAACd,QAAQ,CAAC,EAAE;MAClCA,QAAQ,GAAGA,QAAQ,CAACe,UAAU;IAClC;IACA,IAAI7H,KAAK,CAACC,OAAO,CAAC6G,QAAQ,CAAC,EAAE;MACzBiL,mBAAmB,CAACjL,QAAQ,EAAEtF,EAAE,CAAC;IACrC,CAAC,MACI;MACDA,EAAE,CAACsF,QAAQ,CAAC;IAChB;EACJ;AACJ;AACA,MAAM0M,SAAS,GAAGjU,sBAAsB,CAAC;EACrCsH,OAAO,EAAE+B,MAAM;EACfkI,QAAQ,EAAEvR;AACd,CAAC,CAAC;AACF,SAAS4T,eAAeA,CAAC3P,KAAK,EAAE;EAC5B,OAAOA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,IAAI,QAAQ,IAAIgQ,SAAS,IAAIhQ,KAAK;AAC3E;AACA,SAAS6P,kBAAkBA,CAAC7P,KAAK,EAAE;EAC/B,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACiQ,WAAW,CAAC;AACzC;AACA,SAASL,iBAAiBA,CAAC5P,KAAK,EAAE;EAC9B,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACsP,UAAU,CAAC;AACxC;AACA,SAASI,cAAcA,CAAC1P,KAAK,EAAE;EAC3B,OAAO,OAAOA,KAAK,KAAK,UAAU;AACtC;AACA,SAASkQ,eAAeA,CAAClQ,KAAK,EAAE;EAC5B,OAAO,CAAC,CAACA,KAAK,CAAC+P,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMI,cAAc,GAAG,IAAIxO,cAAc,CAACpH,SAAS,GAAG,qBAAqB,GAAG,EAAE,CAAC;;AAEjF;AACA;AACA;AACA,MAAM6V,OAAO,GAAG,CAAC,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,CAAC,CAAC;AACnB;AACA;AACA;AACA,IAAIC,aAAa,GAAG9P,SAAS;AAC7B,SAAS+P,eAAeA,CAAA,EAAG;EACvB,IAAID,aAAa,KAAK9P,SAAS,EAAE;IAC7B8P,aAAa,GAAG,IAAI9D,YAAY,CAAC,CAAC;EACtC;EACA,OAAO8D,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,CAAC;AAE1B,MAAMC,UAAU,SAASD,mBAAmB,CAAC;EACzCE,MAAM;EACNtU,MAAM;EACNuU,MAAM;EACN;AACJ;AACA;AACA;AACA;EACIC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACnB;AACJ;AACA;EACIC,iBAAiB,GAAG,IAAIjD,GAAG,CAAC,CAAC;EAC7BkD,eAAe,GAAG,EAAE;EACpB;AACJ;AACA;EACI,IAAIC,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACC,UAAU;EAC1B;EACAA,UAAU,GAAG,KAAK;EAClBC,gBAAgB;EAChBnX,WAAWA,CAAC6G,SAAS,EAAE8P,MAAM,EAAEtU,MAAM,EAAEuU,MAAM,EAAE;IAC3C,KAAK,CAAC,CAAC;IACP,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACtU,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACuU,MAAM,GAAGA,MAAM;IACpB;IACAQ,qBAAqB,CAACvQ,SAAS,EAAG0C,QAAQ,IAAK,IAAI,CAAC8N,eAAe,CAAC9N,QAAQ,CAAC,CAAC;IAC9E;IACA,IAAI,CAACsN,OAAO,CAACS,GAAG,CAAC/E,UAAU,EAAEgF,UAAU,CAAC9Q,SAAS,EAAE,IAAI,CAAC,CAAC;IACzD;IACA,IAAImQ,MAAM,CAAC5B,GAAG,CAAC,aAAa,CAAC,EAAE;MAC3B,IAAI,CAAC6B,OAAO,CAACS,GAAG,CAACb,mBAAmB,EAAEc,UAAU,CAAC9Q,SAAS,EAAE,IAAI,CAAC,CAAC;IACtE;IACA;IACA;IACA,MAAM+Q,MAAM,GAAG,IAAI,CAACX,OAAO,CAACvJ,GAAG,CAAC8I,cAAc,CAAC;IAC/C,IAAIoB,MAAM,IAAI,IAAI,IAAI,OAAOA,MAAM,CAACvR,KAAK,KAAK,QAAQ,EAAE;MACpD,IAAI,CAAC2Q,MAAM,CAAC3B,GAAG,CAACuC,MAAM,CAACvR,KAAK,CAAC;IACjC;IACA,IAAI,CAACkR,gBAAgB,GAAG,IAAIrD,GAAG,CAAC,IAAI,CAACxG,GAAG,CAACkF,kBAAkB,EAAEJ,WAAW,EAAE;MAAE/D,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC;EAC9F;EACAjB,QAAQA,CAAC5K,KAAK,EAAEoE,OAAO,EAAE;IACrB,MAAMiD,KAAK,GAAGwD,iBAAiB,CAACzG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9C,IAAI;MACA,OAAO,IAAI,CAAC0G,GAAG,CAAC9K,KAAK;MACrB;MACAyK,kBAAkB,EAAEpD,KAAK,CAAC;IAC9B,CAAC,CACD,OAAO0D,CAAC,EAAE;MACN,IAAI9N,YAAY,CAAC8N,CAAC,CAAC,EAAE;QACjB,OAAOA,CAAC;MACZ;MACA,MAAMA,CAAC;IACX;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIkK,OAAOA,CAAA,EAAG;IACNC,kBAAkB,CAAC,IAAI,CAAC;IACxB;IACA,IAAI,CAACR,UAAU,GAAG,IAAI;IACtB,MAAMS,YAAY,GAAGjY,iBAAiB,CAAC,IAAI,CAAC;IAC5C,IAAI;MACA;MACA,KAAK,MAAMoK,OAAO,IAAI,IAAI,CAACiN,iBAAiB,EAAE;QAC1CjN,OAAO,CAAC8N,WAAW,CAAC,CAAC;MACzB;MACA,MAAMC,cAAc,GAAG,IAAI,CAACb,eAAe;MAC3C;MACA;MACA,IAAI,CAACA,eAAe,GAAG,EAAE;MACzB,KAAK,MAAMc,IAAI,IAAID,cAAc,EAAE;QAC/BC,IAAI,CAAC,CAAC;MACV;IACJ,CAAC,SACO;MACJ;MACA,IAAI,CAACjB,OAAO,CAACkB,KAAK,CAAC,CAAC;MACpB,IAAI,CAAChB,iBAAiB,CAACgB,KAAK,CAAC,CAAC;MAC9B,IAAI,CAACZ,gBAAgB,CAACY,KAAK,CAAC,CAAC;MAC7BrY,iBAAiB,CAACiY,YAAY,CAAC;IACnC;EACJ;EACAK,SAASA,CAAC7N,QAAQ,EAAE;IAChBuN,kBAAkB,CAAC,IAAI,CAAC;IACxB,IAAI,CAACV,eAAe,CAACjO,IAAI,CAACoB,QAAQ,CAAC;IACnC,OAAO,MAAM,IAAI,CAAC8N,eAAe,CAAC9N,QAAQ,CAAC;EAC/C;EACA+N,YAAYA,CAACjU,EAAE,EAAE;IACbyT,kBAAkB,CAAC,IAAI,CAAC;IACxB,MAAMS,gBAAgB,GAAGjZ,kBAAkB,CAAC,IAAI,CAAC;IACjD,MAAMkZ,4BAA4B,GAAG1L,uBAAuB,CAACjG,SAAS,CAAC;IACvE,IAAI2D,iBAAiB;IACrB,IAAI5J,SAAS,EAAE;MACX4J,iBAAiB,GAAGjC,0BAA0B,CAAC;QAAE+B,QAAQ,EAAE,IAAI;QAAE1H,KAAK,EAAE;MAAK,CAAC,CAAC;IACnF;IACA,IAAI;MACA,OAAOyB,EAAE,CAAC,CAAC;IACf,CAAC,SACO;MACJ/E,kBAAkB,CAACiZ,gBAAgB,CAAC;MACpCzL,uBAAuB,CAAC0L,4BAA4B,CAAC;MACrD5X,SAAS,IAAI2H,0BAA0B,CAACiC,iBAAiB,CAAC;IAC9D;EACJ;EACAkD,GAAGA,CAAC9K,KAAK,EAAEqK,aAAa,GAAGI,kBAAkB,EAAErG,OAAO,EAAE;IACpD8Q,kBAAkB,CAAC,IAAI,CAAC;IACxB,IAAIlV,KAAK,CAACF,cAAc,CAAC4I,SAAS,CAAC,EAAE;MACjC,OAAO1I,KAAK,CAAC0I,SAAS,CAAC,CAAC,IAAI,CAAC;IACjC;IACA,MAAMrB,KAAK,GAAGwD,iBAAiB,CAACzG,OAAO,CAAC;IACxC;IACA,IAAIwD,iBAAiB;IACrB,IAAI5J,SAAS,EAAE;MACX4J,iBAAiB,GAAGjC,0BAA0B,CAAC;QAAE+B,QAAQ,EAAE,IAAI;QAAE1H,KAAK,EAAEA;MAAM,CAAC,CAAC;IACpF;IACA,MAAM2V,gBAAgB,GAAGjZ,kBAAkB,CAAC,IAAI,CAAC;IACjD,MAAMkZ,4BAA4B,GAAG1L,uBAAuB,CAACjG,SAAS,CAAC;IACvE,IAAI;MACA;MACA,IAAI,EAAEoD,KAAK,GAAG,CAAC,CAAC,mCAAmC,EAAE;QACjD;QACA,IAAI2N,MAAM,GAAG,IAAI,CAACX,OAAO,CAACvJ,GAAG,CAAC9K,KAAK,CAAC;QACpC,IAAIgV,MAAM,KAAK/Q,SAAS,EAAE;UACtB;UACA;UACA,MAAMY,GAAG,GAAGgR,qBAAqB,CAAC7V,KAAK,CAAC,IAAIuE,gBAAgB,CAACvE,KAAK,CAAC;UACnE,IAAI6E,GAAG,IAAI,IAAI,CAACiR,oBAAoB,CAACjR,GAAG,CAAC,EAAE;YACvC;YACA;YACA,IAAI7G,SAAS,EAAE;cACXyJ,4BAA4B,CAAC,IAAI,EAAEzH,KAAK,EAAE,MAAM;gBAC5C2G,2BAA2B,CAAC3G,KAAK,CAAC;cACtC,CAAC,CAAC;YACN;YACAgV,MAAM,GAAGD,UAAU,CAACgB,iCAAiC,CAAC/V,KAAK,CAAC,EAAE6T,OAAO,CAAC;UAC1E,CAAC,MACI;YACDmB,MAAM,GAAG,IAAI;UACjB;UACA,IAAI,CAACX,OAAO,CAACS,GAAG,CAAC9U,KAAK,EAAEgV,MAAM,CAAC;QACnC;QACA;QACA,IAAIA,MAAM,IAAI,IAAI,CAAC,6BAA6B;UAC5C,OAAO,IAAI,CAACgB,OAAO,CAAChW,KAAK,EAAEgV,MAAM,CAAC;QACtC;MACJ;MACA;MACA;MACA,MAAMiB,YAAY,GAAG,EAAE5O,KAAK,GAAG,CAAC,CAAC,+BAA+B,GAAG,IAAI,CAAC8M,MAAM,GAAGH,eAAe,CAAC,CAAC;MAClG;MACA;MACA3J,aAAa,GACThD,KAAK,GAAG,CAAC,CAAC,sCAAsCgD,aAAa,KAAKI,kBAAkB,GAC9E,IAAI,GACJJ,aAAa;MACvB,OAAO4L,YAAY,CAACnL,GAAG,CAAC9K,KAAK,EAAEqK,aAAa,CAAC;IACjD,CAAC,CACD,OAAOU,CAAC,EAAE;MACN,IAAI9N,YAAY,CAAC8N,CAAC,CAAC,EAAE;QACjB;QACA,MAAMxB,IAAI,GAAIwB,CAAC,CAACC,kBAAkB,CAAC,GAAGD,CAAC,CAACC,kBAAkB,CAAC,IAAI,EAAG;QAClEzB,IAAI,CAACsD,OAAO,CAAC9M,SAAS,CAACC,KAAK,CAAC,CAAC;QAC9B,IAAI2V,gBAAgB,EAAE;UAClB;UACA,MAAM5K,CAAC;QACX,CAAC,MACI;UACD;UACA,OAAO2B,kBAAkB,CAAC3B,CAAC,EAAE/K,KAAK,EAAE,iBAAiB,EAAE,IAAI,CAACH,MAAM,CAAC;QACvE;MACJ,CAAC,MACI;QACD,MAAMkL,CAAC;MACX;IACJ,CAAC,SACO;MACJ;MACAb,uBAAuB,CAAC0L,4BAA4B,CAAC;MACrDlZ,kBAAkB,CAACiZ,gBAAgB,CAAC;MACpC3X,SAAS,IAAI2H,0BAA0B,CAACiC,iBAAiB,CAAC;IAC9D;EACJ;EACA;EACAsO,2BAA2BA,CAAA,EAAG;IAC1B,MAAMf,YAAY,GAAGjY,iBAAiB,CAAC,IAAI,CAAC;IAC5C,MAAMyY,gBAAgB,GAAGjZ,kBAAkB,CAAC,IAAI,CAAC;IACjD,MAAMkZ,4BAA4B,GAAG1L,uBAAuB,CAACjG,SAAS,CAAC;IACvE,IAAI2D,iBAAiB;IACrB,IAAI5J,SAAS,EAAE;MACX4J,iBAAiB,GAAGjC,0BAA0B,CAAC;QAAE+B,QAAQ,EAAE,IAAI;QAAE1H,KAAK,EAAE;MAAK,CAAC,CAAC;IACnF;IACA,IAAI;MACA,MAAMmW,YAAY,GAAG,IAAI,CAACrL,GAAG,CAACgF,uBAAuB,EAAEF,WAAW,EAAE;QAAE/D,IAAI,EAAE;MAAK,CAAC,CAAC;MACnF,IAAI7N,SAAS,IAAI,CAACiC,KAAK,CAACC,OAAO,CAACiW,YAAY,CAAC,EAAE;QAC3C,MAAM,IAAI9Y,YAAY,CAAC,CAAC,GAAG,CAAC,+CAA+C,+DAA+D,GACtI,+BAA+B,OAAO8Y,YAAY,KAAK,GACvD,2EAA2E,GAC3E,yBAAyB,CAAC;MAClC;MACA,KAAK,MAAMC,WAAW,IAAID,YAAY,EAAE;QACpCC,WAAW,CAAC,CAAC;MACjB;IACJ,CAAC,SACO;MACJ1Z,kBAAkB,CAACiZ,gBAAgB,CAAC;MACpCzL,uBAAuB,CAAC0L,4BAA4B,CAAC;MACrD5X,SAAS,IAAI2H,0BAA0B,CAACiC,iBAAiB,CAAC;MAC1D1K,iBAAiB,CAACiY,YAAY,CAAC;IACnC;EACJ;EACA1W,QAAQA,CAAA,EAAG;IACP,MAAM4X,MAAM,GAAG,EAAE;IACjB,MAAMhC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,KAAK,MAAMrU,KAAK,IAAIqU,OAAO,CAAC/U,IAAI,CAAC,CAAC,EAAE;MAChC+W,MAAM,CAAC9P,IAAI,CAACxG,SAAS,CAACC,KAAK,CAAC,CAAC;IACjC;IACA,OAAO,cAAcqW,MAAM,CAACjW,IAAI,CAAC,IAAI,CAAC,GAAG;EAC7C;EACA;AACJ;AACA;EACIyU,eAAeA,CAAC9N,QAAQ,EAAE;IACtB;IACA;IACAA,QAAQ,GAAGzF,iBAAiB,CAACyF,QAAQ,CAAC;IACtC,IAAI/G,KAAK,GAAGmT,cAAc,CAACpM,QAAQ,CAAC,GAC9BA,QAAQ,GACRzF,iBAAiB,CAACyF,QAAQ,IAAIA,QAAQ,CAACD,OAAO,CAAC;IACrD;IACA,MAAMkO,MAAM,GAAGsB,gBAAgB,CAACvP,QAAQ,CAAC;IACzC,IAAI/I,SAAS,EAAE;MACXyJ,4BAA4B,CAAC,IAAI,EAAEzH,KAAK,EAAE,MAAM;QAC5C;QACA;QACA;QACA,IAAIoT,eAAe,CAACrM,QAAQ,CAAC,EAAE;UAC3BE,iCAAiC,CAACjH,KAAK,CAAC;UACxCkH,kCAAkC,CAACH,QAAQ,CAACgK,QAAQ,CAAC;QACzD;QACApK,2BAA2B,CAACI,QAAQ,CAAC;MACzC,CAAC,CAAC;IACN;IACA,IAAI,CAACoM,cAAc,CAACpM,QAAQ,CAAC,IAAIA,QAAQ,CAACvB,KAAK,KAAK,IAAI,EAAE;MACtD;MACA;MACA,IAAI+Q,WAAW,GAAG,IAAI,CAAClC,OAAO,CAACvJ,GAAG,CAAC9K,KAAK,CAAC;MACzC,IAAIuW,WAAW,EAAE;QACb;QACA,IAAIvY,SAAS,IAAIuY,WAAW,CAAC/Q,KAAK,KAAKvB,SAAS,EAAE;UAC9CuF,4BAA4B,CAAC,CAAC;QAClC;MACJ,CAAC,MACI;QACD+M,WAAW,GAAGxB,UAAU,CAAC9Q,SAAS,EAAE4P,OAAO,EAAE,IAAI,CAAC;QAClD0C,WAAW,CAACvS,OAAO,GAAG,MAAM+H,UAAU,CAACwK,WAAW,CAAC/Q,KAAK,CAAC;QACzD,IAAI,CAAC6O,OAAO,CAACS,GAAG,CAAC9U,KAAK,EAAEuW,WAAW,CAAC;MACxC;MACAvW,KAAK,GAAG+G,QAAQ;MAChBwP,WAAW,CAAC/Q,KAAK,CAACe,IAAI,CAACQ,QAAQ,CAAC;IACpC,CAAC,MACI;MACD,IAAI/I,SAAS,EAAE;QACX,MAAMwY,QAAQ,GAAG,IAAI,CAACnC,OAAO,CAACvJ,GAAG,CAAC9K,KAAK,CAAC;QACxC,IAAIwW,QAAQ,IAAIA,QAAQ,CAAChR,KAAK,KAAKvB,SAAS,EAAE;UAC1CuF,4BAA4B,CAAC,CAAC;QAClC;MACJ;IACJ;IACA,IAAI,CAAC6K,OAAO,CAACS,GAAG,CAAC9U,KAAK,EAAEgV,MAAM,CAAC;EACnC;EACAgB,OAAOA,CAAChW,KAAK,EAAEgV,MAAM,EAAE;IACnB,MAAMG,YAAY,GAAGjY,iBAAiB,CAAC,IAAI,CAAC;IAC5C,IAAI;MACA,IAAI8X,MAAM,CAACvR,KAAK,KAAKqQ,QAAQ,EAAE;QAC3BxK,0BAA0B,CAACvJ,SAAS,CAACC,KAAK,CAAC,CAAC;MAChD,CAAC,MACI,IAAIgV,MAAM,CAACvR,KAAK,KAAKoQ,OAAO,EAAE;QAC/BmB,MAAM,CAACvR,KAAK,GAAGqQ,QAAQ;QACvB,IAAI9V,SAAS,EAAE;UACXyJ,4BAA4B,CAAC,IAAI,EAAEzH,KAAK,EAAE,MAAM;YAC5CiH,iCAAiC,CAACjH,KAAK,CAAC;YACxCgV,MAAM,CAACvR,KAAK,GAAGuR,MAAM,CAAChR,OAAO,CAAC,CAAC;YAC/BkD,kCAAkC,CAAC8N,MAAM,CAACvR,KAAK,CAAC;UACpD,CAAC,CAAC;QACN,CAAC,MACI;UACDuR,MAAM,CAACvR,KAAK,GAAGuR,MAAM,CAAChR,OAAO,CAAC,CAAC;QACnC;MACJ;MACA,IAAI,OAAOgR,MAAM,CAACvR,KAAK,KAAK,QAAQ,IAAIuR,MAAM,CAACvR,KAAK,IAAIgT,YAAY,CAACzB,MAAM,CAACvR,KAAK,CAAC,EAAE;QAChF,IAAI,CAAC8Q,iBAAiB,CAAC9B,GAAG,CAACuC,MAAM,CAACvR,KAAK,CAAC;MAC5C;MACA,OAAOuR,MAAM,CAACvR,KAAK;IACvB,CAAC,SACO;MACJvG,iBAAiB,CAACiY,YAAY,CAAC;IACnC;EACJ;EACAW,oBAAoBA,CAACjR,GAAG,EAAE;IACtB,IAAI,CAACA,GAAG,CAACd,UAAU,EAAE;MACjB,OAAO,KAAK;IAChB;IACA,MAAMA,UAAU,GAAGzC,iBAAiB,CAACuD,GAAG,CAACd,UAAU,CAAC;IACpD,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAChC,OAAOA,UAAU,KAAK,KAAK,IAAI,IAAI,CAACqQ,MAAM,CAAC5B,GAAG,CAACzO,UAAU,CAAC;IAC9D,CAAC,MACI;MACD,OAAO,IAAI,CAAC4Q,gBAAgB,CAACnC,GAAG,CAACzO,UAAU,CAAC;IAChD;EACJ;EACA0R,eAAeA,CAAC9N,QAAQ,EAAE;IACtB,MAAM+O,YAAY,GAAG,IAAI,CAAClC,eAAe,CAACtV,OAAO,CAACyI,QAAQ,CAAC;IAC3D,IAAI+O,YAAY,KAAK,CAAC,CAAC,EAAE;MACrB,IAAI,CAAClC,eAAe,CAACrO,MAAM,CAACuQ,YAAY,EAAE,CAAC,CAAC;IAChD;EACJ;AACJ;AACA,SAASX,iCAAiCA,CAAC/V,KAAK,EAAE;EAC9C;EACA,MAAMsK,aAAa,GAAG/F,gBAAgB,CAACvE,KAAK,CAAC;EAC7C,MAAMgE,OAAO,GAAGsG,aAAa,KAAK,IAAI,GAAGA,aAAa,CAACtG,OAAO,GAAGoJ,aAAa,CAACpN,KAAK,CAAC;EACrF,IAAIgE,OAAO,KAAK,IAAI,EAAE;IAClB,OAAOA,OAAO;EAClB;EACA;EACA;EACA,IAAIhE,KAAK,YAAYoF,cAAc,EAAE;IACjC,MAAM,IAAI/H,YAAY,CAAC,GAAG,CAAC,gDAAgDW,SAAS,IAAI,SAAS+B,SAAS,CAACC,KAAK,CAAC,iCAAiC,CAAC;EACvJ;EACA;EACA,IAAIA,KAAK,YAAY2W,QAAQ,EAAE;IAC3B,OAAOC,+BAA+B,CAAC5W,KAAK,CAAC;EACjD;EACA;EACA,MAAM,IAAI3C,YAAY,CAAC,GAAG,CAAC,gDAAgDW,SAAS,IAAI,aAAa,CAAC;AAC1G;AACA,SAAS4Y,+BAA+BA,CAAC5W,KAAK,EAAE;EAC5C;EACA,MAAM6W,WAAW,GAAG7W,KAAK,CAACT,MAAM;EAChC,IAAIsX,WAAW,GAAG,CAAC,EAAE;IACjB,MAAM,IAAIxZ,YAAY,CAAC,GAAG,CAAC,gDAAgDW,SAAS,IAChF,oCAAoC+B,SAAS,CAACC,KAAK,CAAC,MAAMwO,QAAQ,CAACqI,WAAW,EAAE,GAAG,CAAC,CAACzW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;EAC5G;EACA;EACA;EACA;EACA;EACA;EACA,MAAM0W,sBAAsB,GAAGlS,yBAAyB,CAAC5E,KAAK,CAAC;EAC/D,IAAI8W,sBAAsB,KAAK,IAAI,EAAE;IACjC,OAAO,MAAMA,sBAAsB,CAAC9S,OAAO,CAAChE,KAAK,CAAC;EACtD,CAAC,MACI;IACD,OAAO,MAAM,IAAIA,KAAK,CAAC,CAAC;EAC5B;AACJ;AACA,SAASsW,gBAAgBA,CAACvP,QAAQ,EAAE;EAChC,IAAIqM,eAAe,CAACrM,QAAQ,CAAC,EAAE;IAC3B,OAAOgO,UAAU,CAAC9Q,SAAS,EAAE8C,QAAQ,CAACgK,QAAQ,CAAC;EACnD,CAAC,MACI;IACD,MAAM/M,OAAO,GAAG+S,iBAAiB,CAAChQ,QAAQ,CAAC;IAC3C,OAAOgO,UAAU,CAAC/Q,OAAO,EAAE6P,OAAO,CAAC;EACvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASkD,iBAAiBA,CAAChQ,QAAQ,EAAE2C,YAAY,EAAErF,SAAS,EAAE;EAC1D,IAAIL,OAAO,GAAGC,SAAS;EACvB,IAAIjG,SAAS,IAAI6J,sBAAsB,CAACd,QAAQ,CAAC,EAAE;IAC/C0C,yBAAyB,CAACxF,SAAS,EAAEI,SAAS,EAAE0C,QAAQ,CAAC;EAC7D;EACA,IAAIoM,cAAc,CAACpM,QAAQ,CAAC,EAAE;IAC1B,MAAMiQ,iBAAiB,GAAG1V,iBAAiB,CAACyF,QAAQ,CAAC;IACrD,OAAOqG,aAAa,CAAC4J,iBAAiB,CAAC,IAAIjB,iCAAiC,CAACiB,iBAAiB,CAAC;EACnG,CAAC,MACI;IACD,IAAI5D,eAAe,CAACrM,QAAQ,CAAC,EAAE;MAC3B/C,OAAO,GAAGA,CAAA,KAAM1C,iBAAiB,CAACyF,QAAQ,CAACgK,QAAQ,CAAC;IACxD,CAAC,MACI,IAAIsC,iBAAiB,CAACtM,QAAQ,CAAC,EAAE;MAClC/C,OAAO,GAAGA,CAAA,KAAM+C,QAAQ,CAACgM,UAAU,CAAC,GAAGhH,UAAU,CAAChF,QAAQ,CAAC4L,IAAI,IAAI,EAAE,CAAC,CAAC;IAC3E,CAAC,MACI,IAAIW,kBAAkB,CAACvM,QAAQ,CAAC,EAAE;MACnC/C,OAAO,GAAGA,CAAA,KAAMyH,QAAQ,CAACnK,iBAAiB,CAACyF,QAAQ,CAAC2M,WAAW,CAAC,CAAC;IACrE,CAAC,MACI;MACD,MAAMH,QAAQ,GAAGjS,iBAAiB,CAACyF,QAAQ,KACtCA,QAAQ,CAACyM,QAAQ,IAAIzM,QAAQ,CAACD,OAAO,CAAC,CAAC;MAC5C,IAAI9I,SAAS,IAAI,CAACuV,QAAQ,EAAE;QACxB9J,yBAAyB,CAACC,YAAY,EAAErF,SAAS,EAAE0C,QAAQ,CAAC;MAChE;MACA,IAAIkQ,OAAO,CAAClQ,QAAQ,CAAC,EAAE;QACnB/C,OAAO,GAAGA,CAAA,KAAM,IAAIuP,QAAQ,CAAC,GAAGxH,UAAU,CAAChF,QAAQ,CAAC4L,IAAI,CAAC,CAAC;MAC9D,CAAC,MACI;QACD,OAAOvF,aAAa,CAACmG,QAAQ,CAAC,IAAIwC,iCAAiC,CAACxC,QAAQ,CAAC;MACjF;IACJ;EACJ;EACA,OAAOvP,OAAO;AAClB;AACA,SAASkR,kBAAkBA,CAACxN,QAAQ,EAAE;EAClC,IAAIA,QAAQ,CAAC+M,SAAS,EAAE;IACpB,MAAM,IAAIpX,YAAY,CAAC,GAAG,CAAC,mDAAmDW,SAAS,IAAI,sCAAsC,CAAC;EACtI;AACJ;AACA,SAAS+W,UAAUA,CAAC/Q,OAAO,EAAEP,KAAK,EAAE+B,KAAK,GAAG,KAAK,EAAE;EAC/C,OAAO;IACHxB,OAAO,EAAEA,OAAO;IAChBP,KAAK,EAAEA,KAAK;IACZ+B,KAAK,EAAEA,KAAK,GAAG,EAAE,GAAGvB;EACxB,CAAC;AACL;AACA,SAASgT,OAAOA,CAACxT,KAAK,EAAE;EACpB,OAAO,CAAC,CAACA,KAAK,CAACkP,IAAI;AACvB;AACA,SAAS8D,YAAYA,CAAChT,KAAK,EAAE;EACzB,OAAQA,KAAK,KAAK,IAAI,IAClB,OAAOA,KAAK,KAAK,QAAQ,IACzB,OAAOA,KAAK,CAAC2R,WAAW,KAAK,UAAU;AAC/C;AACA,SAASS,qBAAqBA,CAACpS,KAAK,EAAE;EAClC,OAAQ,OAAOA,KAAK,KAAK,UAAU,IAC9B,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC6B,cAAc,KAAK,gBAAiB;AAChF;AACA,SAASsP,qBAAqBA,CAACvQ,SAAS,EAAE5C,EAAE,EAAE;EAC1C,KAAK,MAAMsF,QAAQ,IAAI1C,SAAS,EAAE;IAC9B,IAAIpE,KAAK,CAACC,OAAO,CAAC6G,QAAQ,CAAC,EAAE;MACzB6N,qBAAqB,CAAC7N,QAAQ,EAAEtF,EAAE,CAAC;IACvC,CAAC,MACI,IAAIsF,QAAQ,IAAIc,sBAAsB,CAACd,QAAQ,CAAC,EAAE;MACnD6N,qBAAqB,CAAC7N,QAAQ,CAACe,UAAU,EAAErG,EAAE,CAAC;IAClD,CAAC,MACI;MACDA,EAAE,CAACsF,QAAQ,CAAC;IAChB;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmQ,qBAAqBA,CAACxP,QAAQ,EAAEjG,EAAE,EAAE;EACzC,IAAI0V,gBAAgB;EACpB,IAAIzP,QAAQ,YAAYwM,UAAU,EAAE;IAChCgB,kBAAkB,CAACxN,QAAQ,CAAC;IAC5ByP,gBAAgB,GAAGzP,QAAQ;EAC/B,CAAC,MACI;IACDyP,gBAAgB,GAAG,IAAIxM,kBAAkB,CAACjD,QAAQ,CAAC;EACvD;EACA,IAAI0P,2BAA2B;EAC/B,IAAIpZ,SAAS,EAAE;IACXoZ,2BAA2B,GAAGzR,0BAA0B,CAAC;MAAE+B,QAAQ;MAAE1H,KAAK,EAAE;IAAK,CAAC,CAAC;EACvF;EACA,MAAMqX,YAAY,GAAG3a,kBAAkB,CAACya,gBAAgB,CAAC;EACzD,MAAMvB,4BAA4B,GAAG1L,uBAAuB,CAACjG,SAAS,CAAC;EACvE,IAAI;IACA,OAAOxC,EAAE,CAAC,CAAC;EACf,CAAC,SACO;IACJ/E,kBAAkB,CAAC2a,YAAY,CAAC;IAChCrZ,SAAS,IAAI2H,0BAA0B,CAACyR,2BAA2B,CAAC;IACpElN,uBAAuB,CAAC0L,4BAA4B,CAAC;EACzD;AACJ;AACA;AACA;AACA;AACA,SAAS0B,oBAAoBA,CAAA,EAAG;EAC5B,OAAOrN,uBAAuB,CAAC,CAAC,KAAKhG,SAAS,IAAIxH,kBAAkB,CAAC,CAAC,IAAI,IAAI;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8a,wBAAwBA,CAACC,OAAO,EAAE;EACvC;EACA;EACA,IAAI,CAACF,oBAAoB,CAAC,CAAC,EAAE;IACzB,MAAM,IAAIja,YAAY,CAAC,CAAC,GAAG,CAAC,kDAAkDW,SAAS,IACnFwZ,OAAO,CAACnX,IAAI,GACR,iKAAiK,CAAC;EAC9K;AACJ;;AAEA;AACA;AACA;AACA,MAAMoX,IAAI,GAAG,CAAC;AACd,MAAMC,KAAK,GAAG,CAAC;AACf;AACA,MAAMC,KAAK,GAAG,CAAC;AACf,MAAMC,MAAM,GAAG,CAAC;AAChB,MAAMC,IAAI,GAAG,CAAC;AACd,MAAMC,MAAM,GAAG,CAAC;AAChB;AACA,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,OAAO,GAAG,CAAC;AACjB,MAAMC,OAAO,GAAG,CAAC;AACjB,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,WAAW,GAAG,EAAE;AACtB,MAAMC,QAAQ,GAAG,EAAE;AACnB,MAAMC,UAAU,GAAG,EAAE;AACrB,MAAMC,UAAU,GAAG,EAAE;AACrB;AACA,MAAMC,gBAAgB,GAAG,EAAE;AAC3B,MAAMC,0BAA0B,GAAG,EAAE;AACrC,MAAMC,sBAAsB,GAAG,EAAE;AACjC,MAAMC,mBAAmB,GAAG,EAAE;AAC9B,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,EAAE,GAAG,EAAE;AACb,MAAMC,sBAAsB,GAAG,EAAE;AACjC,MAAMC,gBAAgB,GAAG,EAAE;AAC3B,MAAMC,mBAAmB,GAAG,EAAE;AAC9B,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,0BAA0B,GAAG,EAAE;AACrC,MAAMC,6BAA6B,GAAG,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,MAAM,GAAG,CAAC;AAChB,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,WAAW,GAAG,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,EAAE;;AAElC;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACjW,KAAK,EAAE;EACpB,OAAOxD,KAAK,CAACC,OAAO,CAACuD,KAAK,CAAC,IAAI,OAAOA,KAAK,CAAC2V,IAAI,CAAC,KAAK,QAAQ;AAClE;AACA;AACA;AACA;AACA;AACA,SAASO,YAAYA,CAAClW,KAAK,EAAE;EACzB,OAAOxD,KAAK,CAACC,OAAO,CAACuD,KAAK,CAAC,IAAIA,KAAK,CAAC2V,IAAI,CAAC,KAAK,IAAI;AACvD;AACA,SAASQ,kBAAkBA,CAACC,KAAK,EAAE;EAC/B,OAAO,CAACA,KAAK,CAACxS,KAAK,GAAG,CAAC,CAAC,sCAAsC,CAAC;AACnE;AACA,SAASyS,eAAeA,CAACD,KAAK,EAAE;EAC5B,OAAOA,KAAK,CAACE,eAAe,GAAG,CAAC,CAAC;AACrC;AACA,SAASC,eAAeA,CAACH,KAAK,EAAE;EAC5B,OAAO,CAACA,KAAK,CAACxS,KAAK,GAAG,CAAC,CAAC,sCAAsC,CAAC,CAAC;AACpE;AACA,SAAS4S,cAAcA,CAACpV,GAAG,EAAE;EACzB,OAAO,CAAC,CAACA,GAAG,CAACqV,QAAQ;AACzB;AACA,SAASC,UAAUA,CAACva,MAAM,EAAE;EACxB;EACA,OAAO,CAACA,MAAM,CAAC+X,KAAK,CAAC,GAAG,GAAG,CAAC,6BAA6B,CAAC;AAC9D;AACA,SAASyC,iBAAiBA,CAACP,KAAK,EAAE;EAC9B,OAAO,CAACA,KAAK,CAACtY,IAAI,GAAG,EAAE,CAAC,gCAAgC,EAAE,CAAC;AAC/D;AACA,SAAS8Y,OAAOA,CAACC,KAAK,EAAE;EACpB,OAAO,CAACA,KAAK,CAAC3C,KAAK,CAAC,GAAG,EAAE,CAAC,8BAA8B,EAAE,CAAC;AAC/D;AACA,SAAS4C,WAAWA,CAACD,KAAK,EAAE;EACxB;EACA,OAAO,CAACA,KAAK,CAAC3C,KAAK,CAAC,GAAG,GAAG,CAAC,gCAAgC,GAAG,CAAC;AACnE;;AAEA;AACA;AACA,SAAS6C,mBAAmBA,CAACX,KAAK,EAAES,KAAK,EAAE;EACvCG,mBAAmB,CAACZ,KAAK,EAAES,KAAK,CAAC5C,KAAK,CAAC,CAAC;AAC5C;AACA,SAAS+C,mBAAmBA,CAACZ,KAAK,EAAEa,KAAK,EAAE;EACvCC,WAAW,CAACd,KAAK,CAAC;EAClB,MAAMe,KAAK,GAAGF,KAAK,CAACG,IAAI;EACxB,KAAK,IAAIpU,CAAC,GAAG0S,aAAa,EAAE1S,CAAC,GAAGmU,KAAK,CAACrb,MAAM,EAAEkH,CAAC,EAAE,EAAE;IAC/C,IAAImU,KAAK,CAACnU,CAAC,CAAC,KAAKoT,KAAK,EAAE;MACpB;IACJ;EACJ;EACAhY,UAAU,CAAC,2CAA2C,CAAC;AAC3D;AACA,SAAS8Y,WAAWA,CAACd,KAAK,EAAE;EACxBhX,aAAa,CAACgX,KAAK,EAAE,uBAAuB,CAAC;EAC7C,IAAI,EAAEA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC/Z,cAAc,CAAC,sBAAsB,CAAC,CAAC,EAAE;IACvF+B,UAAU,CAAC,0BAA0B,GAAGgY,KAAK,CAAC;EAClD;AACJ;AACA,SAASiB,UAAUA,CAACC,IAAI,EAAE;EACtBlY,aAAa,CAACkY,IAAI,EAAE,6BAA6B,CAAC;EAClD,IAAI,EAAE,OAAOA,IAAI,CAACC,qBAAqB,KAAK,QAAQ,CAAC,EAAE;IACnDnZ,UAAU,CAAC,6BAA6B,CAAC;EAC7C;AACJ;AACA,SAASoZ,mBAAmBA,CAACtZ,MAAM,EAAEC,GAAG,GAAG,wEAAwE,EAAE;EACjH,IAAI,CAAC0O,eAAe,CAAC3O,MAAM,CAAC,EAAE;IAC1BE,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA,SAASsZ,kBAAkBA,CAACvZ,MAAM,EAAEC,GAAG,GAAG,uEAAuE,EAAE;EAC/G,IAAI,CAACuO,cAAc,CAACxO,MAAM,CAAC,EAAE;IACzBE,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA,SAASuZ,eAAeA,CAACtB,KAAK,EAAE;EAC5BhX,aAAa,CAACgX,KAAK,EAAE,4BAA4B,CAAC;EAClDhX,aAAa,CAACgX,KAAK,CAAC1F,MAAM,EAAE,mCAAmC,CAAC;AACpE;AACA,SAASiH,gBAAgBA,CAAC3X,KAAK,EAAE;EAC7BZ,aAAa,CAACY,KAAK,EAAE,4BAA4B,CAAC;EAClDpB,WAAW,CAACsX,YAAY,CAAClW,KAAK,CAAC,EAAE,IAAI,EAAE,sBAAsB,CAAC;AAClE;AACA,SAAS4X,sBAAsBA,CAAC5X,KAAK,EAAE;EACnCA,KAAK,IAAIpB,WAAW,CAACqX,OAAO,CAACjW,KAAK,CAAC,EAAE,IAAI,EAAE,sCAAsC,CAAC;AACtF;AACA,SAAS6X,WAAWA,CAAC7X,KAAK,EAAE;EACxBZ,aAAa,CAACY,KAAK,EAAE,uBAAuB,CAAC;EAC7CpB,WAAW,CAACqX,OAAO,CAACjW,KAAK,CAAC,EAAE,IAAI,EAAE,iBAAiB,CAAC;AACxD;AACA,SAAS8X,qBAAqBA,CAACb,KAAK,EAAEc,UAAU,EAAE;EAC9CnZ,WAAW,CAACqY,KAAK,CAACe,eAAe,EAAE,IAAI,EAAED,UAAU,IAAI,6CAA6C,CAAC;AACzG;AACA,SAASE,qBAAqBA,CAAChB,KAAK,EAAEc,UAAU,EAAE;EAC9CnZ,WAAW,CAACqY,KAAK,CAACiB,eAAe,EAAE,IAAI,EAAE,6CAA6C,CAAC;AAC3F;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAAC5O,GAAG,EAAE;EAC7B,IAAIA,GAAG,CAACzL,IAAI,KAAK0C,SAAS,IAAI+I,GAAG,CAAC6O,SAAS,IAAI5X,SAAS,IAAI+I,GAAG,CAAC8O,MAAM,KAAK7X,SAAS,EAAE;IAClFpC,UAAU,CAAC,gGAAgG,CAAC;EAChH;AACJ;AACA,SAASka,sBAAsBA,CAACrB,KAAK,EAAEpX,KAAK,EAAE;EAC1C0Y,aAAa,CAAC7C,aAAa,EAAEuB,KAAK,CAACuB,iBAAiB,EAAE3Y,KAAK,CAAC;AAChE;AACA,SAAS4Y,yBAAyBA,CAAC5B,KAAK,EAAEhX,KAAK,EAAE;EAC7C,MAAMoX,KAAK,GAAGJ,KAAK,CAAC,CAAC,CAAC;EACtB0B,aAAa,CAACtB,KAAK,CAACyB,iBAAiB,EAAE7B,KAAK,CAAC/a,MAAM,EAAE+D,KAAK,CAAC;AAC/D;AACA,SAAS0Y,aAAaA,CAACI,KAAK,EAAEC,KAAK,EAAE/Y,KAAK,EAAE;EACxC,IAAI,EAAE8Y,KAAK,IAAI9Y,KAAK,IAAIA,KAAK,GAAG+Y,KAAK,CAAC,EAAE;IACpCxa,UAAU,CAAC,iCAAiCua,KAAK,OAAO9Y,KAAK,MAAM+Y,KAAK,GAAG,CAAC;EAChF;AACJ;AACA,SAASC,qBAAqBA,CAAChC,KAAK,EAAEkB,UAAU,EAAE;EAC9C3Y,aAAa,CAACyX,KAAK,CAAC9B,0BAA0B,CAAC,EAAE,+BAA+B,CAAC;EACjF3V,aAAa,CAACyX,KAAK,CAAC9B,0BAA0B,CAAC,CAACV,MAAM,CAAC,CAACyE,UAAU,EAAE,qFAAqF,CAAC;AAC9J;AACA,SAASC,gBAAgBA,CAAClC,KAAK,EAAEkB,UAAU,EAAE;EACzC3Y,aAAa,CAACyX,KAAK,EAAE,0EAA0E,CAAC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmC,kBAAkBA,CAACnC,KAAK,EAAEoC,aAAa,EAAE;EAC9CR,yBAAyB,CAAC5B,KAAK,EAAEoC,aAAa,CAAC;EAC/CR,yBAAyB,CAAC5B,KAAK,EAAEoC,aAAa,GAAG,CAAC,CAAC,+BAA+B,CAAC;EACnFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,EAAE,8CAA8C,CAAC;EACtFhb,YAAY,CAAC4Y,KAAK,CAACoC,aAAa,GAAG,CAAC,CAAC,gCAAgC,EAAE,+CAA+C,CAAC;AAC3H;AAEA,MAAMC,aAAa,GAAG,KAAK;AAC3B,MAAMC,iBAAiB,GAAG,MAAM;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACpZ,KAAK,EAAE;EACxB,OAAOxD,KAAK,CAACC,OAAO,CAACuD,KAAK,CAAC,EAAE;IACzBA,KAAK,GAAGA,KAAK,CAACgU,IAAI,CAAC;EACvB;EACA,OAAOhU,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA,SAASqZ,WAAWA,CAACrZ,KAAK,EAAE;EACxB,OAAOxD,KAAK,CAACC,OAAO,CAACuD,KAAK,CAAC,EAAE;IACzB;IACA;IACA,IAAI,OAAOA,KAAK,CAAC2V,IAAI,CAAC,KAAK,QAAQ,EAC/B,OAAO3V,KAAK;IAChBA,KAAK,GAAGA,KAAK,CAACgU,IAAI,CAAC;EACvB;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA,SAASsF,gBAAgBA,CAACzZ,KAAK,EAAEgX,KAAK,EAAE;EACpCtc,SAAS,IAAIoF,kBAAkB,CAACkX,KAAK,EAAEhX,KAAK,CAAC;EAC7CtF,SAAS,IAAIkE,wBAAwB,CAACoB,KAAK,EAAE6V,aAAa,EAAE,mCAAmC,CAAC;EAChG,OAAO0D,WAAW,CAACvC,KAAK,CAAChX,KAAK,CAAC,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0Z,gBAAgBA,CAACnD,KAAK,EAAES,KAAK,EAAE;EACpCtc,SAAS,IAAIwc,mBAAmB,CAACX,KAAK,EAAES,KAAK,CAAC;EAC9Ctc,SAAS,IAAIoF,kBAAkB,CAACkX,KAAK,EAAET,KAAK,CAACvW,KAAK,CAAC;EACnD,MAAMN,IAAI,GAAG6Z,WAAW,CAACvC,KAAK,CAACT,KAAK,CAACvW,KAAK,CAAC,CAAC;EAC5C,OAAON,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASia,sBAAsBA,CAACpD,KAAK,EAAES,KAAK,EAAE;EAC1C,MAAMhX,KAAK,GAAGuW,KAAK,KAAK,IAAI,GAAG,CAAC,CAAC,GAAGA,KAAK,CAACvW,KAAK;EAC/C,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE;IACdtF,SAAS,IAAIwc,mBAAmB,CAACX,KAAK,EAAES,KAAK,CAAC;IAC9C,MAAMtX,IAAI,GAAG6Z,WAAW,CAACvC,KAAK,CAAChX,KAAK,CAAC,CAAC;IACtC,OAAON,IAAI;EACf;EACA,OAAO,IAAI;AACf;AACA;AACA,SAASka,QAAQA,CAACxC,KAAK,EAAEpX,KAAK,EAAE;EAC5BtF,SAAS,IAAI2E,iBAAiB,CAACW,KAAK,EAAE,CAAC,CAAC,EAAE,uBAAuB,CAAC;EAClEtF,SAAS,IAAI0E,cAAc,CAACY,KAAK,EAAEoX,KAAK,CAACG,IAAI,CAACtb,MAAM,EAAE,uBAAuB,CAAC;EAC9E,MAAMsa,KAAK,GAAGa,KAAK,CAACG,IAAI,CAACvX,KAAK,CAAC;EAC/BtF,SAAS,IAAI6b,KAAK,KAAK,IAAI,IAAIc,WAAW,CAACd,KAAK,CAAC;EACjD,OAAOA,KAAK;AAChB;AACA;AACA,SAASsD,IAAIA,CAACC,IAAI,EAAE9Z,KAAK,EAAE;EACvBtF,SAAS,IAAIoF,kBAAkB,CAACga,IAAI,EAAE9Z,KAAK,CAAC;EAC5C,OAAO8Z,IAAI,CAAC9Z,KAAK,CAAC;AACtB;AACA;AACA,SAAS+Z,KAAKA,CAAC3C,KAAK,EAAEJ,KAAK,EAAEhX,KAAK,EAAEG,KAAK,EAAE;EACvC;EACA;EACA,IAAIH,KAAK,IAAIoX,KAAK,CAACG,IAAI,CAACtb,MAAM,EAAE;IAC5Bmb,KAAK,CAACG,IAAI,CAACvX,KAAK,CAAC,GAAG,IAAI;IACxBoX,KAAK,CAAC4C,SAAS,CAACha,KAAK,CAAC,GAAG,IAAI;EACjC;EACAgX,KAAK,CAAChX,KAAK,CAAC,GAAGG,KAAK;AACxB;AACA,SAAS8Z,wBAAwBA,CAACC,SAAS,EAAEC,QAAQ,EAAE;EACnD;EACAzf,SAAS,IAAIoF,kBAAkB,CAACqa,QAAQ,EAAED,SAAS,CAAC;EACpD,MAAME,SAAS,GAAGD,QAAQ,CAACD,SAAS,CAAC;EACrC,MAAMlD,KAAK,GAAGZ,OAAO,CAACgE,SAAS,CAAC,GAAGA,SAAS,GAAGA,SAAS,CAACjG,IAAI,CAAC;EAC9D,OAAO6C,KAAK;AAChB;AACA;AACA,SAASqD,cAAcA,CAACP,IAAI,EAAE;EAC1B,OAAO,CAACA,IAAI,CAACzF,KAAK,CAAC,GAAG,CAAC,CAAC,mCAAmC,CAAC,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiG,4BAA4BA,CAACR,IAAI,EAAE;EACxC,OAAO,CAACA,IAAI,CAACzF,KAAK,CAAC,GAAG,GAAG,CAAC,+BAA+B,GAAG,CAAC;AACjE;AACA;AACA,SAASkG,uBAAuBA,CAACT,IAAI,EAAE;EACnC,OAAOzD,YAAY,CAACyD,IAAI,CAACxF,MAAM,CAAC,CAAC;AACrC;AACA,SAASkG,WAAWA,CAACC,MAAM,EAAEza,KAAK,EAAE;EAChC,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,EACrC,OAAO,IAAI;EACfjG,SAAS,IAAIoF,kBAAkB,CAAC2a,MAAM,EAAEza,KAAK,CAAC;EAC9C,OAAOya,MAAM,CAACza,KAAK,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS0a,sBAAsBA,CAAC1D,KAAK,EAAE;EACnCA,KAAK,CAAC5B,mBAAmB,CAAC,GAAG,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,SAASuF,kBAAkBA,CAAC3D,KAAK,EAAE;EAC/B,IAAIA,KAAK,CAAC3C,KAAK,CAAC,GAAG,IAAI,CAAC,8BAA8B;IAClD;EACJ;EACA2C,KAAK,CAAC3C,KAAK,CAAC,IAAI,IAAI,CAAC;EACrB,IAAIiG,4BAA4B,CAACtD,KAAK,CAAC,EAAE;IACrC4D,yBAAyB,CAAC5D,KAAK,CAAC;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6D,WAAWA,CAACC,YAAY,EAAEC,WAAW,EAAE;EAC5C,OAAOD,YAAY,GAAG,CAAC,EAAE;IACrBpgB,SAAS,IACL6E,aAAa,CAACwb,WAAW,CAAC9F,gBAAgB,CAAC,EAAE,wEAAwE,CAAC;IAC1H8F,WAAW,GAAGA,WAAW,CAAC9F,gBAAgB,CAAC;IAC3C6F,YAAY,EAAE;EAClB;EACA,OAAOC,WAAW;AACtB;AACA,SAASC,0BAA0BA,CAAChE,KAAK,EAAE;EACvC,OAAO,CAAC,EAAEA,KAAK,CAAC3C,KAAK,CAAC,IAAI,IAAI,CAAC,+BAA+B,IAAI,CAAC,wCAAwC,IACvG2C,KAAK,CAACrB,0BAA0B,CAAC,EAAEsF,KAAK,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA,SAASC,oCAAoCA,CAAClE,KAAK,EAAE;EACjDA,KAAK,CAACnC,WAAW,CAAC,CAACsG,wBAAwB,EAAEC,MAAM,CAAC,CAAC,CAAC,qCAAqC,CAAC;EAC5F,IAAIpE,KAAK,CAAC3C,KAAK,CAAC,GAAG,EAAE,CAAC,wBAAwB;IAC1C2C,KAAK,CAAC3C,KAAK,CAAC,IAAI,IAAI,CAAC;EACzB;EACA,IAAI2G,0BAA0B,CAAChE,KAAK,CAAC,EAAE;IACnC4D,yBAAyB,CAAC5D,KAAK,CAAC;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4D,yBAAyBA,CAAC5D,KAAK,EAAE;EACtCA,KAAK,CAACnC,WAAW,CAAC,CAACsG,wBAAwB,EAAEC,MAAM,CAAC,CAAC,CAAC,kDAAkD,CAAC;EACzG,IAAIvK,MAAM,GAAGwK,cAAc,CAACrE,KAAK,CAAC;EAClC,OAAOnG,MAAM,KAAK,IAAI,EAAE;IACpB;IACA;IACA,IAAIA,MAAM,CAACwD,KAAK,CAAC,GAAG,IAAI,CAAC,yCAAyC;MAC9D;IACJ;IACAxD,MAAM,CAACwD,KAAK,CAAC,IAAI,IAAI,CAAC;IACtB,IAAI,CAACiG,4BAA4B,CAACzJ,MAAM,CAAC,EAAE;MACvC;IACJ;IACAA,MAAM,GAAGwK,cAAc,CAACxK,MAAM,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA,SAASyK,mBAAmBA,CAACtE,KAAK,EAAEuE,iBAAiB,EAAE;EACnD,IAAItE,WAAW,CAACD,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIjd,YAAY,CAAC,GAAG,CAAC,+CAA+CW,SAAS,IAAI,kCAAkC,CAAC;EAC9H;EACA,IAAIsc,KAAK,CAACxB,gBAAgB,CAAC,KAAK,IAAI,EAAE;IAClCwB,KAAK,CAACxB,gBAAgB,CAAC,GAAG,EAAE;EAChC;EACAwB,KAAK,CAACxB,gBAAgB,CAAC,CAACvS,IAAI,CAACsY,iBAAiB,CAAC;AACnD;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACxE,KAAK,EAAEuE,iBAAiB,EAAE;EACpD,IAAIvE,KAAK,CAACxB,gBAAgB,CAAC,KAAK,IAAI,EAChC;EACJ,MAAMpC,YAAY,GAAG4D,KAAK,CAACxB,gBAAgB,CAAC,CAAC5Z,OAAO,CAAC2f,iBAAiB,CAAC;EACvE,IAAInI,YAAY,KAAK,CAAC,CAAC,EAAE;IACrB4D,KAAK,CAACxB,gBAAgB,CAAC,CAAC3S,MAAM,CAACuQ,YAAY,EAAE,CAAC,CAAC;EACnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASiI,cAAcA,CAACrE,KAAK,EAAE;EAC3Btc,SAAS,IAAIsd,WAAW,CAAChB,KAAK,CAAC;EAC/B,MAAMnG,MAAM,GAAGmG,KAAK,CAAC1C,MAAM,CAAC;EAC5B,OAAO+B,YAAY,CAACxF,MAAM,CAAC,GAAGA,MAAM,CAACyD,MAAM,CAAC,GAAGzD,MAAM;AACzD;AACA,SAAS4K,uBAAuBA,CAAC3B,IAAI,EAAE;EACnC;EACA,OAAQA,IAAI,CAACpF,OAAO,CAAC,KAAK,EAAE;AAChC;AACA,SAASgH,uBAAuBA,CAACtE,KAAK,EAAE;EACpC,OAAQA,KAAK,CAACuE,OAAO,KAAK,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACxE,KAAK,EAAEJ,KAAK,EAAE1U,OAAO,EAAEuZ,SAAS,EAAE;EAC/D,MAAMC,QAAQ,GAAGL,uBAAuB,CAACzE,KAAK,CAAC;EAC/C;EACA;EACA;EACA;EACAtc,SAAS,IACL6E,aAAa,CAAC+C,OAAO,EAAE,6EAA6E,CAAC;EACzGwZ,QAAQ,CAAC7Y,IAAI,CAACX,OAAO,CAAC;EACtB,IAAI8U,KAAK,CAACe,eAAe,EAAE;IACvBuD,uBAAuB,CAACtE,KAAK,CAAC,CAACnU,IAAI,CAAC4Y,SAAS,EAAEC,QAAQ,CAAC7f,MAAM,GAAG,CAAC,CAAC;EACvE,CAAC,MACI;IACD;IACA;IACA,IAAIvB,SAAS,EAAE;MACXmB,MAAM,CAAC0Q,MAAM,CAACmP,uBAAuB,CAACtE,KAAK,CAAC,CAAC;IACjD;EACJ;AACJ;AAEA,MAAM2E,gBAAgB,GAAG;EACrBC,MAAM,EAAEC,YAAY,CAAC,IAAI,CAAC;EAC1BC,eAAe,EAAE,IAAI;EACrBC,sBAAsB,EAAE;AAC5B,CAAC;AACD,IAAIC,kBAAkB;AACtB,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAACA,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;EACzDA,kBAAkB,CAACA,kBAAkB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACvEA,kBAAkB,CAACA,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB;AACnF,CAAC,EAAEA,kBAAkB,KAAKA,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,CAAC,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,GAAG,KAAK;AAC9B,SAASC,oBAAoBA,CAAA,EAAG;EAC5B,OAAOR,gBAAgB,CAACC,MAAM,CAACQ,iBAAiB;AACpD;AACA,SAASC,yBAAyBA,CAAA,EAAG;EACjCV,gBAAgB,CAACC,MAAM,CAACQ,iBAAiB,EAAE;AAC/C;AACA,SAASE,yBAAyBA,CAAA,EAAG;EACjCX,gBAAgB,CAACC,MAAM,CAACQ,iBAAiB,EAAE;AAC/C;AACA,SAASG,kBAAkBA,CAAA,EAAG;EAC1B,OAAOZ,gBAAgB,CAACG,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA,SAASU,sBAAsBA,CAAA,EAAG;EAC9B,OAAOb,gBAAgB,CAACI,sBAAsB,KAAK,IAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,wBAAwBA,CAACtG,KAAK,EAAE;EACrC,OAAOwF,gBAAgB,CAACI,sBAAsB,KAAK5F,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuG,gBAAgBA,CAAA,EAAG;EACxBf,gBAAgB,CAACG,eAAe,GAAG,IAAI;AAC3C;AACA;AACA;AACA;AACA;AACA,SAASa,uBAAuBA,CAACxG,KAAK,EAAE;EACpCwF,gBAAgB,CAACI,sBAAsB,GAAG5F,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyG,iBAAiBA,CAAA,EAAG;EACzBjB,gBAAgB,CAACG,eAAe,GAAG,KAAK;AAC5C;AACA;AACA;AACA;AACA,SAASe,uBAAuBA,CAAA,EAAG;EAC/BlB,gBAAgB,CAACI,sBAAsB,GAAG,IAAI;AAClD;AACA;AACA;AACA;AACA,SAASe,QAAQA,CAAA,EAAG;EAChB,OAAOnB,gBAAgB,CAACC,MAAM,CAAChF,KAAK;AACxC;AACA;AACA;AACA;AACA,SAASmG,QAAQA,CAAA,EAAG;EAChB,OAAOpB,gBAAgB,CAACC,MAAM,CAAC5E,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgG,aAAaA,CAACC,aAAa,EAAE;EAClCtB,gBAAgB,CAACC,MAAM,CAACsB,YAAY,GAAGD,aAAa;EACpD,OAAOA,aAAa,CAAC1I,OAAO,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4I,WAAWA,CAACpd,KAAK,EAAE;EACxB4b,gBAAgB,CAACC,MAAM,CAACsB,YAAY,GAAG,IAAI;EAC3C,OAAOnd,KAAK;AAChB;AACA,SAASqd,eA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}