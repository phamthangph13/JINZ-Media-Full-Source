{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/admin/users`;\n    this.usersSubject = new BehaviorSubject([]);\n    this.users$ = this.usersSubject.asObservable();\n  }\n  // Get all users with filters and pagination\n  getUsers(filters = {}) {\n    let params = new HttpParams();\n    if (filters.page) params = params.set('page', filters.page.toString());\n    if (filters.limit) params = params.set('limit', filters.limit.toString());\n    if (filters.sort) params = params.set('sort', filters.sort);\n    if (filters.role) params = params.set('role', filters.role);\n    if (filters.isActive !== undefined) params = params.set('isActive', filters.isActive.toString());\n    if (filters.search) params = params.set('search', filters.search);\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(map(response => {\n      this.usersSubject.next(response.data);\n      return response;\n    }));\n  }\n  // Get user statistics\n  getUserStats() {\n    return this.http.get(`${this.apiUrl}/stats`).pipe(map(response => response.data));\n  }\n  // Get single user\n  getUser(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => response.data));\n  }\n  // Create new user\n  createUser(userData) {\n    return this.http.post(this.apiUrl, userData).pipe(map(response => {\n      this.refreshUsers();\n      return response.data;\n    }));\n  }\n  // Update user\n  updateUser(id, userData) {\n    return this.http.put(`${this.apiUrl}/${id}`, userData).pipe(map(response => {\n      this.refreshUsers();\n      return response.data;\n    }));\n  }\n  // Delete user\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(() => {\n      this.refreshUsers();\n    }));\n  }\n  // Assign package to user\n  assignPackage(userId, packageData) {\n    return this.http.post(`${this.apiUrl}/${userId}/assign-package`, packageData).pipe(map(response => {\n      this.refreshUsers();\n      return response.data;\n    }));\n  }\n  // Remove package from user\n  removePackage(userId) {\n    return this.http.delete(`${this.apiUrl}/${userId}/remove-package`).pipe(map(response => {\n      this.refreshUsers();\n      return response.data;\n    }));\n  }\n  // Toggle user active status\n  toggleUserStatus(id) {\n    return this.getUser(id).pipe(switchMap(user => {\n      return this.updateUser(id, {\n        isActive: !user.isActive\n      });\n    }));\n  }\n  // Refresh users list\n  refreshUsers() {\n    this.getUsers().subscribe();\n  }\n  // Search users\n  searchUsers(query) {\n    return this.getUsers({\n      search: query\n    });\n  }\n  // Get users by role\n  getUsersByRole(role) {\n    return this.getUsers({\n      role\n    });\n  }\n  // Get active/inactive users\n  getUsersByStatus(isActive) {\n    return this.getUsers({\n      isActive\n    });\n  }\n  static #_ = this.ɵfac = function UserService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","map","switchMap","environment","UserService","constructor","http","apiUrl","usersSubject","users$","asObservable","getUsers","filters","params","page","set","toString","limit","sort","role","isActive","undefined","search","get","pipe","response","next","data","getUserStats","getUser","id","createUser","userData","post","refreshUsers","updateUser","put","deleteUser","delete","assignPackage","userId","packageData","removePackage","toggleUserStatus","user","subscribe","searchUsers","query","getUsersByRole","getUsersByStatus","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\winni\\OneDrive\\Desktop\\JINZ-Media-Full-Source\\frontend\\src\\app\\features\\user-management\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { \r\n  User, \r\n  UserResponse, \r\n  CreateUserRequest, \r\n  UpdateUserRequest, \r\n  AssignPackageRequest,\r\n  UserStats \r\n} from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private apiUrl = `${environment.apiUrl}/admin/users`;\r\n  private usersSubject = new BehaviorSubject<User[]>([]);\r\n  public users$ = this.usersSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all users with filters and pagination\r\n  getUsers(filters: {\r\n    page?: number;\r\n    limit?: number;\r\n    sort?: string;\r\n    role?: string;\r\n    isActive?: boolean;\r\n    search?: string;\r\n  } = {}): Observable<UserResponse> {\r\n    let params = new HttpParams();\r\n    \r\n    if (filters.page) params = params.set('page', filters.page.toString());\r\n    if (filters.limit) params = params.set('limit', filters.limit.toString());\r\n    if (filters.sort) params = params.set('sort', filters.sort);\r\n    if (filters.role) params = params.set('role', filters.role);\r\n    if (filters.isActive !== undefined) params = params.set('isActive', filters.isActive.toString());\r\n    if (filters.search) params = params.set('search', filters.search);\r\n\r\n    return this.http.get<UserResponse>(this.apiUrl, { params }).pipe(\r\n      map(response => {\r\n        this.usersSubject.next(response.data);\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Get user statistics\r\n  getUserStats(): Observable<UserStats> {\r\n    return this.http.get<{success: boolean, data: UserStats}>(`${this.apiUrl}/stats`).pipe(\r\n      map(response => response.data)\r\n    );\r\n  }\r\n\r\n  // Get single user\r\n  getUser(id: string): Observable<User> {\r\n    return this.http.get<{success: boolean, data: User}>(`${this.apiUrl}/${id}`).pipe(\r\n      map(response => response.data)\r\n    );\r\n  }\r\n\r\n  // Create new user\r\n  createUser(userData: CreateUserRequest): Observable<User> {\r\n    return this.http.post<{success: boolean, data: User}>(this.apiUrl, userData).pipe(\r\n      map(response => {\r\n        this.refreshUsers();\r\n        return response.data;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Update user\r\n  updateUser(id: string, userData: UpdateUserRequest): Observable<User> {\r\n    return this.http.put<{success: boolean, data: User}>(`${this.apiUrl}/${id}`, userData).pipe(\r\n      map(response => {\r\n        this.refreshUsers();\r\n        return response.data;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Delete user\r\n  deleteUser(id: string): Observable<void> {\r\n    return this.http.delete<{success: boolean}>(`${this.apiUrl}/${id}`).pipe(\r\n      map(() => {\r\n        this.refreshUsers();\r\n      })\r\n    );\r\n  }\r\n\r\n  // Assign package to user\r\n  assignPackage(userId: string, packageData: AssignPackageRequest): Observable<User> {\r\n    return this.http.post<{success: boolean, data: User}>(`${this.apiUrl}/${userId}/assign-package`, packageData).pipe(\r\n      map(response => {\r\n        this.refreshUsers();\r\n        return response.data;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Remove package from user\r\n  removePackage(userId: string): Observable<User> {\r\n    return this.http.delete<{success: boolean, data: User}>(`${this.apiUrl}/${userId}/remove-package`).pipe(\r\n      map(response => {\r\n        this.refreshUsers();\r\n        return response.data;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Toggle user active status\r\n  toggleUserStatus(id: string): Observable<User> {\r\n    return this.getUser(id).pipe(\r\n      switchMap((user: User) => {\r\n        return this.updateUser(id, { isActive: !user.isActive });\r\n      })\r\n    );\r\n  }\r\n\r\n  // Refresh users list\r\n  private refreshUsers(): void {\r\n    this.getUsers().subscribe();\r\n  }\r\n\r\n  // Search users\r\n  searchUsers(query: string): Observable<UserResponse> {\r\n    return this.getUsers({ search: query });\r\n  }\r\n\r\n  // Get users by role\r\n  getUsersByRole(role: 'user' | 'admin'): Observable<UserResponse> {\r\n    return this.getUsers({ role });\r\n  }\r\n\r\n  // Get active/inactive users\r\n  getUsersByStatus(isActive: boolean): Observable<UserResponse> {\r\n    return this.getUsers({ isActive });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}