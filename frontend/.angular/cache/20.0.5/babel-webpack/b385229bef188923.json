{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport * as i0 from '@angular/core';\nimport { ɵRuntimeError as _RuntimeError, Injectable, InjectionToken, inject, NgZone, DestroyRef, PendingTasks, ɵConsole as _Console, ɵformatRuntimeError as _formatRuntimeError, runInInjectionContext, DOCUMENT, Inject, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { concatMap, filter, map, finalize, switchMap } from 'rxjs/operators';\nimport { of, Observable, from } from 'rxjs';\nimport { XhrFactory, parseCookieValue } from './xhr.mjs';\n\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\nclass HttpHandler {}\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\nclass HttpBackend {}\n\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\nclass HttpHeaders {\n  /**\r\n   * Internal map of lowercase header names to values.\r\n   */\n  headers;\n  /**\r\n   * Internal map of lowercased header names to the normalized\r\n   * form of the name (the form seen first).\r\n   */\n  normalizedNames = new Map();\n  /**\r\n   * Complete the lazy initialization of this object (needed before reading).\r\n   */\n  lazyInit;\n  /**\r\n   * Queued updates to be materialized the next initialization.\r\n   */\n  lazyUpdate = null;\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const value = line.slice(index + 1).trim();\n            this.addHeaderEntry(name, value);\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map();\n      headers.forEach((value, name) => {\n        this.addHeaderEntry(name, value);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n  /**\r\n   * Checks for existence of a given header.\r\n   *\r\n   * @param name The header name to check for existence.\r\n   *\r\n   * @returns True if the header exists, false otherwise.\r\n   */\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\r\n   * Retrieves the first value of a given header.\r\n   *\r\n   * @param name The header name.\r\n   *\r\n   * @returns The value string if the header exists, null otherwise\r\n   */\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\r\n   * Retrieves the names of the headers.\r\n   *\r\n   * @returns A list of header names.\r\n   */\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\r\n   * Retrieves a list of values for a given header.\r\n   *\r\n   * @param name The header name from which to retrieve values.\r\n   *\r\n   * @returns A string of values if the header exists, null otherwise.\r\n   */\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\r\n   * Appends a new value to the existing set of values for a header\r\n   * and returns them in a clone of the original instance.\r\n   *\r\n   * @param name The header name for which to append the values.\r\n   * @param value The value to append.\r\n   *\r\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n   */\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\r\n   * Sets or modifies a value for a given header in a clone of the original instance.\r\n   * If the header already exists, its value is replaced with the given value\r\n   * in the returned object.\r\n   *\r\n   * @param name The header name.\r\n   * @param value The value or values to set or override for the given header.\r\n   *\r\n   * @returns A clone of the HTTP headers object with the newly set header value.\r\n   */\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\r\n   * Deletes values for a given header in a clone of the original instance.\r\n   *\r\n   * @param name The header name.\r\n   * @param value The value or values to delete for the given header.\r\n   *\r\n   * @returns A clone of the HTTP headers object with the given value deleted.\r\n   */\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n  addHeaderEntry(name, value) {\n    const key = name.toLowerCase();\n    this.maybeSetNormalizedName(name, key);\n    if (this.headers.has(key)) {\n      this.headers.get(key).push(value);\n    } else {\n      this.headers.set(key, [value]);\n    }\n  }\n  setHeaderEntries(name, values) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map(value => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n  /**\r\n   * @internal\r\n   */\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n}\n/**\r\n * Verifies that the headers object has the right shape: the values\r\n * must be either strings, numbers or arrays. Throws an error if an invalid\r\n * header value is present.\r\n */\nfunction assertValidHeaders(headers) {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` + `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\nclass HttpUrlEncodingCodec {\n  /**\r\n   * Encodes a key name for a URL parameter or query-string.\r\n   * @param key The key name.\r\n   * @returns The encoded key name.\r\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\r\n   * Encodes the value of a URL parameter or query-string.\r\n   * @param value The value.\r\n   * @returns The encoded value.\r\n   */\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\r\n   * Decodes an encoded URL parameter or query-string key.\r\n   * @param key The encoded key name.\r\n   * @returns The decoded key name.\r\n   */\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\r\n   * Decodes an encoded URL parameter or query-string value.\r\n   * @param value The encoded value.\r\n   * @returns The decoded value.\r\n   */\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\r\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\r\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\nclass HttpParams {\n  map;\n  encoder;\n  updates = null;\n  cloneFrom = null;\n  constructor(options = {}) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (options.fromString) {\n      if (options.fromObject) {\n        throw new _RuntimeError(2805 /* RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT */, ngDevMode && 'Cannot specify both fromString and fromObject.');\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\r\n   * Reports whether the body includes one or more values for a given parameter.\r\n   * @param param The parameter name.\r\n   * @returns True if the parameter has one or more values,\r\n   * false if it has no value or is not present.\r\n   */\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\r\n   * Retrieves the first value for a parameter.\r\n   * @param param The parameter name.\r\n   * @returns The first value of the given parameter,\r\n   * or `null` if the parameter is not present.\r\n   */\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\r\n   * Retrieves all values for a  parameter.\r\n   * @param param The parameter name.\r\n   * @returns All values in a string array,\r\n   * or `null` if the parameter not present.\r\n   */\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\r\n   * Retrieves all the parameters for this body.\r\n   * @returns The parameter names in a string array.\r\n   */\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\r\n   * Appends a new value to existing values for a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The new value to add.\r\n   * @return A new body with the appended value.\r\n   */\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\r\n   * Constructs a new body with appended values for the given parameter name.\r\n   * @param params parameters and values\r\n   * @return A new body with the new value.\r\n   */\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\r\n   * Replaces the value for a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The new value.\r\n   * @return A new body with the new value.\r\n   */\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\r\n   * Removes a given value or all values from a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The value to remove, if provided.\r\n   * @return A new body with the given value removed, or with all values\r\n   * removed if no value is specified.\r\n   */\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\r\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n   * separated by `&`s.\r\n   */\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key);\n      // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    })\n    // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\nclass HttpContextToken {\n  defaultValue;\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n}\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```ts\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass HttpContext {\n  map = new Map();\n  /**\r\n   * Store a value in the context. If a value is already present it will be overwritten.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   * @param value The value to store.\r\n   *\r\n   * @returns A reference to itself for easy chaining.\r\n   */\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\r\n   * Retrieve the value associated with the given token.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   *\r\n   * @returns The stored value or default if one is defined.\r\n   */\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token);\n  }\n  /**\r\n   * Delete the value associated with the given token.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   *\r\n   * @returns A reference to itself for easy chaining.\r\n   */\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\r\n   * Checks for existence of a given token.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   *\r\n   * @returns True if the token exists, false otherwise.\r\n   */\n  has(token) {\n    return this.map.has(token);\n  }\n  /**\r\n   * @returns a list of tokens currently stored in the context.\r\n   */\n  keys() {\n    return this.map.keys();\n  }\n}\n\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\r\n * `Content-Type` is an HTTP header used to indicate the media type\r\n * (also known as MIME type) of the resource being sent to the client\r\n * or received from the server.\r\n */\nconst CONTENT_TYPE_HEADER = 'Content-Type';\n/**\r\n * The `Accept` header is an HTTP request header that indicates the media types\r\n * (or content types) the client is willing to receive from the server.\r\n */\nconst ACCEPT_HEADER = 'Accept';\n/**\r\n * `X-Request-URL` is a custom HTTP header used in older browser versions,\r\n * including Firefox (< 32), Chrome (< 37), Safari (< 8), and Internet Explorer,\r\n * to include the full URL of the request in cross-origin requests.\r\n */\nconst X_REQUEST_URL_HEADER = 'X-Request-URL';\n/**\r\n * `text/plain` is a content type used to indicate that the content being\r\n * sent is plain text with no special formatting or structured data\r\n * like HTML, XML, or JSON.\r\n */\nconst TEXT_CONTENT_TYPE = 'text/plain';\n/**\r\n * `application/json` is a content type used to indicate that the content\r\n * being sent is in the JSON format.\r\n */\nconst JSON_CONTENT_TYPE = 'application/json';\n/**\r\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\r\n * Accept header of HTTP requests. It indicates the types of content the client is willing\r\n * to accept from the server, with a preference for `application/json` and `text/plain`,\r\n * but also accepting any other type (*\\/*).\r\n */\nconst ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\nclass HttpRequest {\n  url;\n  /**\r\n   * The request body, or `null` if one isn't set.\r\n   *\r\n   * Bodies are not enforced to be immutable, as they can include a reference to any\r\n   * user-defined data type. However, interceptors should take care to preserve\r\n   * idempotence by treating them as such.\r\n   */\n  body = null;\n  /**\r\n   * Outgoing headers for this request.\r\n   */\n  headers;\n  /**\r\n   * Shared and mutable context that can be used by interceptors\r\n   */\n  context;\n  /**\r\n   * Whether this request should be made in a way that exposes progress events.\r\n   *\r\n   * Progress events are expensive (change detection runs on each event) and so\r\n   * they should only be requested if the consumer intends to monitor them.\r\n   *\r\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\r\n   */\n  reportProgress = false;\n  /**\r\n   * Whether this request should be sent with outgoing credentials (cookies).\r\n   */\n  withCredentials = false;\n  /**\r\n   * When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\r\n   */\n  keepalive = false;\n  /**\r\n   * The expected response type of the server.\r\n   *\r\n   * This is used to parse the response appropriately before returning it to\r\n   * the requestee.\r\n   */\n  responseType = 'json';\n  /**\r\n   * The outgoing HTTP request method.\r\n   */\n  method;\n  /**\r\n   * Outgoing URL parameters.\r\n   *\r\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\r\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\r\n   *\r\n   * ```ts\r\n   * new HttpParams({fromString: 'angular=awesome'})\r\n   * ```\r\n   */\n  params;\n  /**\r\n   * The outgoing URL with all URL parameters set.\r\n   */\n  urlWithParams;\n  /**\r\n   * The HttpTransferCache option for the request\r\n   */\n  transferCache;\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      this.keepalive = !!options.keepalive;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n      if (!!options.context) {\n        this.context = options.context;\n      }\n      if (!!options.params) {\n        this.params = options.params;\n      }\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    this.headers ??= new HttpHeaders();\n    // If no context have been passed in, construct a new HttpContext instance.\n    this.context ??= new HttpContext();\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\r\n   * Transform the free-form body into a serialized format suitable for\r\n   * transmission to the server.\r\n   */\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (typeof this.body === 'string' || isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body)) {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return this.body.toString();\n  }\n  /**\r\n   * Examine the body and attempt to infer an appropriate MIME type\r\n   * for it.\r\n   *\r\n   * If no such type can be inferred, this method will return `null`.\r\n   */\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return TEXT_CONTENT_TYPE;\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return JSON_CONTENT_TYPE;\n    }\n    // No type could be inferred.\n    return null;\n  }\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n    const keepalive = update.keepalive ?? this.keepalive;\n    // Carefully handle the transferCache to differentiate between\n    // `false` and `undefined` in the update args.\n    const transferCache = update.transferCache ?? this.transferCache;\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials ?? this.withCredentials;\n    const reportProgress = update.reportProgress ?? this.reportProgress;\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    }\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    }\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n      transferCache,\n      keepalive\n    });\n  }\n}\n\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\nvar HttpEventType;\n(function (HttpEventType) {\n  /**\r\n   * The request was sent out over the wire.\r\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\r\n   * An upload progress event was received.\r\n   *\r\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\r\n   */\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\r\n   * The response status code and headers were received.\r\n   */\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\r\n   * A download progress event was received.\r\n   */\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\r\n   * The full response including the body was received.\r\n   */\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\r\n   * A custom event from an interceptor or a backend.\r\n   */\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\nclass HttpResponseBase {\n  /**\r\n   * All response headers.\r\n   */\n  headers;\n  /**\r\n   * Response status code.\r\n   */\n  status;\n  /**\r\n   * Textual description of response status code, defaults to OK.\r\n   *\r\n   * Do not depend on this.\r\n   */\n  statusText;\n  /**\r\n   * URL of the resource retrieved, or null if not available.\r\n   */\n  url;\n  /**\r\n   * Whether the status code falls in the 2xx range.\r\n   */\n  ok;\n  /**\r\n   * Type of the response, narrowed to either the full response or the header.\r\n   */\n  type;\n  /**\r\n   * Super-constructor for all responses.\r\n   *\r\n   * The single parameter accepted is an initialization hash. Any properties\r\n   * of the response passed there will override the default values.\r\n   */\n  constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\r\n   * Create a new `HttpHeaderResponse` with the given parameters.\r\n   */\n  constructor(init = {}) {\n    super(init);\n  }\n  type = HttpEventType.ResponseHeader;\n  /**\r\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n   * given parameter hash.\r\n   */\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\nclass HttpResponse extends HttpResponseBase {\n  /**\r\n   * The response body, or `null` if one was not returned.\r\n   */\n  body;\n  /**\r\n   * Construct a new `HttpResponse`.\r\n   */\n  constructor(init = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n  type = HttpEventType.Response;\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\nclass HttpErrorResponse extends HttpResponseBase {\n  name = 'HttpErrorResponse';\n  message;\n  error;\n  /**\r\n   * Errors are never okay, even when the status code is in the 2xx success range.\r\n   */\n  ok = false;\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n/**\r\n * We use these constant to prevent pulling the whole HttpStatusCode enum\r\n * Those are the only ones referenced directly by the framework\r\n */\nconst HTTP_STATUS_CODE_OK = 200;\nconst HTTP_STATUS_CODE_NO_CONTENT = 204;\n/**\r\n * Http status codes.\r\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\r\n * @publicApi\r\n */\nvar HttpStatusCode;\n(function (HttpStatusCode) {\n  HttpStatusCode[HttpStatusCode[\"Continue\"] = 100] = \"Continue\";\n  HttpStatusCode[HttpStatusCode[\"SwitchingProtocols\"] = 101] = \"SwitchingProtocols\";\n  HttpStatusCode[HttpStatusCode[\"Processing\"] = 102] = \"Processing\";\n  HttpStatusCode[HttpStatusCode[\"EarlyHints\"] = 103] = \"EarlyHints\";\n  HttpStatusCode[HttpStatusCode[\"Ok\"] = 200] = \"Ok\";\n  HttpStatusCode[HttpStatusCode[\"Created\"] = 201] = \"Created\";\n  HttpStatusCode[HttpStatusCode[\"Accepted\"] = 202] = \"Accepted\";\n  HttpStatusCode[HttpStatusCode[\"NonAuthoritativeInformation\"] = 203] = \"NonAuthoritativeInformation\";\n  HttpStatusCode[HttpStatusCode[\"NoContent\"] = 204] = \"NoContent\";\n  HttpStatusCode[HttpStatusCode[\"ResetContent\"] = 205] = \"ResetContent\";\n  HttpStatusCode[HttpStatusCode[\"PartialContent\"] = 206] = \"PartialContent\";\n  HttpStatusCode[HttpStatusCode[\"MultiStatus\"] = 207] = \"MultiStatus\";\n  HttpStatusCode[HttpStatusCode[\"AlreadyReported\"] = 208] = \"AlreadyReported\";\n  HttpStatusCode[HttpStatusCode[\"ImUsed\"] = 226] = \"ImUsed\";\n  HttpStatusCode[HttpStatusCode[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n  HttpStatusCode[HttpStatusCode[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n  HttpStatusCode[HttpStatusCode[\"Found\"] = 302] = \"Found\";\n  HttpStatusCode[HttpStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\n  HttpStatusCode[HttpStatusCode[\"NotModified\"] = 304] = \"NotModified\";\n  HttpStatusCode[HttpStatusCode[\"UseProxy\"] = 305] = \"UseProxy\";\n  HttpStatusCode[HttpStatusCode[\"Unused\"] = 306] = \"Unused\";\n  HttpStatusCode[HttpStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n  HttpStatusCode[HttpStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n  HttpStatusCode[HttpStatusCode[\"BadRequest\"] = 400] = \"BadRequest\";\n  HttpStatusCode[HttpStatusCode[\"Unauthorized\"] = 401] = \"Unauthorized\";\n  HttpStatusCode[HttpStatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n  HttpStatusCode[HttpStatusCode[\"Forbidden\"] = 403] = \"Forbidden\";\n  HttpStatusCode[HttpStatusCode[\"NotFound\"] = 404] = \"NotFound\";\n  HttpStatusCode[HttpStatusCode[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n  HttpStatusCode[HttpStatusCode[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n  HttpStatusCode[HttpStatusCode[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n  HttpStatusCode[HttpStatusCode[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n  HttpStatusCode[HttpStatusCode[\"Conflict\"] = 409] = \"Conflict\";\n  HttpStatusCode[HttpStatusCode[\"Gone\"] = 410] = \"Gone\";\n  HttpStatusCode[HttpStatusCode[\"LengthRequired\"] = 411] = \"LengthRequired\";\n  HttpStatusCode[HttpStatusCode[\"PreconditionFailed\"] = 412] = \"PreconditionFailed\";\n  HttpStatusCode[HttpStatusCode[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n  HttpStatusCode[HttpStatusCode[\"UriTooLong\"] = 414] = \"UriTooLong\";\n  HttpStatusCode[HttpStatusCode[\"UnsupportedMediaType\"] = 415] = \"UnsupportedMediaType\";\n  HttpStatusCode[HttpStatusCode[\"RangeNotSatisfiable\"] = 416] = \"RangeNotSatisfiable\";\n  HttpStatusCode[HttpStatusCode[\"ExpectationFailed\"] = 417] = \"ExpectationFailed\";\n  HttpStatusCode[HttpStatusCode[\"ImATeapot\"] = 418] = \"ImATeapot\";\n  HttpStatusCode[HttpStatusCode[\"MisdirectedRequest\"] = 421] = \"MisdirectedRequest\";\n  HttpStatusCode[HttpStatusCode[\"UnprocessableEntity\"] = 422] = \"UnprocessableEntity\";\n  HttpStatusCode[HttpStatusCode[\"Locked\"] = 423] = \"Locked\";\n  HttpStatusCode[HttpStatusCode[\"FailedDependency\"] = 424] = \"FailedDependency\";\n  HttpStatusCode[HttpStatusCode[\"TooEarly\"] = 425] = \"TooEarly\";\n  HttpStatusCode[HttpStatusCode[\"UpgradeRequired\"] = 426] = \"UpgradeRequired\";\n  HttpStatusCode[HttpStatusCode[\"PreconditionRequired\"] = 428] = \"PreconditionRequired\";\n  HttpStatusCode[HttpStatusCode[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n  HttpStatusCode[HttpStatusCode[\"RequestHeaderFieldsTooLarge\"] = 431] = \"RequestHeaderFieldsTooLarge\";\n  HttpStatusCode[HttpStatusCode[\"UnavailableForLegalReasons\"] = 451] = \"UnavailableForLegalReasons\";\n  HttpStatusCode[HttpStatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  HttpStatusCode[HttpStatusCode[\"NotImplemented\"] = 501] = \"NotImplemented\";\n  HttpStatusCode[HttpStatusCode[\"BadGateway\"] = 502] = \"BadGateway\";\n  HttpStatusCode[HttpStatusCode[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n  HttpStatusCode[HttpStatusCode[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n  HttpStatusCode[HttpStatusCode[\"HttpVersionNotSupported\"] = 505] = \"HttpVersionNotSupported\";\n  HttpStatusCode[HttpStatusCode[\"VariantAlsoNegotiates\"] = 506] = \"VariantAlsoNegotiates\";\n  HttpStatusCode[HttpStatusCode[\"InsufficientStorage\"] = 507] = \"InsufficientStorage\";\n  HttpStatusCode[HttpStatusCode[\"LoopDetected\"] = 508] = \"LoopDetected\";\n  HttpStatusCode[HttpStatusCode[\"NotExtended\"] = 510] = \"NotExtended\";\n  HttpStatusCode[HttpStatusCode[\"NetworkAuthenticationRequired\"] = 511] = \"NetworkAuthenticationRequired\";\n})(HttpStatusCode || (HttpStatusCode = {}));\n\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache,\n    keepalive: options.keepalive\n  };\n}\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n * @usageNotes\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```ts\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```ts\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```ts\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```ts\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\nclass HttpClient {\n  handler;\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\r\n   * Constructs an observable for a generic HTTP request that, when subscribed,\r\n   * fires the request through the chain of registered interceptors and on to the\r\n   * server.\r\n   *\r\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n   * the call returns an observable of the raw `HttpEvent` stream.\r\n   *\r\n   * Alternatively you can pass an HTTP method as the first parameter,\r\n   * a URL string as the second, and an options hash containing the request body as the third.\r\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n   * type of returned observable.\r\n   *   * The `responseType` value determines how a successful response body is parsed.\r\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n   * object as a type parameter to the call.\r\n   *\r\n   * The `observe` value determines the return type, according to what you are interested in\r\n   * observing.\r\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n   * progress events by default.\r\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n   * parameter.\r\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n   *\r\n   */\n  request(first, url, options = {}) {\n    let req;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      let headers = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n      // Sort out parameters.\n      let params = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({\n            fromObject: options.params\n          });\n        }\n      }\n      // Construct the request.\n      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n        keepalive: options.keepalive\n      });\n    }\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$ = of(req).pipe(concatMap(req => this.handler.handle(req)));\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$ = events$.pipe(filter(event => event instanceof HttpResponse));\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new _RuntimeError(2806 /* RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER */, ngDevMode && 'Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map(res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new _RuntimeError(2807 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB */, ngDevMode && 'Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map(res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new _RuntimeError(2808 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING */, ngDevMode && 'Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(res => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new _RuntimeError(2809 /* RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE */, ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `DELETE` request to execute on the server. See the individual overloads for\r\n   * details on the return type.\r\n   *\r\n   * @param url     The endpoint URL.\r\n   * @param options The HTTP options to send with the request.\r\n   *\r\n   */\n  delete(url, options = {}) {\n    return this.request('DELETE', url, options);\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `GET` request to execute on the server. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  get(url, options = {}) {\n    return this.request('GET', url, options);\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `HEAD` request to execute on the server. The `HEAD` method returns\r\n   * meta information about the resource without transferring the\r\n   * resource itself. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  head(url, options = {}) {\n    return this.request('HEAD', url, options);\n  }\n  /**\r\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n   * `JSONP` to be dispatched via the interceptor pipeline.\r\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n   * API endpoints that don't support newer,\r\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n   * application making the request.\r\n   * The endpoint API must support JSONP callback for JSONP requests to work.\r\n   * The resource API returns the JSON response wrapped in a callback function.\r\n   * You can pass the callback function name as one of the query parameters.\r\n   * Note that JSONP requests can only be used with `GET` requests.\r\n   *\r\n   * @param url The resource URL.\r\n   * @param callbackParam The callback function name.\r\n   *\r\n   */\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\r\n   * Constructs an `Observable` that, when subscribed, causes the configured\r\n   * `OPTIONS` request to execute on the server. This method allows the client\r\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\r\n   * without implying a resource action. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, options);\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `PATCH` request to execute on the server. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `POST` request to execute on the server. The server responds with the location of\r\n   * the replaced resource. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n   * with a new set of values.\r\n   * See the individual overloads for details on the return type.\r\n   */\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n  static ɵfac = function HttpClient_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpClient)(i0.ɵɵinject(HttpHandler));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpClient,\n    factory: HttpClient.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], () => [{\n    type: HttpHandler\n  }], null);\n})();\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * response url or the X-Request-URL header.\r\n */\nfunction getResponseUrl$1(response) {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = X_REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n/**\r\n * An internal injection token to reference `FetchBackend` implementation\r\n * in a tree-shakable way.\r\n */\nconst FETCH_BACKEND = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '');\n/**\r\n * Uses `fetch` to send requests to a backend server.\r\n *\r\n * This `FetchBackend` requires the support of the\r\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\r\n * supported browsers and on Node.js v18 or later.\r\n *\r\n * @see {@link HttpHandler}\r\n *\r\n * @publicApi\r\n */\nclass FetchBackend {\n  // We use an arrow function to always reference the current global implementation of `fetch`.\n  // This is helpful for cases when the global `fetch` implementation is modified by external code,\n  // see https://github.com/angular/angular/issues/57527.\n  fetchImpl = inject(FetchFactory, {\n    optional: true\n  })?.fetch ?? ((...args) => globalThis.fetch(...args));\n  ngZone = inject(NgZone);\n  destroyRef = inject(DestroyRef);\n  destroyed = false;\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n    });\n  }\n  handle(request) {\n    return new Observable(observer => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer).then(noop, error => observer.error(new HttpErrorResponse({\n        error\n      })));\n      return () => aborter.abort();\n    });\n  }\n  doRequest(request, signal, observer) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const init = _this.createRequestInit(request);\n      let response;\n      try {\n        // Run fetch outside of Angular zone.\n        // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n        // the response should eventually timeout which causes extra CD cycles every 500ms\n        const fetchPromise = _this.ngZone.runOutsideAngular(() => _this.fetchImpl(request.urlWithParams, {\n          signal,\n          ...init\n        }));\n        // Make sure Zone.js doesn't trigger false-positive unhandled promise\n        // error in case the Promise is rejected synchronously. See function\n        // description for additional information.\n        silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n        // Send the `Sent` event before awaiting the response.\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        response = yield fetchPromise;\n      } catch (error) {\n        observer.error(new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers\n        }));\n        return;\n      }\n      const headers = new HttpHeaders(response.headers);\n      const statusText = response.statusText;\n      const url = getResponseUrl$1(response) ?? request.urlWithParams;\n      let status = response.status;\n      let body = null;\n      if (request.reportProgress) {\n        observer.next(new HttpHeaderResponse({\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n      if (response.body) {\n        // Read Progress\n        const contentLength = response.headers.get('content-length');\n        const chunks = [];\n        const reader = response.body.getReader();\n        let receivedLength = 0;\n        let decoder;\n        let partialText;\n        // We have to check whether the Zone is defined in the global scope because this may be called\n        // when the zone is nooped.\n        const reqZone = typeof Zone !== 'undefined' && Zone.current;\n        let canceled = false;\n        // Perform response processing outside of Angular zone to\n        // ensure no excessive change detection runs are executed\n        // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n        yield _this.ngZone.runOutsideAngular(/*#__PURE__*/_asyncToGenerator(function* () {\n          while (true) {\n            // Prevent reading chunks if the app is destroyed. Otherwise, we risk doing\n            // unnecessary work or triggering side effects after teardown.\n            // This may happen if the app was explicitly destroyed before\n            // the response returned entirely.\n            if (_this.destroyed) {\n              // Streams left in a pending state (due to `break` without cancel) may\n              // continue consuming or holding onto data behind the scenes.\n              // Calling `reader.cancel()` allows the browser or the underlying\n              // system to release any network or memory resources associated with the stream.\n              yield reader.cancel();\n              canceled = true;\n              break;\n            }\n            const {\n              done,\n              value\n            } = yield reader.read();\n            if (done) {\n              break;\n            }\n            chunks.push(value);\n            receivedLength += value.length;\n            if (request.reportProgress) {\n              partialText = request.responseType === 'text' ? (partialText ?? '') + (decoder ??= new TextDecoder()).decode(value, {\n                stream: true\n              }) : undefined;\n              const reportProgress = () => observer.next({\n                type: HttpEventType.DownloadProgress,\n                total: contentLength ? +contentLength : undefined,\n                loaded: receivedLength,\n                partialText\n              });\n              reqZone ? reqZone.run(reportProgress) : reportProgress();\n            }\n          }\n        }));\n        // We need to manage the canceled state — because the Streams API does not\n        // expose a direct `.state` property on the reader.\n        // We need to `return` because `parseBody` may not be able to parse chunks\n        // that were only partially read (due to cancellation caused by app destruction).\n        if (canceled) {\n          observer.complete();\n          return;\n        }\n        // Combine all chunks.\n        const chunksAll = _this.concatChunks(chunks, receivedLength);\n        try {\n          const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\n          body = _this.parseBody(request, chunksAll, contentType);\n        } catch (error) {\n          // Body loading or parsing failed\n          observer.error(new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: getResponseUrl$1(response) ?? request.urlWithParams\n          }));\n          return;\n        }\n      }\n      // Same behavior as the XhrBackend\n      if (status === 0) {\n        status = body ? HTTP_STATUS_CODE_OK : 0;\n      }\n      // ok determines whether the response will be transmitted on the event or\n      // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n      // but a successful status code can still result in an error if the user\n      // asked for JSON data and the body cannot be parsed as such.\n      const ok = status >= 200 && status < 300;\n      if (ok) {\n        observer.next(new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n        // The full body has been received and delivered, no further events\n        // are possible. This request is complete.\n        observer.complete();\n      } else {\n        observer.error(new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n    })();\n  }\n  parseBody(request, binContent, contentType) {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n        return text === '' ? null : JSON.parse(text);\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent], {\n          type: contentType\n        });\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n  createRequestInit(req) {\n    // We could share some of this logic with the XhrBackend\n    const headers = {};\n    const credentials = req.withCredentials ? 'include' : undefined;\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => headers[name] = values.join(','));\n    // Add an Accept header if one isn't present already.\n    if (!req.headers.has(ACCEPT_HEADER)) {\n      headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\n    }\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers[CONTENT_TYPE_HEADER] = detectedType;\n      }\n    }\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n      keepalive: req.keepalive\n    };\n  }\n  concatChunks(chunks, totalLength) {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n    return chunksAll;\n  }\n  static ɵfac = function FetchBackend_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FetchBackend)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FetchBackend,\n    factory: FetchBackend.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FetchBackend, [{\n    type: Injectable\n  }], () => [], null);\n})();\n/**\r\n * Abstract class to provide a mocked implementation of `fetch()`\r\n */\nclass FetchFactory {}\nfunction noop() {}\n/**\r\n * Zone.js treats a rejected promise that has not yet been awaited\r\n * as an unhandled error. This function adds a noop `.then` to make\r\n * sure that Zone.js doesn't throw an error if the Promise is rejected\r\n * synchronously.\r\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n  promise.then(noop, noop);\n}\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\r\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\r\n * `ChainedInterceptorFn` interface.\r\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n  });\n}\n/**\r\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\r\n * injector.\r\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n}\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\r\n * A multi-provided token of `HttpInterceptorFn`s.\r\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\r\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\r\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\n// Should HttpClient contribute to stability automatically at all?\nconst REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken(ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '', {\n  providedIn: 'root',\n  factory: () => true\n});\n/**\r\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\r\n * class-based interceptors and runs the request through it.\r\n */\nfunction legacyInterceptorFnFactory() {\n  let chain = null;\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      }) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n    const pendingTasks = inject(PendingTasks);\n    const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n    if (contributeToStability) {\n      const removeTask = pendingTasks.add();\n      return chain(req, handler).pipe(finalize(removeTask));\n    } else {\n      return chain(req, handler);\n    }\n  };\n}\nlet fetchBackendWarningDisplayed = false;\nclass HttpInterceptorHandler extends HttpHandler {\n  backend;\n  injector;\n  chain = null;\n  pendingTasks = inject(PendingTasks);\n  contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n  constructor(backend, injector) {\n    super();\n    this.backend = backend;\n    this.injector = injector;\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      // This flag is necessary because provideHttpClientTesting() overrides the backend\n      // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n      // no HTTP calls are actually performed during the test, so producing a warning would be\n      // misleading.\n      const isTestingBackend = this.backend.isTestingBackend;\n      if (typeof ngServerMode !== 'undefined' && ngServerMode && !(this.backend instanceof FetchBackend) && !isTestingBackend) {\n        fetchBackendWarningDisplayed = true;\n        injector.get(_Console).warn(_formatRuntimeError(2801 /* RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR */, 'Angular detected that `HttpClient` is not configured ' + \"to use `fetch` APIs. It's strongly recommended to \" + 'enable `fetch` for applications that use Server-Side Rendering ' + 'for better performance and compatibility. ' + 'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' + 'call at the root of the application.'));\n      }\n    }\n  }\n  handle(initialRequest) {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([...this.injector.get(HTTP_INTERCEPTOR_FNS), ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])]));\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n    }\n    if (this.contributeToStability) {\n      const removeTask = this.pendingTasks.add();\n      return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest)).pipe(finalize(removeTask));\n    } else {\n      return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n    }\n  }\n  static ɵfac = function HttpInterceptorHandler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpInterceptorHandler)(i0.ɵɵinject(HttpBackend), i0.ɵɵinject(i0.EnvironmentInjector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpInterceptorHandler,\n    factory: HttpInterceptorHandler.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpInterceptorHandler, [{\n    type: Injectable\n  }], () => [{\n    type: HttpBackend\n  }, {\n    type: i0.EnvironmentInjector\n  }], null);\n})();\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\r\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\r\n * executed.\r\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\nclass JsonpCallbackContext {}\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see {@link HttpHandler}\r\n * @see {@link HttpXhrBackend}\r\n *\r\n * @publicApi\r\n */\nclass JsonpClientBackend {\n  callbackMap;\n  document;\n  /**\r\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n   */\n  resolvedPromise = Promise.resolve();\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n  }\n  /**\r\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n   */\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\r\n   * Processes a JSONP request and returns an event stream of the results.\r\n   * @param req The request object.\r\n   * @returns An observable of the response events.\r\n   *\r\n   */\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new _RuntimeError(2810 /* RuntimeErrorCode.JSONP_WRONG_METHOD */, ngDevMode && JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new _RuntimeError(2811 /* RuntimeErrorCode.JSONP_WRONG_RESPONSE_TYPE */, ngDevMode && JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new _RuntimeError(2812 /* RuntimeErrorCode.JSONP_HEADERS_NOT_SUPPORTED */, ngDevMode && JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n    // Everything else happens inside the Observable boundary.\n    return new Observable(observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n      let body = null;\n      // Whether the response callback has been called.\n      let finished = false;\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n        // Remove the <script> tag if it's still on the page.\n        node.remove();\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = () => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK)\n            }));\n            return;\n          }\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HTTP_STATUS_CODE_OK,\n            statusText: 'OK',\n            url\n          }));\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError = error => {\n        cleanup();\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      };\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n      // The request has now been successfully sent.\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n  removeListeners(script) {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    foreignDocument ??= this.document.implementation.createHTMLDocument();\n    foreignDocument.adoptNode(script);\n  }\n  static ɵfac = function JsonpClientBackend_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || JsonpClientBackend)(i0.ɵɵinject(JsonpCallbackContext), i0.ɵɵinject(DOCUMENT));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: JsonpClientBackend,\n    factory: JsonpClientBackend.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], () => [{\n    type: JsonpCallbackContext\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }], null);\n})();\n/**\r\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\r\n */\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  }\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see {@link HttpInterceptor}\r\n *\r\n * @publicApi\r\n */\nclass JsonpInterceptor {\n  injector;\n  constructor(injector) {\n    this.injector = injector;\n  }\n  /**\r\n   * Identifies and handles a given JSONP request.\r\n   * @param initialRequest The outgoing request object to handle.\r\n   * @param next The next interceptor in the chain, or the backend\r\n   * if no interceptors remain in the chain.\r\n   * @returns An observable of the event stream.\r\n   */\n  intercept(initialRequest, next) {\n    return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n  static ɵfac = function JsonpInterceptor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || JsonpInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: JsonpInterceptor,\n    factory: JsonpInterceptor.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], () => [{\n    type: i0.EnvironmentInjector\n  }], null);\n})();\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\nconst X_REQUEST_URL_REGEXP = RegExp(`^${X_REQUEST_URL_HEADER}:`, 'm');\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (X_REQUEST_URL_REGEXP.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader(X_REQUEST_URL_HEADER);\n  }\n  return null;\n}\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see {@link HttpHandler}\r\n * @see {@link JsonpClientBackend}\r\n *\r\n * @publicApi\r\n */\nclass HttpXhrBackend {\n  xhrFactory;\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\r\n   * Processes a request and returns a stream of response events.\r\n   * @param req The request object.\r\n   * @returns An observable of the response events.\r\n   */\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new _RuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n    }\n    if (req.keepalive && ngDevMode) {\n      console.warn(_formatRuntimeError(2813 /* RuntimeErrorCode.KEEPALIVE_NOT_SUPPORTED_WITH_XHR */, `Angular detected that a \\`HttpClient\\` request with the \\`keepalive\\` option was sent using XHR, which does not support it. To use the \\`keepalive\\` option, enable Fetch API support by passing \\`withFetch()\\` as an argument to \\`provideHttpClient()\\`.`));\n    }\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory = this.xhrFactory;\n    const source =\n    // Note that `ɵloadImpl` is never defined in client bundles and can be\n    // safely dropped whenever we're running in the browser.\n    // This branching is redundant.\n    // The `ngServerMode` guard also enables tree-shaking of the `from()`\n    // function from the common bundle, as it's only used in server code.\n    typeof ngServerMode !== 'undefined' && ngServerMode && xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n    return source.pipe(switchMap(() => {\n      // Everything happens on Observable subscription.\n      return new Observable(observer => {\n        // Start by setting up the XHR object with request method, URL, and withCredentials\n        // flag.\n        const xhr = xhrFactory.build();\n        xhr.open(req.method, req.urlWithParams);\n        if (req.withCredentials) {\n          xhr.withCredentials = true;\n        }\n        // Add all the requested headers.\n        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n        // Add an Accept header if one isn't present already.\n        if (!req.headers.has(ACCEPT_HEADER)) {\n          xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\n        }\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n          const detectedType = req.detectContentTypeHeader();\n          // Sometimes Content-Type detection fails.\n          if (detectedType !== null) {\n            xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\n          }\n        }\n        // Set the responseType if one was requested.\n        if (req.responseType) {\n          const responseType = req.responseType.toLowerCase();\n          // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        }\n        // Serialize the request body if one is present. If not, this will be set to null.\n        const reqBody = req.serializeBody();\n        // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n        let headerResponse = null;\n        // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n        const partialFromXhr = () => {\n          if (headerResponse !== null) {\n            return headerResponse;\n          }\n          const statusText = xhr.statusText || 'OK';\n          // Parse headers from XMLHttpRequest - this step is lazy.\n          const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n          // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n          const url = getResponseUrl(xhr) || req.url;\n          // Construct the HttpHeaderResponse and memoize it.\n          headerResponse = new HttpHeaderResponse({\n            headers,\n            status: xhr.status,\n            statusText,\n            url\n          });\n          return headerResponse;\n        };\n        // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n        const onLoad = () => {\n          // Read response state from the memoized partial data.\n          let {\n            headers,\n            status,\n            statusText,\n            url\n          } = partialFromXhr();\n          // The body will be read out if present.\n          let body = null;\n          if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          }\n          // Normalize another potential bug (this one comes from CORS).\n          if (status === 0) {\n            status = !!body ? HTTP_STATUS_CODE_OK : 0;\n          }\n          // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n          let ok = status >= 200 && status < 300;\n          // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            const originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the\n              // user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have\n              // been a JSON response. Restore the original body (including any XSSI prefix)\n              // to deliver a better error response.\n              body = originalBody;\n              // If this was an error request to begin with, leave it as a string, it\n              // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false;\n                // The parse error contains the text of the body that failed to parse.\n                body = {\n                  error,\n                  text: body\n                };\n              }\n            }\n          }\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            }));\n          }\n        };\n        // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n        const onError = error => {\n          const {\n            url\n          } = partialFromXhr();\n          const res = new HttpErrorResponse({\n            error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        };\n        // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progress event.\n        let sentHeaders = false;\n        // The download progress event handler, which is only registered if\n        // progress events are enabled.\n        const onDownProgress = event => {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          }\n          // Start building the download progress event to deliver on the response\n          // event stream.\n          let progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          };\n          // Set the total number of bytes in the event if it's available.\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          }\n          // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          }\n          // Finally, fire the event.\n          observer.next(progressEvent);\n        };\n        // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n        const onUpProgress = event => {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          let progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          };\n          // If the total number of bytes being uploaded is available, include\n          // it.\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          }\n          // Send the event.\n          observer.next(progress);\n        };\n        // By default, register for load and error events.\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError);\n        // Progress events are only enabled if requested.\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress);\n          // Upload progress depends on whether there is a body to upload.\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        }\n        // Fire the request, and notify the event stream that it was fired.\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        // This is the return from the Observable function, which is the\n        // request cancellation handler.\n        return () => {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          }\n          // Finally, abort the in-flight request.\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }));\n  }\n  static ɵfac = function HttpXhrBackend_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpXhrBackend)(i0.ɵɵinject(XhrFactory));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpXhrBackend,\n    factory: HttpXhrBackend.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], () => [{\n    type: XhrFactory\n  }], null);\n})();\nconst XSRF_ENABLED = new InjectionToken(ngDevMode ? 'XSRF_ENABLED' : '');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME\n});\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\nclass HttpXsrfTokenExtractor {}\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\nclass HttpXsrfCookieExtractor {\n  doc;\n  cookieName;\n  lastCookieString = '';\n  lastToken = null;\n  /**\r\n   * @internal for testing\r\n   */\n  parseCount = 0;\n  constructor(doc, cookieName) {\n    this.doc = doc;\n    this.cookieName = cookieName;\n  }\n  getToken() {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n  static ɵfac = function HttpXsrfCookieExtractor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpXsrfCookieExtractor)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(XSRF_COOKIE_NAME));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpXsrfCookieExtractor,\n    factory: HttpXsrfCookieExtractor.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [XSRF_COOKIE_NAME]\n    }]\n  }], null);\n})();\nfunction xsrfInterceptorFn(req, next) {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n  return next(req);\n}\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\nclass HttpXsrfInterceptor {\n  injector;\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(initialRequest, next) {\n    return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n  static ɵfac = function HttpXsrfInterceptor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpXsrfInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HttpXsrfInterceptor,\n    factory: HttpXsrfInterceptor.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], () => [{\n    type: i0.EnvironmentInjector\n  }], null);\n})();\n\n/**\r\n * Identifies a particular kind of `HttpFeature`.\r\n *\r\n * @publicApi\r\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n  HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\r\n * Configures Angular's `HttpClient` service to be available for injection.\r\n *\r\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\r\n * protection of outgoing requests. Additional configuration options can be provided by passing\r\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\r\n * `withInterceptors(...)` feature.\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n * It's strongly recommended to enable\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\r\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\r\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\r\n *\r\n * ```ts\r\n * provideHttpClient(withFetch());\r\n * ```\r\n *\r\n * </div>\r\n *\r\n * @see {@link withInterceptors}\r\n * @see {@link withInterceptorsFromDi}\r\n * @see {@link withXsrfConfiguration}\r\n * @see {@link withNoXsrfProtection}\r\n * @see {@link withJsonpSupport}\r\n * @see {@link withRequestsMadeViaParent}\r\n * @see {@link withFetch}\r\n */\nfunction provideHttpClient(...features) {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');\n    }\n  }\n  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useFactory: () => {\n      return inject(FETCH_BACKEND, {\n        optional: true\n      }) ?? inject(HttpXhrBackend);\n    }\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\r\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\r\n * instance.\r\n *\r\n * @see {@link HttpInterceptorFn}\r\n * @see {@link provideHttpClient}\r\n * @publicApi\r\n */\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken(ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '');\n/**\r\n * Includes class-based interceptors configured using a multi-provider in the current injector into\r\n * the configured `HttpClient` instance.\r\n *\r\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\r\n * interceptors may be phased out in a later release.\r\n *\r\n * @see {@link HttpInterceptor}\r\n * @see {@link HTTP_INTERCEPTORS}\r\n * @see {@link provideHttpClient}\r\n */\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\r\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withNoXsrfProtection` feature.\r\n *\r\n * @see {@link provideHttpClient}\r\n */\nfunction withXsrfConfiguration({\n  cookieName,\n  headerName\n}) {\n  const providers = [];\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\r\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withXsrfConfiguration` feature.\r\n *\r\n * @see {@link provideHttpClient}\r\n */\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\r\n * Add JSONP support to the configuration of the current `HttpClient` instance.\r\n *\r\n * @see {@link provideHttpClient}\r\n */\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\r\n * Configures the current `HttpClient` instance to make requests via the parent injector's\r\n * `HttpClient` instead of directly.\r\n *\r\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\r\n * instance. For example, even if `HttpClient` is configured in the parent injector with\r\n * one or more interceptors, they will not intercept requests made via this instance.\r\n *\r\n * With this option enabled, once the request has passed through the current injector's\r\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\r\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\r\n *\r\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\r\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\r\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\r\n * this option.\r\n *\r\n * @see {@link provideHttpClient}\r\n * @publicApi 19.0\r\n */\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: () => {\n      const handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n      return handlerFromParent;\n    }\n  }]);\n}\n/**\r\n * Configures the current `HttpClient` instance to make requests using the fetch API.\r\n *\r\n * Note: The Fetch API doesn't support progress report on uploads.\r\n *\r\n * @publicApi\r\n */\nfunction withFetch() {\n  return makeHttpFeature(HttpFeatureKind.Fetch, [FetchBackend, {\n    provide: FETCH_BACKEND,\n    useExisting: FetchBackend\n  }, {\n    provide: HttpBackend,\n    useExisting: FetchBackend\n  }]);\n}\n\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\r\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\r\n */\nclass HttpClientXsrfModule {\n  /**\r\n   * Disable the default XSRF protection.\r\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().ɵproviders]\n    };\n  }\n  /**\r\n   * Configure XSRF protection.\r\n   * @param options An object that can specify either or both\r\n   * cookie name or header name.\r\n   * - Cookie name default is `XSRF-TOKEN`.\r\n   * - Header name default is `X-XSRF-TOKEN`.\r\n   *\r\n   */\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders\n    };\n  }\n  static ɵfac = function HttpClientXsrfModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpClientXsrfModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HttpClientXsrfModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [HttpXsrfInterceptor, {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: HttpXsrfInterceptor,\n      multi: true\n    }, {\n      provide: HttpXsrfTokenExtractor,\n      useClass: HttpXsrfCookieExtractor\n    }, withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME\n    }).ɵproviders, {\n      provide: XSRF_ENABLED,\n      useValue: true\n    }]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).ɵproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Configures the dependency injector for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\r\n */\nclass HttpClientModule {\n  static ɵfac = function HttpClientModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpClientModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HttpClientModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideHttpClient(withInterceptorsFromDi())]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\r\n       * Configures the dependency injector where it is imported\r\n       * with supporting services for HTTP communications.\r\n       */\n      providers: [provideHttpClient(withInterceptorsFromDi())]\n    }]\n  }], null, null);\n})();\n/**\r\n * Configures the dependency injector for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * @publicApi\r\n * @deprecated `withJsonpSupport()` as providers instead\r\n */\nclass HttpClientJsonpModule {\n  static ɵfac = function HttpClientJsonpModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HttpClientJsonpModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HttpClientJsonpModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [withJsonpSupport().ɵproviders]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [withJsonpSupport().ɵproviders]\n    }]\n  }], null, null);\n})();\nexport { FetchBackend, HTTP_INTERCEPTORS, HTTP_ROOT_INTERCEPTOR_FNS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpInterceptorHandler, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, REQUESTS_CONTRIBUTE_TO_STABILITY, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration };","map":{"version":3,"names":["i0","ɵRuntimeError","_RuntimeError","Injectable","InjectionToken","inject","NgZone","DestroyRef","PendingTasks","ɵConsole","_Console","ɵformatRuntimeError","_formatRuntimeError","runInInjectionContext","DOCUMENT","Inject","makeEnvironmentProviders","NgModule","concatMap","filter","map","finalize","switchMap","of","Observable","from","XhrFactory","parseCookieValue","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyInit","lazyUpdate","constructor","split","forEach","line","index","indexOf","name","slice","value","trim","addHeaderEntry","Headers","ngDevMode","assertValidHeaders","Object","entries","values","setHeaderEntries","has","init","toLowerCase","get","length","keys","Array","getAll","append","clone","op","set","delete","maybeSetNormalizedName","lcName","copyFrom","update","applyUpdate","other","key","concat","base","undefined","push","toDelete","existing","headerValues","isArray","toString","fn","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","encoder","updates","cloneFrom","options","fromString","fromObject","res","appendAll","_value","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","CONTENT_TYPE_HEADER","ACCEPT_HEADER","X_REQUEST_URL_HEADER","TEXT_CONTENT_TYPE","JSON_CONTENT_TYPE","ACCEPT_HEADER_VALUE","HttpRequest","url","body","context","reportProgress","withCredentials","keepalive","responseType","urlWithParams","transferCache","third","fourth","toUpperCase","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","status","statusText","ok","defaultStatus","defaultStatusText","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","HTTP_STATUS_CODE_OK","HTTP_STATUS_CODE_NO_CONTENT","HttpStatusCode","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","__ngFactoryType__","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","ɵsetClassMetadata","XSSI_PREFIX$1","getResponseUrl$1","response","xRequestUrl","toLocaleLowerCase","FETCH_BACKEND","FetchBackend","fetchImpl","FetchFactory","optional","fetch","args","globalThis","ngZone","destroyRef","destroyed","onDestroy","observer","aborter","AbortController","doRequest","signal","then","noop","abort","_this","_asyncToGenerator","createRequestInit","fetchPromise","runOutsideAngular","silenceSuperfluousUnhandledPromiseRejection","next","Sent","contentLength","chunks","reader","getReader","receivedLength","decoder","partialText","reqZone","Zone","current","canceled","cancel","done","read","TextDecoder","decode","stream","DownloadProgress","total","loaded","run","complete","chunksAll","concatChunks","contentType","parseBody","binContent","text","parse","buffer","credentials","detectedType","totalLength","Uint8Array","position","chunk","FetchBackend_Factory","promise","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","REQUESTS_CONTRIBUTE_TO_STABILITY","providedIn","legacyInterceptorFnFactory","chain","interceptors","reduceRight","pendingTasks","contributeToStability","removeTask","add","fetchBackendWarningDisplayed","HttpInterceptorHandler","backend","isTestingBackend","ngServerMode","warn","dedupedInterceptorFns","Set","nextSequencedFn","HttpInterceptorHandler_Factory","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","callback","node","createElement","src","finished","data","cleanup","removeEventListener","onLoad","onError","remove","addEventListener","appendChild","removeListeners","script","implementation","createHTMLDocument","adoptNode","JsonpClientBackend_Factory","decorators","jsonpInterceptorFn","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","X_REQUEST_URL_REGEXP","RegExp","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","console","source","ɵloadImpl","build","open","setRequestHeader","reqBody","headerResponse","partialFromXhr","responseText","originalBody","sentHeaders","onDownProgress","progressEvent","lengthComputable","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","HttpXhrBackend_Factory","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfCookieExtractor_Factory","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpXsrfInterceptor_Factory","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useFactory","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","withFetch","Fetch","HttpClientXsrfModule","disable","ngModule","withOptions","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","HttpClientModule","HttpClientModule_Factory","HttpClientJsonpModule","HttpClientJsonpModule_Factory"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/common/fesm2022/module.mjs"],"sourcesContent":["/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport * as i0 from '@angular/core';\r\nimport { ɵRuntimeError as _RuntimeError, Injectable, InjectionToken, inject, NgZone, DestroyRef, PendingTasks, ɵConsole as _Console, ɵformatRuntimeError as _formatRuntimeError, runInInjectionContext, DOCUMENT, Inject, makeEnvironmentProviders, NgModule } from '@angular/core';\r\nimport { concatMap, filter, map, finalize, switchMap } from 'rxjs/operators';\r\nimport { of, Observable, from } from 'rxjs';\r\nimport { XhrFactory, parseCookieValue } from './xhr.mjs';\r\n\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**\r\n     * Internal map of lowercase header names to values.\r\n     */\r\n    headers;\r\n    /**\r\n     * Internal map of lowercased header names to the normalized\r\n     * form of the name (the form seen first).\r\n     */\r\n    normalizedNames = new Map();\r\n    /**\r\n     * Complete the lazy initialization of this object (needed before reading).\r\n     */\r\n    lazyInit;\r\n    /**\r\n     * Queued updates to be materialized the next initialization.\r\n     */\r\n    lazyUpdate = null;\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach((line) => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.addHeaderEntry(name, value);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\r\n            this.headers = new Map();\r\n            headers.forEach((value, name) => {\r\n                this.addHeaderEntry(name, value);\r\n            });\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                    assertValidHeaders(headers);\r\n                }\r\n                this.headers = new Map();\r\n                Object.entries(headers).forEach(([name, values]) => {\r\n                    this.setHeaderEntries(name, values);\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or override for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach((update) => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach((key) => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter((value) => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    addHeaderEntry(name, value) {\r\n        const key = name.toLowerCase();\r\n        this.maybeSetNormalizedName(name, key);\r\n        if (this.headers.has(key)) {\r\n            this.headers.get(key).push(value);\r\n        }\r\n        else {\r\n            this.headers.set(key, [value]);\r\n        }\r\n    }\r\n    setHeaderEntries(name, values) {\r\n        const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());\r\n        const key = name.toLowerCase();\r\n        this.headers.set(key, headerValues);\r\n        this.maybeSetNormalizedName(name, key);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys()).forEach((key) => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n/**\r\n * Verifies that the headers object has the right shape: the values\r\n * must be either strings, numbers or arrays. Throws an error if an invalid\r\n * header value is present.\r\n */\r\nfunction assertValidHeaders(headers) {\r\n    for (const [key, value] of Object.entries(headers)) {\r\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\r\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\r\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n        // may start with the `?` char, so we strip it if it's present.\r\n        const params = rawParams.replace(/^\\?/, '').split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1\r\n                ? [codec.decodeKey(param), '']\r\n                : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\n/**\r\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\r\n */\r\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\r\nconst STANDARD_ENCODING_REPLACEMENTS = {\r\n    '40': '@',\r\n    '3A': ':',\r\n    '24': '$',\r\n    '2C': ',',\r\n    '3B': ';',\r\n    '3D': '=',\r\n    '3F': '?',\r\n    '2F': '/',\r\n};\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\r\n}\r\nfunction valueToString(value) {\r\n    return `${value}`;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    map;\r\n    encoder;\r\n    updates = null;\r\n    cloneFrom = null;\r\n    constructor(options = {}) {\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (options.fromString) {\r\n            if (options.fromObject) {\r\n                throw new _RuntimeError(2805 /* RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT */, ngDevMode && 'Cannot specify both fromString and fromObject.');\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach((key) => {\r\n                const value = options.fromObject[key];\r\n                // convert the values to strings\r\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\r\n                this.map.set(key, values);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\r\n    appendAll(params) {\r\n        const updates = [];\r\n        Object.keys(params).forEach((param) => {\r\n            const value = params[param];\r\n            if (Array.isArray(value)) {\r\n                value.forEach((_value) => {\r\n                    updates.push({ param, value: _value, op: 'a' });\r\n                });\r\n            }\r\n            else {\r\n                updates.push({ param, value: value, op: 'a' });\r\n            }\r\n        });\r\n        return this.clone(updates);\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return (this.keys()\r\n            .map((key) => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key)\r\n                .map((value) => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter((param) => param !== '')\r\n            .join('&'));\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat(update);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach((key) => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach((update) => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(valueToString(update.value));\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(valueToString(update.value));\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContextToken {\r\n    defaultValue;\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n}\r\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```ts\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContext {\r\n    map = new Map();\r\n    /**\r\n     * Store a value in the context. If a value is already present it will be overwritten.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     * @param value The value to store.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    set(token, value) {\r\n        this.map.set(token, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\r\n    get(token) {\r\n        if (!this.map.has(token)) {\r\n            this.map.set(token, token.defaultValue());\r\n        }\r\n        return this.map.get(token);\r\n    }\r\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    delete(token) {\r\n        this.map.delete(token);\r\n        return this;\r\n    }\r\n    /**\r\n     * Checks for existence of a given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns True if the token exists, false otherwise.\r\n     */\r\n    has(token) {\r\n        return this.map.has(token);\r\n    }\r\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\r\n    keys() {\r\n        return this.map.keys();\r\n    }\r\n}\r\n\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\r\nfunction isUrlSearchParams(value) {\r\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\r\n}\r\n/**\r\n * `Content-Type` is an HTTP header used to indicate the media type\r\n * (also known as MIME type) of the resource being sent to the client\r\n * or received from the server.\r\n */\r\nconst CONTENT_TYPE_HEADER = 'Content-Type';\r\n/**\r\n * The `Accept` header is an HTTP request header that indicates the media types\r\n * (or content types) the client is willing to receive from the server.\r\n */\r\nconst ACCEPT_HEADER = 'Accept';\r\n/**\r\n * `X-Request-URL` is a custom HTTP header used in older browser versions,\r\n * including Firefox (< 32), Chrome (< 37), Safari (< 8), and Internet Explorer,\r\n * to include the full URL of the request in cross-origin requests.\r\n */\r\nconst X_REQUEST_URL_HEADER = 'X-Request-URL';\r\n/**\r\n * `text/plain` is a content type used to indicate that the content being\r\n * sent is plain text with no special formatting or structured data\r\n * like HTML, XML, or JSON.\r\n */\r\nconst TEXT_CONTENT_TYPE = 'text/plain';\r\n/**\r\n * `application/json` is a content type used to indicate that the content\r\n * being sent is in the JSON format.\r\n */\r\nconst JSON_CONTENT_TYPE = 'application/json';\r\n/**\r\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\r\n * Accept header of HTTP requests. It indicates the types of content the client is willing\r\n * to accept from the server, with a preference for `application/json` and `text/plain`,\r\n * but also accepting any other type (*\\/*).\r\n */\r\nconst ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    url;\r\n    /**\r\n     * The request body, or `null` if one isn't set.\r\n     *\r\n     * Bodies are not enforced to be immutable, as they can include a reference to any\r\n     * user-defined data type. However, interceptors should take care to preserve\r\n     * idempotence by treating them as such.\r\n     */\r\n    body = null;\r\n    /**\r\n     * Outgoing headers for this request.\r\n     */\r\n    headers;\r\n    /**\r\n     * Shared and mutable context that can be used by interceptors\r\n     */\r\n    context;\r\n    /**\r\n     * Whether this request should be made in a way that exposes progress events.\r\n     *\r\n     * Progress events are expensive (change detection runs on each event) and so\r\n     * they should only be requested if the consumer intends to monitor them.\r\n     *\r\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\r\n     */\r\n    reportProgress = false;\r\n    /**\r\n     * Whether this request should be sent with outgoing credentials (cookies).\r\n     */\r\n    withCredentials = false;\r\n    /**\r\n     * When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\r\n     */\r\n    keepalive = false;\r\n    /**\r\n     * The expected response type of the server.\r\n     *\r\n     * This is used to parse the response appropriately before returning it to\r\n     * the requestee.\r\n     */\r\n    responseType = 'json';\r\n    /**\r\n     * The outgoing HTTP request method.\r\n     */\r\n    method;\r\n    /**\r\n     * Outgoing URL parameters.\r\n     *\r\n     * To pass a string representation of HTTP parameters in the URL-query-string format,\r\n     * the `HttpParamsOptions`' `fromString` may be used. For example:\r\n     *\r\n     * ```ts\r\n     * new HttpParams({fromString: 'angular=awesome'})\r\n     * ```\r\n     */\r\n    params;\r\n    /**\r\n     * The outgoing URL with all URL parameters set.\r\n     */\r\n    urlWithParams;\r\n    /**\r\n     * The HttpTransferCache option for the request\r\n     */\r\n    transferCache;\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = third !== undefined ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            this.keepalive = !!options.keepalive;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.context) {\r\n                this.context = options.context;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n            // We do want to assign transferCache even if it's falsy (false is valid value)\r\n            this.transferCache = options.transferCache;\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        this.headers ??= new HttpHeaders();\r\n        // If no context have been passed in, construct a new HttpContext instance.\r\n        this.context ??= new HttpContext();\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (typeof this.body === 'string' ||\r\n            isArrayBuffer(this.body) ||\r\n            isBlob(this.body) ||\r\n            isFormData(this.body) ||\r\n            isUrlSearchParams(this.body)) {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' ||\r\n            typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return TEXT_CONTENT_TYPE;\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' ||\r\n            typeof this.body === 'number' ||\r\n            typeof this.body === 'boolean') {\r\n            return JSON_CONTENT_TYPE;\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        const keepalive = update.keepalive ?? this.keepalive;\r\n        // Carefully handle the transferCache to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const transferCache = update.transferCache ?? this.transferCache;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = update.body !== undefined ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = update.withCredentials ?? this.withCredentials;\r\n        const reportProgress = update.reportProgress ?? this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Pass on context if needed\r\n        const context = update.context ?? this.context;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            context,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n            transferCache,\r\n            keepalive,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     *\r\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * All response headers.\r\n     */\r\n    headers;\r\n    /**\r\n     * Response status code.\r\n     */\r\n    status;\r\n    /**\r\n     * Textual description of response status code, defaults to OK.\r\n     *\r\n     * Do not depend on this.\r\n     */\r\n    statusText;\r\n    /**\r\n     * URL of the resource retrieved, or null if not available.\r\n     */\r\n    url;\r\n    /**\r\n     * Whether the status code falls in the 2xx range.\r\n     */\r\n    ok;\r\n    /**\r\n     * Type of the response, narrowed to either the full response or the header.\r\n     */\r\n    type;\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n    }\r\n    type = HttpEventType.ResponseHeader;\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * The response body, or `null` if one was not returned.\r\n     */\r\n    body;\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    type = HttpEventType.Response;\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: update.body !== undefined ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    name = 'HttpErrorResponse';\r\n    message;\r\n    error;\r\n    /**\r\n     * Errors are never okay, even when the status code is in the 2xx success range.\r\n     */\r\n    ok = false;\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n/**\r\n * We use these constant to prevent pulling the whole HttpStatusCode enum\r\n * Those are the only ones referenced directly by the framework\r\n */\r\nconst HTTP_STATUS_CODE_OK = 200;\r\nconst HTTP_STATUS_CODE_NO_CONTENT = 204;\r\n/**\r\n * Http status codes.\r\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\r\n * @publicApi\r\n */\r\nvar HttpStatusCode;\r\n(function (HttpStatusCode) {\r\n    HttpStatusCode[HttpStatusCode[\"Continue\"] = 100] = \"Continue\";\r\n    HttpStatusCode[HttpStatusCode[\"SwitchingProtocols\"] = 101] = \"SwitchingProtocols\";\r\n    HttpStatusCode[HttpStatusCode[\"Processing\"] = 102] = \"Processing\";\r\n    HttpStatusCode[HttpStatusCode[\"EarlyHints\"] = 103] = \"EarlyHints\";\r\n    HttpStatusCode[HttpStatusCode[\"Ok\"] = 200] = \"Ok\";\r\n    HttpStatusCode[HttpStatusCode[\"Created\"] = 201] = \"Created\";\r\n    HttpStatusCode[HttpStatusCode[\"Accepted\"] = 202] = \"Accepted\";\r\n    HttpStatusCode[HttpStatusCode[\"NonAuthoritativeInformation\"] = 203] = \"NonAuthoritativeInformation\";\r\n    HttpStatusCode[HttpStatusCode[\"NoContent\"] = 204] = \"NoContent\";\r\n    HttpStatusCode[HttpStatusCode[\"ResetContent\"] = 205] = \"ResetContent\";\r\n    HttpStatusCode[HttpStatusCode[\"PartialContent\"] = 206] = \"PartialContent\";\r\n    HttpStatusCode[HttpStatusCode[\"MultiStatus\"] = 207] = \"MultiStatus\";\r\n    HttpStatusCode[HttpStatusCode[\"AlreadyReported\"] = 208] = \"AlreadyReported\";\r\n    HttpStatusCode[HttpStatusCode[\"ImUsed\"] = 226] = \"ImUsed\";\r\n    HttpStatusCode[HttpStatusCode[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\r\n    HttpStatusCode[HttpStatusCode[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\r\n    HttpStatusCode[HttpStatusCode[\"Found\"] = 302] = \"Found\";\r\n    HttpStatusCode[HttpStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\r\n    HttpStatusCode[HttpStatusCode[\"NotModified\"] = 304] = \"NotModified\";\r\n    HttpStatusCode[HttpStatusCode[\"UseProxy\"] = 305] = \"UseProxy\";\r\n    HttpStatusCode[HttpStatusCode[\"Unused\"] = 306] = \"Unused\";\r\n    HttpStatusCode[HttpStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\r\n    HttpStatusCode[HttpStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\r\n    HttpStatusCode[HttpStatusCode[\"BadRequest\"] = 400] = \"BadRequest\";\r\n    HttpStatusCode[HttpStatusCode[\"Unauthorized\"] = 401] = \"Unauthorized\";\r\n    HttpStatusCode[HttpStatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\r\n    HttpStatusCode[HttpStatusCode[\"Forbidden\"] = 403] = \"Forbidden\";\r\n    HttpStatusCode[HttpStatusCode[\"NotFound\"] = 404] = \"NotFound\";\r\n    HttpStatusCode[HttpStatusCode[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\r\n    HttpStatusCode[HttpStatusCode[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\r\n    HttpStatusCode[HttpStatusCode[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\r\n    HttpStatusCode[HttpStatusCode[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\r\n    HttpStatusCode[HttpStatusCode[\"Conflict\"] = 409] = \"Conflict\";\r\n    HttpStatusCode[HttpStatusCode[\"Gone\"] = 410] = \"Gone\";\r\n    HttpStatusCode[HttpStatusCode[\"LengthRequired\"] = 411] = \"LengthRequired\";\r\n    HttpStatusCode[HttpStatusCode[\"PreconditionFailed\"] = 412] = \"PreconditionFailed\";\r\n    HttpStatusCode[HttpStatusCode[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\r\n    HttpStatusCode[HttpStatusCode[\"UriTooLong\"] = 414] = \"UriTooLong\";\r\n    HttpStatusCode[HttpStatusCode[\"UnsupportedMediaType\"] = 415] = \"UnsupportedMediaType\";\r\n    HttpStatusCode[HttpStatusCode[\"RangeNotSatisfiable\"] = 416] = \"RangeNotSatisfiable\";\r\n    HttpStatusCode[HttpStatusCode[\"ExpectationFailed\"] = 417] = \"ExpectationFailed\";\r\n    HttpStatusCode[HttpStatusCode[\"ImATeapot\"] = 418] = \"ImATeapot\";\r\n    HttpStatusCode[HttpStatusCode[\"MisdirectedRequest\"] = 421] = \"MisdirectedRequest\";\r\n    HttpStatusCode[HttpStatusCode[\"UnprocessableEntity\"] = 422] = \"UnprocessableEntity\";\r\n    HttpStatusCode[HttpStatusCode[\"Locked\"] = 423] = \"Locked\";\r\n    HttpStatusCode[HttpStatusCode[\"FailedDependency\"] = 424] = \"FailedDependency\";\r\n    HttpStatusCode[HttpStatusCode[\"TooEarly\"] = 425] = \"TooEarly\";\r\n    HttpStatusCode[HttpStatusCode[\"UpgradeRequired\"] = 426] = \"UpgradeRequired\";\r\n    HttpStatusCode[HttpStatusCode[\"PreconditionRequired\"] = 428] = \"PreconditionRequired\";\r\n    HttpStatusCode[HttpStatusCode[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\r\n    HttpStatusCode[HttpStatusCode[\"RequestHeaderFieldsTooLarge\"] = 431] = \"RequestHeaderFieldsTooLarge\";\r\n    HttpStatusCode[HttpStatusCode[\"UnavailableForLegalReasons\"] = 451] = \"UnavailableForLegalReasons\";\r\n    HttpStatusCode[HttpStatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\r\n    HttpStatusCode[HttpStatusCode[\"NotImplemented\"] = 501] = \"NotImplemented\";\r\n    HttpStatusCode[HttpStatusCode[\"BadGateway\"] = 502] = \"BadGateway\";\r\n    HttpStatusCode[HttpStatusCode[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\r\n    HttpStatusCode[HttpStatusCode[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\r\n    HttpStatusCode[HttpStatusCode[\"HttpVersionNotSupported\"] = 505] = \"HttpVersionNotSupported\";\r\n    HttpStatusCode[HttpStatusCode[\"VariantAlsoNegotiates\"] = 506] = \"VariantAlsoNegotiates\";\r\n    HttpStatusCode[HttpStatusCode[\"InsufficientStorage\"] = 507] = \"InsufficientStorage\";\r\n    HttpStatusCode[HttpStatusCode[\"LoopDetected\"] = 508] = \"LoopDetected\";\r\n    HttpStatusCode[HttpStatusCode[\"NotExtended\"] = 510] = \"NotExtended\";\r\n    HttpStatusCode[HttpStatusCode[\"NetworkAuthenticationRequired\"] = 511] = \"NetworkAuthenticationRequired\";\r\n})(HttpStatusCode || (HttpStatusCode = {}));\r\n\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        context: options.context,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n        transferCache: options.transferCache,\r\n        keepalive: options.keepalive,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n * @usageNotes\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```ts\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```ts\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```ts\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```ts\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    handler;\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\r\n                headers,\r\n                context: options.context,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n                transferCache: options.transferCache,\r\n                keepalive: options.keepalive,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = (events$.pipe(filter((event) => event instanceof HttpResponse)));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new _RuntimeError(2806 /* RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER */, ngDevMode && 'Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new _RuntimeError(2807 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB */, ngDevMode && 'Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new _RuntimeError(2808 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING */, ngDevMode && 'Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new _RuntimeError(2809 /* RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE */, ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClient });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClient, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: HttpHandler }] });\r\n\r\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * response url or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl$1(response) {\r\n    if (response.url) {\r\n        return response.url;\r\n    }\r\n    // stored as lowercase in the map\r\n    const xRequestUrl = X_REQUEST_URL_HEADER.toLocaleLowerCase();\r\n    return response.headers.get(xRequestUrl);\r\n}\r\n/**\r\n * An internal injection token to reference `FetchBackend` implementation\r\n * in a tree-shakable way.\r\n */\r\nconst FETCH_BACKEND = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '');\r\n/**\r\n * Uses `fetch` to send requests to a backend server.\r\n *\r\n * This `FetchBackend` requires the support of the\r\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\r\n * supported browsers and on Node.js v18 or later.\r\n *\r\n * @see {@link HttpHandler}\r\n *\r\n * @publicApi\r\n */\r\nclass FetchBackend {\r\n    // We use an arrow function to always reference the current global implementation of `fetch`.\r\n    // This is helpful for cases when the global `fetch` implementation is modified by external code,\r\n    // see https://github.com/angular/angular/issues/57527.\r\n    fetchImpl = inject(FetchFactory, { optional: true })?.fetch ?? ((...args) => globalThis.fetch(...args));\r\n    ngZone = inject(NgZone);\r\n    destroyRef = inject(DestroyRef);\r\n    destroyed = false;\r\n    constructor() {\r\n        this.destroyRef.onDestroy(() => {\r\n            this.destroyed = true;\r\n        });\r\n    }\r\n    handle(request) {\r\n        return new Observable((observer) => {\r\n            const aborter = new AbortController();\r\n            this.doRequest(request, aborter.signal, observer).then(noop, (error) => observer.error(new HttpErrorResponse({ error })));\r\n            return () => aborter.abort();\r\n        });\r\n    }\r\n    async doRequest(request, signal, observer) {\r\n        const init = this.createRequestInit(request);\r\n        let response;\r\n        try {\r\n            // Run fetch outside of Angular zone.\r\n            // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\r\n            // the response should eventually timeout which causes extra CD cycles every 500ms\r\n            const fetchPromise = this.ngZone.runOutsideAngular(() => this.fetchImpl(request.urlWithParams, { signal, ...init }));\r\n            // Make sure Zone.js doesn't trigger false-positive unhandled promise\r\n            // error in case the Promise is rejected synchronously. See function\r\n            // description for additional information.\r\n            silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\r\n            // Send the `Sent` event before awaiting the response.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            response = await fetchPromise;\r\n        }\r\n        catch (error) {\r\n            observer.error(new HttpErrorResponse({\r\n                error,\r\n                status: error.status ?? 0,\r\n                statusText: error.statusText,\r\n                url: request.urlWithParams,\r\n                headers: error.headers,\r\n            }));\r\n            return;\r\n        }\r\n        const headers = new HttpHeaders(response.headers);\r\n        const statusText = response.statusText;\r\n        const url = getResponseUrl$1(response) ?? request.urlWithParams;\r\n        let status = response.status;\r\n        let body = null;\r\n        if (request.reportProgress) {\r\n            observer.next(new HttpHeaderResponse({ headers, status, statusText, url }));\r\n        }\r\n        if (response.body) {\r\n            // Read Progress\r\n            const contentLength = response.headers.get('content-length');\r\n            const chunks = [];\r\n            const reader = response.body.getReader();\r\n            let receivedLength = 0;\r\n            let decoder;\r\n            let partialText;\r\n            // We have to check whether the Zone is defined in the global scope because this may be called\r\n            // when the zone is nooped.\r\n            const reqZone = typeof Zone !== 'undefined' && Zone.current;\r\n            let canceled = false;\r\n            // Perform response processing outside of Angular zone to\r\n            // ensure no excessive change detection runs are executed\r\n            // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\r\n            await this.ngZone.runOutsideAngular(async () => {\r\n                while (true) {\r\n                    // Prevent reading chunks if the app is destroyed. Otherwise, we risk doing\r\n                    // unnecessary work or triggering side effects after teardown.\r\n                    // This may happen if the app was explicitly destroyed before\r\n                    // the response returned entirely.\r\n                    if (this.destroyed) {\r\n                        // Streams left in a pending state (due to `break` without cancel) may\r\n                        // continue consuming or holding onto data behind the scenes.\r\n                        // Calling `reader.cancel()` allows the browser or the underlying\r\n                        // system to release any network or memory resources associated with the stream.\r\n                        await reader.cancel();\r\n                        canceled = true;\r\n                        break;\r\n                    }\r\n                    const { done, value } = await reader.read();\r\n                    if (done) {\r\n                        break;\r\n                    }\r\n                    chunks.push(value);\r\n                    receivedLength += value.length;\r\n                    if (request.reportProgress) {\r\n                        partialText =\r\n                            request.responseType === 'text'\r\n                                ? (partialText ?? '') +\r\n                                    (decoder ??= new TextDecoder()).decode(value, { stream: true })\r\n                                : undefined;\r\n                        const reportProgress = () => observer.next({\r\n                            type: HttpEventType.DownloadProgress,\r\n                            total: contentLength ? +contentLength : undefined,\r\n                            loaded: receivedLength,\r\n                            partialText,\r\n                        });\r\n                        reqZone ? reqZone.run(reportProgress) : reportProgress();\r\n                    }\r\n                }\r\n            });\r\n            // We need to manage the canceled state — because the Streams API does not\r\n            // expose a direct `.state` property on the reader.\r\n            // We need to `return` because `parseBody` may not be able to parse chunks\r\n            // that were only partially read (due to cancellation caused by app destruction).\r\n            if (canceled) {\r\n                observer.complete();\r\n                return;\r\n            }\r\n            // Combine all chunks.\r\n            const chunksAll = this.concatChunks(chunks, receivedLength);\r\n            try {\r\n                const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\r\n                body = this.parseBody(request, chunksAll, contentType);\r\n            }\r\n            catch (error) {\r\n                // Body loading or parsing failed\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    headers: new HttpHeaders(response.headers),\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    url: getResponseUrl$1(response) ?? request.urlWithParams,\r\n                }));\r\n                return;\r\n            }\r\n        }\r\n        // Same behavior as the XhrBackend\r\n        if (status === 0) {\r\n            status = body ? HTTP_STATUS_CODE_OK : 0;\r\n        }\r\n        // ok determines whether the response will be transmitted on the event or\r\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n        // but a successful status code can still result in an error if the user\r\n        // asked for JSON data and the body cannot be parsed as such.\r\n        const ok = status >= 200 && status < 300;\r\n        if (ok) {\r\n            observer.next(new HttpResponse({\r\n                body,\r\n                headers,\r\n                status,\r\n                statusText,\r\n                url,\r\n            }));\r\n            // The full body has been received and delivered, no further events\r\n            // are possible. This request is complete.\r\n            observer.complete();\r\n        }\r\n        else {\r\n            observer.error(new HttpErrorResponse({\r\n                error: body,\r\n                headers,\r\n                status,\r\n                statusText,\r\n                url,\r\n            }));\r\n        }\r\n    }\r\n    parseBody(request, binContent, contentType) {\r\n        switch (request.responseType) {\r\n            case 'json':\r\n                // stripping the XSSI when present\r\n                const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\r\n                return text === '' ? null : JSON.parse(text);\r\n            case 'text':\r\n                return new TextDecoder().decode(binContent);\r\n            case 'blob':\r\n                return new Blob([binContent], { type: contentType });\r\n            case 'arraybuffer':\r\n                return binContent.buffer;\r\n        }\r\n    }\r\n    createRequestInit(req) {\r\n        // We could share some of this logic with the XhrBackend\r\n        const headers = {};\r\n        const credentials = req.withCredentials ? 'include' : undefined;\r\n        // Setting all the requested headers.\r\n        req.headers.forEach((name, values) => (headers[name] = values.join(',')));\r\n        // Add an Accept header if one isn't present already.\r\n        if (!req.headers.has(ACCEPT_HEADER)) {\r\n            headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\r\n        }\r\n        // Auto-detect the Content-Type header if one isn't present already.\r\n        if (!req.headers.has(CONTENT_TYPE_HEADER)) {\r\n            const detectedType = req.detectContentTypeHeader();\r\n            // Sometimes Content-Type detection fails.\r\n            if (detectedType !== null) {\r\n                headers[CONTENT_TYPE_HEADER] = detectedType;\r\n            }\r\n        }\r\n        return {\r\n            body: req.serializeBody(),\r\n            method: req.method,\r\n            headers,\r\n            credentials,\r\n            keepalive: req.keepalive,\r\n        };\r\n    }\r\n    concatChunks(chunks, totalLength) {\r\n        const chunksAll = new Uint8Array(totalLength);\r\n        let position = 0;\r\n        for (const chunk of chunks) {\r\n            chunksAll.set(chunk, position);\r\n            position += chunk.length;\r\n        }\r\n        return chunksAll;\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: FetchBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: FetchBackend });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: FetchBackend, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [] });\r\n/**\r\n * Abstract class to provide a mocked implementation of `fetch()`\r\n */\r\nclass FetchFactory {\r\n}\r\nfunction noop() { }\r\n/**\r\n * Zone.js treats a rejected promise that has not yet been awaited\r\n * as an unhandled error. This function adds a noop `.then` to make\r\n * sure that Zone.js doesn't throw an error if the Promise is rejected\r\n * synchronously.\r\n */\r\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\r\n    promise.then(noop, noop);\r\n}\r\n\r\nfunction interceptorChainEndFn(req, finalHandlerFn) {\r\n    return finalHandlerFn(req);\r\n}\r\n/**\r\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\r\n * `ChainedInterceptorFn` interface.\r\n */\r\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\r\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\r\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\r\n    });\r\n}\r\n/**\r\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\r\n * injector.\r\n */\r\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\r\n    return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)));\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\r\n/**\r\n * A multi-provided token of `HttpInterceptorFn`s.\r\n */\r\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\r\n/**\r\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\r\n */\r\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\r\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\r\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\r\n// Should HttpClient contribute to stability automatically at all?\r\nconst REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken(ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '', { providedIn: 'root', factory: () => true });\r\n/**\r\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\r\n * class-based interceptors and runs the request through it.\r\n */\r\nfunction legacyInterceptorFnFactory() {\r\n    let chain = null;\r\n    return (req, handler) => {\r\n        if (chain === null) {\r\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\r\n            // Note: interceptors are wrapped right-to-left so that final execution order is\r\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\r\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\r\n            // out.\r\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\r\n        }\r\n        const pendingTasks = inject(PendingTasks);\r\n        const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\r\n        if (contributeToStability) {\r\n            const removeTask = pendingTasks.add();\r\n            return chain(req, handler).pipe(finalize(removeTask));\r\n        }\r\n        else {\r\n            return chain(req, handler);\r\n        }\r\n    };\r\n}\r\nlet fetchBackendWarningDisplayed = false;\r\nclass HttpInterceptorHandler extends HttpHandler {\r\n    backend;\r\n    injector;\r\n    chain = null;\r\n    pendingTasks = inject(PendingTasks);\r\n    contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\r\n    constructor(backend, injector) {\r\n        super();\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        // We strongly recommend using fetch backend for HTTP calls when SSR is used\r\n        // for an application. The logic below checks if that's the case and produces\r\n        // a warning otherwise.\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\r\n            // This flag is necessary because provideHttpClientTesting() overrides the backend\r\n            // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\r\n            // no HTTP calls are actually performed during the test, so producing a warning would be\r\n            // misleading.\r\n            const isTestingBackend = this.backend.isTestingBackend;\r\n            if (typeof ngServerMode !== 'undefined' &&\r\n                ngServerMode &&\r\n                !(this.backend instanceof FetchBackend) &&\r\n                !isTestingBackend) {\r\n                fetchBackendWarningDisplayed = true;\r\n                injector\r\n                    .get(_Console)\r\n                    .warn(_formatRuntimeError(2801 /* RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR */, 'Angular detected that `HttpClient` is not configured ' +\r\n                    \"to use `fetch` APIs. It's strongly recommended to \" +\r\n                    'enable `fetch` for applications that use Server-Side Rendering ' +\r\n                    'for better performance and compatibility. ' +\r\n                    'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\r\n                    'call at the root of the application.'));\r\n            }\r\n        }\r\n    }\r\n    handle(initialRequest) {\r\n        if (this.chain === null) {\r\n            const dedupedInterceptorFns = Array.from(new Set([\r\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\r\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\r\n            ]));\r\n            // Note: interceptors are wrapped right-to-left so that final execution order is\r\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\r\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\r\n            // out.\r\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\r\n        }\r\n        if (this.contributeToStability) {\r\n            const removeTask = this.pendingTasks.add();\r\n            return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest)).pipe(finalize(removeTask));\r\n        }\r\n        else {\r\n            return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest));\r\n        }\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpInterceptorHandler });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: HttpBackend }, { type: i0.EnvironmentInjector }] });\r\n\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n/**\r\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\r\n * executed.\r\n */\r\nlet foreignDocument;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n// Error text given when a request is passed to the JsonpClientBackend that has\r\n// headers set\r\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see {@link HttpHandler}\r\n * @see {@link HttpXhrBackend}\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    callbackMap;\r\n    document;\r\n    /**\r\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n     */\r\n    resolvedPromise = Promise.resolve();\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new _RuntimeError(2810 /* RuntimeErrorCode.JSONP_WRONG_METHOD */, ngDevMode && JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new _RuntimeError(2811 /* RuntimeErrorCode.JSONP_WRONG_RESPONSE_TYPE */, ngDevMode && JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Check the request headers. JSONP doesn't support headers and\r\n        // cannot set any that were supplied.\r\n        if (req.headers.keys().length > 0) {\r\n            throw new _RuntimeError(2812 /* RuntimeErrorCode.JSONP_HEADERS_NOT_SUPPORTED */, ngDevMode && JSONP_ERR_HEADERS_NOT_SUPPORTED);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // Remove the <script> tag if it's still on the page.\r\n                node.remove();\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = () => {\r\n                // We wrap it in an extra Promise, to ensure the microtask\r\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\r\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\r\n                this.resolvedPromise.then(() => {\r\n                    // Cleanup the page.\r\n                    cleanup();\r\n                    // Check whether the response callback has run.\r\n                    if (!finished) {\r\n                        // It hasn't, something went wrong with the request. Return an error via\r\n                        // the Observable error path. All JSONP errors have status 0.\r\n                        observer.error(new HttpErrorResponse({\r\n                            url,\r\n                            status: 0,\r\n                            statusText: 'JSONP Error',\r\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Success. body either contains the response body or null if none was\r\n                    // returned.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        status: HTTP_STATUS_CODE_OK,\r\n                        statusText: 'OK',\r\n                        url,\r\n                    }));\r\n                    // Complete the stream, the response is over.\r\n                    observer.complete();\r\n                });\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                if (!finished) {\r\n                    this.removeListeners(node);\r\n                }\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n    removeListeners(script) {\r\n        // Issue #34818\r\n        // Changing <script>'s ownerDocument will prevent it from execution.\r\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\r\n        foreignDocument ??= this.document.implementation.createHTMLDocument();\r\n        foreignDocument.adoptNode(script);\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: JsonpClientBackend });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: JsonpClientBackend, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }] });\r\n/**\r\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\r\n */\r\nfunction jsonpInterceptorFn(req, next) {\r\n    if (req.method === 'JSONP') {\r\n        return inject(JsonpClientBackend).handle(req);\r\n    }\r\n    // Fall through for normal HTTP requests.\r\n    return next(req);\r\n}\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see {@link HttpInterceptor}\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    injector;\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param initialRequest The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(initialRequest, next) {\r\n        return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: JsonpInterceptor });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: JsonpInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\r\n\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\nconst X_REQUEST_URL_REGEXP = RegExp(`^${X_REQUEST_URL_HEADER}:`, 'm');\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (X_REQUEST_URL_REGEXP.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader(X_REQUEST_URL_HEADER);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see {@link HttpHandler}\r\n * @see {@link JsonpClientBackend}\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    xhrFactory;\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n        if (req.method === 'JSONP') {\r\n            throw new _RuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\r\n        }\r\n        if (req.keepalive && ngDevMode) {\r\n            console.warn(_formatRuntimeError(2813 /* RuntimeErrorCode.KEEPALIVE_NOT_SUPPORTED_WITH_XHR */, `Angular detected that a \\`HttpClient\\` request with the \\`keepalive\\` option was sent using XHR, which does not support it. To use the \\`keepalive\\` option, enable Fetch API support by passing \\`withFetch()\\` as an argument to \\`provideHttpClient()\\`.`));\r\n        }\r\n        // Check whether this factory has a special function to load an XHR implementation\r\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\r\n        // class, which needs to load an XHR implementation.\r\n        const xhrFactory = this.xhrFactory;\r\n        const source = \r\n        // Note that `ɵloadImpl` is never defined in client bundles and can be\r\n        // safely dropped whenever we're running in the browser.\r\n        // This branching is redundant.\r\n        // The `ngServerMode` guard also enables tree-shaking of the `from()`\r\n        // function from the common bundle, as it's only used in server code.\r\n        typeof ngServerMode !== 'undefined' && ngServerMode && xhrFactory.ɵloadImpl\r\n            ? from(xhrFactory.ɵloadImpl())\r\n            : of(null);\r\n        return source.pipe(switchMap(() => {\r\n            // Everything happens on Observable subscription.\r\n            return new Observable((observer) => {\r\n                // Start by setting up the XHR object with request method, URL, and withCredentials\r\n                // flag.\r\n                const xhr = xhrFactory.build();\r\n                xhr.open(req.method, req.urlWithParams);\r\n                if (req.withCredentials) {\r\n                    xhr.withCredentials = true;\r\n                }\r\n                // Add all the requested headers.\r\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n                // Add an Accept header if one isn't present already.\r\n                if (!req.headers.has(ACCEPT_HEADER)) {\r\n                    xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\r\n                }\r\n                // Auto-detect the Content-Type header if one isn't present already.\r\n                if (!req.headers.has(CONTENT_TYPE_HEADER)) {\r\n                    const detectedType = req.detectContentTypeHeader();\r\n                    // Sometimes Content-Type detection fails.\r\n                    if (detectedType !== null) {\r\n                        xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\r\n                    }\r\n                }\r\n                // Set the responseType if one was requested.\r\n                if (req.responseType) {\r\n                    const responseType = req.responseType.toLowerCase();\r\n                    // JSON responses need to be processed as text. This is because if the server\r\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                    // is parsed by first requesting text and then applying JSON.parse.\r\n                    xhr.responseType = (responseType !== 'json' ? responseType : 'text');\r\n                }\r\n                // Serialize the request body if one is present. If not, this will be set to null.\r\n                const reqBody = req.serializeBody();\r\n                // If progress events are enabled, response headers will be delivered\r\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n                // event. However, since response headers don't change in between these\r\n                // two events, it doesn't make sense to parse them twice. So headerResponse\r\n                // caches the data extracted from the response whenever it's first parsed,\r\n                // to ensure parsing isn't duplicated.\r\n                let headerResponse = null;\r\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n                // state, and memoizes it into headerResponse.\r\n                const partialFromXhr = () => {\r\n                    if (headerResponse !== null) {\r\n                        return headerResponse;\r\n                    }\r\n                    const statusText = xhr.statusText || 'OK';\r\n                    // Parse headers from XMLHttpRequest - this step is lazy.\r\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                    // request URL.\r\n                    const url = getResponseUrl(xhr) || req.url;\r\n                    // Construct the HttpHeaderResponse and memoize it.\r\n                    headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\r\n                    return headerResponse;\r\n                };\r\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n                // emit. This allows them to be unregistered as event listeners later.\r\n                // First up is the load event, which represents a response being fully available.\r\n                const onLoad = () => {\r\n                    // Read response state from the memoized partial data.\r\n                    let { headers, status, statusText, url } = partialFromXhr();\r\n                    // The body will be read out if present.\r\n                    let body = null;\r\n                    if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\r\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                        body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\r\n                    }\r\n                    // Normalize another potential bug (this one comes from CORS).\r\n                    if (status === 0) {\r\n                        status = !!body ? HTTP_STATUS_CODE_OK : 0;\r\n                    }\r\n                    // ok determines whether the response will be transmitted on the event or\r\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                    // but a successful status code can still result in an error if the user\r\n                    // asked for JSON data and the body cannot be parsed as such.\r\n                    let ok = status >= 200 && status < 300;\r\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                    // will have done that already).\r\n                    if (req.responseType === 'json' && typeof body === 'string') {\r\n                        // Save the original body, before attempting XSSI prefix stripping.\r\n                        const originalBody = body;\r\n                        body = body.replace(XSSI_PREFIX, '');\r\n                        try {\r\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\r\n                            // user.\r\n                            body = body !== '' ? JSON.parse(body) : null;\r\n                        }\r\n                        catch (error) {\r\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\r\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\r\n                            // to deliver a better error response.\r\n                            body = originalBody;\r\n                            // If this was an error request to begin with, leave it as a string, it\r\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                            if (ok) {\r\n                                // Even though the response status was 2xx, this is still an error.\r\n                                ok = false;\r\n                                // The parse error contains the text of the body that failed to parse.\r\n                                body = { error, text: body };\r\n                            }\r\n                        }\r\n                    }\r\n                    if (ok) {\r\n                        // A successful response is delivered on the event stream.\r\n                        observer.next(new HttpResponse({\r\n                            body,\r\n                            headers,\r\n                            status,\r\n                            statusText,\r\n                            url: url || undefined,\r\n                        }));\r\n                        // The full body has been received and delivered, no further events\r\n                        // are possible. This request is complete.\r\n                        observer.complete();\r\n                    }\r\n                    else {\r\n                        // An unsuccessful request is delivered on the error channel.\r\n                        observer.error(new HttpErrorResponse({\r\n                            // The error in this case is the response body (error from the server).\r\n                            error: body,\r\n                            headers,\r\n                            status,\r\n                            statusText,\r\n                            url: url || undefined,\r\n                        }));\r\n                    }\r\n                };\r\n                // The onError callback is called when something goes wrong at the network level.\r\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n                // transmitted on the error channel.\r\n                const onError = (error) => {\r\n                    const { url } = partialFromXhr();\r\n                    const res = new HttpErrorResponse({\r\n                        error,\r\n                        status: xhr.status || 0,\r\n                        statusText: xhr.statusText || 'Unknown Error',\r\n                        url: url || undefined,\r\n                    });\r\n                    observer.error(res);\r\n                };\r\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n                // has been sent on the stream. This is necessary to track if progress\r\n                // is enabled since the event will be sent on only the first download\r\n                // progress event.\r\n                let sentHeaders = false;\r\n                // The download progress event handler, which is only registered if\r\n                // progress events are enabled.\r\n                const onDownProgress = (event) => {\r\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                    if (!sentHeaders) {\r\n                        observer.next(partialFromXhr());\r\n                        sentHeaders = true;\r\n                    }\r\n                    // Start building the download progress event to deliver on the response\r\n                    // event stream.\r\n                    let progressEvent = {\r\n                        type: HttpEventType.DownloadProgress,\r\n                        loaded: event.loaded,\r\n                    };\r\n                    // Set the total number of bytes in the event if it's available.\r\n                    if (event.lengthComputable) {\r\n                        progressEvent.total = event.total;\r\n                    }\r\n                    // If the request was for text content and a partial response is\r\n                    // available on XMLHttpRequest, include it in the progress event\r\n                    // to allow for streaming reads.\r\n                    if (req.responseType === 'text' && !!xhr.responseText) {\r\n                        progressEvent.partialText = xhr.responseText;\r\n                    }\r\n                    // Finally, fire the event.\r\n                    observer.next(progressEvent);\r\n                };\r\n                // The upload progress event handler, which is only registered if\r\n                // progress events are enabled.\r\n                const onUpProgress = (event) => {\r\n                    // Upload progress events are simpler. Begin building the progress\r\n                    // event.\r\n                    let progress = {\r\n                        type: HttpEventType.UploadProgress,\r\n                        loaded: event.loaded,\r\n                    };\r\n                    // If the total number of bytes being uploaded is available, include\r\n                    // it.\r\n                    if (event.lengthComputable) {\r\n                        progress.total = event.total;\r\n                    }\r\n                    // Send the event.\r\n                    observer.next(progress);\r\n                };\r\n                // By default, register for load and error events.\r\n                xhr.addEventListener('load', onLoad);\r\n                xhr.addEventListener('error', onError);\r\n                xhr.addEventListener('timeout', onError);\r\n                xhr.addEventListener('abort', onError);\r\n                // Progress events are only enabled if requested.\r\n                if (req.reportProgress) {\r\n                    // Download progress is always enabled if requested.\r\n                    xhr.addEventListener('progress', onDownProgress);\r\n                    // Upload progress depends on whether there is a body to upload.\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.addEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Fire the request, and notify the event stream that it was fired.\r\n                xhr.send(reqBody);\r\n                observer.next({ type: HttpEventType.Sent });\r\n                // This is the return from the Observable function, which is the\r\n                // request cancellation handler.\r\n                return () => {\r\n                    // On a cancellation, remove all registered event listeners.\r\n                    xhr.removeEventListener('error', onError);\r\n                    xhr.removeEventListener('abort', onError);\r\n                    xhr.removeEventListener('load', onLoad);\r\n                    xhr.removeEventListener('timeout', onError);\r\n                    if (req.reportProgress) {\r\n                        xhr.removeEventListener('progress', onDownProgress);\r\n                        if (reqBody !== null && xhr.upload) {\r\n                            xhr.upload.removeEventListener('progress', onUpProgress);\r\n                        }\r\n                    }\r\n                    // Finally, abort the in-flight request.\r\n                    if (xhr.readyState !== xhr.DONE) {\r\n                        xhr.abort();\r\n                    }\r\n                };\r\n            });\r\n        }));\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXhrBackend });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXhrBackend, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: XhrFactory }] });\r\n\r\nconst XSRF_ENABLED = new InjectionToken(ngDevMode ? 'XSRF_ENABLED' : '');\r\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\r\nconst XSRF_COOKIE_NAME = new InjectionToken(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\r\n    providedIn: 'root',\r\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\r\n});\r\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\r\nconst XSRF_HEADER_NAME = new InjectionToken(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\r\n    providedIn: 'root',\r\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\r\n});\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    doc;\r\n    cookieName;\r\n    lastCookieString = '';\r\n    lastToken = null;\r\n    /**\r\n     * @internal for testing\r\n     */\r\n    parseCount = 0;\r\n    constructor(doc, cookieName) {\r\n        this.doc = doc;\r\n        this.cookieName = cookieName;\r\n    }\r\n    getToken() {\r\n        if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = parseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXsrfCookieExtractor });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [XSRF_COOKIE_NAME]\r\n                }] }] });\r\nfunction xsrfInterceptorFn(req, next) {\r\n    const lcUrl = req.url.toLowerCase();\r\n    // Skip both non-mutating requests and absolute URLs.\r\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n    // anyway as the cookie set\r\n    // on our origin is not the same as the token expected by another origin.\r\n    if (!inject(XSRF_ENABLED) ||\r\n        req.method === 'GET' ||\r\n        req.method === 'HEAD' ||\r\n        lcUrl.startsWith('http://') ||\r\n        lcUrl.startsWith('https://')) {\r\n        return next(req);\r\n    }\r\n    const token = inject(HttpXsrfTokenExtractor).getToken();\r\n    const headerName = inject(XSRF_HEADER_NAME);\r\n    // Be careful not to overwrite an existing header of the same name.\r\n    if (token != null && !req.headers.has(headerName)) {\r\n        req = req.clone({ headers: req.headers.set(headerName, token) });\r\n    }\r\n    return next(req);\r\n}\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    injector;\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    intercept(initialRequest, next) {\r\n        return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXsrfInterceptor });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\r\n\r\n/**\r\n * Identifies a particular kind of `HttpFeature`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpFeatureKind;\r\n(function (HttpFeatureKind) {\r\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\r\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\r\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\r\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\r\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\r\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\r\n    HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\r\n})(HttpFeatureKind || (HttpFeatureKind = {}));\r\nfunction makeHttpFeature(kind, providers) {\r\n    return {\r\n        ɵkind: kind,\r\n        ɵproviders: providers,\r\n    };\r\n}\r\n/**\r\n * Configures Angular's `HttpClient` service to be available for injection.\r\n *\r\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\r\n * protection of outgoing requests. Additional configuration options can be provided by passing\r\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\r\n * `withInterceptors(...)` feature.\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n * It's strongly recommended to enable\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\r\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\r\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\r\n *\r\n * ```ts\r\n * provideHttpClient(withFetch());\r\n * ```\r\n *\r\n * </div>\r\n *\r\n * @see {@link withInterceptors}\r\n * @see {@link withInterceptorsFromDi}\r\n * @see {@link withXsrfConfiguration}\r\n * @see {@link withNoXsrfProtection}\r\n * @see {@link withJsonpSupport}\r\n * @see {@link withRequestsMadeViaParent}\r\n * @see {@link withFetch}\r\n */\r\nfunction provideHttpClient(...features) {\r\n    if (ngDevMode) {\r\n        const featureKinds = new Set(features.map((f) => f.ɵkind));\r\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\r\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\r\n            throw new Error(ngDevMode\r\n                ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.`\r\n                : '');\r\n        }\r\n    }\r\n    const providers = [\r\n        HttpClient,\r\n        HttpXhrBackend,\r\n        HttpInterceptorHandler,\r\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\r\n        {\r\n            provide: HttpBackend,\r\n            useFactory: () => {\r\n                return inject(FETCH_BACKEND, { optional: true }) ?? inject(HttpXhrBackend);\r\n            },\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTOR_FNS,\r\n            useValue: xsrfInterceptorFn,\r\n            multi: true,\r\n        },\r\n        { provide: XSRF_ENABLED, useValue: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n    ];\r\n    for (const feature of features) {\r\n        providers.push(...feature.ɵproviders);\r\n    }\r\n    return makeEnvironmentProviders(providers);\r\n}\r\n/**\r\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\r\n * instance.\r\n *\r\n * @see {@link HttpInterceptorFn}\r\n * @see {@link provideHttpClient}\r\n * @publicApi\r\n */\r\nfunction withInterceptors(interceptorFns) {\r\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map((interceptorFn) => {\r\n        return {\r\n            provide: HTTP_INTERCEPTOR_FNS,\r\n            useValue: interceptorFn,\r\n            multi: true,\r\n        };\r\n    }));\r\n}\r\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken(ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '');\r\n/**\r\n * Includes class-based interceptors configured using a multi-provider in the current injector into\r\n * the configured `HttpClient` instance.\r\n *\r\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\r\n * interceptors may be phased out in a later release.\r\n *\r\n * @see {@link HttpInterceptor}\r\n * @see {@link HTTP_INTERCEPTORS}\r\n * @see {@link provideHttpClient}\r\n */\r\nfunction withInterceptorsFromDi() {\r\n    // Note: the legacy interceptor function is provided here via an intermediate token\r\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\r\n    // included multiple times, all of the multi-provider entries will have the same instance of the\r\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\r\n    // interceptors will not run multiple times.\r\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\r\n        {\r\n            provide: LEGACY_INTERCEPTOR_FN,\r\n            useFactory: legacyInterceptorFnFactory,\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTOR_FNS,\r\n            useExisting: LEGACY_INTERCEPTOR_FN,\r\n            multi: true,\r\n        },\r\n    ]);\r\n}\r\n/**\r\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withNoXsrfProtection` feature.\r\n *\r\n * @see {@link provideHttpClient}\r\n */\r\nfunction withXsrfConfiguration({ cookieName, headerName, }) {\r\n    const providers = [];\r\n    if (cookieName !== undefined) {\r\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\r\n    }\r\n    if (headerName !== undefined) {\r\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\r\n    }\r\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\r\n}\r\n/**\r\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withXsrfConfiguration` feature.\r\n *\r\n * @see {@link provideHttpClient}\r\n */\r\nfunction withNoXsrfProtection() {\r\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\r\n        {\r\n            provide: XSRF_ENABLED,\r\n            useValue: false,\r\n        },\r\n    ]);\r\n}\r\n/**\r\n * Add JSONP support to the configuration of the current `HttpClient` instance.\r\n *\r\n * @see {@link provideHttpClient}\r\n */\r\nfunction withJsonpSupport() {\r\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\r\n    ]);\r\n}\r\n/**\r\n * Configures the current `HttpClient` instance to make requests via the parent injector's\r\n * `HttpClient` instead of directly.\r\n *\r\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\r\n * instance. For example, even if `HttpClient` is configured in the parent injector with\r\n * one or more interceptors, they will not intercept requests made via this instance.\r\n *\r\n * With this option enabled, once the request has passed through the current injector's\r\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\r\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\r\n *\r\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\r\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\r\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\r\n * this option.\r\n *\r\n * @see {@link provideHttpClient}\r\n * @publicApi 19.0\r\n */\r\nfunction withRequestsMadeViaParent() {\r\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\r\n        {\r\n            provide: HttpBackend,\r\n            useFactory: () => {\r\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\r\n                if (ngDevMode && handlerFromParent === null) {\r\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\r\n                }\r\n                return handlerFromParent;\r\n            },\r\n        },\r\n    ]);\r\n}\r\n/**\r\n * Configures the current `HttpClient` instance to make requests using the fetch API.\r\n *\r\n * Note: The Fetch API doesn't support progress report on uploads.\r\n *\r\n * @publicApi\r\n */\r\nfunction withFetch() {\r\n    return makeHttpFeature(HttpFeatureKind.Fetch, [\r\n        FetchBackend,\r\n        { provide: FETCH_BACKEND, useExisting: FetchBackend },\r\n        { provide: HttpBackend, useExisting: FetchBackend },\r\n    ]);\r\n}\r\n\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\r\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [withNoXsrfProtection().ɵproviders],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: withXsrfConfiguration(options).ɵproviders,\r\n        };\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientXsrfModule });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientXsrfModule, providers: [\r\n            HttpXsrfInterceptor,\r\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n            withXsrfConfiguration({\r\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\r\n                headerName: XSRF_DEFAULT_HEADER_NAME,\r\n            }).ɵproviders,\r\n            { provide: XSRF_ENABLED, useValue: true },\r\n        ] });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        HttpXsrfInterceptor,\r\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                        withXsrfConfiguration({\r\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\r\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\r\n                        }).ɵproviders,\r\n                        { provide: XSRF_ENABLED, useValue: true },\r\n                    ],\r\n                }]\r\n        }] });\r\n/**\r\n * Configures the dependency injector for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\r\n */\r\nclass HttpClientModule {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientModule });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientModule, providers: [provideHttpClient(withInterceptorsFromDi())] });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    /**\r\n                     * Configures the dependency injector where it is imported\r\n                     * with supporting services for HTTP communications.\r\n                     */\r\n                    providers: [provideHttpClient(withInterceptorsFromDi())],\r\n                }]\r\n        }] });\r\n/**\r\n * Configures the dependency injector for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * @publicApi\r\n * @deprecated `withJsonpSupport()` as providers instead\r\n */\r\nclass HttpClientJsonpModule {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientJsonpModule });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientJsonpModule, providers: [withJsonpSupport().ɵproviders] });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.6\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [withJsonpSupport().ɵproviders],\r\n                }]\r\n        }] });\r\n\r\nexport { FetchBackend, HTTP_INTERCEPTORS, HTTP_ROOT_INTERCEPTOR_FNS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpInterceptorHandler, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, REQUESTS_CONTRIBUTE_TO_STABILITY, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration };\r\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}