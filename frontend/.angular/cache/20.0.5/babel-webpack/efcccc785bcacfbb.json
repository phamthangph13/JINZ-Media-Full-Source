{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injector, ElementRef, NgZone, ViewContainerRef, afterNextRender, DOCUMENT, Directive, Input, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { createRepositionScrollStrategy, ScrollDispatcher, createFlexibleConnectedPositionStrategy, createOverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { NgClass } from '@angular/common';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst _c0 = [\"tooltip\"];\nconst SCROLL_THROTTLE_MS = 20;\n/**\r\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\r\n * @docs-private\r\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector, {\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  }\n});\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(_overlay) {\n  const injector = inject(Injector);\n  return () => createRepositionScrollStrategy(injector, {\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\r\n * CSS class that will be attached to the overlay panel.\r\n * @deprecated\r\n * @breaking-change 13.0.0 remove this variable\r\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n/**\r\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\r\n * hiding of a tooltip provided position (defaults to below the element).\r\n *\r\n * https://material.io/design/components/tooltips.html\r\n */\nclass MatTooltip {\n  _elementRef = inject(ElementRef);\n  _ngZone = inject(NgZone);\n  _platform = inject(Platform);\n  _ariaDescriber = inject(AriaDescriber);\n  _focusMonitor = inject(FocusMonitor);\n  _dir = inject(Directionality);\n  _injector = inject(Injector);\n  _viewContainerRef = inject(ViewContainerRef);\n  _animationsDisabled = _animationsDisabled();\n  _defaultOptions = inject(MAT_TOOLTIP_DEFAULT_OPTIONS, {\n    optional: true\n  });\n  _overlayRef;\n  _tooltipInstance;\n  _overlayPanelClass; // Used for styling internally.\n  _portal;\n  _position = 'below';\n  _positionAtOrigin = false;\n  _disabled = false;\n  _tooltipClass;\n  _viewInitialized = false;\n  _pointerExitEventsInitialized = false;\n  _tooltipComponent = TooltipComponent;\n  _viewportMargin = 8;\n  _currentPosition;\n  _cssClassPrefix = 'mat-mdc';\n  _ariaDescriptionPending;\n  _dirSubscribed = false;\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n        this._tooltipInstance?.show(0);\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /**\r\n   * Whether tooltip should be relative to the click or touch origin\r\n   * instead of outside the element bounding box.\r\n   */\n  get positionAtOrigin() {\n    return this._positionAtOrigin;\n  }\n  set positionAtOrigin(value) {\n    this._positionAtOrigin = coerceBooleanProperty(value);\n    this._detach();\n    this._overlayRef = null;\n  }\n  /** Disables the display of the tooltip. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    const isDisabled = coerceBooleanProperty(value);\n    if (this._disabled !== isDisabled) {\n      this._disabled = isDisabled;\n      // If tooltip is disabled, hide immediately.\n      if (isDisabled) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n      }\n      this._syncAriaDescription(this.message);\n    }\n  }\n  /** The default delay in ms before showing the tooltip after show is called */\n  get showDelay() {\n    return this._showDelay;\n  }\n  set showDelay(value) {\n    this._showDelay = coerceNumberProperty(value);\n  }\n  _showDelay;\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  get hideDelay() {\n    return this._hideDelay;\n  }\n  set hideDelay(value) {\n    this._hideDelay = coerceNumberProperty(value);\n    if (this._tooltipInstance) {\n      this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n    }\n  }\n  _hideDelay;\n  /**\r\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\r\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\r\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\r\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\r\n   * elements). The different values for this option configure the touch event handling as follows:\r\n   * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\r\n   *   browser gestures on particular elements. In particular, it allows text selection on inputs\r\n   *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\r\n   * - `on` - Enables touch gestures for all elements and disables native\r\n   *   browser gestures with no exceptions.\r\n   * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\r\n   *   showing on touch devices.\r\n   */\n  touchGestures = 'auto';\n  /** The message to be displayed in the tooltip */\n  get message() {\n    return this._message;\n  }\n  set message(value) {\n    const oldMessage = this._message;\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n    }\n    this._syncAriaDescription(oldMessage);\n  }\n  _message = '';\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  /** Manually-bound passive event listeners. */\n  _passiveListeners = [];\n  /** Timer started at the last `touchstart` event. */\n  _touchstartTimeout = null;\n  /** Emits when the component is destroyed. */\n  _destroyed = new Subject();\n  /** Whether ngOnDestroyed has been called. */\n  _isDestroyed = false;\n  constructor() {\n    const defaultOptions = this._defaultOptions;\n    if (defaultOptions) {\n      this._showDelay = defaultOptions.showDelay;\n      this._hideDelay = defaultOptions.hideDelay;\n      if (defaultOptions.position) {\n        this.position = defaultOptions.position;\n      }\n      if (defaultOptions.positionAtOrigin) {\n        this.positionAtOrigin = defaultOptions.positionAtOrigin;\n      }\n      if (defaultOptions.touchGestures) {\n        this.touchGestures = defaultOptions.touchGestures;\n      }\n      if (defaultOptions.tooltipClass) {\n        this.tooltipClass = defaultOptions.tooltipClass;\n      }\n    }\n    this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n  }\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\r\n   * Dispose the tooltip when destroyed.\r\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    // Optimization: Do not call clearTimeout unless there is an active timer.\n    if (this._touchstartTimeout) {\n      clearTimeout(this._touchstartTimeout);\n    }\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay = this.showDelay, origin) {\n    if (this.disabled || !this.message || this._isTooltipVisible()) {\n      this._tooltipInstance?._cancelPendingAnimations();\n      return;\n    }\n    const overlayRef = this._createOverlay(origin);\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n    const instance = this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    instance._triggerElement = this._elementRef.nativeElement;\n    instance._mouseLeaveHideDelay = this._hideDelay;\n    instance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    instance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay = this.hideDelay) {\n    const instance = this._tooltipInstance;\n    if (instance) {\n      if (instance.isVisible()) {\n        instance.hide(delay);\n      } else {\n        instance._cancelPendingAnimations();\n        this._detach();\n      }\n    }\n  }\n  /** Shows/hides the tooltip */\n  toggle(origin) {\n    this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n  _createOverlay(origin) {\n    if (this._overlayRef) {\n      const existingStrategy = this._overlayRef.getConfig().positionStrategy;\n      if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n        return this._overlayRef;\n      }\n      this._detach();\n    }\n    const scrollableAncestors = this._injector.get(ScrollDispatcher).getAncestorScrollContainers(this._elementRef);\n    const panelClass = `${this._cssClassPrefix}-${PANEL_CLASS}`;\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = createFlexibleConnectedPositionStrategy(this._injector, this.positionAtOrigin ? origin || this._elementRef : this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateCurrentPositionClass(change.connectionPair);\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = createOverlayRef(this._injector, {\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: this._overlayPanelClass ? [...this._overlayPanelClass, panelClass] : panelClass,\n      scrollStrategy: this._injector.get(MAT_TOOLTIP_SCROLL_STRATEGY)(),\n      disableAnimations: this._animationsDisabled\n    });\n    this._updatePosition(this._overlayRef);\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n    this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._ngZone.run(() => this.hide(0));\n      }\n    });\n    if (this._defaultOptions?.disableTooltipInteractivity) {\n      this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n    }\n    if (!this._dirSubscribed) {\n      this._dirSubscribed = true;\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._overlayRef) {\n          this._updatePosition(this._overlayRef);\n        }\n      });\n    }\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n  _updatePosition(overlayRef) {\n    const position = overlayRef.getConfig().positionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    position.withPositions([this._addOffset({\n      ...origin.main,\n      ...overlay.main\n    }), this._addOffset({\n      ...origin.fallback,\n      ...overlay.fallback\n    })]);\n  }\n  /** Adds the configured offset to a position. Used as a hook for child classes. */\n  _addOffset(position) {\n    const offset = UNBOUNDED_ANCHOR_GAP;\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    if (position.originY === 'top') {\n      position.offsetY = -offset;\n    } else if (position.originY === 'bottom') {\n      position.offsetY = offset;\n    } else if (position.originX === 'start') {\n      position.offsetX = isLtr ? -offset : offset;\n    } else if (position.originX === 'end') {\n      position.offsetX = isLtr ? offset : -offset;\n    }\n    return position;\n  }\n  /**\r\n   * Returns the origin position and a fallback position based on the user's position preference.\r\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\r\n   */\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      afterNextRender(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      }, {\n        injector: this._injector\n      });\n    }\n  }\n  /** Updates the tooltip class */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the class on the overlay panel based on the current position of the tooltip. */\n  _updateCurrentPositionClass(connectionPair) {\n    const {\n      overlayY,\n      originX,\n      originY\n    } = connectionPair;\n    let newPosition;\n    // If the overlay is in the middle along the Y axis,\n    // it means that it's either before or after.\n    if (overlayY === 'center') {\n      // Note that since this information is used for styling, we want to\n      // resolve `start` and `end` to their real values, otherwise consumers\n      // would have to remember to do it themselves on each consumption.\n      if (this._dir && this._dir.value === 'rtl') {\n        newPosition = originX === 'end' ? 'left' : 'right';\n      } else {\n        newPosition = originX === 'start' ? 'left' : 'right';\n      }\n    } else {\n      newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n    }\n    if (newPosition !== this._currentPosition) {\n      const overlayRef = this._overlayRef;\n      if (overlayRef) {\n        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n        overlayRef.removePanelClass(classPrefix + this._currentPosition);\n        overlayRef.addPanelClass(classPrefix + newPosition);\n      }\n      this._currentPosition = newPosition;\n    }\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    }\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', event => {\n        this._setupPointerExitEventsIfNeeded();\n        let point = undefined;\n        if (event.x !== undefined && event.y !== undefined) {\n          point = event;\n        }\n        this.show(undefined, point);\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      this._passiveListeners.push(['touchstart', event => {\n        const touch = event.targetTouches?.[0];\n        const origin = touch ? {\n          x: touch.clientX,\n          y: touch.clientY\n        } : undefined;\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n        if (this._touchstartTimeout) {\n          clearTimeout(this._touchstartTimeout);\n        }\n        const DEFAULT_LONGPRESS_DELAY = 500;\n        this._touchstartTimeout = setTimeout(() => {\n          this._touchstartTimeout = null;\n          this.show(undefined, origin);\n        }, this._defaultOptions?.touchLongPressShowDelay ?? DEFAULT_LONGPRESS_DELAY);\n      }]);\n    }\n    this._addListeners(this._passiveListeners);\n  }\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', event => {\n        const newTarget = event.relatedTarget;\n        if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n          this.hide();\n        }\n      }], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        if (this._touchstartTimeout) {\n          clearTimeout(this._touchstartTimeout);\n        }\n        this.hide(this._defaultOptions?.touchendHideDelay);\n      };\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      const elementUnderPointer = this._injector.get(DOCUMENT).elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement;\n      // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      }\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n  /** Updates the tooltip's ARIA description based on it current state. */\n  _syncAriaDescription(oldMessage) {\n    if (this._ariaDescriptionPending) {\n      return;\n    }\n    this._ariaDescriptionPending = true;\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, oldMessage, 'tooltip');\n    // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n    // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n    // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n    // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n    if (!this._isDestroyed) {\n      afterNextRender({\n        write: () => {\n          this._ariaDescriptionPending = false;\n          if (this.message && !this.disabled) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n          }\n        }\n      }, {\n        injector: this._injector\n      });\n    }\n  }\n  static ɵfac = function MatTooltip_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatTooltip)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-tooltip-trigger\"],\n    hostVars: 2,\n    hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-mdc-tooltip-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      position: [0, \"matTooltipPosition\", \"position\"],\n      positionAtOrigin: [0, \"matTooltipPositionAtOrigin\", \"positionAtOrigin\"],\n      disabled: [0, \"matTooltipDisabled\", \"disabled\"],\n      showDelay: [0, \"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [0, \"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [0, \"matTooltipTouchGestures\", \"touchGestures\"],\n      message: [0, \"matTooltip\", \"message\"],\n      tooltipClass: [0, \"matTooltipClass\", \"tooltipClass\"]\n    },\n    exportAs: [\"matTooltip\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-mdc-tooltip-trigger',\n        '[class.mat-mdc-tooltip-disabled]': 'disabled'\n      }\n    }]\n  }], () => [], {\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    positionAtOrigin: [{\n      type: Input,\n      args: ['matTooltipPositionAtOrigin']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\r\n * Internal component that wraps the tooltip's content.\r\n * @docs-private\r\n */\nclass TooltipComponent {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _elementRef = inject(ElementRef);\n  /* Whether the tooltip text overflows to multiple lines */\n  _isMultiline = false;\n  /** Message to display in the tooltip */\n  message;\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass;\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId;\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId;\n  /** Element that caused the tooltip to open. */\n  _triggerElement;\n  /** Amount of milliseconds to delay the closing sequence. */\n  _mouseLeaveHideDelay;\n  /** Whether animations are currently disabled. */\n  _animationsDisabled = _animationsDisabled();\n  /** Reference to the internal tooltip element. */\n  _tooltip;\n  /** Whether interactions on the page should close the tooltip */\n  _closeOnInteraction = false;\n  /** Whether the tooltip is currently visible. */\n  _isVisible = false;\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  _onHide = new Subject();\n  /** Name of the show animation and the class that toggles it. */\n  _showAnimation = 'mat-mdc-tooltip-show';\n  /** Name of the hide animation and the class that toggles it. */\n  _hideAnimation = 'mat-mdc-tooltip-hide';\n  constructor() {}\n  /**\r\n   * Shows the tooltip with an animation originating from the provided origin\r\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\r\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId != null) {\n      clearTimeout(this._hideTimeoutId);\n    }\n    this._showTimeoutId = setTimeout(() => {\n      this._toggleVisibility(true);\n      this._showTimeoutId = undefined;\n    }, delay);\n  }\n  /**\r\n   * Begins the animation to hide the tooltip after the provided delay in ms.\r\n   * @param delay Amount of milliseconds to delay showing the tooltip.\r\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId != null) {\n      clearTimeout(this._showTimeoutId);\n    }\n    this._hideTimeoutId = setTimeout(() => {\n      this._toggleVisibility(false);\n      this._hideTimeoutId = undefined;\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n  isVisible() {\n    return this._isVisible;\n  }\n  ngOnDestroy() {\n    this._cancelPendingAnimations();\n    this._onHide.complete();\n    this._triggerElement = null;\n  }\n  /**\r\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\r\n   * material design spec.\r\n   * https://material.io/design/components/tooltips.html#behavior\r\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\r\n   * Marks that the tooltip needs to be checked in the next change detection run.\r\n   * Mainly used for rendering the initial text before positioning a tooltip, which\r\n   * can be problematic in components with OnPush change detection.\r\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n  _handleMouseLeave({\n    relatedTarget\n  }) {\n    if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n      if (this.isVisible()) {\n        this.hide(this._mouseLeaveHideDelay);\n      } else {\n        this._finalizeAnimation(false);\n      }\n    }\n  }\n  /**\r\n   * Callback for when the timeout in this.show() gets completed.\r\n   * This method is only needed by the mdc-tooltip, and so it is only implemented\r\n   * in the mdc-tooltip, not here.\r\n   */\n  _onShow() {\n    this._isMultiline = this._isTooltipMultiline();\n    this._markForCheck();\n  }\n  /** Whether the tooltip text has overflown to the next line */\n  _isTooltipMultiline() {\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\n    return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n  }\n  /** Event listener dispatched when an animation on the tooltip finishes. */\n  _handleAnimationEnd({\n    animationName\n  }) {\n    if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n      this._finalizeAnimation(animationName === this._showAnimation);\n    }\n  }\n  /** Cancels any pending animation sequences. */\n  _cancelPendingAnimations() {\n    if (this._showTimeoutId != null) {\n      clearTimeout(this._showTimeoutId);\n    }\n    if (this._hideTimeoutId != null) {\n      clearTimeout(this._hideTimeoutId);\n    }\n    this._showTimeoutId = this._hideTimeoutId = undefined;\n  }\n  /** Handles the cleanup after an animation has finished. */\n  _finalizeAnimation(toVisible) {\n    if (toVisible) {\n      this._closeOnInteraction = true;\n    } else if (!this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n  /** Toggles the visibility of the tooltip element. */\n  _toggleVisibility(isVisible) {\n    // We set the classes directly here ourselves so that toggling the tooltip state\n    // isn't bound by change detection. This allows us to hide it even if the\n    // view ref has been detached from the CD tree.\n    const tooltip = this._tooltip.nativeElement;\n    const showClass = this._showAnimation;\n    const hideClass = this._hideAnimation;\n    tooltip.classList.remove(isVisible ? hideClass : showClass);\n    tooltip.classList.add(isVisible ? showClass : hideClass);\n    if (this._isVisible !== isVisible) {\n      this._isVisible = isVisible;\n      this._changeDetectorRef.markForCheck();\n    }\n    // It's common for internal apps to disable animations using `* { animation: none !important }`\n    // which can break the opening sequence. Try to detect such cases and work around them.\n    if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n      const styles = getComputedStyle(tooltip);\n      // Use `getPropertyValue` to avoid issues with property renaming.\n      if (styles.getPropertyValue('animation-duration') === '0s' || styles.getPropertyValue('animation-name') === 'none') {\n        this._animationsDisabled = true;\n      }\n    }\n    if (isVisible) {\n      this._onShow();\n    }\n    if (this._animationsDisabled) {\n      tooltip.classList.add('_mat-animation-noopable');\n      this._finalizeAnimation(isVisible);\n    }\n  }\n  static ɵfac = function TooltipComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TooltipComponent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    viewQuery: function TooltipComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tooltip = _t.first);\n      }\n    },\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseleave\", function TooltipComponent_mouseleave_HostBindingHandler($event) {\n          return ctx._handleMouseLeave($event);\n        });\n      }\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[\"tooltip\", \"\"], [1, \"mdc-tooltip\", \"mat-mdc-tooltip\", 3, \"animationend\", \"ngClass\"], [1, \"mat-mdc-tooltip-surface\", \"mdc-tooltip__surface\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1, 0);\n        i0.ɵɵlistener(\"animationend\", function TooltipComponent_Template_div_animationend_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx._handleAnimationEnd($event));\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mdc-tooltip--multiline\", ctx._isMultiline);\n        i0.ɵɵproperty(\"ngClass\", ctx.tooltipClass);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    dependencies: [NgClass],\n    styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mat-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mat-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mat-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mat-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mat-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mat-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mat-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mat-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '(mouseleave)': '_handleMouseLeave($event)',\n        'aria-hidden': 'true'\n      },\n      imports: [NgClass],\n      template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\",\n      styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mat-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mat-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mat-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mat-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mat-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mat-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mat-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mat-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\\n\"]\n    }]\n  }], () => [], {\n    _tooltip: [{\n      type: ViewChild,\n      args: ['tooltip', {\n        // Use a static query here since we interact directly with\n        // the DOM which can happen before `ngAfterViewInit`.\n        static: true\n      }]\n    }]\n  });\n})();\nclass MatTooltipModule {\n  static ɵfac = function MatTooltipModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatTooltipModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [A11yModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\nexport { MAT_TOOLTIP_SCROLL_STRATEGY as M, SCROLL_THROTTLE_MS as S, TOOLTIP_PANEL_CLASS as T, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY as a, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER as b, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY as c, MAT_TOOLTIP_DEFAULT_OPTIONS as d, MatTooltip as e, TooltipComponent as f, getMatTooltipInvalidPositionError as g, MatTooltipModule as h };","map":{"version":3,"names":["i0","InjectionToken","inject","Injector","ElementRef","NgZone","ViewContainerRef","afterNextRender","DOCUMENT","Directive","Input","ChangeDetectorRef","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","AriaDescriber","FocusMonitor","A11yModule","createRepositionScrollStrategy","ScrollDispatcher","createFlexibleConnectedPositionStrategy","createOverlayRef","OverlayModule","CdkScrollableModule","takeUntil","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","NgClass","normalizePassiveListenerOptions","Platform","Directionality","ComponentPortal","Subject","_","_animationsDisabled","M","MatCommonModule","_c0","SCROLL_THROTTLE_MS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","providedIn","factory","injector","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","_overlay","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MAT_TOOLTIP_DEFAULT_OPTIONS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","MIN_VIEWPORT_TOOLTIP_THRESHOLD","UNBOUNDED_ANCHOR_GAP","MIN_HEIGHT","MAX_WIDTH","MatTooltip","_elementRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_dir","_injector","_viewContainerRef","_defaultOptions","optional","_overlayRef","_tooltipInstance","_overlayPanelClass","_portal","_position","_positionAtOrigin","_disabled","_tooltipClass","_viewInitialized","_pointerExitEventsInitialized","_tooltipComponent","TooltipComponent","_viewportMargin","_currentPosition","_cssClassPrefix","_ariaDescriptionPending","_dirSubscribed","value","_updatePosition","show","updatePosition","positionAtOrigin","_detach","disabled","isDisabled","hide","_setupPointerEnterEventsIfNeeded","_syncAriaDescription","message","_showDelay","_hideDelay","_mouseLeaveHideDelay","touchGestures","_message","oldMessage","String","trim","_isTooltipVisible","_updateTooltipMessage","tooltipClass","_setTooltipClass","_passiveListeners","_touchstartTimeout","_destroyed","_isDestroyed","constructor","defaultOptions","ngAfterViewInit","monitor","pipe","subscribe","origin","run","ngOnDestroy","nativeElement","clearTimeout","dispose","forEach","event","listener","removeEventListener","length","next","complete","removeDescription","stopMonitoring","delay","_cancelPendingAnimations","overlayRef","_createOverlay","instance","attach","_triggerElement","afterHidden","isVisible","toggle","undefined","existingStrategy","getConfig","positionStrategy","_origin","scrollableAncestors","get","getAncestorScrollContainers","panelClass","strategy","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","direction","scrollStrategy","disableAnimations","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","keyCode","preventDefault","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","_getOrigin","overlay","_getOverlayPosition","withPositions","_addOffset","main","fallback","offset","isLtr","originY","offsetY","originX","offsetX","originPosition","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","newPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","point","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","DEFAULT_LONGPRESS_DELAY","setTimeout","touchLongPressShowDelay","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","element","gestures","style","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","write","describe","ɵfac","MatTooltip_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatTooltip_HostBindings","rf","ctx","ɵɵclassProp","inputs","exportAs","ɵsetClassMetadata","args","selector","host","_changeDetectorRef","_isMultiline","_showTimeoutId","_hideTimeoutId","_tooltip","_closeOnInteraction","_isVisible","_onHide","_showAnimation","_hideAnimation","_toggleVisibility","markForCheck","_handleMouseLeave","_finalizeAnimation","_onShow","_isTooltipMultiline","rect","getBoundingClientRect","height","width","_handleAnimationEnd","animationName","toVisible","tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","styles","getPropertyValue","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","TooltipComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","TooltipComponent_HostBindings","ɵɵlistener","TooltipComponent_mouseleave_HostBindingHandler","$event","decls","vars","consts","template","TooltipComponent_Template","_r1","ɵɵgetCurrentView","ɵɵelementStart","TooltipComponent_Template_div_animationend_0_listener","ɵɵrestoreView","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","encapsulation","changeDetection","None","OnPush","imports","static","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","exports","S","T","a","b","c","d","e","f","g","h"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/material/fesm2022/module-CWxMD37a.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, inject, Injector, ElementRef, NgZone, ViewContainerRef, afterNextRender, DOCUMENT, Directive, Input, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\r\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\r\nimport { createRepositionScrollStrategy, ScrollDispatcher, createFlexibleConnectedPositionStrategy, createOverlayRef, OverlayModule } from '@angular/cdk/overlay';\r\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { NgClass } from '@angular/common';\r\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Subject } from 'rxjs';\r\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\r\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\r\n\r\n/** Time in ms to throttle repositioning after scroll events. */\r\nconst SCROLL_THROTTLE_MS = 20;\r\n/**\r\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\r\n * @docs-private\r\n */\r\nfunction getMatTooltipInvalidPositionError(position) {\r\n    return Error(`Tooltip position \"${position}\" is invalid.`);\r\n}\r\n/** Injection token that determines the scroll handling while a tooltip is visible. */\r\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n        const injector = inject(Injector);\r\n        return () => createRepositionScrollStrategy(injector, { scrollThrottle: SCROLL_THROTTLE_MS });\r\n    },\r\n});\r\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\r\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(_overlay) {\r\n    const injector = inject(Injector);\r\n    return () => createRepositionScrollStrategy(injector, { scrollThrottle: SCROLL_THROTTLE_MS });\r\n}\r\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\r\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\r\n    deps: [],\r\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\r\n};\r\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\r\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\r\n    return {\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        touchendHideDelay: 1500,\r\n    };\r\n}\r\n/** Injection token to be used to override the default options for `matTooltip`. */\r\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/**\r\n * CSS class that will be attached to the overlay panel.\r\n * @deprecated\r\n * @breaking-change 13.0.0 remove this variable\r\n */\r\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\r\nconst PANEL_CLASS = 'tooltip-panel';\r\n/** Options used to bind passive event listeners. */\r\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\r\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\r\n// because they have some top-level references to `window` which break during SSR.\r\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\r\nconst UNBOUNDED_ANCHOR_GAP = 8;\r\nconst MIN_HEIGHT = 24;\r\nconst MAX_WIDTH = 200;\r\n/**\r\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\r\n * hiding of a tooltip provided position (defaults to below the element).\r\n *\r\n * https://material.io/design/components/tooltips.html\r\n */\r\nclass MatTooltip {\r\n    _elementRef = inject(ElementRef);\r\n    _ngZone = inject(NgZone);\r\n    _platform = inject(Platform);\r\n    _ariaDescriber = inject(AriaDescriber);\r\n    _focusMonitor = inject(FocusMonitor);\r\n    _dir = inject(Directionality);\r\n    _injector = inject(Injector);\r\n    _viewContainerRef = inject(ViewContainerRef);\r\n    _animationsDisabled = _animationsDisabled();\r\n    _defaultOptions = inject(MAT_TOOLTIP_DEFAULT_OPTIONS, {\r\n        optional: true,\r\n    });\r\n    _overlayRef;\r\n    _tooltipInstance;\r\n    _overlayPanelClass; // Used for styling internally.\r\n    _portal;\r\n    _position = 'below';\r\n    _positionAtOrigin = false;\r\n    _disabled = false;\r\n    _tooltipClass;\r\n    _viewInitialized = false;\r\n    _pointerExitEventsInitialized = false;\r\n    _tooltipComponent = TooltipComponent;\r\n    _viewportMargin = 8;\r\n    _currentPosition;\r\n    _cssClassPrefix = 'mat-mdc';\r\n    _ariaDescriptionPending;\r\n    _dirSubscribed = false;\r\n    /** Allows the user to define the position of the tooltip relative to the parent element */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value) {\r\n        if (value !== this._position) {\r\n            this._position = value;\r\n            if (this._overlayRef) {\r\n                this._updatePosition(this._overlayRef);\r\n                this._tooltipInstance?.show(0);\r\n                this._overlayRef.updatePosition();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Whether tooltip should be relative to the click or touch origin\r\n     * instead of outside the element bounding box.\r\n     */\r\n    get positionAtOrigin() {\r\n        return this._positionAtOrigin;\r\n    }\r\n    set positionAtOrigin(value) {\r\n        this._positionAtOrigin = coerceBooleanProperty(value);\r\n        this._detach();\r\n        this._overlayRef = null;\r\n    }\r\n    /** Disables the display of the tooltip. */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        const isDisabled = coerceBooleanProperty(value);\r\n        if (this._disabled !== isDisabled) {\r\n            this._disabled = isDisabled;\r\n            // If tooltip is disabled, hide immediately.\r\n            if (isDisabled) {\r\n                this.hide(0);\r\n            }\r\n            else {\r\n                this._setupPointerEnterEventsIfNeeded();\r\n            }\r\n            this._syncAriaDescription(this.message);\r\n        }\r\n    }\r\n    /** The default delay in ms before showing the tooltip after show is called */\r\n    get showDelay() {\r\n        return this._showDelay;\r\n    }\r\n    set showDelay(value) {\r\n        this._showDelay = coerceNumberProperty(value);\r\n    }\r\n    _showDelay;\r\n    /** The default delay in ms before hiding the tooltip after hide is called */\r\n    get hideDelay() {\r\n        return this._hideDelay;\r\n    }\r\n    set hideDelay(value) {\r\n        this._hideDelay = coerceNumberProperty(value);\r\n        if (this._tooltipInstance) {\r\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\r\n        }\r\n    }\r\n    _hideDelay;\r\n    /**\r\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\r\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\r\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\r\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\r\n     * elements). The different values for this option configure the touch event handling as follows:\r\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\r\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\r\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\r\n     * - `on` - Enables touch gestures for all elements and disables native\r\n     *   browser gestures with no exceptions.\r\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\r\n     *   showing on touch devices.\r\n     */\r\n    touchGestures = 'auto';\r\n    /** The message to be displayed in the tooltip */\r\n    get message() {\r\n        return this._message;\r\n    }\r\n    set message(value) {\r\n        const oldMessage = this._message;\r\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\r\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\r\n        // away the string-conversion: https://github.com/angular/components/issues/20684\r\n        this._message = value != null ? String(value).trim() : '';\r\n        if (!this._message && this._isTooltipVisible()) {\r\n            this.hide(0);\r\n        }\r\n        else {\r\n            this._setupPointerEnterEventsIfNeeded();\r\n            this._updateTooltipMessage();\r\n        }\r\n        this._syncAriaDescription(oldMessage);\r\n    }\r\n    _message = '';\r\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\r\n    get tooltipClass() {\r\n        return this._tooltipClass;\r\n    }\r\n    set tooltipClass(value) {\r\n        this._tooltipClass = value;\r\n        if (this._tooltipInstance) {\r\n            this._setTooltipClass(this._tooltipClass);\r\n        }\r\n    }\r\n    /** Manually-bound passive event listeners. */\r\n    _passiveListeners = [];\r\n    /** Timer started at the last `touchstart` event. */\r\n    _touchstartTimeout = null;\r\n    /** Emits when the component is destroyed. */\r\n    _destroyed = new Subject();\r\n    /** Whether ngOnDestroyed has been called. */\r\n    _isDestroyed = false;\r\n    constructor() {\r\n        const defaultOptions = this._defaultOptions;\r\n        if (defaultOptions) {\r\n            this._showDelay = defaultOptions.showDelay;\r\n            this._hideDelay = defaultOptions.hideDelay;\r\n            if (defaultOptions.position) {\r\n                this.position = defaultOptions.position;\r\n            }\r\n            if (defaultOptions.positionAtOrigin) {\r\n                this.positionAtOrigin = defaultOptions.positionAtOrigin;\r\n            }\r\n            if (defaultOptions.touchGestures) {\r\n                this.touchGestures = defaultOptions.touchGestures;\r\n            }\r\n            if (defaultOptions.tooltipClass) {\r\n                this.tooltipClass = defaultOptions.tooltipClass;\r\n            }\r\n        }\r\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\r\n    }\r\n    ngAfterViewInit() {\r\n        // This needs to happen after view init so the initial values for all inputs have been set.\r\n        this._viewInitialized = true;\r\n        this._setupPointerEnterEventsIfNeeded();\r\n        this._focusMonitor\r\n            .monitor(this._elementRef)\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe(origin => {\r\n            // Note that the focus monitor runs outside the Angular zone.\r\n            if (!origin) {\r\n                this._ngZone.run(() => this.hide(0));\r\n            }\r\n            else if (origin === 'keyboard') {\r\n                this._ngZone.run(() => this.show());\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Dispose the tooltip when destroyed.\r\n     */\r\n    ngOnDestroy() {\r\n        const nativeElement = this._elementRef.nativeElement;\r\n        // Optimization: Do not call clearTimeout unless there is an active timer.\r\n        if (this._touchstartTimeout) {\r\n            clearTimeout(this._touchstartTimeout);\r\n        }\r\n        if (this._overlayRef) {\r\n            this._overlayRef.dispose();\r\n            this._tooltipInstance = null;\r\n        }\r\n        // Clean up the event listeners set in the constructor\r\n        this._passiveListeners.forEach(([event, listener]) => {\r\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\r\n        });\r\n        this._passiveListeners.length = 0;\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        this._isDestroyed = true;\r\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\r\n        this._focusMonitor.stopMonitoring(nativeElement);\r\n    }\r\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\r\n    show(delay = this.showDelay, origin) {\r\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\r\n            this._tooltipInstance?._cancelPendingAnimations();\r\n            return;\r\n        }\r\n        const overlayRef = this._createOverlay(origin);\r\n        this._detach();\r\n        this._portal =\r\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\r\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\r\n        instance._triggerElement = this._elementRef.nativeElement;\r\n        instance._mouseLeaveHideDelay = this._hideDelay;\r\n        instance\r\n            .afterHidden()\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe(() => this._detach());\r\n        this._setTooltipClass(this._tooltipClass);\r\n        this._updateTooltipMessage();\r\n        instance.show(delay);\r\n    }\r\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\r\n    hide(delay = this.hideDelay) {\r\n        const instance = this._tooltipInstance;\r\n        if (instance) {\r\n            if (instance.isVisible()) {\r\n                instance.hide(delay);\r\n            }\r\n            else {\r\n                instance._cancelPendingAnimations();\r\n                this._detach();\r\n            }\r\n        }\r\n    }\r\n    /** Shows/hides the tooltip */\r\n    toggle(origin) {\r\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\r\n    }\r\n    /** Returns true if the tooltip is currently visible to the user */\r\n    _isTooltipVisible() {\r\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\r\n    }\r\n    /** Create the overlay config and position strategy */\r\n    _createOverlay(origin) {\r\n        if (this._overlayRef) {\r\n            const existingStrategy = this._overlayRef.getConfig()\r\n                .positionStrategy;\r\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\r\n                return this._overlayRef;\r\n            }\r\n            this._detach();\r\n        }\r\n        const scrollableAncestors = this._injector\r\n            .get(ScrollDispatcher)\r\n            .getAncestorScrollContainers(this._elementRef);\r\n        const panelClass = `${this._cssClassPrefix}-${PANEL_CLASS}`;\r\n        // Create connected position strategy that listens for scroll events to reposition.\r\n        const strategy = createFlexibleConnectedPositionStrategy(this._injector, this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\r\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\r\n            .withFlexibleDimensions(false)\r\n            .withViewportMargin(this._viewportMargin)\r\n            .withScrollableContainers(scrollableAncestors);\r\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\r\n            this._updateCurrentPositionClass(change.connectionPair);\r\n            if (this._tooltipInstance) {\r\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\r\n                    // After position changes occur and the overlay is clipped by\r\n                    // a parent scrollable then close the tooltip.\r\n                    this._ngZone.run(() => this.hide(0));\r\n                }\r\n            }\r\n        });\r\n        this._overlayRef = createOverlayRef(this._injector, {\r\n            direction: this._dir,\r\n            positionStrategy: strategy,\r\n            panelClass: this._overlayPanelClass ? [...this._overlayPanelClass, panelClass] : panelClass,\r\n            scrollStrategy: this._injector.get(MAT_TOOLTIP_SCROLL_STRATEGY)(),\r\n            disableAnimations: this._animationsDisabled,\r\n        });\r\n        this._updatePosition(this._overlayRef);\r\n        this._overlayRef\r\n            .detachments()\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe(() => this._detach());\r\n        this._overlayRef\r\n            .outsidePointerEvents()\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\r\n        this._overlayRef\r\n            .keydownEvents()\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe(event => {\r\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                this._ngZone.run(() => this.hide(0));\r\n            }\r\n        });\r\n        if (this._defaultOptions?.disableTooltipInteractivity) {\r\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\r\n        }\r\n        if (!this._dirSubscribed) {\r\n            this._dirSubscribed = true;\r\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n                if (this._overlayRef) {\r\n                    this._updatePosition(this._overlayRef);\r\n                }\r\n            });\r\n        }\r\n        return this._overlayRef;\r\n    }\r\n    /** Detaches the currently-attached tooltip. */\r\n    _detach() {\r\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n            this._overlayRef.detach();\r\n        }\r\n        this._tooltipInstance = null;\r\n    }\r\n    /** Updates the position of the current tooltip. */\r\n    _updatePosition(overlayRef) {\r\n        const position = overlayRef.getConfig().positionStrategy;\r\n        const origin = this._getOrigin();\r\n        const overlay = this._getOverlayPosition();\r\n        position.withPositions([\r\n            this._addOffset({ ...origin.main, ...overlay.main }),\r\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\r\n        ]);\r\n    }\r\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\r\n    _addOffset(position) {\r\n        const offset = UNBOUNDED_ANCHOR_GAP;\r\n        const isLtr = !this._dir || this._dir.value == 'ltr';\r\n        if (position.originY === 'top') {\r\n            position.offsetY = -offset;\r\n        }\r\n        else if (position.originY === 'bottom') {\r\n            position.offsetY = offset;\r\n        }\r\n        else if (position.originX === 'start') {\r\n            position.offsetX = isLtr ? -offset : offset;\r\n        }\r\n        else if (position.originX === 'end') {\r\n            position.offsetX = isLtr ? offset : -offset;\r\n        }\r\n        return position;\r\n    }\r\n    /**\r\n     * Returns the origin position and a fallback position based on the user's position preference.\r\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\r\n     */\r\n    _getOrigin() {\r\n        const isLtr = !this._dir || this._dir.value == 'ltr';\r\n        const position = this.position;\r\n        let originPosition;\r\n        if (position == 'above' || position == 'below') {\r\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\r\n        }\r\n        else if (position == 'before' ||\r\n            (position == 'left' && isLtr) ||\r\n            (position == 'right' && !isLtr)) {\r\n            originPosition = { originX: 'start', originY: 'center' };\r\n        }\r\n        else if (position == 'after' ||\r\n            (position == 'right' && isLtr) ||\r\n            (position == 'left' && !isLtr)) {\r\n            originPosition = { originX: 'end', originY: 'center' };\r\n        }\r\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            throw getMatTooltipInvalidPositionError(position);\r\n        }\r\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\r\n        return {\r\n            main: originPosition,\r\n            fallback: { originX: x, originY: y },\r\n        };\r\n    }\r\n    /** Returns the overlay position and a fallback position based on the user's preference */\r\n    _getOverlayPosition() {\r\n        const isLtr = !this._dir || this._dir.value == 'ltr';\r\n        const position = this.position;\r\n        let overlayPosition;\r\n        if (position == 'above') {\r\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\r\n        }\r\n        else if (position == 'below') {\r\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\r\n        }\r\n        else if (position == 'before' ||\r\n            (position == 'left' && isLtr) ||\r\n            (position == 'right' && !isLtr)) {\r\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\r\n        }\r\n        else if (position == 'after' ||\r\n            (position == 'right' && isLtr) ||\r\n            (position == 'left' && !isLtr)) {\r\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\r\n        }\r\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            throw getMatTooltipInvalidPositionError(position);\r\n        }\r\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\r\n        return {\r\n            main: overlayPosition,\r\n            fallback: { overlayX: x, overlayY: y },\r\n        };\r\n    }\r\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\r\n    _updateTooltipMessage() {\r\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\r\n        // calculate the correct positioning based on the size of the text.\r\n        if (this._tooltipInstance) {\r\n            this._tooltipInstance.message = this.message;\r\n            this._tooltipInstance._markForCheck();\r\n            afterNextRender(() => {\r\n                if (this._tooltipInstance) {\r\n                    this._overlayRef.updatePosition();\r\n                }\r\n            }, {\r\n                injector: this._injector,\r\n            });\r\n        }\r\n    }\r\n    /** Updates the tooltip class */\r\n    _setTooltipClass(tooltipClass) {\r\n        if (this._tooltipInstance) {\r\n            this._tooltipInstance.tooltipClass = tooltipClass;\r\n            this._tooltipInstance._markForCheck();\r\n        }\r\n    }\r\n    /** Inverts an overlay position. */\r\n    _invertPosition(x, y) {\r\n        if (this.position === 'above' || this.position === 'below') {\r\n            if (y === 'top') {\r\n                y = 'bottom';\r\n            }\r\n            else if (y === 'bottom') {\r\n                y = 'top';\r\n            }\r\n        }\r\n        else {\r\n            if (x === 'end') {\r\n                x = 'start';\r\n            }\r\n            else if (x === 'start') {\r\n                x = 'end';\r\n            }\r\n        }\r\n        return { x, y };\r\n    }\r\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\r\n    _updateCurrentPositionClass(connectionPair) {\r\n        const { overlayY, originX, originY } = connectionPair;\r\n        let newPosition;\r\n        // If the overlay is in the middle along the Y axis,\r\n        // it means that it's either before or after.\r\n        if (overlayY === 'center') {\r\n            // Note that since this information is used for styling, we want to\r\n            // resolve `start` and `end` to their real values, otherwise consumers\r\n            // would have to remember to do it themselves on each consumption.\r\n            if (this._dir && this._dir.value === 'rtl') {\r\n                newPosition = originX === 'end' ? 'left' : 'right';\r\n            }\r\n            else {\r\n                newPosition = originX === 'start' ? 'left' : 'right';\r\n            }\r\n        }\r\n        else {\r\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\r\n        }\r\n        if (newPosition !== this._currentPosition) {\r\n            const overlayRef = this._overlayRef;\r\n            if (overlayRef) {\r\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\r\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\r\n                overlayRef.addPanelClass(classPrefix + newPosition);\r\n            }\r\n            this._currentPosition = newPosition;\r\n        }\r\n    }\r\n    /** Binds the pointer events to the tooltip trigger. */\r\n    _setupPointerEnterEventsIfNeeded() {\r\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\r\n        if (this._disabled ||\r\n            !this.message ||\r\n            !this._viewInitialized ||\r\n            this._passiveListeners.length) {\r\n            return;\r\n        }\r\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\r\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\r\n        if (this._platformSupportsMouseEvents()) {\r\n            this._passiveListeners.push([\r\n                'mouseenter',\r\n                event => {\r\n                    this._setupPointerExitEventsIfNeeded();\r\n                    let point = undefined;\r\n                    if (event.x !== undefined && event.y !== undefined) {\r\n                        point = event;\r\n                    }\r\n                    this.show(undefined, point);\r\n                },\r\n            ]);\r\n        }\r\n        else if (this.touchGestures !== 'off') {\r\n            this._disableNativeGesturesIfNecessary();\r\n            this._passiveListeners.push([\r\n                'touchstart',\r\n                event => {\r\n                    const touch = event.targetTouches?.[0];\r\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\r\n                    // Note that it's important that we don't `preventDefault` here,\r\n                    // because it can prevent click events from firing on the element.\r\n                    this._setupPointerExitEventsIfNeeded();\r\n                    if (this._touchstartTimeout) {\r\n                        clearTimeout(this._touchstartTimeout);\r\n                    }\r\n                    const DEFAULT_LONGPRESS_DELAY = 500;\r\n                    this._touchstartTimeout = setTimeout(() => {\r\n                        this._touchstartTimeout = null;\r\n                        this.show(undefined, origin);\r\n                    }, this._defaultOptions?.touchLongPressShowDelay ?? DEFAULT_LONGPRESS_DELAY);\r\n                },\r\n            ]);\r\n        }\r\n        this._addListeners(this._passiveListeners);\r\n    }\r\n    _setupPointerExitEventsIfNeeded() {\r\n        if (this._pointerExitEventsInitialized) {\r\n            return;\r\n        }\r\n        this._pointerExitEventsInitialized = true;\r\n        const exitListeners = [];\r\n        if (this._platformSupportsMouseEvents()) {\r\n            exitListeners.push([\r\n                'mouseleave',\r\n                event => {\r\n                    const newTarget = event.relatedTarget;\r\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\r\n                        this.hide();\r\n                    }\r\n                },\r\n            ], ['wheel', event => this._wheelListener(event)]);\r\n        }\r\n        else if (this.touchGestures !== 'off') {\r\n            this._disableNativeGesturesIfNecessary();\r\n            const touchendListener = () => {\r\n                if (this._touchstartTimeout) {\r\n                    clearTimeout(this._touchstartTimeout);\r\n                }\r\n                this.hide(this._defaultOptions?.touchendHideDelay);\r\n            };\r\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\r\n        }\r\n        this._addListeners(exitListeners);\r\n        this._passiveListeners.push(...exitListeners);\r\n    }\r\n    _addListeners(listeners) {\r\n        listeners.forEach(([event, listener]) => {\r\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\r\n        });\r\n    }\r\n    _platformSupportsMouseEvents() {\r\n        return !this._platform.IOS && !this._platform.ANDROID;\r\n    }\r\n    /** Listener for the `wheel` event on the element. */\r\n    _wheelListener(event) {\r\n        if (this._isTooltipVisible()) {\r\n            const elementUnderPointer = this._injector\r\n                .get(DOCUMENT)\r\n                .elementFromPoint(event.clientX, event.clientY);\r\n            const element = this._elementRef.nativeElement;\r\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\r\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\r\n            // work around it by finding the element under the user's cursor and closing the tooltip\r\n            // if it's not the trigger.\r\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\r\n                this.hide();\r\n            }\r\n        }\r\n    }\r\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\r\n    _disableNativeGesturesIfNecessary() {\r\n        const gestures = this.touchGestures;\r\n        if (gestures !== 'off') {\r\n            const element = this._elementRef.nativeElement;\r\n            const style = element.style;\r\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\r\n            // textareas, because it prevents the user from typing into them on iOS Safari.\r\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\r\n                style.userSelect =\r\n                    style.msUserSelect =\r\n                        style.webkitUserSelect =\r\n                            style.MozUserSelect =\r\n                                'none';\r\n            }\r\n            // If we have `auto` gestures and the element uses native HTML dragging,\r\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\r\n            if (gestures === 'on' || !element.draggable) {\r\n                style.webkitUserDrag = 'none';\r\n            }\r\n            style.touchAction = 'none';\r\n            style.webkitTapHighlightColor = 'transparent';\r\n        }\r\n    }\r\n    /** Updates the tooltip's ARIA description based on it current state. */\r\n    _syncAriaDescription(oldMessage) {\r\n        if (this._ariaDescriptionPending) {\r\n            return;\r\n        }\r\n        this._ariaDescriptionPending = true;\r\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, oldMessage, 'tooltip');\r\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\r\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\r\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\r\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\r\n        if (!this._isDestroyed) {\r\n            afterNextRender({\r\n                write: () => {\r\n                    this._ariaDescriptionPending = false;\r\n                    if (this.message && !this.disabled) {\r\n                        this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\r\n                    }\r\n                },\r\n            }, { injector: this._injector });\r\n        }\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTooltip, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatTooltip, isStandalone: true, selector: \"[matTooltip]\", inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, host: { properties: { \"class.mat-mdc-tooltip-disabled\": \"disabled\" }, classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTooltip, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matTooltip]',\r\n                    exportAs: 'matTooltip',\r\n                    host: {\r\n                        'class': 'mat-mdc-tooltip-trigger',\r\n                        '[class.mat-mdc-tooltip-disabled]': 'disabled',\r\n                    },\r\n                }]\r\n        }], ctorParameters: () => [], propDecorators: { position: [{\r\n                type: Input,\r\n                args: ['matTooltipPosition']\r\n            }], positionAtOrigin: [{\r\n                type: Input,\r\n                args: ['matTooltipPositionAtOrigin']\r\n            }], disabled: [{\r\n                type: Input,\r\n                args: ['matTooltipDisabled']\r\n            }], showDelay: [{\r\n                type: Input,\r\n                args: ['matTooltipShowDelay']\r\n            }], hideDelay: [{\r\n                type: Input,\r\n                args: ['matTooltipHideDelay']\r\n            }], touchGestures: [{\r\n                type: Input,\r\n                args: ['matTooltipTouchGestures']\r\n            }], message: [{\r\n                type: Input,\r\n                args: ['matTooltip']\r\n            }], tooltipClass: [{\r\n                type: Input,\r\n                args: ['matTooltipClass']\r\n            }] } });\r\n/**\r\n * Internal component that wraps the tooltip's content.\r\n * @docs-private\r\n */\r\nclass TooltipComponent {\r\n    _changeDetectorRef = inject(ChangeDetectorRef);\r\n    _elementRef = inject(ElementRef);\r\n    /* Whether the tooltip text overflows to multiple lines */\r\n    _isMultiline = false;\r\n    /** Message to display in the tooltip */\r\n    message;\r\n    /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\r\n    tooltipClass;\r\n    /** The timeout ID of any current timer set to show the tooltip */\r\n    _showTimeoutId;\r\n    /** The timeout ID of any current timer set to hide the tooltip */\r\n    _hideTimeoutId;\r\n    /** Element that caused the tooltip to open. */\r\n    _triggerElement;\r\n    /** Amount of milliseconds to delay the closing sequence. */\r\n    _mouseLeaveHideDelay;\r\n    /** Whether animations are currently disabled. */\r\n    _animationsDisabled = _animationsDisabled();\r\n    /** Reference to the internal tooltip element. */\r\n    _tooltip;\r\n    /** Whether interactions on the page should close the tooltip */\r\n    _closeOnInteraction = false;\r\n    /** Whether the tooltip is currently visible. */\r\n    _isVisible = false;\r\n    /** Subject for notifying that the tooltip has been hidden from the view */\r\n    _onHide = new Subject();\r\n    /** Name of the show animation and the class that toggles it. */\r\n    _showAnimation = 'mat-mdc-tooltip-show';\r\n    /** Name of the hide animation and the class that toggles it. */\r\n    _hideAnimation = 'mat-mdc-tooltip-hide';\r\n    constructor() { }\r\n    /**\r\n     * Shows the tooltip with an animation originating from the provided origin\r\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\r\n     */\r\n    show(delay) {\r\n        // Cancel the delayed hide if it is scheduled\r\n        if (this._hideTimeoutId != null) {\r\n            clearTimeout(this._hideTimeoutId);\r\n        }\r\n        this._showTimeoutId = setTimeout(() => {\r\n            this._toggleVisibility(true);\r\n            this._showTimeoutId = undefined;\r\n        }, delay);\r\n    }\r\n    /**\r\n     * Begins the animation to hide the tooltip after the provided delay in ms.\r\n     * @param delay Amount of milliseconds to delay showing the tooltip.\r\n     */\r\n    hide(delay) {\r\n        // Cancel the delayed show if it is scheduled\r\n        if (this._showTimeoutId != null) {\r\n            clearTimeout(this._showTimeoutId);\r\n        }\r\n        this._hideTimeoutId = setTimeout(() => {\r\n            this._toggleVisibility(false);\r\n            this._hideTimeoutId = undefined;\r\n        }, delay);\r\n    }\r\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\r\n    afterHidden() {\r\n        return this._onHide;\r\n    }\r\n    /** Whether the tooltip is being displayed. */\r\n    isVisible() {\r\n        return this._isVisible;\r\n    }\r\n    ngOnDestroy() {\r\n        this._cancelPendingAnimations();\r\n        this._onHide.complete();\r\n        this._triggerElement = null;\r\n    }\r\n    /**\r\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\r\n     * material design spec.\r\n     * https://material.io/design/components/tooltips.html#behavior\r\n     */\r\n    _handleBodyInteraction() {\r\n        if (this._closeOnInteraction) {\r\n            this.hide(0);\r\n        }\r\n    }\r\n    /**\r\n     * Marks that the tooltip needs to be checked in the next change detection run.\r\n     * Mainly used for rendering the initial text before positioning a tooltip, which\r\n     * can be problematic in components with OnPush change detection.\r\n     */\r\n    _markForCheck() {\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    _handleMouseLeave({ relatedTarget }) {\r\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\r\n            if (this.isVisible()) {\r\n                this.hide(this._mouseLeaveHideDelay);\r\n            }\r\n            else {\r\n                this._finalizeAnimation(false);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Callback for when the timeout in this.show() gets completed.\r\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\r\n     * in the mdc-tooltip, not here.\r\n     */\r\n    _onShow() {\r\n        this._isMultiline = this._isTooltipMultiline();\r\n        this._markForCheck();\r\n    }\r\n    /** Whether the tooltip text has overflown to the next line */\r\n    _isTooltipMultiline() {\r\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\r\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\r\n    }\r\n    /** Event listener dispatched when an animation on the tooltip finishes. */\r\n    _handleAnimationEnd({ animationName }) {\r\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\r\n            this._finalizeAnimation(animationName === this._showAnimation);\r\n        }\r\n    }\r\n    /** Cancels any pending animation sequences. */\r\n    _cancelPendingAnimations() {\r\n        if (this._showTimeoutId != null) {\r\n            clearTimeout(this._showTimeoutId);\r\n        }\r\n        if (this._hideTimeoutId != null) {\r\n            clearTimeout(this._hideTimeoutId);\r\n        }\r\n        this._showTimeoutId = this._hideTimeoutId = undefined;\r\n    }\r\n    /** Handles the cleanup after an animation has finished. */\r\n    _finalizeAnimation(toVisible) {\r\n        if (toVisible) {\r\n            this._closeOnInteraction = true;\r\n        }\r\n        else if (!this.isVisible()) {\r\n            this._onHide.next();\r\n        }\r\n    }\r\n    /** Toggles the visibility of the tooltip element. */\r\n    _toggleVisibility(isVisible) {\r\n        // We set the classes directly here ourselves so that toggling the tooltip state\r\n        // isn't bound by change detection. This allows us to hide it even if the\r\n        // view ref has been detached from the CD tree.\r\n        const tooltip = this._tooltip.nativeElement;\r\n        const showClass = this._showAnimation;\r\n        const hideClass = this._hideAnimation;\r\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\r\n        tooltip.classList.add(isVisible ? showClass : hideClass);\r\n        if (this._isVisible !== isVisible) {\r\n            this._isVisible = isVisible;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\r\n        // which can break the opening sequence. Try to detect such cases and work around them.\r\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\r\n            const styles = getComputedStyle(tooltip);\r\n            // Use `getPropertyValue` to avoid issues with property renaming.\r\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\r\n                styles.getPropertyValue('animation-name') === 'none') {\r\n                this._animationsDisabled = true;\r\n            }\r\n        }\r\n        if (isVisible) {\r\n            this._onShow();\r\n        }\r\n        if (this._animationsDisabled) {\r\n            tooltip.classList.add('_mat-animation-noopable');\r\n            this._finalizeAnimation(isVisible);\r\n        }\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TooltipComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: TooltipComponent, isStandalone: true, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mat-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mat-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mat-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mat-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mat-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mat-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mat-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mat-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\\n\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TooltipComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\r\n                        '(mouseleave)': '_handleMouseLeave($event)',\r\n                        'aria-hidden': 'true',\r\n                    }, imports: [NgClass], template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mat-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mat-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mat-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mat-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mat-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mat-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mat-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mat-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\\n\"] }]\r\n        }], ctorParameters: () => [], propDecorators: { _tooltip: [{\r\n                type: ViewChild,\r\n                args: ['tooltip', {\r\n                        // Use a static query here since we interact directly with\r\n                        // the DOM which can happen before `ngAfterViewInit`.\r\n                        static: true,\r\n                    }]\r\n            }] } });\r\n\r\nclass MatTooltipModule {\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTooltipModule, imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\r\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\r\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n                }]\r\n        }] });\r\n\r\nexport { MAT_TOOLTIP_SCROLL_STRATEGY as M, SCROLL_THROTTLE_MS as S, TOOLTIP_PANEL_CLASS as T, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY as a, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER as b, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY as c, MAT_TOOLTIP_DEFAULT_OPTIONS as d, MatTooltip as e, TooltipComponent as f, getMatTooltipInvalidPositionError as g, MatTooltipModule as h };\r\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}