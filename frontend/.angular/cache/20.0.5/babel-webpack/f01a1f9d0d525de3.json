{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport { attachInjectFlag, _global, ɵɵdefineInjectable as __defineInjectable, ɵɵdefineInjector as __defineInjector, ɵɵinject as __inject, ɵɵinvalidFactoryDep as __invalidFactoryDep, resolveForwardRef, newArray, EMPTY_OBJ, assertString, assertFirstCreatePass, assertDefined, assertNotEqual, FLAGS, assertEqual, isInCheckNoChangesMode, PREORDER_HOOK_FLAGS, throwError, assertNumber, assertGreaterThan, HEADER_OFFSET, DECLARATION_VIEW, NG_FACTORY_DEF, isForwardRef, getFactoryDef, assertIndexInRange, assertTNodeForLView, enterDI, runInInjectorProfilerContext, getCurrentTNode, getLView, emitInjectorToCreateInstanceEvent, emitInstanceCreatedByInjectorEvent, throwProviderNotFoundError, leaveDI, assertNodeInjector, throwCyclicDependencyError, stringifyForError, setInjectorProfilerContext, setInjectImplementation, assertDirectiveDef, NG_ELEMENT_ID, convertToBitFlags, isRootView, T_HOST, TVIEW, injectRootLimpMode, isComponentDef, EMBEDDED_VIEW_INJECTOR, INJECTOR$1 as INJECTOR, DECLARATION_COMPONENT_VIEW, isComponentHost, RuntimeError, NG_PROV_DEF, getClosureSafeProperty, getNativeByTNode, flatten, arrayEquals, ID, isLView, assertDomNode, unwrapRNode, getComponentLViewByIndex, CONTEXT, EMPTY_ARRAY, assertLView, HOST, CHILD_HEAD, NEXT, isLContainer, getLViewParent, Injector, CLEANUP, getComponentDef, getDirectiveDef, InjectionToken, inject, isContentQueryHost, setCurrentQueryIndex, XSS_SECURITY_URL, renderStringify, ENVIRONMENT, makeEnvironmentProviders, formatRuntimeError, resetPreOrderHookFlags, PARENT, RENDERER, HYDRATION, CHILD_TAIL, assertSame, assertFirstUpdatePass, getSelectedIndex, getTView, assertIndexInDeclRange, setSelectedIndex, assertNotSame, setCurrentDirectiveIndex, INTERNAL_APPLICATION_ERROR_HANDLER, stringify, getCurrentDirectiveIndex, unwrapLView, isCreationMode, assertNotReactive, enterView, QUERIES, leaveView, assertLContainer, DECLARATION_LCONTAINER, MOVED_VIEWS, isDestroyed, REACTIVE_TEMPLATE_CONSUMER, ON_DESTROY_HOOKS, assertFunction, EFFECTS, assertProjectionSlots, NATIVE, assertParentView, CONTAINER_HEADER_OFFSET, AFTER_RENDER_SEQUENCES_TO_ADD, markAncestorsForTraversal, markViewForRefresh, setIsRefreshingViews, isExhaustiveCheckNoChanges, requiresRefreshOrTraversal, setIsInCheckNoChangesMode, CheckNoChangesMode, setBindingIndex, EFFECTS_TO_SCHEDULE, viewAttachedToChangeDetector, setBindingRootForHostBindings, isRefreshingViews, removeFromArray, addToArray, updateAncestorTraversalFlagsOnAttach, storeLViewOnDestroy, VIEW_REFS, assertGreaterThanOrEqual, isInI18nBlock, assertTNodeForTView, setCurrentTNode, getCurrentParentTNode, getCurrentTNodePlaceholderOk, isCurrentTNodeParent, isInSkipHydrationBlock as isInSkipHydrationBlock$1, assertTNode, assertTIcu, assertNumberInRange, DEHYDRATED_VIEWS, getNgModuleDef, getPipeDef as getPipeDef$1, getNgModuleDefOrThrow, isStandalone, concatStringsWithSpace, assertInjectImplementationNotEqual, emitInjectEvent, getConstant, assertLessThan, getOrCreateTViewCleanup, getOrCreateLViewCleanup, isDirectiveHost, assertNotDefined, nextBindingIndex, getSelectedTNode, getDirectiveDefOrThrow, getTNode, assertComponentType, debugStringifyTypeForError, ChangeDetectionScheduler, EnvironmentInjector, SVG_NAMESPACE, MATH_ML_NAMESPACE, viewAttachedToContainer, storeCleanupWithContext, signal, createInjectorWithoutInjectorInstances, R3Injector, getNullInjector, internalImportProvidersFrom, initNgDevMode, fillProperties, wasLastNodeCreated, lastNodeWasCreated, getBindingsEnabled, isInInjectionContext, DestroyRef, PendingTasksInternal, noop, ErrorHandler, assertNotInReactiveContext, assertInInjectionContext, ViewContext, removeLViewOnDestroy, walkUpViews, getNativeByIndex, assertElement, arrayInsert2, arraySplice, setInjectorProfiler, NullInjector, ENVIRONMENT_INITIALIZER, INJECTOR_DEF_TYPES, walkProviderTree, getInjectorDef, deepForEach, isTypeProvider, isSignal, runInInjectionContext, ZONELESS_ENABLED, EffectScheduler, PendingTasks, getBindingIndex, getElementDepthCount, increaseElementDepthCount, setCurrentTNodeAsNotParent, assertHasParent, isSkipHydrationRootTNode, leaveSkipHydrationBlock, decreaseElementDepthCount, getNamespace, enterSkipHydrationBlock, getCurrentDirectiveDef, assertIndexInExpandoRange, assertOneOf, setInI18nBlock, nextContextImpl, getCurrentQueryIndex, getContextLView, load, keyValueArrayIndexOf, keyValueArraySet, keyValueArrayGet, incrementBindingIndex, isWritableSignal, store, providerToFactory, emitProviderConfiguredEvent, isClassProvider, getBindingRoot, NG_COMP_DEF, ɵɵresetView as __resetView, ɵɵnamespaceHTML as __namespaceHTML, ɵɵnamespaceMathML as __namespaceMathML, ɵɵnamespaceSVG as __namespaceSVG, ɵɵenableBindings as __enableBindings, ɵɵdisableBindings as __disableBindings, ɵɵrestoreView as __restoreView, forwardRef, NG_MOD_DEF, NG_INJ_DEF, NG_DIR_DEF, NG_PIPE_DEF, ZONELESS_SCHEDULER_DISABLED, SCHEDULE_IN_ROOT_ZONE, PROVIDED_ZONELESS, getNativeByTNodeOrNull } from './root_effect_scheduler.mjs';\nimport { setActiveConsumer, SIGNAL, consumerDestroy, REACTIVE_NODE, consumerPollProducersForChange, consumerBeforeComputation, getActiveConsumer, consumerAfterComputation, createComputed, setThrowInvalidWriteToSignalError } from './signal.mjs';\nimport { Subject, Subscription } from 'rxjs';\nimport { setActiveConsumer as setActiveConsumer$1 } from '@angular/core/primitives/signals';\nimport { map } from 'rxjs/operators';\nimport { Attribute as Attribute$1 } from './attribute.mjs';\n\n/**\r\n * Convince closure compiler that the wrapped function has no side-effects.\r\n *\r\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\r\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\r\n * It is important that the return value for the `noSideEffects` function be assigned\r\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\r\n * compiler.\r\n */\nfunction noSideEffects(fn) {\n  return {\n    toString: fn\n  }.toString();\n}\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\r\n * @suppress {globalThis}\r\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this;\n      }\n      const annotationInstance = new DecoratorFactory(...args);\n      return function TypeDecorator(cls) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n          value: []\n        })[ANNOTATIONS];\n        annotations.push(annotationInstance);\n        return cls;\n      };\n    }\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n  });\n}\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new ParamDecoratorFactory(...args);\n      ParamDecorator.annotation = annotationInstance;\n      return ParamDecorator;\n      function ParamDecorator(cls, unusedKey, index) {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n          value: []\n        })[PARAMETERS];\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const decoratorInstance = new PropDecoratorFactory(...args);\n      function PropDecorator(target, name) {\n        // target is undefined with standard decorators. This case is not supported and will throw\n        // if this decorator is used in JIT mode with standard decorators.\n        if (target === undefined) {\n          throw new Error('Standard Angular field decorators are not supported in JIT mode.');\n        }\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n          value: {}\n        })[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n      }\n      return PropDecorator;\n    }\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n\n/**\r\n * Inject decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\nmakeParamDecorator('Inject', token => ({\n  token\n})), -1 /* DecoratorFlags.Inject */);\n/**\r\n * Optional decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Optional =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\r\n * Self decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Self =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\r\n * `SkipSelf` decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst SkipSelf =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\r\n * Host decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Host =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\nfunction getCompilerFacade(request) {\n  const globalNg = _global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n\n/**\r\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\r\n *\r\n * This should be kept up to date with the public exports of @angular/core.\r\n */\nconst angularCoreDiEnv = {\n  'ɵɵdefineInjectable': __defineInjectable,\n  'ɵɵdefineInjector': __defineInjector,\n  'ɵɵinject': __inject,\n  'ɵɵinvalidFactoryDep': __invalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef\n};\n\n/**\r\n * @description\r\n *\r\n * Represents a type that a Component or other object is instances of.\r\n *\r\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\r\n * the `MyCustomComponent` constructor function.\r\n *\r\n * @publicApi\r\n */\nconst Type = Function;\nfunction isType(v) {\n  return typeof v === 'function';\n}\n\n/*\r\n * #########################\r\n * Attention: These Regular expressions have to hold even if the code is minified!\r\n * ##########################\r\n */\n/**\r\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\r\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\r\n * it intends to capture the pattern where existing constructors have been downleveled from\r\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\r\n *\r\n * ```ts\r\n *   function MyClass() {\r\n *     var _this = _super.apply(this, arguments) || this;\r\n * ```\r\n *\r\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\r\n * ```ts\r\n *   function MyClass() {\r\n *     var _this = _super.apply(this, __spread(arguments)) || this;\r\n * ```\r\n *\r\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\r\n * ```ts\r\n *   function MyClass() {\r\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\r\n * ```\r\n *\r\n * More details can be found in: https://github.com/angular/angular/issues/38453.\r\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\r\n * Regular expression that detects ES2015 classes which extend from other classes and\r\n * have an explicit constructor defined.\r\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\r\n * Regular expression that detects ES2015 classes which extend from other classes\r\n * and inherit a constructor.\r\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\r\n * Determine whether a stringified type is a class which delegates its constructor\r\n * to its parent.\r\n *\r\n * This is not trivial since compiled code can actually contain a constructor function\r\n * even if the original source code did not. For instance, when the child class contains\r\n * an initialized instance property.\r\n */\nfunction isDelegateCtor(typeStr) {\n  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);\n}\nclass ReflectionCapabilities {\n  _reflect;\n  constructor(reflect) {\n    this._reflect = reflect || _global['Reflect'];\n  }\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    let result;\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n  _ownParameters(type, parentCtor) {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n    // Prefer the direct API.\n    if (type.parameters && type.parameters !== parentCtor.parameters) {\n      return type.parameters;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = type.ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray(type.length);\n  }\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n      let annotations = typeOrFunc.annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return typeOrFunc[ANNOTATIONS];\n    }\n    return null;\n  }\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = typeOrFunc.propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = typeOrFunc.propDecorators;\n      const propMetadata = {};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return typeOrFunc[PROP_METADATA];\n    }\n    return null;\n  }\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        const decorators = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n  ownPropMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\nfunction getParentCtor(ctor) {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n\n/**\r\n * Represents a basic change from a previous to a new value for a single\r\n * property on a directive instance. Passed as a value in a\r\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\r\n *\r\n * @see {@link OnChanges}\r\n *\r\n * @publicApi\r\n */\nclass SimpleChange {\n  previousValue;\n  currentValue;\n  firstChange;\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\r\n   * Check whether the new value is the first value assigned.\r\n   */\n  isFirstChange() {\n    return this.firstChange;\n  }\n}\nfunction applyValueToInputField(instance, inputSignalNode, privateName, value) {\n  if (inputSignalNode !== null) {\n    inputSignalNode.applyValueToInputSignal(inputSignalNode, value);\n  } else {\n    instance[privateName] = value;\n  }\n}\n\n/**\r\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\r\n * lifecycle hook, so it should be included in any component that implements\r\n * that hook.\r\n *\r\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\r\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\r\n * inherited properties will not be propagated to the ngOnChanges lifecycle\r\n * hook.\r\n *\r\n * Example usage:\r\n *\r\n * ```ts\r\n * static ɵcmp = defineComponent({\r\n *   ...\r\n *   inputs: {name: 'publicName'},\r\n *   features: [NgOnChangesFeature]\r\n * });\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\nconst ɵɵNgOnChangesFeature = /* @__PURE__ */(() => {\n  const ɵɵNgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;\n  // This option ensures that the ngOnChanges lifecycle hook will be inherited\n  // from superclasses (in InheritDefinitionFeature).\n  /** @nocollapse */\n  ɵɵNgOnChangesFeatureImpl.ngInherit = true;\n  return ɵɵNgOnChangesFeatureImpl;\n})();\nfunction NgOnChangesFeatureImpl(definition) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n/**\r\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\r\n * `ngOnChanges`.\r\n *\r\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\r\n * found it invokes `ngOnChanges` on the component instance.\r\n *\r\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\r\n *     it is guaranteed to be called with component instance.\r\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n  if (current) {\n    const previous = simpleChangesStore.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore.current = null;\n    this.ngOnChanges(current);\n  }\n}\nfunction ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {\n  const declaredName = this.declaredInputs[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {\n    previous: EMPTY_OBJ,\n    current: null\n  });\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n  applyValueToInputField(instance, inputSignalNode, privateName, value);\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\nconst profilerCallbacks = [];\nconst NOOP_PROFILER_REMOVAL = () => {};\nfunction removeProfiler(profiler) {\n  const profilerIdx = profilerCallbacks.indexOf(profiler);\n  if (profilerIdx !== -1) {\n    profilerCallbacks.splice(profilerIdx, 1);\n  }\n}\n/**\r\n * Adds a callback function which will be invoked before and after performing certain actions at\r\n * runtime (for example, before and after running change detection). Multiple profiler callbacks can be set:\r\n * in this case profiling events are reported to every registered callback.\r\n *\r\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\r\n * The contract of the function might be changed in any release and/or the function can be removed\r\n * completely.\r\n *\r\n * @param profiler function provided by the caller or null value to disable all profilers.\r\n * @returns a cleanup function that, when invoked, removes a given profiler callback.\r\n */\nfunction setProfiler(profiler) {\n  if (profiler !== null) {\n    if (!profilerCallbacks.includes(profiler)) {\n      profilerCallbacks.push(profiler);\n    }\n    return () => removeProfiler(profiler);\n  } else {\n    profilerCallbacks.length = 0;\n    return NOOP_PROFILER_REMOVAL;\n  }\n}\n/**\r\n * Profiler function which wraps user code executed by the runtime.\r\n *\r\n * @param event ProfilerEvent corresponding to the execution context\r\n * @param instance component instance\r\n * @param eventFn function associated with event.\r\n *    For example a template function, lifecycle hook, or output listener.\r\n *    The value depends on the execution context\r\n */\nconst profiler = function (event, instance = null, eventFn) {\n  for (let i = 0; i < profilerCallbacks.length; i++) {\n    const profilerCallback = profilerCallbacks[i];\n    profilerCallback(event, instance, eventFn);\n  }\n};\n\n/**\r\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\r\n *\r\n * Must be run *only* on the first template pass.\r\n *\r\n * Sets up the pre-order hooks on the provided `tView`,\r\n * see {@link HookData} for details about the data structure.\r\n *\r\n * @param directiveIndex The index of the directive in LView\r\n * @param directiveDef The definition containing the hooks to setup in tView\r\n * @param tView The current TView\r\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {\n    ngOnChanges,\n    ngOnInit,\n    ngDoCheck\n  } = directiveDef.type.prototype;\n  if (ngOnChanges) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);\n  }\n  if (ngOnInit) {\n    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);\n  }\n  if (ngDoCheck) {\n    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);\n  }\n}\n/**\r\n *\r\n * Loops through the directives on the provided `tNode` and queues hooks to be\r\n * run that are not initialization hooks.\r\n *\r\n * Should be executed during `elementEnd()` and similar to\r\n * preserve hook execution order. Content, view, and destroy hooks for projected\r\n * components and directives must be called *before* their hosts.\r\n *\r\n * Sets up the content, view, and destroy hooks on the provided `tView`,\r\n * see {@link HookData} for details about the data structure.\r\n *\r\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\r\n * separately at `elementStart`.\r\n *\r\n * @param tView The current TView\r\n * @param tNode The TNode whose directives are to be searched for hooks to queue\r\n */\nfunction registerPostOrderHooks(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i];\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n    if (ngAfterContentInit) {\n      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);\n    }\n    if (ngAfterContentChecked) {\n      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);\n    }\n    if (ngAfterViewInit) {\n      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);\n    }\n    if (ngAfterViewChecked) {\n      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);\n    }\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks ??= []).push(i, ngOnDestroy);\n    }\n  }\n}\n/**\r\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\r\n *\r\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\r\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\r\n * some recursively trigger a change detection cycle.\r\n * To solve that, it is required to track the state of the execution of these init hooks.\r\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\r\n * and the index within that phase. They can be seen as a cursor in the following structure:\r\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\r\n * They are stored as flags in LView[FLAGS].\r\n *\r\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\r\n * To be able to pause and resume their execution, we also need some state about the hook's array\r\n * that is being processed:\r\n * - the index of the next hook to be executed\r\n * - the number of init hooks already found in the processed part of the  array\r\n * They are stored as flags in LView[PREORDER_HOOK_FLAGS].\r\n */\n/**\r\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\r\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\r\n * / write of the init-hooks related flags.\r\n * @param lView The LView where hooks are defined\r\n * @param hooks Hooks to be run\r\n * @param nodeIndex 3 cases depending on the value:\r\n * - undefined: all hooks from the array should be executed (post-order case)\r\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\r\n * flushing the remaining hooks)\r\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\r\n * case, when executing select(number))\r\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n  callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\r\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\r\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\r\n * @param lView The LView where hooks are defined\r\n * @param hooks Hooks to be run\r\n * @param initPhase A phase for which hooks should be run\r\n * @param nodeIndex 3 cases depending on the value:\r\n * - undefined: all hooks from the array should be executed (post-order case)\r\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\r\n * flushing the remaining hooks)\r\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\r\n * case, when executing select(number))\r\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    flags &= 16383 /* LViewFlags.IndexWithinInitPhaseReset */;\n    flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n    lView[FLAGS] = flags;\n  }\n}\n/**\r\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\r\n * the first LView pass\r\n *\r\n * @param currentView The current view\r\n * @param arr The array in which the hooks are found\r\n * @param initPhaseState the current state of the init phase\r\n * @param currentNodeIndex 3 cases depending on the value:\r\n * - undefined: all hooks from the array should be executed (post-order case)\r\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\r\n * flushing the remaining hooks)\r\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\r\n * case, when executing select(number))\r\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */ : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1];\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i];\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook) {\n        currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n      }\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i + 2;\n      }\n      i++;\n    }\n  }\n}\n/**\r\n * Executes a single lifecycle hook, making sure that:\r\n * - it is called in the non-reactive context;\r\n * - profiling data are registered.\r\n */\nfunction callHookInternal(directive, hook) {\n  profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    hook.call(directive);\n  } finally {\n    setActiveConsumer(prevConsumer);\n    profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n  }\n}\n/**\r\n * Execute one hook against the current `LView`.\r\n *\r\n * @param currentView The current view\r\n * @param initPhaseState the current state of the init phase\r\n * @param arr The array in which the hooks are found\r\n * @param i The current index within the hook data array\r\n */\nfunction callHook(currentView, initPhase, arr, i) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1];\n  const directiveIndex = isInitHook ? -arr[i] : arr[i];\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> 14 /* LViewFlags.IndexWithinInitPhaseShift */;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */ && (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n      currentView[FLAGS] += 16384 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n      callHookInternal(directive, hook);\n    }\n  } else {\n    callHookInternal(directive, hook);\n  }\n}\nconst NO_PARENT_INJECTOR = -1;\n/**\r\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\r\n * `TView.data`. This allows us to store information about the current node's tokens (which\r\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\r\n * shared, so they live in `LView`).\r\n *\r\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\r\n * determines whether a directive is available on the associated node or not. This prevents us\r\n * from searching the directives array at this level unless it's probable the directive is in it.\r\n *\r\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\r\n *\r\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\r\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\r\n * will differ based on where it is flattened into the main array, so it's not possible to know\r\n * the indices ahead of time and save their types here. The interfaces are still included here\r\n * for documentation purposes.\r\n *\r\n * export interface LInjector extends Array<any> {\r\n *\r\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\r\n *    [0]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 32-63\r\n *    [1]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 64-95\r\n *    [2]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 96-127\r\n *    [3]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 128-159\r\n *    [4]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 160 - 191\r\n *    [5]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 192 - 223\r\n *    [6]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 224 - 255\r\n *    [7]: number;\r\n *\r\n *    // We need to store a reference to the injector's parent so DI can keep looking up\r\n *    // the injector tree until it finds the dependency it's looking for.\r\n *    [PARENT_INJECTOR]: number;\r\n * }\r\n *\r\n * export interface TInjector extends Array<any> {\r\n *\r\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\r\n *    [0]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 32-63\r\n *    [1]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 64-95\r\n *    [2]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 96-127\r\n *    [3]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 128-159\r\n *    [4]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 160 - 191\r\n *    [5]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 192 - 223\r\n *    [6]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 224 - 255\r\n *    [7]: number;\r\n *\r\n *    // Necessary to find directive indices for a particular node.\r\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\r\n *  }\r\n */\n/**\r\n * Factory for creating instances of injectors in the NodeInjector.\r\n *\r\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\r\n *\r\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\r\n * - One without `multi` support (most common)\r\n * - One with `multi` values, (rare).\r\n *\r\n * Since VMs can cache up to 4 inline hidden classes this is OK.\r\n *\r\n * - Single factory: Only `resolving` and `factory` is defined.\r\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\r\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\r\n */\nclass NodeInjectorFactory {\n  factory;\n  /**\r\n   * The inject implementation to be activated when using the factory.\r\n   */\n  injectImpl;\n  /**\r\n   * Marker set to true during factory invocation to see if we get into recursive loop.\r\n   * Recursive loop causes an error to be displayed.\r\n   */\n  resolving = false;\n  /**\r\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\r\n   */\n  canSeeViewProviders;\n  /**\r\n   * An array of factories to use in case of `multi` provider.\r\n   */\n  multi;\n  /**\r\n   * Number of `multi`-providers which belong to the component.\r\n   *\r\n   * This is needed because when multiple components and directives declare the `multi` provider\r\n   * they have to be concatenated in the correct order.\r\n   *\r\n   * Example:\r\n   *\r\n   * If we have a component and directive active an a single element as declared here\r\n   * ```ts\r\n   * component:\r\n   *   providers: [ {provide: String, useValue: 'component', multi: true} ],\r\n   *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],\r\n   *\r\n   * directive:\r\n   *   providers: [ {provide: String, useValue: 'directive', multi: true} ],\r\n   * ```\r\n   *\r\n   * Then the expected results are:\r\n   *\r\n   * ```ts\r\n   * providers: ['component', 'directive']\r\n   * viewProviders: ['component', 'componentView', 'directive']\r\n   * ```\r\n   *\r\n   * The way to think about it is that the `viewProviders` have been inserted after the component\r\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\r\n   * the component.\r\n   */\n  componentProviders;\n  /**\r\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\r\n   * See `providerFactory`.\r\n   */\n  index;\n  /**\r\n   * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is\r\n   * possible for `viewProviders` to shadow the `providers`. For this reason we store the\r\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\r\n   *\r\n   * Example:\r\n   *\r\n   * Given:\r\n   * ```ts\r\n   * providers: [ {provide: String, useValue: 'all', multi: true} ],\r\n   * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],\r\n   * ```\r\n   *\r\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\r\n   * of view injection. We further have to make sure that the shared instances (in our case\r\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\r\n   * have to make sure that we don't double instantiate.) For this reason the `viewProviders`\r\n   * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the\r\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\r\n   * ['all', 'viewOnly']`).\r\n   */\n  providerFactory;\n  constructor(\n  /**\r\n   * Factory to invoke in order to create a new instance.\r\n   */\n  factory,\n  /**\r\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\r\n   */\n  isViewProvider, injectImplementation) {\n    this.factory = factory;\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n\n/**\r\n * Converts `TNodeType` into human readable text.\r\n * Make sure this matches with `TNodeType`\r\n */\nfunction toTNodeTypeAsString(tNodeType) {\n  let text = '';\n  tNodeType & 1 /* TNodeType.Text */ && (text += '|Text');\n  tNodeType & 2 /* TNodeType.Element */ && (text += '|Element');\n  tNodeType & 4 /* TNodeType.Container */ && (text += '|Container');\n  tNodeType & 8 /* TNodeType.ElementContainer */ && (text += '|ElementContainer');\n  tNodeType & 16 /* TNodeType.Projection */ && (text += '|Projection');\n  tNodeType & 32 /* TNodeType.Icu */ && (text += '|IcuContainer');\n  tNodeType & 64 /* TNodeType.Placeholder */ && (text += '|Placeholder');\n  tNodeType & 128 /* TNodeType.LetDeclaration */ && (text += '|LetDeclaration');\n  return text.length > 0 ? text.substring(1) : text;\n}\n/**\r\n * Helper function to detect if a given value matches a `TNode` shape.\r\n *\r\n * The logic uses the `insertBeforeIndex` and its possible values as\r\n * a way to differentiate a TNode shape from other types of objects\r\n * within the `TView.data`. This is not a perfect check, but it can\r\n * be a reasonable differentiator, since we control the shapes of objects\r\n * within `TView.data`.\r\n */\nfunction isTNodeShape(value) {\n  return value != null && typeof value === 'object' && (value.insertBeforeIndex === null || typeof value.insertBeforeIndex === 'number' || Array.isArray(value.insertBeforeIndex));\n}\nfunction isLetDeclaration(tNode) {\n  return !!(tNode.type & 128 /* TNodeType.LetDeclaration */);\n}\n/**\r\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\r\n *\r\n * ```html\r\n * <div my-dir [class]=\"exp\"></div>\r\n * ```\r\n * and\r\n * ```ts\r\n * @Directive({\r\n * })\r\n * class MyDirective {\r\n *   @Input()\r\n *   class: string;\r\n * }\r\n * ```\r\n *\r\n * In the above case it is necessary to write the reconciled styling information into the\r\n * directive's input.\r\n *\r\n * @param tNode\r\n */\nfunction hasClassInput(tNode) {\n  return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\r\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\r\n *\r\n * ```html\r\n * <div my-dir [style]=\"exp\"></div>\r\n * ```\r\n * and\r\n * ```ts\r\n * @Directive({\r\n * })\r\n * class MyDirective {\r\n *   @Input()\r\n *   class: string;\r\n * }\r\n * ```\r\n *\r\n * In the above case it is necessary to write the reconciled styling information into the\r\n * directive's input.\r\n *\r\n * @param tNode\r\n */\nfunction hasStyleInput(tNode) {\n  return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\nfunction assertTNodeType(tNode, expectedTypes, message) {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\nfunction assertPureTNodeType(type) {\n  if (!(type === 2 /* TNodeType.Element */ || type === 1 /* TNodeType.Text */ || type === 4 /* TNodeType.Container */ || type === 8 /* TNodeType.ElementContainer */ || type === 32 /* TNodeType.Icu */ || type === 16 /* TNodeType.Projection */ || type === 64 /* TNodeType.Placeholder */ || type === 128 /* TNodeType.LetDeclaration */)) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n  }\n}\n\n/**\r\n * Assigns all attribute values to the provided element via the inferred renderer.\r\n *\r\n * This function accepts two forms of attribute entries:\r\n *\r\n * default: (key, value):\r\n *  attrs = [key1, value1, key2, value2]\r\n *\r\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\r\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\r\n *\r\n * The `attrs` array can contain a mix of both the default and namespaced entries.\r\n * The \"default\" values are set without a marker, but if the function comes across\r\n * a marker value then it will attempt to set a namespaced value. If the marker is\r\n * not of a namespaced value then the function will quit and return the index value\r\n * where it stopped during the iteration of the attrs array.\r\n *\r\n * See [AttributeMarker] to understand what the namespace marker value is.\r\n *\r\n * Note that this instruction does not support assigning style and class values to\r\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\r\n * are applied to an element.\r\n * @param renderer The renderer to be used\r\n * @param native The element that the attributes will be assigned to\r\n * @param attrs The attribute array of values that will be assigned to the element\r\n * @returns the index value that was last accessed in the attributes array\r\n */\nfunction setUpAttributes(renderer, native, attrs) {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n        break;\n      }\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n      const namespaceURI = attrs[i++];\n      const attrName = attrs[i++];\n      const attrVal = attrs[i++];\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal);\n      }\n      i++;\n    }\n  }\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n/**\r\n * Test whether the given value is a marker that indicates that the following\r\n * attribute values in a `TAttributes` array are only the names of attributes,\r\n * and not name-value pairs.\r\n * @param marker The attribute marker to test.\r\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\r\n */\nfunction isNameOnlyAttributeMarker(marker) {\n  return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ || marker === 6 /* AttributeMarker.I18n */;\n}\nfunction isAnimationProp(name) {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\r\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\r\n *\r\n * This merge function keeps the order of attrs same.\r\n *\r\n * @param dst Location of where the merged `TAttributes` should end up.\r\n * @param src `TAttributes` which should be appended to `dst`\r\n */\nfunction mergeHostAttrs(dst, src) {\n  if (src === null || src.length === 0) ;else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) ;else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ || srcMarker === 2 /* AttributeMarker.Styles */) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n/**\r\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\r\n *\r\n * @param dst `TAttributes` to append to.\r\n * @param marker Region where the `key`/`value` should be added.\r\n * @param key1 Key to add to `TAttributes`\r\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\r\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\r\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (value !== null) i++;\n  }\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n  if (ngDevMode) {\n    assertNumber(parentLocation, 'Number expected');\n    assertNotEqual(parentLocation, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n    assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n  }\n  return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\nfunction getParentInjectorViewOffset(parentLocation) {\n  return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\r\n * Unwraps a parent injector location number to find the view offset from the current injector,\r\n * then walks up the declaration view tree until the view is found that contains the parent\r\n * injector.\r\n *\r\n * @param location The location of the parent injector, which contains the view offset\r\n * @param startView The LView instance from which to start walking up the view tree\r\n * @returns The LView instance that contains the parent injector\r\n */\nfunction getParentInjectorView(location, startView) {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\r\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\r\n *\r\n * This is set to true when we try to instantiate a component. This value is reset in\r\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\r\n * instantiated. This is done so that if we are injecting a token which was declared outside of\r\n * `viewProviders` we don't accidentally pull `viewProviders` in.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * class MyService {\r\n *   constructor(public value: String) {}\r\n * }\r\n *\r\n * @Component({\r\n *   providers: [\r\n *     MyService,\r\n *     {provide: String, value: 'providers' }\r\n *   ]\r\n *   viewProviders: [\r\n *     {provide: String, value: 'viewProviders'}\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   constructor(myService: MyService, value: String) {\r\n *     // We expect that Component can see into `viewProviders`.\r\n *     expect(value).toEqual('viewProviders');\r\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\r\n *     expect(myService.value).toEqual('providers');\r\n *   }\r\n * }\r\n *\r\n * ```\r\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\r\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\r\n * directives that will share slots, and thus, the fewer false positives when checking for\r\n * the existence of a directive.\r\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\r\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\r\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\r\n * number.\r\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\r\n * Registers this directive as present in its node's injector by flipping the directive's\r\n * corresponding bit in the injector's bloom filter.\r\n *\r\n * @param injectorIndex The index of the node injector where this token should be registered\r\n * @param tView The TView for the injector's bloom filters\r\n * @param type The directive token to register\r\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = type[NG_ELEMENT_ID];\n  }\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = type[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\r\n * Creates (or gets an existing) injector for a given element or container.\r\n *\r\n * @param tNode for which an injector should be retrieved / created.\r\n * @param lView View where the node is stored\r\n * @returns Node injector\r\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(lView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n  lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n  return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n  if (tNode.injectorIndex === -1 ||\n  // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex ||\n  // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n/**\r\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\r\n * parent injector initially.\r\n *\r\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\r\n * to find the LView containing the parent inject AND the index of the injector within that LView.\r\n */\nfunction getParentInjectorLocation(tNode, lView) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex; // ViewOffset is 0\n  }\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode = null;\n  let lViewCursor = lView;\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return parentTNode.injectorIndex | declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n    }\n  }\n  return NO_PARENT_INJECTOR;\n}\n/**\r\n * Makes a type or an injection token public to the DI system by adding it to an\r\n * injector's bloom filter.\r\n *\r\n * @param di The node injector in which a directive will be added\r\n * @param token The type or the injection token to be made public\r\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n  bloomAdd(injectorIndex, tView, token);\n}\n/**\r\n * Inject static attribute value into directive constructor.\r\n *\r\n * This method is used with `factory` functions which are generated as part of\r\n * `defineDirective` or `defineComponent`. The method retrieves the static value\r\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\r\n *  at the time of injection and can change over time.)\r\n *\r\n * # Example\r\n * Given:\r\n * ```ts\r\n * @Component(...)\r\n * class MyComponent {\r\n *   constructor(@Attribute('title') title: string) { ... }\r\n * }\r\n * ```\r\n * When instantiated with\r\n * ```html\r\n * <my-component title=\"Hello\"></my-component>\r\n * ```\r\n *\r\n * Then factory method generated is:\r\n * ```ts\r\n * MyComponent.ɵcmp = defineComponent({\r\n *   factory: () => new MyComponent(injectAttribute('title'))\r\n *   ...\r\n * })\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n      // Skip namespaced attributes\n      if (value === 0 /* AttributeMarker.NamespaceURI */) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1];\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n  if (flags & 8 /* InternalInjectFlags.Optional */ || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n/**\r\n * Returns the value associated to the given token from the ModuleInjector or throws exception\r\n *\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector or throws an exception\r\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n  if (flags & 8 /* InternalInjectFlags.Optional */ && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n  if ((flags & (2 /* InternalInjectFlags.Self */ | 1 /* InternalInjectFlags.Host */)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & 8 /* InternalInjectFlags.Optional */);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & 8 /* InternalInjectFlags.Optional */);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\r\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\r\n *\r\n * Look for the injector providing the token by walking up the node injector tree and then\r\n * the module injector tree.\r\n *\r\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\r\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\r\n *\r\n * @param tNode The Node where the search for the injector should start\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\r\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = 0 /* InternalInjectFlags.Default */, notFoundValue) {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ &&\n    // The token must be present on the current node injector when the `Self`\n    // flag is set, so the lookup on embedded view injector(s) can be skipped.\n    !(flags & 2 /* InternalInjectFlags.Self */)) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\r\n * Returns the value associated to the given token from the node injector.\r\n *\r\n * @param tNode The Node where the search for the injector should start\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\r\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & 1 /* InternalInjectFlags.Host */ ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n    }\n    try {\n      let value;\n      if (ngDevMode) {\n        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {\n          emitInjectorToCreateInstanceEvent(token);\n          value = bloomHash(flags);\n          emitInstanceCreatedByInjectorEvent(value);\n        });\n      } else {\n        value = bloomHash(flags);\n      }\n      if (value == null && !(flags & 8 /* InternalInjectFlags.Optional */)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode = flags & 1 /* InternalInjectFlags.Host */ ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & 4 /* InternalInjectFlags.SkipSelf */) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n  return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n  // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponentHost(tNode) && includeViewProviders :\n  // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && (tNode.type & 3 /* TNodeType.AnyRNode */) !== 0;\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = flags & 1 /* InternalInjectFlags.Host */ && hostTElementNode === tNode;\n  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\r\n * Searches for the given token among the node's directives and providers.\r\n *\r\n * @param tNode TNode on which directives are present.\r\n * @param tView The tView we are currently processing\r\n * @param token Provider token or type of a directive to look for.\r\n * @param canAccessViewProviders Whether view providers should be considered.\r\n * @param isHostSpecialCase Whether the host special case applies.\r\n * @returns Index of a found directive or provider, or null when none found.\r\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n  const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i];\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart];\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n/**\r\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\r\n *\r\n * This function checks to see if the value has already been instantiated and if so returns the\r\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\r\n * instantiates the `injectable` and caches the value.\r\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n  let value = lView[index];\n  const tData = tView.data;\n  if (value instanceof NodeInjectorFactory) {\n    const factory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    // tData indexes mirror the concrete instances in its corresponding LView.\n    // lView[index] here is either the injectable instance itself or a factory,\n    // therefore tData[index] is the constructor of that injectable or a\n    // definition object that contains the constructor in a `.type` field.\n    const token = tData[index].type || tData[index];\n    let prevInjectContext;\n    if (ngDevMode) {\n      const injector = new NodeInjector(tNode, lView);\n      prevInjectContext = setInjectorProfilerContext({\n        injector,\n        token\n      });\n    }\n    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, 0 /* InternalInjectFlags.Default */);\n    ngDevMode && assertEqual(success, true, \"Because flags do not contain `SkipSelf' we expect this to always succeed.\");\n    try {\n      ngDevMode && emitInjectorToCreateInstanceEvent(token);\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      ngDevMode && emitInstanceCreatedByInjectorEvent(value);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index], tView);\n      }\n    } finally {\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n/**\r\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\r\n * the directive might be provided by the injector.\r\n *\r\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\r\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\r\n * is returned as the node injector can not possibly provide that token.\r\n *\r\n * @param token the injection token\r\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\r\n *   When the returned value is negative then it represents special values such as `Injector`.\r\n */\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId =\n  // First check with `hasOwnProperty` so we don't get an inherited ID.\n  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode && assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & 2 /* InternalInjectFlags.Self */) && !(flags & 1 /* InternalInjectFlags.Host */ && isFirstHostTNode);\n}\nfunction getNodeInjectorLView(nodeInjector) {\n  return nodeInjector._lView;\n}\nfunction getNodeInjectorTNode(nodeInjector) {\n  return nodeInjector._tNode;\n}\nclass NodeInjector {\n  _tNode;\n  _lView;\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n  get(token, notFoundValue, flags) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n  }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n  return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\r\n * @codeGenApi\r\n */\nfunction ɵɵgetInheritedFactory(type) {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n      parent = Object.getPrototypeOf(parent);\n    }\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\nfunction getFactoryOf(type) {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef(type);\n}\n/**\r\n * Returns a value from the closest embedded or node injector.\r\n *\r\n * @param tNode The Node where the search for the injector should start\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\r\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n  let currentTNode = tNode;\n  let currentLView = lView;\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ && !isRootView(currentLView)) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | 2 /* InternalInjectFlags.Self */, NOT_FOUND);\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode = currentTNode.parent;\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n    currentTNode = parentTNode;\n  }\n  return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } else if (tViewType === 1 /* TViewType.Component */) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST];\n  }\n  return null;\n}\n\n/**\r\n * Facade for the attribute injection from DI.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n\n/**\r\n * Attribute decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Attribute = makeParamDecorator('Attribute', attributeName => ({\n  attributeName,\n  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)\n}));\nlet _reflect = null;\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n  return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n  const meta = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false\n  };\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n      const proto = Object.getPrototypeOf(param);\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n\n/**\r\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\r\n * injectable def (`ɵprov`) onto the injectable type.\r\n */\nfunction compileInjectable(type, meta) {\n  let ngInjectableDef = null;\n  let ngFactoryDef = null;\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      }\n    });\n  }\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,\n            // In JIT mode types are not available nor used.\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isUseClassProvider(meta) {\n  return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n  return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n  return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n  return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta = srcMeta || {\n    providedIn: null\n  };\n  const compilerMeta = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n\n/**\r\n * Injectable decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\r\n * Creates an ElementRef from the most recent node.\r\n *\r\n * @returns The ElementRef instance to use\r\n */\nfunction injectElementRef() {\n  return createElementRef(getCurrentTNode(), getLView());\n}\n/**\r\n * Creates an ElementRef given a node.\r\n *\r\n * @param tNode The node for which you'd like an ElementRef\r\n * @param lView The view to which the node belongs\r\n * @returns The ElementRef instance to use\r\n */\nfunction createElementRef(tNode, lView) {\n  return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\r\n * A wrapper around a native element inside of a View.\r\n *\r\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\r\n * element.\r\n *\r\n * @security Permitting direct access to the DOM can make your application more vulnerable to\r\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\r\n * [Security Guide](https://g.co/ng/security).\r\n *\r\n * @publicApi\r\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n  /**\r\n   * <div class=\"docs-alert docs-alert-important\">\r\n   *   <header>Use with caution</header>\r\n   *   <p>\r\n   *    Use this API as the last resort when direct access to DOM is needed. Use templating and\r\n   *    data-binding provided by Angular instead. If used, it is recommended in combination with\r\n   *    {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls DomSanitizer}\r\n   *    for maxiumum security;\r\n   *   </p>\r\n   * </div>\r\n   */\n  nativeElement;\n  constructor(nativeElement) {\n    this.nativeElement = nativeElement;\n  }\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = injectElementRef;\n}\n/**\r\n * Unwraps `ElementRef` and return the `nativeElement`.\r\n *\r\n * @param value value to unwrap\r\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\r\n */\nfunction unwrapElementRef(value) {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\nfunction symbolIterator() {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n/**\r\n * An unmodifiable list of items that Angular keeps up to date when the state\r\n * of the application changes.\r\n *\r\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\r\n * provide.\r\n *\r\n * Implements an iterable interface, therefore it can be used in both ES6\r\n * javascript `for (var i of items)` loops as well as in Angular templates with\r\n * `@for(i of myList; track $index)`.\r\n *\r\n * Changes can be observed by subscribing to the `changes` `Observable`.\r\n * *\r\n * @usageNotes\r\n * ### Example\r\n * ```ts\r\n * @Component({...})\r\n * class Container {\r\n *   @ViewChildren(Item) items:QueryList<Item>;\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass QueryList {\n  _emitDistinctChangesOnly;\n  dirty = true;\n  _onDirty = undefined;\n  _results = [];\n  _changesDetected = false;\n  _changes = undefined;\n  length = 0;\n  first = undefined;\n  last = undefined;\n  /**\r\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\r\n   */\n  get changes() {\n    return this._changes ??= new Subject();\n  }\n  /**\r\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\r\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\r\n   *     the same result)\r\n   */\n  constructor(_emitDistinctChangesOnly = false) {\n    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n  }\n  /**\r\n   * Returns the QueryList entry at `index`.\r\n   */\n  get(index) {\n    return this._results[index];\n  }\n  /**\r\n   * See\r\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n   */\n  map(fn) {\n    return this._results.map(fn);\n  }\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\r\n   * See\r\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n   */\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\r\n   * See\r\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n   */\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\r\n   * See\r\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n   */\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\r\n   * See\r\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n   */\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\r\n   * Returns a copy of the internal results list as an Array.\r\n   */\n  toArray() {\n    return this._results.slice();\n  }\n  toString() {\n    return this._results.toString();\n  }\n  /**\r\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\r\n   * on change detection, it will not notify of changes to the queries, unless a new change\r\n   * occurs.\r\n   *\r\n   * @param resultsTree The query results to store\r\n   * @param identityAccessor Optional function for extracting stable object identity from a value\r\n   *    in the array. This function is executed for each element of the query result list while\r\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\r\n   *    function) to detect if the lists are different. If the function is not provided, elements\r\n   *    are compared as is (without any pre-processing).\r\n   */\n  reset(resultsTree, identityAccessor) {\n    this.dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {\n      this._results = newResultFlat;\n      this.length = newResultFlat.length;\n      this.last = newResultFlat[this.length - 1];\n      this.first = newResultFlat[0];\n    }\n  }\n  /**\r\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\r\n   */\n  notifyOnChanges() {\n    if (this._changes !== undefined && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.next(this);\n  }\n  /** @internal */\n  onDirty(cb) {\n    this._onDirty = cb;\n  }\n  /** internal */\n  setDirty() {\n    this.dirty = true;\n    this._onDirty?.();\n  }\n  /** internal */\n  destroy() {\n    if (this._changes !== undefined) {\n      this._changes.complete();\n      this._changes.unsubscribe();\n    }\n  }\n  [Symbol.iterator] = (() => symbolIterator)();\n}\n\n/**\r\n * The name of an attribute that can be added to the hydration boundary node\r\n * (component host node) to disable hydration for the content within that boundary.\r\n */\nconst SKIP_HYDRATION_ATTR_NAME = 'ngSkipHydration';\n/** Lowercase name of the `ngSkipHydration` attribute used for case-insensitive comparisons. */\nconst SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = 'ngskiphydration';\n/**\r\n * Helper function to check if a given TNode has the 'ngSkipHydration' attribute.\r\n */\nfunction hasSkipHydrationAttrOnTNode(tNode) {\n  const attrs = tNode.mergedAttrs;\n  if (attrs === null) return false;\n  // only ever look at the attribute name and skip the values\n  for (let i = 0; i < attrs.length; i += 2) {\n    const value = attrs[i];\n    // This is a marker, which means that the static attributes section is over,\n    // so we can exit early.\n    if (typeof value === 'number') return false;\n    if (typeof value === 'string' && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\r\n * Helper function to check if a given RElement has the 'ngSkipHydration' attribute.\r\n */\nfunction hasSkipHydrationAttrOnRElement(rNode) {\n  return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);\n}\n/**\r\n * Checks whether a TNode has a flag to indicate that it's a part of\r\n * a skip hydration block.\r\n */\nfunction hasInSkipHydrationBlockFlag(tNode) {\n  return (tNode.flags & 128 /* TNodeFlags.inSkipHydrationBlock */) === 128 /* TNodeFlags.inSkipHydrationBlock */;\n}\n/**\r\n * Helper function that determines if a given node is within a skip hydration block\r\n * by navigating up the TNode tree to see if any parent nodes have skip hydration\r\n * attribute.\r\n */\nfunction isInSkipHydrationBlock(tNode) {\n  if (hasInSkipHydrationBlockFlag(tNode)) {\n    return true;\n  }\n  let currentTNode = tNode.parent;\n  while (currentTNode) {\n    if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {\n      return true;\n    }\n    currentTNode = currentTNode.parent;\n  }\n  return false;\n}\n/**\r\n * Check if an i18n block is in a skip hydration section by looking at a parent TNode\r\n * to determine if this TNode is in a skip hydration section or the TNode has\r\n * the `ngSkipHydration` attribute.\r\n */\nfunction isI18nInSkipHydrationBlock(parentTNode) {\n  return hasInSkipHydrationBlockFlag(parentTNode) || hasSkipHydrationAttrOnTNode(parentTNode) || isInSkipHydrationBlock(parentTNode);\n}\n\n/**\r\n * The strategy that the default change detector uses to detect changes.\r\n * When set, takes effect the next time change detection is triggered.\r\n *\r\n * @see {@link /api/core/ChangeDetectorRef?tab=usage-notes Change detection usage}\r\n * @see {@link /best-practices/skipping-subtrees Skipping component subtrees}\r\n *\r\n * @publicApi\r\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n  /**\r\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\r\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\r\n   * Change detection can still be explicitly invoked.\r\n   * This strategy applies to all child directives and cannot be overridden.\r\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  /**\r\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\r\n   * explicitly deactivated.\r\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n  return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n/** Gets the currently-tracked views. */\nfunction getTrackedLViews() {\n  return TRACKED_LVIEWS;\n}\n\n/**\r\n * The internal view context which is specific to a given DOM element, directive or\r\n * component instance. Each value in here (besides the LView and element node details)\r\n * can be present, null or undefined. If undefined then it implies the value has not been\r\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\r\n *\r\n * Each value will get filled when the respective value is examined within the getContext\r\n * function. The component, element and each directive instance will share the same instance\r\n * of the context.\r\n */\nclass LContext {\n  lViewId;\n  nodeIndex;\n  native;\n  /**\r\n   * The instance of the Component node.\r\n   */\n  component;\n  /**\r\n   * The list of active directives that exist on this element.\r\n   */\n  directives;\n  /**\r\n   * The map of local references (local reference name => element or directive instance) that\r\n   * exist on this element.\r\n   */\n  localRefs;\n  /** Component's parent view data. */\n  get lView() {\n    return getLViewById(this.lViewId);\n  }\n  constructor(\n  /**\r\n   * ID of the component's parent view data.\r\n   */\n  lViewId,\n  /**\r\n   * The index instance of the node.\r\n   */\n  nodeIndex,\n  /**\r\n   * The instance of the DOM node that is attached to the lNode.\r\n   */\n  native) {\n    this.lViewId = lViewId;\n    this.nodeIndex = nodeIndex;\n    this.native = native;\n  }\n}\n\n/**\r\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\r\n *\r\n * This function will examine the provided DOM element, component, or directive instance\\'s\r\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\r\n * value will be that of the newly created `LContext`.\r\n *\r\n * If the monkey-patched value is the `LView` instance then the context value for that\r\n * target will be created and the monkey-patch reference will be updated. Therefore when this\r\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\r\n * directive\\'s monkey-patch values.\r\n *\r\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\r\n * is found which contains a monkey-patch reference. When that occurs then the provided element\r\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\r\n * detected for a component/directive instance then it will throw an error (all components and\r\n * directives should be automatically monkey-patched by ivy).\r\n *\r\n * @param target Component, Directive or DOM Node.\r\n */\nfunction getLContext(target) {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView = mpValue;\n      let nodeIndex;\n      let component = undefined;\n      let directives = undefined;\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target;\n    ngDevMode && assertDomNode(rElement);\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return mpValue || null;\n}\n/**\r\n * Creates an empty instance of a `LContext` context\r\n */\nfunction createLContext(lView, nodeIndex, native) {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n/**\r\n * Takes a component instance and returns the view for that component.\r\n *\r\n * @param componentInstance\r\n * @returns The component's view\r\n */\nfunction getComponentViewByInstance(componentInstance) {\n  let patchedData = readPatchedData(componentInstance);\n  let lView;\n  if (isLView(patchedData)) {\n    const contextLView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData;\n    const contextLView = context.lView;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n/**\r\n * This property will be monkey-patched on elements, components and directives.\r\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\r\n * Assigns the given data to the given target (which could be a component,\r\n * directive or DOM node instance) using monkey-patching.\r\n */\nfunction attachPatchData(target, data) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n/**\r\n * Returns the monkey-patch value data present on the target (which could be\r\n * a component, directive or a DOM node).\r\n */\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n  const value = readPatchedData(target);\n  if (value) {\n    return isLView(value) ? value : value.lView;\n  }\n  return null;\n}\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\r\n * Locates the element within the given LView and returns the matching index\r\n */\nfunction findViaNativeElement(lView, target) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Locates the next tNode (child, sibling or parent).\r\n */\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\r\n * Locates the component within the given LView and returns the matching index\r\n */\nfunction findViaComponent(lView, componentInstance) {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n/**\r\n * Locates the directive within the given LView and returns the matching index\r\n */\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\r\n * Returns a list of directives applied to a node at a specific index. The list includes\r\n * directives matched by selector and any host directives, but it excludes components.\r\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\r\n *\r\n * @param nodeIndex The node index\r\n * @param lView The target view data\r\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  return isComponentHost(tNode) ? lView[tNode.directiveStart + tNode.componentOffset] : null;\n}\n/**\r\n * Returns a map of local references (local reference name => element or directive instance) that\r\n * exist on a given element.\r\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode && tNode.localNames) {\n    const result = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n  return null;\n}\n\n/**\r\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\r\n * reaching the root `LView`.\r\n *\r\n * @param componentOrLView any component or `LView`\r\n */\nfunction getRootView(componentOrLView) {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n  while (lView && !isRootView(lView)) {\n    lView = getLViewParent(lView);\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n/**\r\n * Returns the context information associated with the application where the target is situated. It\r\n * does this by walking the parent views until it gets to the root view, then getting the context\r\n * off of that.\r\n *\r\n * @param viewOrComponent the `LView` or component to get the root context for.\r\n */\nfunction getRootContext(viewOrComponent) {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT];\n}\n/**\r\n * Gets the first `LContainer` in the LView or `null` if none exists.\r\n */\nfunction getFirstLContainer(lView) {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\r\n * Gets the next `LContainer` that is a sibling of the given container.\r\n */\nfunction getNextLContainer(container) {\n  return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer;\n}\n\n/**\r\n * Retrieves the component instance associated with a given DOM element.\r\n *\r\n * @usageNotes\r\n * Given the following DOM structure:\r\n *\r\n * ```html\r\n * <app-root>\r\n *   <div>\r\n *     <child-comp></child-comp>\r\n *   </div>\r\n * </app-root>\r\n * ```\r\n *\r\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\r\n * associated with this DOM element.\r\n *\r\n * Calling the function on `<app-root>` will return the `MyApp` instance.\r\n *\r\n *\r\n * @param element DOM element from which the component should be retrieved.\r\n * @returns Component instance associated with the element or `null` if there\r\n *    is no component associated with it.\r\n *\r\n * @publicApi\r\n */\nfunction getComponent(element) {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n  if (context.component === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return null;\n    }\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n  return context.component;\n}\n/**\r\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\r\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\r\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\r\n *\r\n * @param element Element for which to get the surrounding component instance.\r\n * @returns Instance of the component that is around the element or null if the element isn't\r\n *    inside any component.\r\n *\r\n * @publicApi\r\n */\nfunction getContext(element) {\n  assertDomElement(element);\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT];\n}\n/**\r\n * Retrieves the component instance whose view contains the DOM element.\r\n *\r\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\r\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\r\n * would return `<app-comp>`.\r\n *\r\n * @param elementOrDir DOM element, component or directive instance\r\n *    for which to retrieve the root components.\r\n * @returns Component instance whose view owns the DOM element or null if the element is not\r\n *    part of a component view.\r\n *\r\n * @publicApi\r\n */\nfunction getOwningComponent(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n  let parent;\n  while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n    lView = parent;\n  }\n  return isRootView(lView) ? null : lView[CONTEXT];\n}\n/**\r\n * Retrieves all root components associated with a DOM element, directive or component instance.\r\n * Root components are those which have been bootstrapped by Angular.\r\n *\r\n * @param elementOrDir DOM element, component or directive instance\r\n *    for which to retrieve the root components.\r\n * @returns Root components associated with the target object.\r\n *\r\n * @publicApi\r\n */\nfunction getRootComponents(elementOrDir) {\n  const lView = readPatchedLView(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\r\n * Retrieves an `Injector` associated with an element, component or directive instance.\r\n *\r\n * @param elementOrDir DOM element, component or directive instance for which to\r\n *    retrieve the injector.\r\n * @returns Injector associated with the element, component or directive instance.\r\n *\r\n * @publicApi\r\n */\nfunction getInjector(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n  const tNode = lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, lView);\n}\n/**\r\n * Retrieve a set of injection tokens at a given DOM node.\r\n *\r\n * @param element Element for which the injection tokens should be retrieved.\r\n */\nfunction getInjectionTokens(element) {\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex];\n  const providerTokens = [];\n  const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n/**\r\n * Retrieves directive instances associated with a given DOM node. Does not include\r\n * component instances.\r\n *\r\n * @usageNotes\r\n * Given the following DOM structure:\r\n *\r\n * ```html\r\n * <app-root>\r\n *   <button my-button></button>\r\n *   <my-comp></my-comp>\r\n * </app-root>\r\n * ```\r\n *\r\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\r\n * directive that is associated with the DOM node.\r\n *\r\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\r\n *\r\n * @param node DOM node for which to get the directives.\r\n * @returns Array of directives associated with the node.\r\n *\r\n * @publicApi\r\n */\nfunction getDirectives(node) {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n  const context = getLContext(node);\n  const lView = context ? context.lView : null;\n  if (lView === null) {\n    return [];\n  }\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n  if (!tView?.data[nodeIndex]) {\n    return [];\n  }\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n  }\n  // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n  return context.directives === null ? [] : [...context.directives];\n}\n/** The framework used to author a particular application or component. */\nvar Framework;\n(function (Framework) {\n  Framework[\"Angular\"] = \"angular\";\n  Framework[\"ACX\"] = \"acx\";\n  Framework[\"Wiz\"] = \"wiz\";\n})(Framework || (Framework = {}));\n/** ACX change detection strategies. */\nvar AcxChangeDetectionStrategy;\n(function (AcxChangeDetectionStrategy) {\n  AcxChangeDetectionStrategy[AcxChangeDetectionStrategy[\"Default\"] = 0] = \"Default\";\n  AcxChangeDetectionStrategy[AcxChangeDetectionStrategy[\"OnPush\"] = 1] = \"OnPush\";\n})(AcxChangeDetectionStrategy || (AcxChangeDetectionStrategy = {}));\n/** ACX view encapsulation modes. */\nvar AcxViewEncapsulation;\n(function (AcxViewEncapsulation) {\n  AcxViewEncapsulation[AcxViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  AcxViewEncapsulation[AcxViewEncapsulation[\"None\"] = 1] = \"None\";\n})(AcxViewEncapsulation || (AcxViewEncapsulation = {}));\n/**\r\n * Returns the debug (partial) metadata for a particular directive or component instance.\r\n * The function accepts an instance of a directive or component and returns the corresponding\r\n * metadata.\r\n *\r\n * @param directiveOrComponentInstance Instance of a directive or component\r\n * @returns metadata of the passed directive or component\r\n *\r\n * @publicApi\r\n */\nfunction getDirectiveMetadata$1(directiveOrComponentInstance) {\n  const {\n    constructor\n  } = directiveOrComponentInstance;\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  }\n  // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n  const componentDef = getComponentDef(constructor);\n  if (componentDef) {\n    const inputs = extractInputDebugMetadata(componentDef.inputs);\n    return {\n      inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default\n    };\n  }\n  const directiveDef = getDirectiveDef(constructor);\n  if (directiveDef) {\n    const inputs = extractInputDebugMetadata(directiveDef.inputs);\n    return {\n      inputs,\n      outputs: directiveDef.outputs\n    };\n  }\n  return null;\n}\n/**\r\n * Retrieve map of local references.\r\n *\r\n * The references are retrieved as a map of local reference name to element or directive instance.\r\n *\r\n * @param target DOM element, component or directive instance for which to retrieve\r\n *    the local references.\r\n */\nfunction getLocalRefs(target) {\n  const context = getLContext(target);\n  if (context === null) return {};\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return {};\n    }\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n  return context.localRefs || {};\n}\n/**\r\n * Retrieves the host element of a component or directive instance.\r\n * The host element is the DOM element that matched the selector of the directive.\r\n *\r\n * @param componentOrDirective Component or directive instance for which the host\r\n *     element should be retrieved.\r\n * @returns Host element of the target.\r\n *\r\n * @publicApi\r\n */\nfunction getHostElement(componentOrDirective) {\n  return getLContext(componentOrDirective).native;\n}\n/**\r\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\r\n * listeners, but it does not include event listeners defined outside of the Angular context\r\n * (e.g. through `addEventListener`).\r\n *\r\n * @usageNotes\r\n * Given the following DOM structure:\r\n *\r\n * ```html\r\n * <app-root>\r\n *   <div (click)=\"doSomething()\"></div>\r\n * </app-root>\r\n * ```\r\n *\r\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\r\n *\r\n * ```ts\r\n * {\r\n *   name: 'click',\r\n *   element: <div>,\r\n *   callback: () => doSomething(),\r\n *   useCapture: false\r\n * }\r\n * ```\r\n *\r\n * @param element Element for which the DOM listeners should be retrieved.\r\n * @returns Array of event listeners on the DOM element.\r\n *\r\n * @publicApi\r\n */\nfunction getListeners(element) {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]);\n        const callback = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture,\n            type\n          });\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\r\n * This function should not exist because it is megamorphic and only mostly correct.\r\n *\r\n * See call site for more info.\r\n */\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.declaredInputs !== undefined && obj.resolveHostDirectives !== undefined;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n/**\r\n * A directive definition holds additional metadata using bitwise flags to indicate\r\n * for example whether it is signal based.\r\n *\r\n * This information needs to be separate from the `publicName -> minifiedName`\r\n * mappings for backwards compatibility.\r\n */\nfunction extractInputDebugMetadata(inputs) {\n  const res = {};\n  for (const key in inputs) {\n    if (inputs.hasOwnProperty(key)) {\n      const value = inputs[key];\n      if (value !== undefined) {\n        res[key] = value[0];\n      }\n    }\n  }\n  return res;\n}\n\n/**\r\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\r\n * inject the `DOCUMENT` token and are done.\r\n *\r\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\r\n * way.\r\n *\r\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\r\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\r\n *\r\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\r\n * tell ivy what the global `document` is.\r\n *\r\n * Angular does this for us in each of the standard platforms (`Browser` and `Server`)\r\n * by calling `setDocument()` when providing the `DOCUMENT` token.\r\n */\nlet DOCUMENT = undefined;\n/**\r\n * Tell ivy what the `document` is for this platform.\r\n *\r\n * It is only necessary to call this if the current platform is not a browser.\r\n *\r\n * @param document The object representing the global `document` in this environment.\r\n */\nfunction setDocument(document) {\n  DOCUMENT = document;\n}\n/**\r\n * Access the object that represents the `document` for this platform.\r\n *\r\n * Ivy calls this whenever it needs to access the `document` object.\r\n * For example to create the renderer or to do sanitization.\r\n */\nfunction getDocument() {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  throw new RuntimeError(210 /* RuntimeErrorCode.MISSING_DOCUMENT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API.\n}\n\n/**\r\n * A DI token representing a string ID, used\r\n * primarily for prefixing application attributes and CSS styles when\r\n * {@link ViewEncapsulation#Emulated} is being used.\r\n *\r\n * The token is needed in cases when multiple applications are bootstrapped on a page\r\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\r\n * have different `APP_ID` value setup. For example:\r\n *\r\n * ```ts\r\n * bootstrapApplication(ComponentA, {\r\n *   providers: [\r\n *     { provide: APP_ID, useValue: 'app-a' },\r\n *     // ... other providers ...\r\n *   ]\r\n * });\r\n *\r\n * bootstrapApplication(ComponentB, {\r\n *   providers: [\r\n *     { provide: APP_ID, useValue: 'app-b' },\r\n *     // ... other providers ...\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * By default, when there is only one application bootstrapped, you don't need to provide the\r\n * `APP_ID` token (the `ng` will be used as an app ID).\r\n *\r\n * @publicApi\r\n */\nconst APP_ID = new InjectionToken(ngDevMode ? 'AppId' : '', {\n  providedIn: 'root',\n  factory: () => DEFAULT_APP_ID\n});\n/** Default value of the `APP_ID` token. */\nconst DEFAULT_APP_ID = 'ng';\n/**\r\n * A function that is executed when a platform is initialized.\r\n *\r\n * @deprecated from v19.0.0, use providePlatformInitializer instead\r\n *\r\n * @see {@link providePlatformInitializer}\r\n *\r\n * @publicApi\r\n */\nconst PLATFORM_INITIALIZER = new InjectionToken(ngDevMode ? 'Platform Initializer' : '');\n/**\r\n * A token that indicates an opaque platform ID.\r\n * @publicApi\r\n */\nconst PLATFORM_ID = new InjectionToken(ngDevMode ? 'Platform ID' : '', {\n  providedIn: 'platform',\n  factory: () => 'unknown' // set a default platform name, when none set explicitly\n});\n/**\r\n * A DI token that indicates the root directory of\r\n * the application\r\n * @publicApi\r\n * @deprecated\r\n */\nconst PACKAGE_ROOT_URL = new InjectionToken(ngDevMode ? 'Application Packages Root URL' : '');\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n/**\r\n * A [DI token](api/core/InjectionToken) that indicates which animations\r\n * module has been loaded.\r\n * @publicApi\r\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken(ngDevMode ? 'AnimationModuleType' : '');\n// TODO(crisbeto): link to CSP guide here.\n/**\r\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\r\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\r\n * from the `ngCspNonce` attribute of the application root node.\r\n *\r\n * @publicApi\r\n */\nconst CSP_NONCE = new InjectionToken(ngDevMode ? 'CSP nonce' : '', {\n  providedIn: 'root',\n  factory: () => {\n    // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\n    // the root node, but because the token value is used in renderers, it has to be available\n    // *very* early in the bootstrapping process. This should be a fairly shallow search, because\n    // the app won't have been added to the DOM yet. Some approaches that were considered:\n    // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\n    // be enough for our purposes, but the token is injected very early so the `components` array\n    // isn't populated yet.\n    // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\n    // creating the `LView`. This means that no `LView` will have been entered when this factory is\n    // invoked for the root component.\n    // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\n    // the slightly later execution does allow us to get an `LView` reference, but the fact that\n    // it is a function means that it could be executed at *any* time (including immediately) which\n    // may lead to weird bugs.\n    // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\n    // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\n    // node and the nonce value needs to be available when the renderer is created.\n    return getDocument().body?.querySelector('[ngCspNonce]')?.getAttribute('ngCspNonce') || null;\n  }\n});\nconst IMAGE_CONFIG_DEFAULTS = {\n  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  placeholderResolution: 30,\n  disableImageSizeWarning: false,\n  disableImageLazyLoadWarning: false\n};\n/**\r\n * Injection token that configures the image optimized image functionality.\r\n * See {@link ImageConfig} for additional information about parameters that\r\n * can be used.\r\n *\r\n * @see {@link NgOptimizedImage}\r\n * @see {@link ImageConfig}\r\n * @publicApi\r\n */\nconst IMAGE_CONFIG = new InjectionToken(ngDevMode ? 'ImageConfig' : '', {\n  providedIn: 'root',\n  factory: () => IMAGE_CONFIG_DEFAULTS\n});\n\n/**\r\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction makeStateKey(key) {\n  return key;\n}\nfunction initTransferState() {\n  const transferState = new TransferState();\n  if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n    transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));\n  }\n  return transferState;\n}\n/**\r\n * A key value store that is transferred from the application on the server side to the application\r\n * on the client side.\r\n *\r\n * The `TransferState` is available as an injectable token.\r\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\r\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\r\n * the `ServerTransferStateModule` module to make the `TransferState` available.\r\n *\r\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\r\n * non-lossy manner.\r\n *\r\n * @publicApi\r\n */\nclass TransferState {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: TransferState,\n    providedIn: 'root',\n    factory: initTransferState\n  });\n  /** @internal */\n  store = {};\n  onSerializeCallbacks = {};\n  /**\r\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n   */\n  get(key, defaultValue) {\n    return this.store[key] !== undefined ? this.store[key] : defaultValue;\n  }\n  /**\r\n   * Set the value corresponding to a key.\r\n   */\n  set(key, value) {\n    this.store[key] = value;\n  }\n  /**\r\n   * Remove a key from the store.\r\n   */\n  remove(key) {\n    delete this.store[key];\n  }\n  /**\r\n   * Test whether a key exists in the store.\r\n   */\n  hasKey(key) {\n    return this.store.hasOwnProperty(key);\n  }\n  /**\r\n   * Indicates whether the state is empty.\r\n   */\n  get isEmpty() {\n    return Object.keys(this.store).length === 0;\n  }\n  /**\r\n   * Register a callback to provide the value for a key when `toJson` is called.\r\n   */\n  onSerialize(key, callback) {\n    this.onSerializeCallbacks[key] = callback;\n  }\n  /**\r\n   * Serialize the current state of the store to JSON.\r\n   */\n  toJson() {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    // Escape script tag to avoid break out of <script> tag in serialized output.\n    // Encoding of `<` is the same behaviour as G3 script_builders.\n    return JSON.stringify(this.store).replace(/</g, '\\\\u003C');\n  }\n}\nfunction retrieveTransferredState(doc, appId) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  if (script?.textContent) {\n    try {\n      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n      // Decoding of `<` is done of the box by browsers and node.js, same behaviour as G3\n      // script_builders.\n      return JSON.parse(script.textContent);\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return {};\n}\n\n/** Encodes that the node lookup should start from the host node of this component. */\nconst REFERENCE_NODE_HOST = 'h';\n/** Encodes that the node lookup should start from the document body node. */\nconst REFERENCE_NODE_BODY = 'b';\nconst NODE_NAVIGATION_STEP_FIRST_CHILD = 'f';\nconst NODE_NAVIGATION_STEP_NEXT_SIBLING = 'n';\n/**\r\n * Keys within serialized view data structure to represent various\r\n * parts. See the `SerializedView` interface below for additional information.\r\n */\nconst ELEMENT_CONTAINERS = 'e';\nconst TEMPLATES = 't';\nconst CONTAINERS = 'c';\nconst MULTIPLIER = 'x';\nconst NUM_ROOT_NODES = 'r';\nconst TEMPLATE_ID = 'i'; // as it's also an \"id\"\nconst NODES = 'n';\nconst DISCONNECTED_NODES = 'd';\nconst I18N_DATA = 'l';\nconst DEFER_BLOCK_ID = 'di';\nconst DEFER_BLOCK_STATE$1 = 's';\nconst DEFER_PARENT_BLOCK_ID = 'p';\nconst DEFER_HYDRATE_TRIGGERS = 't';\n\n/**\r\n * Internal token that specifies whether DOM reuse logic\r\n * during hydration is enabled.\r\n */\nconst IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_HYDRATION_DOM_REUSE_ENABLED' : '');\n// By default (in client rendering mode), we remove all the contents\n// of the host element and render an application after that.\nconst PRESERVE_HOST_CONTENT_DEFAULT = false;\n/**\r\n * Internal token that indicates whether host element content should be\r\n * retained during the bootstrap.\r\n */\nconst PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'PRESERVE_HOST_CONTENT' : '', {\n  providedIn: 'root',\n  factory: () => PRESERVE_HOST_CONTENT_DEFAULT\n});\n/**\r\n * Internal token that indicates whether hydration support for i18n\r\n * is enabled.\r\n */\nconst IS_I18N_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_I18N_HYDRATION_ENABLED' : '');\n/**\r\n * Internal token that indicates whether event replay support for SSR\r\n * is enabled.\r\n */\nconst IS_EVENT_REPLAY_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_EVENT_REPLAY_ENABLED' : '');\nconst EVENT_REPLAY_ENABLED_DEFAULT = false;\n/**\r\n * Internal token that indicates whether incremental hydration support\r\n * is enabled.\r\n */\nconst IS_INCREMENTAL_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_INCREMENTAL_HYDRATION_ENABLED' : '');\n/**\r\n * A map of DOM elements with `jsaction` attributes grouped by action names.\r\n */\nconst JSACTION_BLOCK_ELEMENT_MAP = new InjectionToken(ngDevMode ? 'JSACTION_BLOCK_ELEMENT_MAP' : '', {\n  providedIn: 'root',\n  factory: () => new Map()\n});\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/** Configuration object used to register passive and capturing events. */\nconst eventListenerOptions = {\n  passive: true,\n  capture: true\n};\n/** Keeps track of the currently-registered `on hover` triggers. */\nconst hoverTriggers = new WeakMap();\n/** Keeps track of the currently-registered `on interaction` triggers. */\nconst interactionTriggers = new WeakMap();\n/** Currently-registered `viewport` triggers. */\nconst viewportTriggers = new WeakMap();\n/** Names of the events considered as interaction events. */\nconst interactionEventNames = ['click', 'keydown'];\n/** Names of the events considered as hover events. */\nconst hoverEventNames = ['mouseenter', 'mouseover', 'focusin'];\n/** `IntersectionObserver` used to observe `viewport` triggers. */\nlet intersectionObserver = null;\n/** Number of elements currently observed with `viewport` triggers. */\nlet observedViewportElements = 0;\n/** Object keeping track of registered callbacks for a deferred block trigger. */\nclass DeferEventEntry {\n  callbacks = new Set();\n  listener = () => {\n    for (const callback of this.callbacks) {\n      callback();\n    }\n  };\n}\n/**\r\n * Registers an interaction trigger.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger is interacted with.\r\n * @return cleanup function which removes trigger Element from interactionTriggers map\r\n * and interaction event listeners from the trigger Element\r\n */\nfunction onInteraction(trigger, callback) {\n  let entry = interactionTriggers.get(trigger);\n  // If this is the first entry for this element, add the listeners.\n  if (!entry) {\n    // Note that managing events centrally like this lends itself well to using global\n    // event delegation. It currently does delegation at the element level, rather than the\n    // document level, because:\n    // 1. Global delegation is the most effective when there are a lot of events being registered\n    // at the same time. Deferred blocks are unlikely to be used in such a way.\n    // 2. Matching events to their target isn't free. For each `click` and `keydown` event we\n    // would have look through all the triggers and check if the target either is the element\n    // itself or it's contained within the element. Given that `click` and `keydown` are some\n    // of the most common events, this may end up introducing a lot of runtime overhead.\n    // 3. We're still registering only two events per element, no matter how many deferred blocks\n    // are referencing it.\n    entry = new DeferEventEntry();\n    interactionTriggers.set(trigger, entry);\n    for (const name of interactionEventNames) {\n      trigger.addEventListener(name, entry.listener, eventListenerOptions);\n    }\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    const {\n      callbacks,\n      listener\n    } = entry;\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      interactionTriggers.delete(trigger);\n      for (const name of interactionEventNames) {\n        trigger.removeEventListener(name, listener, eventListenerOptions);\n      }\n    }\n  };\n}\n/**\r\n * Registers a hover trigger.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger is hovered over.\r\n * @return cleanup function which removes trigger element from hoverTriggers map\r\n * and removes hover interaction event listeners from the trigger element\r\n */\nfunction onHover(trigger, callback) {\n  let entry = hoverTriggers.get(trigger);\n  // If this is the first entry for this element, add the listener.\n  if (!entry) {\n    entry = new DeferEventEntry();\n    hoverTriggers.set(trigger, entry);\n    for (const name of hoverEventNames) {\n      trigger.addEventListener(name, entry.listener, eventListenerOptions);\n    }\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    const {\n      callbacks,\n      listener\n    } = entry;\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      for (const name of hoverEventNames) {\n        trigger.removeEventListener(name, listener, eventListenerOptions);\n      }\n      hoverTriggers.delete(trigger);\n    }\n  };\n}\n/**\r\n * Used to create an IntersectionObserver instance.\r\n * @return IntersectionObserver that is used by onViewport\r\n */\nfunction createIntersectionObserver() {\n  return new IntersectionObserver(entries => {\n    for (const current of entries) {\n      if (current.isIntersecting && viewportTriggers.has(current.target)) {\n        viewportTriggers.get(current.target).listener();\n      }\n    }\n  });\n}\n/**\r\n * Registers a viewport trigger.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger comes into the viewport.\r\n * @param observerFactoryFn Factory function which returns an IntersectionObserver\r\n * @return cleanup function which removes trigger Element from viewportTriggers map\r\n * and tells the intersection observer to stop observing trigger Element and set\r\n * intersectionObserver to null if there are no more Elements to observe\r\n */\nfunction onViewport(trigger, callback, observerFactoryFn) {\n  let entry = viewportTriggers.get(trigger);\n  intersectionObserver = intersectionObserver || observerFactoryFn();\n  if (!entry) {\n    entry = new DeferEventEntry();\n    intersectionObserver.observe(trigger);\n    viewportTriggers.set(trigger, entry);\n    observedViewportElements++;\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    if (!viewportTriggers.has(trigger)) {\n      return;\n    }\n    entry.callbacks.delete(callback);\n    if (entry.callbacks.size === 0) {\n      intersectionObserver?.unobserve(trigger);\n      viewportTriggers.delete(trigger);\n      observedViewportElements--;\n    }\n    if (observedViewportElements === 0) {\n      intersectionObserver?.disconnect();\n      intersectionObserver = null;\n    }\n  };\n}\nconst DEFER_BLOCK_SSR_ID_ATTRIBUTE = 'ngb';\nfunction setJSActionAttributes(nativeElement, eventTypes, parentDeferBlockId = null) {\n  // jsaction attributes specifically should be applied to elements and not comment nodes.\n  // Comment nodes also have no setAttribute function. So this avoids errors.\n  if (eventTypes.length === 0 || nativeElement.nodeType !== Node.ELEMENT_NODE) {\n    return;\n  }\n  const existingAttr = nativeElement.getAttribute(Attribute$1.JSACTION);\n  // we dedupe cases where hydrate triggers are used as it's possible that\n  // someone may have added an event binding to the root node that matches what the\n  // hydrate trigger adds.\n  const parts = eventTypes.reduce((prev, curr) => {\n    // if there is no existing attribute OR it's not in the existing one, we need to add it\n    return (existingAttr?.indexOf(curr) ?? -1) === -1 ? prev + curr + ':;' : prev;\n  }, '');\n  //  This is required to be a module accessor to appease security tests on setAttribute.\n  nativeElement.setAttribute(Attribute$1.JSACTION, `${existingAttr ?? ''}${parts}`);\n  const blockName = parentDeferBlockId ?? '';\n  if (blockName !== '' && parts.length > 0) {\n    nativeElement.setAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE, blockName);\n  }\n}\nconst sharedStashFunction = (rEl, eventType, listenerFn) => {\n  const el = rEl;\n  const eventListenerMap = el.__jsaction_fns ?? new Map();\n  const eventListeners = eventListenerMap.get(eventType) ?? [];\n  eventListeners.push(listenerFn);\n  eventListenerMap.set(eventType, eventListeners);\n  el.__jsaction_fns = eventListenerMap;\n};\nconst sharedMapFunction = (rEl, jsActionMap) => {\n  const el = rEl;\n  let blockName = el.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE) ?? '';\n  const blockSet = jsActionMap.get(blockName) ?? new Set();\n  if (!blockSet.has(el)) {\n    blockSet.add(el);\n  }\n  jsActionMap.set(blockName, blockSet);\n};\nfunction removeListenersFromBlocks(blockNames, jsActionMap) {\n  if (blockNames.length > 0) {\n    let blockList = [];\n    for (let blockName of blockNames) {\n      if (jsActionMap.has(blockName)) {\n        blockList = [...blockList, ...jsActionMap.get(blockName)];\n      }\n    }\n    const replayList = new Set(blockList);\n    replayList.forEach(removeListeners);\n  }\n}\nconst removeListeners = el => {\n  el.removeAttribute(Attribute$1.JSACTION);\n  el.removeAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE);\n  el.__jsaction_fns = undefined;\n};\nconst JSACTION_EVENT_CONTRACT = new InjectionToken(ngDevMode ? 'EVENT_CONTRACT_DETAILS' : '', {\n  providedIn: 'root',\n  factory: () => ({})\n});\nfunction invokeListeners(event, currentTarget) {\n  const handlerFns = currentTarget?.__jsaction_fns?.get(event.type);\n  if (!handlerFns || !currentTarget?.isConnected) {\n    return;\n  }\n  for (const handler of handlerFns) {\n    handler(event);\n  }\n}\nconst stashEventListeners = new Map();\n/**\r\n * Registers a stashing function for a specific application ID.\r\n *\r\n * @param appId The unique identifier for the application instance.\r\n * @param fn The stashing function to associate with this app ID.\r\n * @returns A cleanup function that removes the stashing function when called.\r\n */\nfunction setStashFn(appId, fn) {\n  stashEventListeners.set(appId, fn);\n  return () => stashEventListeners.delete(appId);\n}\n/**\r\n * Indicates whether the stashing code was added, prevents adding it multiple times.\r\n */\nlet isStashEventListenerImplEnabled = false;\nlet _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {};\n/**\r\n * Optionally stashes an event listener for later replay during hydration.\r\n *\r\n * This function delegates to an internal `_stashEventListenerImpl`, which may\r\n * be a no-op unless the event replay feature is enabled. When active, this\r\n * allows capturing event listener metadata before hydration completes, so that\r\n * user interactions during SSR can be replayed.\r\n *\r\n * @param lView The logical view (LView) where the listener is being registered.\r\n * @param target The DOM element or event target the listener is attached to.\r\n * @param eventName The name of the event being listened for (e.g., 'click').\r\n * @param wrappedListener The event handler that was registered.\r\n */\nfunction stashEventListenerImpl(lView, target, eventName, wrappedListener) {\n  _stashEventListenerImpl(lView, target, eventName, wrappedListener);\n}\n/**\r\n * Enables the event listener stashing logic in a tree-shakable way.\r\n *\r\n * This function lazily sets the implementation of `_stashEventListenerImpl`\r\n * so that it becomes active only when `withEventReplay` is invoked. This ensures\r\n * that the stashing logic is excluded from production builds unless needed.\r\n */\nfunction enableStashEventListenerImpl() {\n  if (!isStashEventListenerImplEnabled) {\n    _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {\n      const appId = lView[INJECTOR].get(APP_ID);\n      const stashEventListener = stashEventListeners.get(appId);\n      stashEventListener?.(target, eventName, wrappedListener);\n    };\n    isStashEventListenerImplEnabled = true;\n  }\n}\n\n/**\r\n * An internal injection token to reference `DehydratedBlockRegistry` implementation\r\n * in a tree-shakable way.\r\n */\nconst DEHYDRATED_BLOCK_REGISTRY = new InjectionToken(ngDevMode ? 'DEHYDRATED_BLOCK_REGISTRY' : '');\n/**\r\n * The DehydratedBlockRegistry is used for incremental hydration purposes. It keeps\r\n * track of the Defer Blocks that need hydration so we can effectively\r\n * navigate up to the top dehydrated defer block and fire appropriate cleanup\r\n * functions post hydration.\r\n */\nclass DehydratedBlockRegistry {\n  registry = new Map();\n  cleanupFns = new Map();\n  jsActionMap = inject(JSACTION_BLOCK_ELEMENT_MAP);\n  contract = inject(JSACTION_EVENT_CONTRACT);\n  add(blockId, info) {\n    this.registry.set(blockId, info);\n    // It's possible that hydration is queued that's waiting for the\n    // resolution of a lazy loaded route. In this case, we ensure\n    // the callback function is called to continue the hydration process\n    // for the queued block set.\n    if (this.awaitingCallbacks.has(blockId)) {\n      const awaitingCallbacks = this.awaitingCallbacks.get(blockId);\n      for (const cb of awaitingCallbacks) {\n        cb();\n      }\n    }\n  }\n  get(blockId) {\n    return this.registry.get(blockId) ?? null;\n  }\n  has(blockId) {\n    return this.registry.has(blockId);\n  }\n  cleanup(hydratedBlocks) {\n    removeListenersFromBlocks(hydratedBlocks, this.jsActionMap);\n    for (let blockId of hydratedBlocks) {\n      this.registry.delete(blockId);\n      this.jsActionMap.delete(blockId);\n      this.invokeTriggerCleanupFns(blockId);\n      this.hydrating.delete(blockId);\n      this.awaitingCallbacks.delete(blockId);\n    }\n    if (this.size === 0) {\n      this.contract.instance?.cleanUp();\n    }\n  }\n  get size() {\n    return this.registry.size;\n  }\n  // we have to leave the lowest block Id in the registry\n  // unless that block has no children\n  addCleanupFn(blockId, fn) {\n    let cleanupFunctions = [];\n    if (this.cleanupFns.has(blockId)) {\n      cleanupFunctions = this.cleanupFns.get(blockId);\n    }\n    cleanupFunctions.push(fn);\n    this.cleanupFns.set(blockId, cleanupFunctions);\n  }\n  invokeTriggerCleanupFns(blockId) {\n    const fns = this.cleanupFns.get(blockId) ?? [];\n    for (let fn of fns) {\n      fn();\n    }\n    this.cleanupFns.delete(blockId);\n  }\n  // Blocks that are being hydrated.\n  hydrating = new Map();\n  // Blocks that are awaiting a defer instruction finish.\n  awaitingCallbacks = new Map();\n  awaitParentBlock(topmostParentBlock, callback) {\n    const parentBlockAwaitCallbacks = this.awaitingCallbacks.get(topmostParentBlock) ?? [];\n    parentBlockAwaitCallbacks.push(callback);\n    this.awaitingCallbacks.set(topmostParentBlock, parentBlockAwaitCallbacks);\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: DehydratedBlockRegistry,\n    providedIn: null,\n    factory: () => new DehydratedBlockRegistry()\n  });\n}\n\n/**\r\n * The name of the key used in the TransferState collection,\r\n * where hydration information is located.\r\n */\nconst TRANSFER_STATE_TOKEN_ID = '__nghData__';\n/**\r\n * Lookup key used to reference DOM hydration data (ngh) in `TransferState`.\r\n */\nconst NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);\n/**\r\n * The name of the key used in the TransferState collection,\r\n * where serialized defer block information is located.\r\n */\nconst TRANSFER_STATE_DEFER_BLOCKS_INFO = '__nghDeferData__';\n/**\r\n * Lookup key used to retrieve defer block datain `TransferState`.\r\n */\nconst NGH_DEFER_BLOCKS_KEY = makeStateKey(TRANSFER_STATE_DEFER_BLOCKS_INFO);\n/**\r\n * The name of the attribute that would be added to host component\r\n * nodes and contain a reference to a particular slot in transferred\r\n * state that contains the necessary hydration info for this component.\r\n */\nconst NGH_ATTR_NAME = 'ngh';\n/**\r\n * Marker used in a comment node to ensure hydration content integrity\r\n */\nconst SSR_CONTENT_INTEGRITY_MARKER = 'nghm';\n/**\r\n * Reference to a function that reads `ngh` attribute value from a given RNode\r\n * and retrieves hydration information from the TransferState using that value\r\n * as an index. Returns `null` by default, when hydration is not enabled.\r\n *\r\n * @param rNode Component's host element.\r\n * @param injector Injector that this component has access to.\r\n * @param isRootView Specifies whether we trying to read hydration info for the root view.\r\n */\nlet _retrieveHydrationInfoImpl = () => null;\nfunction retrieveHydrationInfoImpl(rNode, injector, isRootView = false) {\n  let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);\n  if (nghAttrValue == null) return null;\n  // For cases when a root component also acts as an anchor node for a ViewContainerRef\n  // (for example, when ViewContainerRef is injected in a root component), there is a need\n  // to serialize information about the component itself, as well as an LContainer that\n  // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n  // (1) hydration info for the root component itself and (2) hydration info for the\n  // ViewContainerRef instance (an LContainer). Each piece of information is included into\n  // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n  // Since we only have 1 root element, we encode both bits of info into a single string:\n  // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n  // and 25 is the `ngh` for a root view which holds LContainer).\n  const [componentViewNgh, rootViewNgh] = nghAttrValue.split('|');\n  nghAttrValue = isRootView ? rootViewNgh : componentViewNgh;\n  if (!nghAttrValue) return null;\n  // We've read one of the ngh ids, keep the remaining one, so that\n  // we can set it back on the DOM element.\n  const rootNgh = rootViewNgh ? `|${rootViewNgh}` : '';\n  const remainingNgh = isRootView ? componentViewNgh : rootNgh;\n  let data = {};\n  // An element might have an empty `ngh` attribute value (e.g. `<comp ngh=\"\" />`),\n  // which means that no special annotations are required. Do not attempt to read\n  // from the TransferState in this case.\n  if (nghAttrValue !== '') {\n    const transferState = injector.get(TransferState, null, {\n      optional: true\n    });\n    if (transferState !== null) {\n      const nghData = transferState.get(NGH_DATA_KEY, []);\n      // The nghAttrValue is always a number referencing an index\n      // in the hydration TransferState data.\n      data = nghData[Number(nghAttrValue)];\n      // If the `ngh` attribute exists and has a non-empty value,\n      // the hydration info *must* be present in the TransferState.\n      // If there is no data for some reasons, this is an error.\n      ngDevMode && assertDefined(data, 'Unable to retrieve hydration info from the TransferState.');\n    }\n  }\n  const dehydratedView = {\n    data,\n    firstChild: rNode.firstChild ?? null\n  };\n  if (isRootView) {\n    // If there is hydration info present for the root view, it means that there was\n    // a ViewContainerRef injected in the root component. The root component host element\n    // acted as an anchor node in this scenario. As a result, the DOM nodes that represent\n    // embedded views in this ViewContainerRef are located as siblings to the host node,\n    // i.e. `<app-root /><#VIEW1><#VIEW2>...<!--container-->`. In this case, the current\n    // node becomes the first child of this root view and the next sibling is the first\n    // element in the DOM segment.\n    dehydratedView.firstChild = rNode;\n    // We use `0` here, since this is the slot (right after the HEADER_OFFSET)\n    // where a component LView or an LContainer is located in a root LView.\n    setSegmentHead(dehydratedView, 0, rNode.nextSibling);\n  }\n  if (remainingNgh) {\n    // If we have only used one of the ngh ids, store the remaining one\n    // back on this RNode.\n    rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);\n  } else {\n    // The `ngh` attribute is cleared from the DOM node now\n    // that the data has been retrieved for all indices.\n    rNode.removeAttribute(NGH_ATTR_NAME);\n  }\n  // Note: don't check whether this node was claimed for hydration,\n  // because this node might've been previously claimed while processing\n  // template instructions.\n  ngDevMode && markRNodeAsClaimedByHydration(rNode, /* checkIfAlreadyClaimed */false);\n  ngDevMode && ngDevMode.hydratedComponents++;\n  return dehydratedView;\n}\n/**\r\n * Sets the implementation for the `retrieveHydrationInfo` function.\r\n */\nfunction enableRetrieveHydrationInfoImpl() {\n  _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;\n}\n/**\r\n * Retrieves hydration info by reading the value from the `ngh` attribute\r\n * and accessing a corresponding slot in TransferState storage.\r\n */\nfunction retrieveHydrationInfo(rNode, injector, isRootView = false) {\n  return _retrieveHydrationInfoImpl(rNode, injector, isRootView);\n}\n/**\r\n * Retrieves the necessary object from a given ViewRef to serialize:\r\n *  - an LView for component views\r\n *  - an LContainer for cases when component acts as a ViewContainerRef anchor\r\n *  - `null` in case of an embedded view\r\n */\nfunction getLNodeForHydration(viewRef) {\n  // Reading an internal field from `ViewRef` instance.\n  let lView = viewRef._lView;\n  const tView = lView[TVIEW];\n  // A registered ViewRef might represent an instance of an\n  // embedded view, in which case we do not need to annotate it.\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    return null;\n  }\n  // Check if it's a root view and if so, retrieve component's\n  // LView from the first slot after the header.\n  if (isRootView(lView)) {\n    lView = lView[HEADER_OFFSET];\n  }\n  return lView;\n}\nfunction getTextNodeContent(node) {\n  return node.textContent?.replace(/\\s/gm, '');\n}\n/**\r\n * Restores text nodes and separators into the DOM that were lost during SSR\r\n * serialization. The hydration process replaces empty text nodes and text\r\n * nodes that are immediately adjacent to other text nodes with comment nodes\r\n * that this method filters on to restore those missing nodes that the\r\n * hydration process is expecting to be present.\r\n *\r\n * @param node The app's root HTML Element\r\n */\nfunction processTextNodeMarkersBeforeHydration(node) {\n  const doc = getDocument();\n  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode(node) {\n      const content = getTextNodeContent(node);\n      const isTextNodeMarker = content === \"ngetn\" /* TextNodeMarker.EmptyNode */ || content === \"ngtns\" /* TextNodeMarker.Separator */;\n      return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n    }\n  });\n  let currentNode;\n  // We cannot modify the DOM while using the commentIterator,\n  // because it throws off the iterator state.\n  // So we collect all marker nodes first and then follow up with\n  // applying the changes to the DOM: either inserting an empty node\n  // or just removing the marker if it was used as a separator.\n  const nodes = [];\n  while (currentNode = commentNodesIterator.nextNode()) {\n    nodes.push(currentNode);\n  }\n  for (const node of nodes) {\n    if (node.textContent === \"ngetn\" /* TextNodeMarker.EmptyNode */) {\n      node.replaceWith(doc.createTextNode(''));\n    } else {\n      node.remove();\n    }\n  }\n}\n/**\r\n * Internal type that represents a claimed node.\r\n * Only used in dev mode.\r\n */\nvar HydrationStatus;\n(function (HydrationStatus) {\n  HydrationStatus[\"Hydrated\"] = \"hydrated\";\n  HydrationStatus[\"Skipped\"] = \"skipped\";\n  HydrationStatus[\"Mismatched\"] = \"mismatched\";\n})(HydrationStatus || (HydrationStatus = {}));\nconst HYDRATION_INFO_KEY = '__ngDebugHydrationInfo__';\nfunction patchHydrationInfo(node, info) {\n  node[HYDRATION_INFO_KEY] = info;\n}\nfunction readHydrationInfo(node) {\n  return node[HYDRATION_INFO_KEY] ?? null;\n}\n/**\r\n * Marks a node as \"claimed\" by hydration process.\r\n * This is needed to make assessments in tests whether\r\n * the hydration process handled all nodes.\r\n */\nfunction markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsClaimedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {\n    throw new Error('Trying to claim a node, which was claimed already.');\n  }\n  patchHydrationInfo(node, {\n    status: HydrationStatus.Hydrated\n  });\n  ngDevMode.hydratedNodes++;\n}\nfunction markRNodeAsSkippedByHydration(node) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsSkippedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  patchHydrationInfo(node, {\n    status: HydrationStatus.Skipped\n  });\n  ngDevMode.componentsSkippedHydration++;\n}\nfunction countBlocksSkippedByHydration(injector) {\n  const transferState = injector.get(TransferState);\n  const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  if (ngDevMode) {\n    ngDevMode.deferBlocksWithIncrementalHydration = Object.keys(nghDeferData).length;\n  }\n}\nfunction markRNodeAsHavingHydrationMismatch(node, expectedNodeDetails = null, actualNodeDetails = null) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsMismatchedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  // The RNode can be a standard HTMLElement (not an Angular component or directive)\n  // The devtools component tree only displays Angular components & directives\n  // Therefore we attach the debug info to the closest component/directive\n  while (node && !getComponent(node)) {\n    node = node?.parentNode;\n  }\n  if (node) {\n    patchHydrationInfo(node, {\n      status: HydrationStatus.Mismatched,\n      expectedNodeDetails,\n      actualNodeDetails\n    });\n  }\n}\nfunction isRNodeClaimedForHydration(node) {\n  return readHydrationInfo(node)?.status === HydrationStatus.Hydrated;\n}\nfunction setSegmentHead(hydrationInfo, index, node) {\n  hydrationInfo.segmentHeads ??= {};\n  hydrationInfo.segmentHeads[index] = node;\n}\nfunction getSegmentHead(hydrationInfo, index) {\n  return hydrationInfo.segmentHeads?.[index] ?? null;\n}\nfunction isIncrementalHydrationEnabled(injector) {\n  return injector.get(IS_INCREMENTAL_HYDRATION_ENABLED, false, {\n    optional: true\n  });\n}\n/** Throws an error if the incremental hydration is not enabled */\nfunction assertIncrementalHydrationIsConfigured(injector) {\n  if (!isIncrementalHydrationEnabled(injector)) {\n    throw new RuntimeError(508 /* RuntimeErrorCode.MISCONFIGURED_INCREMENTAL_HYDRATION */, 'Angular has detected that some `@defer` blocks use `hydrate` triggers, ' + 'but incremental hydration was not enabled. Please ensure that the `withIncrementalHydration()` ' + 'call is added as an argument for the `provideClientHydration()` function call ' + 'in your application config.');\n  }\n}\n/** Throws an error if the ssrUniqueId on the LDeferBlockDetails is not present  */\nfunction assertSsrIdDefined(ssrUniqueId) {\n  assertDefined(ssrUniqueId, 'Internal error: expecting an SSR id for a defer block that should be hydrated, but the id is not present');\n}\n/**\r\n * Returns the size of an <ng-container>, using either the information\r\n * serialized in `ELEMENT_CONTAINERS` (element container size) or by\r\n * computing the sum of root nodes in all dehydrated views in a given\r\n * container (in case this `<ng-container>` was also used as a view\r\n * container host node, e.g. <ng-container *ngIf>).\r\n */\nfunction getNgContainerSize(hydrationInfo, index) {\n  const data = hydrationInfo.data;\n  let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;\n  // If there is no serialized information available in the `ELEMENT_CONTAINERS` slot,\n  // check if we have info about view containers at this location (e.g.\n  // `<ng-container *ngIf>`) and use container size as a number of root nodes in this\n  // element container.\n  if (size === null && data[CONTAINERS]?.[index]) {\n    size = calcSerializedContainerSize(hydrationInfo, index);\n  }\n  return size;\n}\nfunction isSerializedElementContainer(hydrationInfo, index) {\n  return hydrationInfo.data[ELEMENT_CONTAINERS]?.[index] !== undefined;\n}\nfunction getSerializedContainerViews(hydrationInfo, index) {\n  return hydrationInfo.data[CONTAINERS]?.[index] ?? null;\n}\n/**\r\n * Computes the size of a serialized container (the number of root nodes)\r\n * by calculating the sum of root nodes in all dehydrated views in this container.\r\n */\nfunction calcSerializedContainerSize(hydrationInfo, index) {\n  const views = getSerializedContainerViews(hydrationInfo, index) ?? [];\n  let numNodes = 0;\n  for (let view of views) {\n    numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);\n  }\n  return numNodes;\n}\n/**\r\n * Attempt to initialize the `disconnectedNodes` field of the given\r\n * `DehydratedView`. Returns the initialized value.\r\n */\nfunction initDisconnectedNodes(hydrationInfo) {\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return hydrationInfo.disconnectedNodes;\n}\n/**\r\n * Checks whether a node is annotated as \"disconnected\", i.e. not present\r\n * in the DOM at serialization time. We should not attempt hydration for\r\n * such nodes and instead, use a regular \"creation mode\".\r\n */\nfunction isDisconnectedNode$1(hydrationInfo, index) {\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return !!initDisconnectedNodes(hydrationInfo)?.has(index);\n}\n/**\r\n * Helper function to prepare text nodes for serialization by ensuring\r\n * that seperate logical text blocks in the DOM remain separate after\r\n * serialization.\r\n */\nfunction processTextNodeBeforeSerialization(context, node) {\n  // Handle cases where text nodes can be lost after DOM serialization:\n  //  1. When there is an *empty text node* in DOM: in this case, this\n  //     node would not make it into the serialized string and as a result,\n  //     this node wouldn't be created in a browser. This would result in\n  //     a mismatch during the hydration, where the runtime logic would expect\n  //     a text node to be present in live DOM, but no text node would exist.\n  //     Example: `<span>{{ name }}</span>` when the `name` is an empty string.\n  //     This would result in `<span></span>` string after serialization and\n  //     in a browser only the `span` element would be created. To resolve that,\n  //     an extra comment node is appended in place of an empty text node and\n  //     that special comment node is replaced with an empty text node *before*\n  //     hydration.\n  //  2. When there are 2 consecutive text nodes present in the DOM.\n  //     Example: `<div>Hello <ng-container *ngIf=\"true\">world</ng-container></div>`.\n  //     In this scenario, the live DOM would look like this:\n  //       <div>#text('Hello ') #text('world') #comment('container')</div>\n  //     Serialized string would look like this: `<div>Hello world<!--container--></div>`.\n  //     The live DOM in a browser after that would be:\n  //       <div>#text('Hello world') #comment('container')</div>\n  //     Notice how 2 text nodes are now \"merged\" into one. This would cause hydration\n  //     logic to fail, since it'd expect 2 text nodes being present, not one.\n  //     To fix this, we insert a special comment node in between those text nodes, so\n  //     serialized representation is: `<div>Hello <!--ngtns-->world<!--container--></div>`.\n  //     This forces browser to create 2 text nodes separated by a comment node.\n  //     Before running a hydration process, this special comment node is removed, so the\n  //     live DOM has exactly the same state as it was before serialization.\n  // Collect this node as required special annotation only when its\n  // contents is empty. Otherwise, such text node would be present on\n  // the client after server-side rendering and no special handling needed.\n  const el = node;\n  const corruptedTextNodes = context.corruptedTextNodes;\n  if (el.textContent === '') {\n    corruptedTextNodes.set(el, \"ngetn\" /* TextNodeMarker.EmptyNode */);\n  } else if (el.nextSibling?.nodeType === Node.TEXT_NODE) {\n    corruptedTextNodes.set(el, \"ngtns\" /* TextNodeMarker.Separator */);\n  }\n}\nfunction convertHydrateTriggersToJsAction(triggers) {\n  let actionList = [];\n  if (triggers !== null) {\n    if (triggers.has(4 /* DeferBlockTrigger.Hover */)) {\n      actionList.push(...hoverEventNames);\n    }\n    if (triggers.has(3 /* DeferBlockTrigger.Interaction */)) {\n      actionList.push(...interactionEventNames);\n    }\n  }\n  return actionList;\n}\n/**\r\n * Builds a queue of blocks that need to be hydrated, looking up the\r\n * tree to the topmost defer block that exists in the tree that hasn't\r\n * been hydrated, but exists in the registry. This queue is in top down\r\n * hierarchical order as a list of defer block ids.\r\n * Note: This is utilizing serialized information to navigate up the tree\r\n */\nfunction getParentBlockHydrationQueue(deferBlockId, injector) {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const transferState = injector.get(TransferState);\n  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  let isTopMostDeferBlock = false;\n  let currentBlockId = deferBlockId;\n  let parentBlockPromise = null;\n  const hydrationQueue = [];\n  while (!isTopMostDeferBlock && currentBlockId) {\n    ngDevMode && assertEqual(hydrationQueue.indexOf(currentBlockId), -1, 'Internal error: defer block hierarchy has a cycle.');\n    isTopMostDeferBlock = dehydratedBlockRegistry.has(currentBlockId);\n    const hydratingParentBlock = dehydratedBlockRegistry.hydrating.get(currentBlockId);\n    if (parentBlockPromise === null && hydratingParentBlock != null) {\n      parentBlockPromise = hydratingParentBlock.promise;\n      break;\n    }\n    hydrationQueue.unshift(currentBlockId);\n    currentBlockId = deferBlockParents[currentBlockId][DEFER_PARENT_BLOCK_ID];\n  }\n  return {\n    parentBlockPromise,\n    hydrationQueue\n  };\n}\nfunction gatherDeferBlocksByJSActionAttribute(doc) {\n  const jsactionNodes = doc.body.querySelectorAll('[jsaction]');\n  const blockMap = new Set();\n  const eventTypes = [hoverEventNames.join(':;'), interactionEventNames.join(':;')].join('|');\n  for (let node of jsactionNodes) {\n    const attr = node.getAttribute('jsaction');\n    const blockId = node.getAttribute('ngb');\n    if (attr?.match(eventTypes) && blockId !== null) {\n      blockMap.add(node);\n    }\n  }\n  return blockMap;\n}\nfunction appendDeferBlocksToJSActionMap(doc, injector) {\n  const blockMap = gatherDeferBlocksByJSActionAttribute(doc);\n  const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);\n  for (let rNode of blockMap) {\n    sharedMapFunction(rNode, jsActionMap);\n  }\n}\n/**\r\n * Retrieves defer block hydration information from the TransferState.\r\n *\r\n * @param injector Injector that this component has access to.\r\n */\nlet _retrieveDeferBlockDataImpl = () => {\n  return {};\n};\nfunction retrieveDeferBlockDataImpl(injector) {\n  const transferState = injector.get(TransferState, null, {\n    optional: true\n  });\n  if (transferState !== null) {\n    const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n    ngDevMode && assertDefined(nghDeferData, 'Unable to retrieve defer block info from the TransferState.');\n    return nghDeferData;\n  }\n  return {};\n}\n/**\r\n * Sets the implementation for the `retrieveDeferBlockData` function.\r\n */\nfunction enableRetrieveDeferBlockDataImpl() {\n  _retrieveDeferBlockDataImpl = retrieveDeferBlockDataImpl;\n}\n/**\r\n * Retrieves defer block data from TransferState storage\r\n */\nfunction retrieveDeferBlockData(injector) {\n  return _retrieveDeferBlockDataImpl(injector);\n}\nfunction isTimerTrigger(triggerInfo) {\n  return typeof triggerInfo === 'object' && triggerInfo.trigger === 5 /* DeferBlockTrigger.Timer */;\n}\nfunction getHydrateTimerTrigger(blockData) {\n  const trigger = blockData[DEFER_HYDRATE_TRIGGERS]?.find(t => isTimerTrigger(t));\n  return trigger?.delay ?? null;\n}\nfunction hasHydrateTrigger(blockData, trigger) {\n  return blockData[DEFER_HYDRATE_TRIGGERS]?.includes(trigger) ?? false;\n}\n/**\r\n * Creates a summary of the given serialized defer block, which is used later to properly initialize\r\n * specific triggers.\r\n */\nfunction createBlockSummary(blockInfo) {\n  return {\n    data: blockInfo,\n    hydrate: {\n      idle: hasHydrateTrigger(blockInfo, 0 /* DeferBlockTrigger.Idle */),\n      immediate: hasHydrateTrigger(blockInfo, 1 /* DeferBlockTrigger.Immediate */),\n      timer: getHydrateTimerTrigger(blockInfo),\n      viewport: hasHydrateTrigger(blockInfo, 2 /* DeferBlockTrigger.Viewport */)\n    }\n  };\n}\n/**\r\n * Processes all of the defer block data in the transfer state and creates a map of the summaries\r\n */\nfunction processBlockData(injector) {\n  const blockData = retrieveDeferBlockData(injector);\n  let blockDetails = new Map();\n  for (let blockId in blockData) {\n    blockDetails.set(blockId, createBlockSummary(blockData[blockId]));\n  }\n  return blockDetails;\n}\nfunction isSsrContentsIntegrity(node) {\n  return !!node && node.nodeType === Node.COMMENT_NODE && node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER;\n}\nfunction skipTextNodes(node) {\n  // Ignore whitespace. Before the <body>, we shouldn't find text nodes that aren't whitespace.\n  while (node && node.nodeType === Node.TEXT_NODE) {\n    node = node.previousSibling;\n  }\n  return node;\n}\n/**\r\n * Verifies whether the DOM contains a special marker added during SSR time to make sure\r\n * there is no SSR'ed contents transformations happen after SSR is completed. Typically that\r\n * happens either by CDN or during the build process as an optimization to remove comment nodes.\r\n * Hydration process requires comment nodes produced by Angular to locate correct DOM segments.\r\n * When this special marker is *not* present - throw an error and do not proceed with hydration,\r\n * since it will not be able to function correctly.\r\n *\r\n * Note: this function is invoked only on the client, so it's safe to use DOM APIs.\r\n */\nfunction verifySsrContentsIntegrity(doc) {\n  for (const node of doc.body.childNodes) {\n    if (isSsrContentsIntegrity(node)) {\n      return;\n    }\n  }\n  // Check if the HTML parser may have moved the marker to just before the <body> tag,\n  // e.g. because the body tag was implicit and not present in the markup. An implicit body\n  // tag is unlikely to interfer with whitespace/comments inside of the app's root element.\n  // Case 1: Implicit body. Example:\n  //   <!doctype html><head><title>Hi</title></head><!--nghm--><app-root></app-root>\n  const beforeBody = skipTextNodes(doc.body.previousSibling);\n  if (isSsrContentsIntegrity(beforeBody)) {\n    return;\n  }\n  // Case 2: Implicit body & head. Example:\n  //   <!doctype html><head><title>Hi</title><!--nghm--><app-root></app-root>\n  let endOfHead = skipTextNodes(doc.head.lastChild);\n  if (isSsrContentsIntegrity(endOfHead)) {\n    return;\n  }\n  throw new RuntimeError(-507 /* RuntimeErrorCode.MISSING_SSR_CONTENT_INTEGRITY_MARKER */, typeof ngDevMode !== 'undefined' && ngDevMode && 'Angular hydration logic detected that HTML content of this page was modified after it ' + 'was produced during server side rendering. Make sure that there are no optimizations ' + 'that remove comment nodes from HTML enabled on your CDN. Angular hydration ' + 'relies on HTML produced by the server, including whitespaces and comment nodes.');\n}\n\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      for (let i = 0; i < contentQueries.length; i += 2) {\n        const queryStartIdx = contentQueries[i];\n        const directiveDefIdx = contentQueries[i + 1];\n        if (directiveDefIdx !== -1) {\n          const directiveDef = tView.data[directiveDefIdx];\n          ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n          ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n          setCurrentQueryIndex(queryStartIdx);\n          directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    viewQueryFn(flags, component);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\nfunction executeContentQueries(tView, tNode, lView) {\n  if (isContentQueryHost(tNode)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const start = tNode.directiveStart;\n      const end = tNode.directiveEnd;\n      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const def = tView.data[directiveIndex];\n        if (def.contentQueries) {\n          const directiveInstance = lView[directiveIndex];\n          ngDevMode && assertDefined(directiveIndex, 'Incorrect reference to a directive defining a content query');\n          def.contentQueries(1 /* RenderFlags.Create */, directiveInstance, directiveIndex);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\r\n * Defines the CSS styles encapsulation policies for the {@link /api/core/Component Component} decorator's\r\n * `encapsulation` option.\r\n *\r\n * See {@link Component#encapsulation encapsulation}.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\r\n *\r\n * @publicApi\r\n */\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n  /**\r\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\r\n   * component's host element and applying the same attribute to all the CSS selectors provided\r\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\r\n   *\r\n   * This is the default option.\r\n   */\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  /**\r\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\r\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\r\n   * to any HTML element of the application regardless of their host Component.\r\n   */\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  /**\r\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\r\n   * a ShadowRoot for the component's host element which is then used to encapsulate\r\n   * all the Component's styling.\r\n   */\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\n/**\r\n * @fileoverview\r\n * A module to facilitate use of a Trusted Types policy internally within\r\n * Angular. It lazily constructs the Trusted Types policy, providing helper\r\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\r\n * available, strings are used as a fallback.\r\n * @security All use of this module is security-sensitive and should go through\r\n * security review.\r\n */\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\nlet policy$1;\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\nfunction getPolicy$1() {\n  if (policy$1 === undefined) {\n    policy$1 = null;\n    if (_global.trustedTypes) {\n      try {\n        policy$1 = _global.trustedTypes.createPolicy('angular', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy$1;\n}\n/**\r\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that the\r\n * provided string will never cause an XSS vulnerability if used in a context\r\n * that will be interpreted as HTML by a browser, e.g. when assigning to\r\n * element.innerHTML.\r\n */\nfunction trustedHTMLFromString(html) {\n  return getPolicy$1()?.createHTML(html) || html;\n}\n/**\r\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\r\n * when Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that the\r\n * provided string will never cause an XSS vulnerability if used in a context\r\n * that will cause a browser to load and execute a resource, e.g. when\r\n * assigning to script.src.\r\n */\nfunction trustedScriptURLFromString(url) {\n  return getPolicy$1()?.createScriptURL(url) || url;\n}\n\n/**\r\n * @fileoverview\r\n * A module to facilitate use of a Trusted Types policy internally within\r\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\r\n * lazily constructs the Trusted Types policy, providing helper utilities for\r\n * promoting strings to Trusted Types. When Trusted Types are not available,\r\n * strings are used as a fallback.\r\n * @security All use of this module is security-sensitive and should go through\r\n * security review.\r\n */\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\nlet policy;\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (_global.trustedTypes) {\n      try {\n        policy = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n/**\r\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only passed strings that come directly from custom sanitizers or the\r\n * bypassSecurityTrust* functions.\r\n */\nfunction trustedHTMLFromStringBypass(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n/**\r\n * Unsafely promote a string to a TrustedScript, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only passed strings that come directly from custom sanitizers or the\r\n * bypassSecurityTrust* functions.\r\n */\nfunction trustedScriptFromStringBypass(script) {\n  return getPolicy()?.createScript(script) || script;\n}\n/**\r\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\r\n * when Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only passed strings that come directly from custom sanitizers or the\r\n * bypassSecurityTrust* functions.\r\n */\nfunction trustedScriptURLFromStringBypass(url) {\n  return getPolicy()?.createScriptURL(url) || url;\n}\nclass SafeValueImpl {\n  changingThisBreaksApplicationSecurity;\n  constructor(changingThisBreaksApplicationSecurity) {\n    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n  }\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see ${XSS_SECURITY_URL})`;\n  }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"HTML\" /* BypassType.Html */;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Style\" /* BypassType.Style */;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Script\" /* BypassType.Script */;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"URL\" /* BypassType.Url */;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"ResourceURL\" /* BypassType.ResourceUrl */;\n  }\n}\nfunction unwrapSafeValue(value) {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n  return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\r\n * Mark `html` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedHtml `html` string which needs to be implicitly trusted.\r\n * @returns a `html` which has been branded to be implicitly trusted.\r\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\r\n * Mark `style` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedStyle `style` string which needs to be implicitly trusted.\r\n * @returns a `style` hich has been branded to be implicitly trusted.\r\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\r\n * Mark `script` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedScript `script` string which needs to be implicitly trusted.\r\n * @returns a `script` which has been branded to be implicitly trusted.\r\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedUrl `url` string which needs to be implicitly trusted.\r\n * @returns a `url`  which has been branded to be implicitly trusted.\r\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\r\n * @returns a `url` which has been branded to be implicitly trusted.\r\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\r\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\r\n * that needs sanitizing.\r\n * Depending upon browser support we use one of two strategies for doing this.\r\n * Default: DOMParser strategy\r\n * Fallback: InertDocument strategy\r\n */\nfunction getInertBodyHelper(defaultDoc) {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\r\n * Uses DOMParser to create and fill an inert body element.\r\n * This is the default strategy used in browsers that support it.\r\n */\nclass DOMParserHelper {\n  inertDocumentHelper;\n  constructor(inertDocumentHelper) {\n    this.inertDocumentHelper = inertDocumentHelper;\n  }\n  getInertBodyElement(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.firstChild?.remove();\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n/**\r\n * Use an HTML5 `template` element to create and fill an inert DOM element.\r\n * This is the fallback strategy if the browser does not support DOMParser.\r\n */\nclass InertDocumentHelper {\n  defaultDoc;\n  inertDocument;\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n  getInertBodyElement(html) {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html);\n    return templateEl;\n  }\n}\n/**\r\n * We need to determine whether the DOMParser exists in the global context and\r\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\r\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\r\n *\r\n * @suppress {uselessCode}\r\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n  } catch {\n    return false;\n  }\n}\n\n/**\r\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\r\n * contexts.\r\n *\r\n * This regular expression matches a subset of URLs that will not cause script\r\n * execution if used in URL context within a HTML document. Specifically, this\r\n * regular expression matches if:\r\n * (1) Either a protocol that is not javascript:, and that has valid characters\r\n *     (alphanumeric or [+-.]).\r\n * (2) or no protocol.  A protocol must be followed by a colon. The below\r\n *     allows that by allowing colons only after one of the characters [/?#].\r\n *     A colon after a hash (#) must be in the fragment.\r\n *     Otherwise, a colon after a (?) must be in a query.\r\n *     Otherwise, a colon after a single solidus (/) must be in a path.\r\n *     Otherwise, a colon after a double solidus (//) must be in the authority\r\n *     (before port).\r\n *\r\n * The pattern disallows &, used in HTML entity declarations before\r\n * one of the characters in [/?#]. This disallows HTML entities used in the\r\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\r\n * It also disallows HTML entities in the first path part of a relative path,\r\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\r\n * that. More importantly, it disallows masking of a colon,\r\n * e.g. \"javascript&#58;...\".\r\n *\r\n * This regular expression was taken from the Closure sanitization library.\r\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n  return 'unsafe:' + url;\n}\nfunction tagSet(tags) {\n  const res = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\nfunction merge(...sets) {\n  const res = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\r\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\r\n * attributes.\r\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  sanitizedSomething = false;\n  buf = [];\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current = el.firstChild;\n    let traverseContent = true;\n    let parentNodes = [];\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        // Push current node to the parent stack before entering its content.\n        parentNodes.push(current);\n        current = getFirstChild(current);\n        continue;\n      }\n      while (current) {\n        // Leaving the element.\n        // Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current);\n        }\n        let next = getNextSibling(current);\n        if (next) {\n          current = next;\n          break;\n        }\n        // There was no next sibling, walk up to the parent node (extract it from the stack).\n        current = parentNodes.pop();\n      }\n    }\n    return this.buf.join('');\n  }\n  /**\r\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\r\n   * be traversed. Element content must always be traversed (even if the element itself is not\r\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\r\n   *\r\n   * @param element The element to sanitize.\r\n   * @return True if the element's contents should be traversed.\r\n   */\n  startElement(element) {\n    const tagName = getNodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n  endElement(current) {\n    const tagName = getNodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n}\n/**\r\n * Verifies whether a given child node is a descendant of a given parent node.\r\n * It may not be the case when properties like `.firstChild` are clobbered and\r\n * accessing `.firstChild` results in an unexpected node returned.\r\n */\nfunction isClobberedElement(parentNode, childNode) {\n  return (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !== Node.DOCUMENT_POSITION_CONTAINED_BY;\n}\n/**\r\n * Retrieves next sibling node and makes sure that there is no\r\n * clobbering of the `nextSibling` property happening.\r\n */\nfunction getNextSibling(node) {\n  const nextSibling = node.nextSibling;\n  // Make sure there is no `nextSibling` clobbering: navigating to\n  // the next sibling and going back to the previous one should result\n  // in the original node.\n  if (nextSibling && node !== nextSibling.previousSibling) {\n    throw clobberedElementError(nextSibling);\n  }\n  return nextSibling;\n}\n/**\r\n * Retrieves first child node and makes sure that there is no\r\n * clobbering of the `firstChild` property happening.\r\n */\nfunction getFirstChild(node) {\n  const firstChild = node.firstChild;\n  if (firstChild && isClobberedElement(node, firstChild)) {\n    throw clobberedElementError(firstChild);\n  }\n  return firstChild;\n}\n/** Gets a reasonable nodeName, even for clobbered nodes. */\nfunction getNodeName(node) {\n  const nodeName = node.nodeName;\n  // If the property is clobbered, assume it is an `HTMLFormElement`.\n  return typeof nodeName === 'string' ? nodeName : 'FORM';\n}\nfunction clobberedElementError(node) {\n  return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\r\n * Escapes all potentially dangerous characters, so that the\r\n * resulting string can be safely inserted into attribute or\r\n * element text.\r\n * @param value\r\n */\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    const hi = match.charCodeAt(0);\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\r\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\r\n * the DOM in a browser environment.\r\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  let inertBodyElement = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.firstChild.remove();\n      }\n    }\n  }\n}\nfunction getTemplateContent(el) {\n  return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ? el.content : null;\n}\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\r\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\r\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\r\n * handled.\r\n *\r\n * See DomSanitizer for more details on security in Angular applications.\r\n *\r\n * @publicApi\r\n */\nvar SecurityContext;\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\r\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * This method parses the `html` and locates potentially dangerous content (such as urls and\r\n * javascript) and removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\r\n *\r\n * @param unsafeHtml untrusted `html`, typically from the user.\r\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\r\n * and urls have been removed.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\r\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\r\n *\r\n * @param unsafeStyle untrusted `style`, typically from the user.\r\n * @returns `style` string which is safe to bind to the `style` properties.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n/**\r\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\r\n * dangerous\r\n * content.\r\n *\r\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\r\n * removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\r\n *\r\n * @param unsafeUrl untrusted `url`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * all of the dangerous javascript has been removed.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\r\n * A `url` sanitizer which only lets trusted `url`s through.\r\n *\r\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\r\n *\r\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * only trusted `url`s have been allowed to pass.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\r\n * A `script` sanitizer which only lets trusted javascript through.\r\n *\r\n * This passes only `script`s marked trusted by calling {@link\r\n * bypassSanitizationTrustScript}.\r\n *\r\n * @param unsafeScript untrusted `script`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\r\n * because only trusted `scripts` have been allowed to pass.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\r\n * A template tag function for promoting the associated constant literal to a\r\n * TrustedHTML. Interpolation is explicitly not allowed.\r\n *\r\n * @param html constant template literal containing trusted HTML.\r\n * @returns TrustedHTML wrapping `html`.\r\n *\r\n * @security This is a security-sensitive function and should only be used to\r\n * convert constant values of attributes and properties found in\r\n * application-provided Angular templates to TrustedHTML.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtrustConstantHtml(html) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n/**\r\n * A template tag function for promoting the associated constant literal to a\r\n * TrustedScriptURL. Interpolation is explicitly not allowed.\r\n *\r\n * @param url constant template literal containing a trusted script URL.\r\n * @returns TrustedScriptURL wrapping `url`.\r\n *\r\n * @security This is a security-sensitive function and should only be used to\r\n * convert constant values of attributes and properties found in\r\n * application-provided Angular templates to TrustedScriptURL.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n/**\r\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\r\n *\r\n * The rules are based on the RESOURCE_URL context config from\r\n * `packages/compiler/src/schema/dom_security_schema.ts`.\r\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\r\n */\nfunction getUrlSanitizer(tag, prop) {\n  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n/**\r\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\r\n *\r\n * This function is used in case we can't define security context at compile time, when only prop\r\n * name is available. This happens when we generate host bindings for Directives/Components. The\r\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\r\n * runtime.\r\n *\r\n * @param unsafeUrl untrusted `url`, typically from the user.\r\n * @param tag target element tag name.\r\n * @param prop name of the property that contains the value.\r\n * @returns `url` string which is safe to bind.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction validateAgainstEventAttributes(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction getSanitizer() {\n  const lView = getLView();\n  return lView && lView[ENVIRONMENT].sanitizer;\n}\n\n/**\r\n * Disallowed strings in the comment.\r\n *\r\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\r\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\r\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\r\n */\nconst COMMENT_DELIMITER = /(<|>)/g;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\r\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\r\n *\r\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\r\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\r\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\r\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\r\n *\r\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\r\n *\r\n * ```ts\r\n * div.innerHTML = div.innerHTML\r\n * ```\r\n *\r\n * One would expect that the above code would be safe to do, but it turns out that because comment\r\n * text is not escaped, the comment may contain text which will prematurely close the comment\r\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\r\n * may contain such text and expect them to be safe.)\r\n *\r\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\r\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\r\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\r\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\r\n *\r\n * @param value text to make safe for comment node by escaping the comment open/close character\r\n *     sequence.\r\n */\nfunction escapeCommentText(value) {\n  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n/** Defines the default value of the `NG_REFLECT_ATTRS_FLAG` flag. */\nconst NG_REFLECT_ATTRS_FLAG_DEFAULT = false;\n/**\r\n * Defines an internal flag that indicates whether the runtime code should be\r\n * producing `ng-reflect-*` attributes.\r\n */\nconst NG_REFLECT_ATTRS_FLAG = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'NG_REFLECT_FLAG' : '', {\n  providedIn: 'root',\n  factory: () => NG_REFLECT_ATTRS_FLAG_DEFAULT\n});\n/**\r\n * Enables the logic to produce `ng-reflect-*` attributes on elements with bindings.\r\n *\r\n * Note: this is a dev-mode only setting and it will have no effect in production mode.\r\n * In production mode, the `ng-reflect-*` attributes are *never* produced by Angular.\r\n *\r\n * Important: using and relying on the `ng-reflect-*` attributes is not recommended,\r\n * they are deprecated and only present for backwards compatibility. Angular will stop\r\n * producing them in one of the future versions.\r\n *\r\n * @publicApi\r\n */\nfunction provideNgReflectAttributes() {\n  const providers = typeof ngDevMode === 'undefined' || ngDevMode ? [{\n    provide: NG_REFLECT_ATTRS_FLAG,\n    useValue: true\n  }] : [];\n  return makeEnvironmentProviders(providers);\n}\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n\n/**\r\n * Defines a schema that allows an NgModule to contain the following:\r\n * - Non-Angular elements named with dash case (`-`).\r\n * - Element properties named with dash case (`-`).\r\n * Dash case is the naming convention for custom elements.\r\n *\r\n * @publicApi\r\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\r\n * Defines a schema that allows any property on any element.\r\n *\r\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\r\n * template. The usage of this schema is generally discouraged because it prevents useful validation\r\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\r\n *\r\n * @publicApi\r\n */\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nlet shouldThrowErrorOnUnknownElement = false;\n/**\r\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\r\n * instead of just logging the error.\r\n * (for AOT-compiled ones this check happens at build time).\r\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\r\n * Gets the current value of the strict mode.\r\n */\nfunction ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\r\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\r\n * instead of just logging the error.\r\n * (for AOT-compiled ones this check happens at build time).\r\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\r\n * Gets the current value of the strict mode.\r\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n/**\r\n * Validates that the element is known at runtime and produces\r\n * an error if it's not the case.\r\n * This check is relevant for JIT-compiled components (for AOT-compiled\r\n * ones this check happens at build time).\r\n *\r\n * The element is considered known if either:\r\n * - it's a known HTML element\r\n * - it's a known custom element\r\n * - the element matches any directive\r\n * - the element is allowed by one of the schemas\r\n *\r\n * @param element Element to validate\r\n * @param lView An `LView` that represents a current component that is being rendered\r\n * @param tagName Name of the tag to check\r\n * @param schemas Array of schemas\r\n * @param hasDirectives Boolean indicating that the element matches any directive\r\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n    // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n    // Domino doesn't expose HTMLUnknownElement globally.\n    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);\n    if (isUnknown && !matchingSchemas(schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? \"included in the '@Component.imports' of this component\" : 'a part of an @NgModule where this component is declared'}.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n      } else {\n        console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n      }\n    }\n  }\n}\n/**\r\n * Validates that the property of the element is known at runtime and returns\r\n * false if it's not the case.\r\n * This check is relevant for JIT-compiled components (for AOT-compiled\r\n * ones this check happens at build time).\r\n *\r\n * The property is considered known if either:\r\n * - it's a known property of the element\r\n * - the element is allowed by one of the schemas\r\n * - the property is used for animations\r\n *\r\n * @param element Element to validate\r\n * @param propName Name of the property to check\r\n * @param tagName Name of the tag hosting the property\r\n * @param schemas Array of schemas\r\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic.\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\r\n * Logs or throws an error that a property is not supported on an element.\r\n *\r\n * @param propName Name of the invalid property\r\n * @param tagName Name of the tag hosting the property\r\n * @param nodeType Type of the node hosting the property\r\n * @param lView An `LView` that represents a current component\r\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n    tagName = 'ng-template';\n  }\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ? \"included in the '@Component.imports' of this component\" : 'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` + `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` + `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` + `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    }\n  }\n  reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n  } else {\n    console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n  }\n}\n/**\r\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\r\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\r\n * be too slow for production mode and also it relies on the constructor function being available.\r\n *\r\n * Gets a reference to the host component def (where a current component is declared).\r\n *\r\n * @param lView An `LView` that represents a current component that is being rendered.\r\n */\nfunction getDeclarationComponentDef(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  // Unable to obtain a context.\n  if (!context) return null;\n  return context.constructor ? getComponentDef(context.constructor) : null;\n}\n/**\r\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\r\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\r\n * be too slow for production mode.\r\n *\r\n * Checks if the current component is declared inside of a standalone component template.\r\n *\r\n * @param lView An `LView` that represents a current component that is being rendered.\r\n */\nfunction isHostComponentStandalone(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!componentDef?.standalone;\n}\n/**\r\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\r\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\r\n * be too slow for production mode.\r\n *\r\n * Constructs a string describing the location of the host component template. The function is used\r\n * in dev mode to produce error messages.\r\n *\r\n * @param lView An `LView` that represents a current component that is being rendered.\r\n */\nfunction getTemplateLocationDetails(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\r\n * The set of known control flow directives and their corresponding imports.\r\n * We use this set to produce a more precises error message with a note\r\n * that the `CommonModule` should also be included.\r\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'], ['ngSwitchDefault', 'NgSwitchDefault']]);\n/**\r\n * Returns true if the tag name is allowed by specified schemas.\r\n * @param schemas Array of schemas\r\n * @param tagName Name of the tag\r\n */\nfunction matchingSchemas(schemas, tagName) {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵresolveWindow(element) {\n  return element.ownerDocument.defaultView;\n}\n/**\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵresolveDocument(element) {\n  return element.ownerDocument;\n}\n/**\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵresolveBody(element) {\n  return element.ownerDocument.body;\n}\n/**\r\n * The special delimiter we use to separate property names, prefixes, and suffixes\r\n * in property binding metadata. See storeBindingMetadata().\r\n *\r\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\r\n * because it is a very uncommon character that is unlikely to be part of a user's\r\n * property names or interpolation strings. If it is in fact used in a property\r\n * binding, DebugElement.properties will not return the correct value for that\r\n * binding. However, there should be no runtime effect for real applications.\r\n *\r\n * This character is typically rendered as a question mark inside of a diamond.\r\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\r\n *\r\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\r\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\r\n */\nfunction maybeUnwrapFn(value) {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n\n/**\r\n * The max length of the string representation of a value in an error message\r\n */\nconst VALUE_STRING_LENGTH_LIMIT = 200;\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef(type);\n  if (!componentDef.standalone) {\n    throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` + `but Angular expects to have a standalone component here. ` + `Please make sure the ${stringifyForError(type)} component has ` + `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n  if (!getComponentDef(type)) {\n    throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` + `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n  throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ''}`;\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction formatValue(value) {\n  let strValue = String(value);\n  // JSON.stringify will throw on circular references\n  try {\n    if (Array.isArray(value) || strValue === '[object Object]') {\n      strValue = JSON.stringify(value);\n    }\n  } catch (error) {}\n  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + '…' : strValue;\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n    newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {\n    propName,\n    oldValue,\n    newValue\n  };\n}\n/**\r\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\r\n * - property name (for property bindings or interpolations)\r\n * - old and new values, enriched using information from metadata\r\n *\r\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\r\n * function description.\r\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n    }\n    // metadata for property binding\n    return {\n      propName: metadata,\n      oldValue,\n      newValue\n    };\n  }\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {\n    propName: undefined,\n    oldValue,\n    newValue\n  };\n}\n\n/**\r\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\r\n *\r\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\r\n *\r\n * @param className A string containing classes (whitespace separated)\r\n * @param classToSearch A class name to locate\r\n * @param startingIndex Starting location of search\r\n * @returns an index of the located class (or -1 if not found)\r\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\r\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\r\n *\r\n * @param tNode static data of the node to match\r\n * @param attrs `TAttributes` to search through.\r\n * @param cssClassToMatch class to match (lowercase)\r\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\r\n *    addition to the `AttributeMarker.Classes`.\r\n */\nfunction isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {\n  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  if (isProjectionMode) {\n    for (; i < attrs.length && typeof attrs[i] === 'string'; i += 2) {\n      // Search for an implicit `class` attribute and check if its value matches `cssClassToMatch`.\n      if (attrs[i] === 'class' && classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {\n        return true;\n      }\n    }\n  } else if (isInlineTemplate(tNode)) {\n    // Matching directives (i.e. when not matching for projection mode) should not consider the\n    // class bindings that are present on inline templates, as those class bindings only target\n    // the root node of the template, not the template itself.\n    return false;\n  }\n  // Resume the search for classes after the `Classes` marker.\n  i = attrs.indexOf(1 /* AttributeMarker.Classes */, i);\n  if (i > -1) {\n    // We found the classes section. Start searching for the class.\n    let item;\n    while (++i < attrs.length && typeof (item = attrs[i]) === 'string') {\n      if (item.toLowerCase() === cssClassToMatch) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n/**\r\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\r\n *\r\n * @param tNode current TNode\r\n */\nfunction isInlineTemplate(tNode) {\n  return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\r\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\r\n *\r\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\r\n * directive matching mode:\r\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\r\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\r\n * tag name was extracted from * syntax so we would match the same directive twice);\r\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\r\n * (applicable to TNodeType.Container only).\r\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n/**\r\n * A utility function to match an Ivy node static data against a simple CSS selector\r\n *\r\n * @param tNode static data of the node to match\r\n * @param selector The selector to try matching against the node.\r\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\r\n * directive matching.\r\n * @returns true if node matches the selector.\r\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode = 4 /* SelectorFlags.ELEMENT */;\n  const nodeAttrs = tNode.attrs;\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = current | mode & 1 /* SelectorFlags.NOT */;\n      continue;\n    }\n    if (skipToNextSelector) continue;\n    if (mode & 4 /* SelectorFlags.ELEMENT */) {\n      mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else if (mode & 8 /* SelectorFlags.CLASS */) {\n      if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = selector[++i];\n      const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n        }\n        if (mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n  return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n  return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\r\n * Examines the attribute's definition array for a node to find the index of the\r\n * attribute that matches the given `name`.\r\n *\r\n * NOTE: This will not match namespaced attributes.\r\n *\r\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\r\n * The following table summarizes which types of attributes we attempt to match:\r\n *\r\n * ===========================================================================================================\r\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\r\n * Attributes\r\n * ===========================================================================================================\r\n * Inline + Projection     | YES               | YES                 | NO                  | YES\r\n * -----------------------------------------------------------------------------------------------------------\r\n * Inline + Directive      | NO                | NO                  | YES                 | NO\r\n * -----------------------------------------------------------------------------------------------------------\r\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\r\n * -----------------------------------------------------------------------------------------------------------\r\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\r\n * ===========================================================================================================\r\n *\r\n * @param name the name of the attribute to find\r\n * @param attrs the attribute array to examine\r\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\r\n * rather than a manually expanded template node (e.g `<ng-template>`).\r\n * @param isProjectionMode true if we are matching against content projection otherwise we are\r\n * matching against directives.\r\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n  if (attrs === null) return -1;\n  let i = 0;\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n        bindingsMode = true;\n      } else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1];\n    }\n  }\n  return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n  let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n/**\r\n * Checks whether a selector is inside a CssSelectorList\r\n * @param selector Selector to be checked.\r\n * @param list List in which to look for the selector.\r\n */\nfunction isSelectorInSelectorList(selector, list) {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n  let result = selector[0];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n        const attrValue = selector[++i];\n        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & 8 /* SelectorFlags.CLASS */) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n/**\r\n * Generates string representation of CSS selector in parsed form.\r\n *\r\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\r\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\r\n * example, while bootstrapping a component), a string version of the selector is required to query\r\n * for the host element on the page. This function takes the parsed form of a selector and returns\r\n * its string representation.\r\n *\r\n * @param selectorList selector in parsed form\r\n * @returns string representation of a given selector\r\n */\nfunction stringifyCSSSelectorList(selectorList) {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\r\n * Extracts attributes and classes information from a given CSS selector.\r\n *\r\n * This function is used while creating a component dynamically. In this case, the host element\r\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\r\n * selector.\r\n *\r\n * @param selector CSS selector in parsed form (in a form of array)\r\n * @returns object with `attrs` and `classes` fields that contain extracted information\r\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n  const attrs = [];\n  const classes = [];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i]);\n        }\n      } else if (mode === 8 /* SelectorFlags.CLASS */) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  if (classes.length) {\n    attrs.push(1 /* AttributeMarker.Classes */, ...classes);\n  }\n  return attrs;\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {\n  __brand__: 'NO_CHANGE'\n} : {};\nfunction createTextNode(renderer, value) {\n  return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n  renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n  return renderer.createComment(escapeCommentText(value));\n}\n/**\r\n * Creates a native element from a tag name, using a renderer.\r\n * @param renderer A renderer to use\r\n * @param name the tag name\r\n * @param namespace Optional namespace for element.\r\n * @returns the element created\r\n */\nfunction createElementNode(renderer, name, namespace) {\n  return renderer.createElement(name, namespace);\n}\n/**\r\n * Inserts a native node before another native node for a given parent.\r\n * This is a utility function that can be used when native nodes were determined.\r\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n/**\r\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\r\n * parent from the native tree as not all platforms / browsers support the equivalent of\r\n * node.remove().\r\n *\r\n * @param renderer A renderer to be used\r\n * @param rNode The native node that should be removed\r\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\r\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n  renderer.removeChild(null, rNode, isHostElement);\n}\n/**\r\n * Clears the contents of a given RElement.\r\n *\r\n * @param rElement the native RElement to be cleared\r\n */\nfunction clearElementContents(rElement) {\n  rElement.textContent = '';\n}\n/**\r\n * Write `cssText` to `RElement`.\r\n *\r\n * This function does direct write without any reconciliation. Used for writing initial values, so\r\n * that static styling values do not pull in the style parser.\r\n *\r\n * @param renderer Renderer to use\r\n * @param element The element which needs to be updated.\r\n * @param newValue The new class list to write.\r\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  renderer.setAttribute(element, 'style', newValue);\n}\n/**\r\n * Write `className` to `RElement`.\r\n *\r\n * This function does direct write without any reconciliation. Used for writing initial values, so\r\n * that static styling values do not pull in the style parser.\r\n *\r\n * @param renderer Renderer to use\r\n * @param element The element which needs to be updated.\r\n * @param newValue The new class list to write.\r\n */\nfunction writeDirectClass(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n  const {\n    mergedAttrs,\n    classes,\n    styles\n  } = tNode;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n\n/**\r\n * Creates a TView instance\r\n *\r\n * @param type Type of `TView`.\r\n * @param declTNode Declaration location of this `TView`.\r\n * @param templateFn Template function\r\n * @param decls The number of nodes, local refs, and pipes in this template\r\n * @param directives Registry of directives for this view\r\n * @param pipes Registry of pipes for this view\r\n * @param viewQuery View queries for this view\r\n * @param schemas Schemas for this view\r\n * @param consts Constants for this view\r\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false,\n    ssrId\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  const blueprint = [];\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n  return blueprint;\n}\n/**\r\n * Gets TView from a template function or creates a new TView\r\n * if it doesn't already exist.\r\n *\r\n * @param def ComponentDef\r\n * @returns TView\r\n */\nfunction getOrCreateComponentTView(def) {\n  const tView = def.tView;\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);\n  }\n  return tView;\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {\n  const lView = tView.blueprint.slice();\n  lView[HOST] = host;\n  lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 128 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */ | 64 /* LViewFlags.Dirty */ | 1024 /* LViewFlags.RefreshView */;\n  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */) {\n    lView[FLAGS] |= 2048 /* LViewFlags.HasEmbeddedViewInjector */;\n  }\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[ENVIRONMENT] = environment || parentLView && parentLView[ENVIRONMENT];\n  ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\n  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[HYDRATION] = hydrationInfo;\n  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n  ngDevMode && assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n  return lView;\n}\nfunction createComponentLView(lView, hostTNode, def) {\n  const native = getNativeByTNode(hostTNode, lView);\n  const tView = getOrCreateComponentTView(def);\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n  const componentView = addToEndOfViewTree(lView, createLView(lView, tView, null, getInitialLViewFlagsFromDef(def), native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  return lView[hostTNode.index] = componentView;\n}\n/**\r\n * Gets the initial set of LView flags based on the component definition that the LView represents.\r\n * @param def Component definition from which to determine the flags.\r\n */\nfunction getInitialLViewFlagsFromDef(def) {\n  let flags = 16 /* LViewFlags.CheckAlways */;\n  if (def.signals) {\n    flags = 4096 /* LViewFlags.SignalView */;\n  } else if (def.onPush) {\n    flags = 64 /* LViewFlags.Dirty */;\n  }\n  return flags;\n}\n/**\r\n * When elements are created dynamically after a view blueprint is created (e.g. through\r\n * i18nApply()), we need to adjust the blueprint for future template passes.\r\n *\r\n * @param tView `TView` associated with `LView`\r\n * @param lView The `LView` containing the blueprint to adjust\r\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\r\n * @param initialValue Initial value to store in blueprint\r\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n/**\r\n * Adds LView or LContainer to the end of the current view tree.\r\n *\r\n * This structure will be used to traverse through nested views to remove listeners\r\n * and call onDestroy callbacks.\r\n *\r\n * @param lView The view where LView or LContainer should be added\r\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\r\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\r\n * @returns The state passed in\r\n */\nfunction addToEndOfViewTree(lView, lViewOrLContainer) {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n\n/**\r\n * Advances to an element for later binding instructions.\r\n *\r\n * Used in conjunction with instructions like {@link property} to act on elements with specified\r\n * indices, for example those created with {@link element} or {@link elementStart}.\r\n *\r\n * ```ts\r\n * (rf: RenderFlags, ctx: any) => {\r\n *   if (rf & 1) {\r\n *     text(0, 'Hello');\r\n *     text(1, 'Goodbye')\r\n *     element(2, 'div');\r\n *   }\r\n *   if (rf & 2) {\r\n *     advance(2); // Advance twice to the <div>.\r\n *     property('title', 'test');\r\n *   }\r\n *  }\r\n * ```\r\n * @param delta Number of elements to advance forwards by.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵadvance(delta = 1) {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n      }\n    }\n  }\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n\n/** Flags describing an input for a directive. */\nvar InputFlags;\n(function (InputFlags) {\n  InputFlags[InputFlags[\"None\"] = 0] = \"None\";\n  InputFlags[InputFlags[\"SignalBased\"] = 1] = \"SignalBased\";\n  InputFlags[InputFlags[\"HasDecoratorInputTransform\"] = 2] = \"HasDecoratorInputTransform\";\n})(InputFlags || (InputFlags = {}));\nfunction writeToDirectiveInput(def, instance, publicName, value) {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    if (ngDevMode) {\n      if (!def.inputs.hasOwnProperty(publicName)) {\n        throw new Error(`ASSERTION ERROR: Directive ${def.type.name} does not have an input with a public name of \"${publicName}\"`);\n      }\n      // Usually we resolve the directive instance using `LView[someIndex]` before writing to an\n      // input, however if the read happens to early, the `LView[someIndex]` might actually be a\n      // `NodeInjectorFactory`. Check for this specific case here since it can break in subtle ways.\n      if (instance instanceof NodeInjectorFactory) {\n        throw new Error(`ASSERTION ERROR: Cannot write input to factory for type ${def.type.name}. Directive has not been created yet.`);\n      }\n    }\n    const [privateName, flags, transform] = def.inputs[publicName];\n    // If we know we are dealing with a signal input, we cache its reference\n    // in a tree-shakable way. The input signal node can then be used for\n    // value transform execution or actual value updates without introducing\n    // additional megamorphic accesses for accessing the instance field.\n    let inputSignalNode = null;\n    if ((flags & InputFlags.SignalBased) !== 0) {\n      const field = instance[privateName];\n      inputSignalNode = field[SIGNAL];\n    }\n    // If there is a signal node and a transform, run it before potentially\n    // delegating to features like `NgOnChanges`.\n    if (inputSignalNode !== null && inputSignalNode.transformFn !== undefined) {\n      value = inputSignalNode.transformFn(value);\n    } else if (transform !== null) {\n      // If there is a decorator input transform, run it.\n      value = transform.call(instance, value);\n    }\n    if (def.setInput !== null) {\n      def.setInput(instance, inputSignalNode, value, publicName, privateName);\n    } else {\n      applyValueToInputField(instance, inputSignalNode, privateName, value);\n    }\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n    const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n    profiler(preHookType, context, templateFn);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n    const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n    profiler(postHookType, context, templateFn);\n  }\n}\n/**\r\n * Creates directive instances.\r\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n  instantiateAllDirectives(tView, lView, tNode);\n  if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n/**\r\n * Takes a list of local names and indices and pushes the resolved local variable values\r\n * to LView in the same order as they are loaded in the template with load().\r\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1];\n      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\r\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\r\n *\r\n * @param renderer the renderer used to locate the element.\r\n * @param elementOrSelector Render element or CSS selector to locate the element.\r\n * @param encapsulation View Encapsulation defined for component that requests host element.\r\n * @param injector Root view injector instance.\r\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation, injector) {\n  // Note: we use default value for the `PRESERVE_HOST_CONTENT` here even though it's a\n  // tree-shakable one (providedIn:'root'). This code path can be triggered during dynamic\n  // component creation (after calling ViewContainerRef.createComponent) when an injector\n  // instance can be provided. The injector instance might be disconnected from the main DI\n  // tree, thus the `PRESERVE_HOST_CONTENT` would not be able to instantiate. In this case, the\n  // default value will be used.\n  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);\n  // When using native Shadow DOM, do not clear host element to allow native slot\n  // projection.\n  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation.ShadowDom;\n  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);\n  applyRootElementTransform(rootElement);\n  return rootElement;\n}\n/**\r\n * Applies any root element transformations that are needed. If hydration is enabled,\r\n * this will process corrupted text nodes.\r\n *\r\n * @param rootElement the app root HTML Element\r\n */\nfunction applyRootElementTransform(rootElement) {\n  _applyRootElementTransformImpl(rootElement);\n}\n/**\r\n * Reference to a function that applies transformations to the root HTML element\r\n * of an app. When hydration is enabled, this processes any corrupt text nodes\r\n * so they are properly hydratable on the client.\r\n *\r\n * @param rootElement the app root HTML Element\r\n */\nlet _applyRootElementTransformImpl = () => null;\n/**\r\n * Processes text node markers before hydration begins. This replaces any special comment\r\n * nodes that were added prior to serialization are swapped out to restore proper text\r\n * nodes before hydration.\r\n *\r\n * @param rootElement the app root HTML Element\r\n */\nfunction applyRootElementTransformImpl(rootElement) {\n  if (hasSkipHydrationAttrOnRElement(rootElement)) {\n    // Handle a situation when the `ngSkipHydration` attribute is applied\n    // to the root node of an application. In this case, we should clear\n    // the contents and render everything from scratch.\n    clearElementContents(rootElement);\n  } else {\n    processTextNodeMarkersBeforeHydration(rootElement);\n  }\n}\n/**\r\n * Sets the implementation for the `applyRootElementTransform` function.\r\n */\nfunction enableApplyRootElementTransformImpl() {\n  _applyRootElementTransformImpl = applyRootElementTransformImpl;\n}\n/**\r\n * Mapping between attributes names that don't correspond to their element property names.\r\n *\r\n * Performance note: this function is written as a series of if checks (instead of, say, a property\r\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\r\n * mapping property names. Do NOT change without benchmarking.\r\n *\r\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\r\n * type-checking machinery of ngtsc.\r\n */\nfunction mapPropName(name) {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\nfunction setPropertyAndInputs(tNode, lView, propName, value, renderer, sanitizer) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  const tView = lView[TVIEW];\n  const hasSetInput = setAllInputsForProperty(tNode, tView, lView, propName, value);\n  if (hasSetInput) {\n    isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);\n    ngDevMode && setNgReflectProperties(lView, tView, tNode, propName, value);\n    return; // Stop propcessing if we've matched at least one input.\n  }\n  setDomProperty(tNode, lView, propName, value, renderer, sanitizer);\n}\n/**\r\n * Sets a DOM property on a specific node.\r\n * @param tNode TNode on which to set the value.\r\n * @param lView View in which the node is located.\r\n * @param propName Name of the property.\r\n * @param value Value to set on the property.\r\n * @param renderer Renderer to use when setting the property.\r\n * @param sanitizer Function used to sanitize the value before setting it.\r\n */\nfunction setDomProperty(tNode, lView, propName, value, renderer, sanitizer) {\n  if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    const element = getNativeByTNode(tNode, lView);\n    propName = mapPropName(propName);\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, lView[TVIEW].schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n    }\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n    renderer.setProperty(element, propName, value);\n  } else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(lView[TVIEW].schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n    childComponentLView[FLAGS] |= 64 /* LViewFlags.Dirty */;\n  }\n}\nfunction setNgReflectProperty(lView, tNode, attrName, value) {\n  const environment = lView[ENVIRONMENT];\n  if (!environment.ngReflect) {\n    return;\n  }\n  const element = getNativeByTNode(tNode, lView);\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    if (value == null) {\n      renderer.removeAttribute(element, attrName);\n    } else {\n      renderer.setAttribute(element, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(`bindings=${JSON.stringify({\n      [attrName]: debugValue\n    }, null, 2)}`);\n    renderer.setValue(element, textContent);\n  }\n}\nfunction setNgReflectProperties(lView, tView, tNode, publicName, value) {\n  const environment = lView[ENVIRONMENT];\n  if (!environment.ngReflect || !(tNode.type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */))) {\n    return;\n  }\n  const inputConfig = tNode.inputs?.[publicName];\n  const hostInputConfig = tNode.hostDirectiveInputs?.[publicName];\n  if (hostInputConfig) {\n    for (let i = 0; i < hostInputConfig.length; i += 2) {\n      const index = hostInputConfig[i];\n      const publicName = hostInputConfig[i + 1];\n      const def = tView.data[index];\n      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\n    }\n  }\n  // Note: we set the private name of the input as the reflected property, not the public one.\n  if (inputConfig) {\n    for (const index of inputConfig) {\n      const def = tView.data[index];\n      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\n    }\n  }\n}\n/**\r\n * Instantiate all the directives that were previously resolved on the current node.\r\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    createComponentLView(lView, tNode, tView.data[start + tNode.componentOffset]);\n  }\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i];\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n    }\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex];\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n/**\r\n * Invoke the host bindings in creation mode.\r\n *\r\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\r\n * @param directive Instance of directive.\r\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n  if (def.hostBindings !== null) {\n    def.hostBindings(1 /* RenderFlags.Create */, directive);\n  }\n}\n/**\r\n * Matches the current node against all available selectors.\r\n * If a component is matched (at most one), it is returned in first position in the array.\r\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  const registry = tView.directiveRegistry;\n  let matches = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i];\n      if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */false)) {\n        matches ??= [];\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);\n            if (matches.length && isComponentDef(matches[0])) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n            }\n          }\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView);\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n  if (value == null) {\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n    renderer.setAttribute(element, name, strValue, namespace);\n  }\n}\n/**\r\n * Sets initial input properties on directive instances from attribute data\r\n *\r\n * @param lView Current LView that is being processed.\r\n * @param directiveIndex Index of the directive in directives array\r\n * @param instance Instance of the directive on which to set the initial inputs\r\n * @param def The directive def that contains the list of inputs\r\n * @param tNode The static data for this node\r\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n  const initialInputs = initialInputData[directiveIndex];\n  if (initialInputs !== null) {\n    for (let i = 0; i < initialInputs.length; i += 2) {\n      const lookupName = initialInputs[i];\n      const value = initialInputs[i + 1];\n      writeToDirectiveInput(def, instance, lookupName, value);\n      if (ngDevMode) {\n        setNgReflectProperty(lView, tNode, def.inputs[lookupName][0], value);\n      }\n    }\n  }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\r\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\r\n *\r\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\r\n * - a bound property name;\r\n * - a static parts of interpolated strings;\r\n *\r\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\r\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\r\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\r\n * following format:\r\n * - `propertyName` for bound properties;\r\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\r\n * interpolated properties.\r\n *\r\n * @param tData `TData` where meta-data will be saved;\r\n * @param tNode `TNode` that is a target of the binding;\r\n * @param propertyName bound property name;\r\n * @param bindingIndex binding index in `LView`\r\n * @param interpolationParts static interpolation parts (for property interpolations)\r\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (!tNode.inputs?.[propertyName] && !tNode.hostDirectiveInputs?.[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n/**\r\n * There are cases where the sub component's renderer needs to be included\r\n * instead of the current renderer (see the componentSyntheticHost* instructions).\r\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index]);\n  }\n  return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleUncaughtError(lView, error) {\n  const injector = lView[INJECTOR];\n  if (!injector) {\n    return;\n  }\n  const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);\n  errorHandler?.(error);\n}\n/**\r\n * Set all directive inputs with the specific public name on the node.\r\n *\r\n * @param tNode TNode on which the input is being set.\r\n * @param tView Current TView\r\n * @param lView `LView` which contains the directives.\r\n * @param publicName Public name of the input being set.\r\n * @param value Value to set.\r\n */\nfunction setAllInputsForProperty(tNode, tView, lView, publicName, value) {\n  const inputs = tNode.inputs?.[publicName];\n  const hostDirectiveInputs = tNode.hostDirectiveInputs?.[publicName];\n  let hasMatch = false;\n  if (hostDirectiveInputs) {\n    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\n      const index = hostDirectiveInputs[i];\n      ngDevMode && assertIndexInRange(lView, index);\n      const publicName = hostDirectiveInputs[i + 1];\n      const def = tView.data[index];\n      writeToDirectiveInput(def, lView[index], publicName, value);\n      hasMatch = true;\n    }\n  }\n  if (inputs) {\n    for (const index of inputs) {\n      ngDevMode && assertIndexInRange(lView, index);\n      const instance = lView[index];\n      const def = tView.data[index];\n      writeToDirectiveInput(def, instance, publicName, value);\n      hasMatch = true;\n    }\n  }\n  return hasMatch;\n}\n/**\r\n * Sets an input value only on a specific directive and its host directives.\r\n * @param tNode TNode on which the input is being set.\r\n * @param tView Current TView\r\n * @param lView `LView` which contains the directives.\r\n * @param target Directive on which to set the input.\r\n * @param publicName Public name of the input being set.\r\n * @param value Value to set.\r\n */\nfunction setDirectiveInput(tNode, tView, lView, target, publicName, value) {\n  let hostIndex = null;\n  let hostDirectivesStart = null;\n  let hostDirectivesEnd = null;\n  let hasSet = false;\n  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\n    throw new Error(`Node does not have a directive with type ${target.type.name}`);\n  }\n  const data = tNode.directiveToIndex.get(target.type);\n  if (typeof data === 'number') {\n    hostIndex = data;\n  } else {\n    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\n  }\n  if (hostDirectivesStart !== null && hostDirectivesEnd !== null && tNode.hostDirectiveInputs?.hasOwnProperty(publicName)) {\n    const hostDirectiveInputs = tNode.hostDirectiveInputs[publicName];\n    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\n      const index = hostDirectiveInputs[i];\n      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\n        ngDevMode && assertIndexInRange(lView, index);\n        const def = tView.data[index];\n        const hostDirectivePublicName = hostDirectiveInputs[i + 1];\n        writeToDirectiveInput(def, lView[index], hostDirectivePublicName, value);\n        hasSet = true;\n      } else if (index > hostDirectivesEnd) {\n        // Directives here are in ascending order so we can stop looking once we're past the range.\n        break;\n      }\n    }\n  }\n  if (hostIndex !== null && target.inputs.hasOwnProperty(publicName)) {\n    ngDevMode && assertIndexInRange(lView, hostIndex);\n    writeToDirectiveInput(target, lView[hostIndex], publicName, value);\n    hasSet = true;\n  }\n  return hasSet;\n}\nfunction renderComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  const hostRNode = componentView[HOST];\n  // Populate an LView with hydration info retrieved from the DOM via TransferState.\n  if (hostRNode !== null && componentView[HYDRATION] === null) {\n    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);\n  }\n  profiler(18 /* ProfilerEvent.ComponentStart */);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n  profiler(19 /* ProfilerEvent.ComponentEnd */, componentView[CONTEXT]);\n}\n/**\r\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\r\n *\r\n * Typically, blueprints and their view instances should always be in sync, so the loop here\r\n * will be skipped. However, consider this case of two components side-by-side:\r\n *\r\n * App template:\r\n * ```html\r\n * <comp></comp>\r\n * <comp></comp>\r\n * ```\r\n *\r\n * The following will happen:\r\n * 1. App template begins processing.\r\n * 2. First <comp> is matched as a component and its LView is created.\r\n * 3. Second <comp> is matched as a component and its LView is created.\r\n * 4. App template completes processing, so it's time to check child templates.\r\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\r\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\r\n * <comp> template, but its LView was created before this update, so it is out of sync.\r\n *\r\n * Note that embedded views inside ngFor loops will never be out of sync because these views\r\n * are processed as soon as they are created.\r\n *\r\n * @param tView The `TView` that contains the blueprint for syncing\r\n * @param lView The view to sync\r\n */\nfunction syncViewWithBlueprint(tView, lView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n/**\r\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\r\n * - creating view query functions (if any);\r\n * - executing a template function in the creation mode;\r\n * - updating static queries (if any);\r\n * - creating child components defined in a given view.\r\n */\nfunction renderView(tView, lView, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  ngDevMode && assertNotReactive(renderView.name);\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n    }\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n    }\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n    // Mark all queries active in this view as dirty. This is necessary for signal-based queries to\n    // have a clear marking point where we can read query results atomically (for a given view).\n    lView[QUERIES]?.finishViewCreation(tView);\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n    }\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n    leaveView();\n  }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\nfunction createAndRenderEmbeddedLView(declarationLView, templateTNode, context, options) {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    const embeddedTView = templateTNode.tView;\n    ngDevMode && assertDefined(embeddedTView, 'TView must be defined for a template node.');\n    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);\n    // Embedded views follow the change detection strategy of the view they're declared in.\n    const isSignalView = declarationLView[FLAGS] & 4096 /* LViewFlags.SignalView */;\n    const viewFlags = isSignalView ? 4096 /* LViewFlags.SignalView */ : 16 /* LViewFlags.CheckAlways */;\n    const embeddedLView = createLView(declarationLView, embeddedTView, context, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);\n    const declarationLContainer = declarationLView[templateTNode.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n    const declarationViewLQueries = declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n    // execute creation mode of a view\n    renderView(embeddedTView, embeddedLView, context);\n    return embeddedLView;\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n/**\r\n * Returns whether an elements that belong to a view should be\r\n * inserted into the DOM. For client-only cases, DOM elements are\r\n * always inserted. For hydration cases, we check whether serialized\r\n * info is available for a view and the view is not in a \"skip hydration\"\r\n * block (in which case view contents was re-created, thus needing insertion).\r\n */\nfunction shouldAddViewToDom(tNode, dehydratedView) {\n  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);\n}\nconst USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT = false;\nconst UseExhaustiveCheckNoChanges = new InjectionToken(ngDevMode ? 'exhaustive checkNoChanges' : '');\nlet _icuContainerIterate;\n/**\r\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\r\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\r\n * Ensures that `IcuContainerVisitor`'s implementation is present.\r\n *\r\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\r\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\r\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n\n/**\r\n * Flags for renderer-specific style modifiers.\r\n * @publicApi\r\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\r\n   * Marks a style as important.\r\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n  /**\r\n   * Marks a style as using dash case naming (this-is-dash-case).\r\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\r\n * Checks whether a TNode is considered detached, i.e. not present in the\r\n * translated i18n template. We should not attempt hydration for such nodes\r\n * and instead, use a regular \"creation mode\".\r\n */\nfunction isDetachedByI18n(tNode) {\n  return (tNode.flags & 32 /* TNodeFlags.isDetached */) === 32 /* TNodeFlags.isDetached */;\n}\n\n/**\r\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\r\n * being passed as an argument.\r\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST];\n    }\n    const rNode = unwrapRNode(lNodeToHandle);\n    if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n      renderer.destroyNode(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n/**\r\n * Removes all DOM elements associated with a view.\r\n *\r\n * Because some root nodes of the view may be containers, we sometimes need\r\n * to propagate deeply into the nested containers to remove all elements in the\r\n * views beneath it.\r\n *\r\n * @param tView The `TView' of the `LView` from which elements should be added or removed\r\n * @param lView The view from which elements should be added or removed\r\n */\nfunction removeViewFromDOM(tView, lView) {\n  detachViewFromDOM(tView, lView);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n/**\r\n * Adds all DOM elements associated with a view.\r\n *\r\n * Because some root nodes of the view may be containers, we sometimes need\r\n * to propagate deeply into the nested containers to add all elements in the\r\n * views beneath it.\r\n *\r\n * @param tView The `TView' of the `LView` from which elements should be added or removed\r\n * @param parentTNode The `TNode` where the `LView` should be attached to.\r\n * @param renderer Current renderer to use for DOM manipulations.\r\n * @param lView The view from which elements should be added or removed\r\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\r\n * @param beforeNode The node before which elements should be added, if insert mode\r\n */\nfunction addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\r\n * Detach a `LView` from the DOM by detaching its nodes.\r\n *\r\n * @param tView The `TView' of the `LView` to be detached\r\n * @param lView the `LView` to be detached.\r\n */\nfunction detachViewFromDOM(tView, lView) {\n  // When we remove a view from the DOM, we need to rerun afterRender hooks\n  // We don't necessarily needs to run change detection. DOM removal only requires\n  // change detection if animations are enabled (this notification is handled by animations).\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(9 /* NotificationSource.ViewDetachedFromDOM */);\n  applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\r\n * Traverses down and up the tree of views and containers to remove listeners and\r\n * call onDestroy callbacks.\r\n *\r\n * Notes:\r\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\r\n *  - Must process containers instead of their views to avoid splicing\r\n *  when views are destroyed and re-added.\r\n *  - Using a while loop because it's faster than recursion\r\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\r\n *\r\n *  @param rootView The view to destroy\r\n */\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n  while (lViewOrLContainer) {\n    let next = null;\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer[NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\nfunction detachMovedView(declarationContainer, lView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const declarationViewIndex = movedViews.indexOf(lView);\n  movedViews.splice(declarationViewIndex, 1);\n}\n/**\r\n * A standalone function which destroys an LView,\r\n * conducting clean up (e.g. removing listeners, calling onDestroys).\r\n *\r\n * @param tView The `TView' of the `LView` to be destroyed\r\n * @param lView The view to be destroyed.\r\n */\nfunction destroyLView(tView, lView) {\n  if (isDestroyed(lView)) {\n    return;\n  }\n  const renderer = lView[RENDERER];\n  if (renderer.destroyNode) {\n    applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n  }\n  destroyViewTree(lView);\n}\n/**\r\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\r\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\r\n * can be propagated to @Output listeners.\r\n *\r\n * @param tView `TView` for the `LView` to clean up.\r\n * @param lView The LView to clean up\r\n */\nfunction cleanUpView(tView, lView) {\n  if (isDestroyed(lView)) {\n    return;\n  }\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= 256 /* LViewFlags.Destroyed */;\n    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n      lView[RENDERER].destroy();\n    }\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n  ngDevMode && assertNotReactive(processCleanups.name);\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP];\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // Destroy anything whose teardown is a function call (e.g. QueryList, ModelSignal).\n          lCleanup[targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[-targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    lView[CLEANUP] = null;\n  }\n  const destroyHooks = lView[ON_DESTROY_HOOKS];\n  if (destroyHooks !== null) {\n    // Reset the ON_DESTROY_HOOKS array before iterating over it to prevent hooks that unregister\n    // themselves from mutating the array during iteration.\n    lView[ON_DESTROY_HOOKS] = null;\n    for (let i = 0; i < destroyHooks.length; i++) {\n      const destroyHooksFn = destroyHooks[i];\n      ngDevMode && assertFunction(destroyHooksFn, 'Expecting destroy hook to be a function.');\n      destroyHooksFn();\n    }\n  }\n  // Destroy effects registered to the view. Many of these will have been processed above.\n  const effects = lView[EFFECTS];\n  if (effects !== null) {\n    lView[EFFECTS] = null;\n    for (const effect of effects) {\n      effect.destroy();\n    }\n  }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n  ngDevMode && assertNotReactive(executeOnDestroys.name);\n  let destroyHooks;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i]];\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1];\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j]];\n            const hook = toCall[j + 1];\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n            }\n          }\n        } else {\n          profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n/**\r\n * Returns a native element if a node can be inserted into the given parent.\r\n *\r\n * There are two reasons why we may not be able to insert a element immediately.\r\n * - Projection: When creating a child content element of a component, we have to skip the\r\n *   insertion because the content of a component will be projected.\r\n *   `<component><content>delayed due to projection</content></component>`\r\n * - Parent container is disconnected: This can happen when we are inserting a view into\r\n *   parent container, which itself is disconnected. For example the parent container is part\r\n *   of a View which has not be inserted or is made for projection but has not been inserted\r\n *   into destination.\r\n *\r\n * @param tView: Current `TView`.\r\n * @param tNode: `TNode` for which we wish to retrieve render parent.\r\n * @param lView: Current `LView`.\r\n */\nfunction getParentRElement(tView, tNode, lView) {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\r\n * Get closest `RElement` or `null` if it can't be found.\r\n *\r\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\r\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\r\n * If `TNode` is `null` then return host `RElement`:\r\n *   - return `null` if projection\r\n *   - return `null` if parent container is disconnected (we have no parent.)\r\n *\r\n * @param tView: Current `TView`.\r\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\r\n *     needed).\r\n * @param lView: Current `LView`.\r\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\r\n */\nfunction getClosestRElement(tView, tNode, lView) {\n  let parentTNode = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent. Also skip let declarations since they don't have a\n  // corresponding DOM node at all.\n  while (parentTNode !== null && parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */ | 128 /* TNodeType.LetDeclaration */)) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n    if (isComponentHost(parentTNode)) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {\n        encapsulation\n      } = tView.data[parentTNode.directiveStart + parentTNode.componentOffset];\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n    return getNativeByTNode(parentTNode, lView);\n  }\n}\n/**\r\n * Find a node in front of which `currentTNode` should be inserted.\r\n *\r\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\r\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\r\n *\r\n * @param parentTNode parent `TNode`\r\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\r\n * @param lView current `LView`\r\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\r\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\r\n * account)\r\n *\r\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\r\n * does not take `TNode.insertBeforeIndex` into account.\r\n *\r\n * @param parentTNode parent `TNode`\r\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\r\n * @param lView current `LView`\r\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n  if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n/**\r\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\r\n *\r\n * This function will only be set if i18n code runs.\r\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\r\n * Tree shakable boundary for `processI18nInsertBefore` function.\r\n *\r\n * This function will only be set if i18n code runs.\r\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\r\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\r\n *\r\n * @param tView The `TView' to be appended\r\n * @param lView The current LView\r\n * @param childRNode The native child (or children) that should be appended\r\n * @param childTNode The TNode of the child element\r\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode = childTNode.parent || lView[T_HOST];\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\r\n * Returns the first native node for a given LView, starting from the provided TNode.\r\n *\r\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\r\n */\nfunction getFirstNativeNode(lView, tNode) {\n  if (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */);\n    const tNodeType = tNode.type;\n    if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & 4 /* TNodeType.Container */) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & 128 /* TNodeType.LetDeclaration */) {\n      return getFirstNativeNode(lView, tNode.next);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      let nextRNode = icuContainerIterate(tNode, lView);\n      let rNode = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n  return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const slotIdx = tNode.projection;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection[slotIdx];\n  }\n  return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex];\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n  return lContainer[NATIVE];\n}\n/**\r\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\r\n * nodes on the LView or projection boundary.\r\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === 128 /* TNodeType.LetDeclaration */) {\n      tNode = tNode.next;\n      continue;\n    }\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === 0 /* WalkTNodeTreeAction.Create */) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= 2 /* TNodeFlags.isProjected */;\n      }\n    }\n    if (!isDetachedByI18n(tNode)) {\n      if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 32 /* TNodeType.Icu */) {\n        const nextRNode = icuContainerIterate(tNode, lView);\n        let rNode;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 16 /* TNodeType.Projection */) {\n        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\r\n * `applyProjection` performs operation on the projection.\r\n *\r\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\r\n * complication is that those nodes themselves could be re-projected from their parent component.\r\n *\r\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\r\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\r\n * @param tProjectionNode node to project\r\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST];\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\r\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\r\n * detach, destroy)\r\n *\r\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\r\n * complication is that those nodes themselves could be re-projected from their parent component.\r\n *\r\n * @param renderer Render to use\r\n * @param action action to perform (insert, detach, destroy)\r\n * @param lView The LView which needs to be inserted, detached, destroyed.\r\n * @param tProjectionNode node to project\r\n * @param parentRElement parent DOM element for insertion/removal.\r\n * @param beforeNode Before which node the insertions should happen.\r\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST];\n  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT];\n    // If a parent <ng-content> is located within a skip hydration block,\n    // annotate an actual node that is being projected with the same flag too.\n    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {\n      nodeToProject.flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n    }\n    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n/**\r\n * `applyContainer` performs an operation on the container and its views as specified by\r\n * `action` (insert, detach, destroy)\r\n *\r\n * Inserting a Container is complicated by the fact that the container may have Views which\r\n * themselves have containers or projections.\r\n *\r\n * @param renderer Renderer to use\r\n * @param action action to perform (insert, detach, destroy)\r\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\r\n * @param parentRElement parent DOM element for insertion/removal.\r\n * @param beforeNode Before which node the insertions should happen.\r\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i];\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n/**\r\n * Writes class/style to element.\r\n *\r\n * @param renderer Renderer to use.\r\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\r\n * @param rNode The Node to write to.\r\n * @param prop Property to write to. This would be the class/style name.\r\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\r\n *        otherwise).\r\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      renderer.removeClass(rNode, prop);\n    } else {\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n    if (value == null /** || value === undefined */) {\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags |= RendererStyleFlags2.Important;\n      }\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n  while (tNode !== null) {\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === 128 /* TNodeType.LetDeclaration */) {\n      tNode = isProjection ? tNode.projectionNext : tNode.next;\n      continue;\n    }\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      collectNativeNodesInLContainer(lNode, result);\n    }\n    const tNodeType = tNode.type;\n    if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      const nextRNode = icuContainerIterate(tNode, lView);\n      let rNode;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & 16 /* TNodeType.Projection */) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n  return result;\n}\n/**\r\n * Collects all root nodes in all views in a given LContainer.\r\n */\nfunction collectNativeNodesInLContainer(lContainer, result) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lViewInAContainer = lContainer[i];\n    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n    if (lViewFirstChildTNode !== null) {\n      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n    }\n  }\n  // When an LContainer is created, the anchor (comment) node is:\n  // - (1) either reused in case of an ElementContainer (<ng-container>)\n  // - (2) or a new comment node is created\n  // In the first case, the anchor comment node would be added to the final\n  // list by the code in the `collectNativeNodes` function\n  // (see the `result.push(unwrapRNode(lNode))` line), but the second\n  // case requires extra handling: the anchor node needs to be added to the\n  // final list manually. See additional information in the `createAnchorNode`\n  // function in the `view_container_ref.ts`.\n  //\n  // In the first case, the same reference would be stored in the `NATIVE`\n  // and `HOST` slots in an LContainer. Otherwise, this is the second case and\n  // we should add an element to the final list.\n  if (lContainer[NATIVE] !== lContainer[HOST]) {\n    result.push(lContainer[NATIVE]);\n  }\n}\nfunction addAfterRenderSequencesForView(lView) {\n  if (lView[AFTER_RENDER_SEQUENCES_TO_ADD] !== null) {\n    for (const sequence of lView[AFTER_RENDER_SEQUENCES_TO_ADD]) {\n      sequence.impl.addSequence(sequence);\n    }\n    lView[AFTER_RENDER_SEQUENCES_TO_ADD].length = 0;\n  }\n}\nlet freeConsumers = [];\n/**\r\n * Create a new template consumer pointing at the specified LView.\r\n * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that\r\n * case, the LView will be updated.\r\n */\nfunction getOrBorrowReactiveLViewConsumer(lView) {\n  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);\n}\nfunction borrowReactiveLViewConsumer(lView) {\n  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\nfunction maybeReturnReactiveLViewConsumer(consumer) {\n  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {\n    // The consumer got committed.\n    return;\n  }\n  consumer.lView = null;\n  freeConsumers.push(consumer);\n}\nconst REACTIVE_LVIEW_CONSUMER_NODE = {\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  kind: 'template',\n  consumerMarkedDirty: node => {\n    markAncestorsForTraversal(node.lView);\n  },\n  consumerOnSignalRead() {\n    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\n  }\n};\n/**\r\n * Creates a temporary consumer for use with `LView`s that should not have consumers.\r\n * If the LView already has a consumer, returns the existing one instead.\r\n *\r\n * This is necessary because some APIs may cause change detection directly on an LView\r\n * that we do not want to have a consumer (Embedded views today). As a result, there\r\n * would be no active consumer from running change detection on its host component\r\n * and any signals in the LView template would be untracked. Instead, we create\r\n * this temporary consumer that marks the first parent that _should_ have a consumer\r\n * for refresh. Once change detection runs as part of that refresh, we throw away\r\n * this consumer because its signals will then be tracked by the parent's consumer.\r\n */\nfunction getOrCreateTemporaryConsumer(lView) {\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\nconst TEMPORARY_CONSUMER_NODE = {\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  kind: 'template',\n  consumerMarkedDirty: node => {\n    let parent = getLViewParent(node.lView);\n    while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {\n      parent = getLViewParent(parent);\n    }\n    if (!parent) {\n      // If we can't find an appropriate parent that should have a consumer, we\n      // don't have a way of appropriately refreshing this LView as part of application synchronization.\n      return;\n    }\n    markViewForRefresh(parent);\n  },\n  consumerOnSignalRead() {\n    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\n  }\n};\n/**\r\n * Indicates if the view should get its own reactive consumer node.\r\n *\r\n * In the current design, all embedded views share a consumer with the component view. This allows\r\n * us to refresh at the component level rather than at a per-view level. In addition, root views get\r\n * their own reactive node because root component will have a host view that executes the\r\n * component's host bindings. This needs to be tracked in a consumer as well.\r\n *\r\n * To get a more granular change detection than per-component, all we would just need to update the\r\n * condition here so that a given view gets a reactive consumer which can become dirty independently\r\n * from its parent component. For example embedded views for signal components could be created with\r\n * a new type \"SignalEmbeddedView\" and the condition here wouldn't even need updating in order to\r\n * get granular per-view change detection for signal components.\r\n */\nfunction viewShouldHaveReactiveConsumer(tView) {\n  return tView.type !== 2 /* TViewType.Embedded */;\n}\nfunction isReactiveLViewConsumer(node) {\n  return node.kind === 'template';\n}\nfunction runEffectsInView(view) {\n  if (view[EFFECTS] === null) {\n    return;\n  }\n  // Since effects can make other effects dirty, we flush them in a loop until there are no more to\n  // flush.\n  let tryFlushEffects = true;\n  while (tryFlushEffects) {\n    let foundDirtyEffect = false;\n    for (const effect of view[EFFECTS]) {\n      if (!effect.dirty) {\n        continue;\n      }\n      foundDirtyEffect = true;\n      // `runEffectsInView` is called during change detection, and therefore runs\n      // in the Angular zone if it's available.\n      if (effect.zone === null || Zone.current === effect.zone) {\n        effect.run();\n      } else {\n        effect.zone.run(() => effect.run());\n      }\n    }\n    // Check if we need to continue flushing. If we didn't find any dirty effects, then there's\n    // no need to loop back. Otherwise, check the view to see if it was marked for traversal\n    // again. If so, there's a chance that one of the effects we ran caused another effect to\n    // become dirty.\n    tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */);\n  }\n}\n\n/**\r\n * The maximum number of times the change detection traversal will rerun before throwing an error.\r\n */\nconst MAXIMUM_REFRESH_RERUNS$1 = 100;\nfunction detectChangesInternal(lView, mode = 0 /* ChangeDetectionMode.Global */) {\n  const environment = lView[ENVIRONMENT];\n  const rendererFactory = environment.rendererFactory;\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n  if (!checkNoChangesMode) {\n    rendererFactory.begin?.();\n  }\n  try {\n    detectChangesInViewWhileDirty(lView, mode);\n  } finally {\n    if (!checkNoChangesMode) {\n      rendererFactory.end?.();\n    }\n  }\n}\nfunction detectChangesInViewWhileDirty(lView, mode) {\n  const lastIsRefreshingViewsValue = isRefreshingViews();\n  try {\n    setIsRefreshingViews(true);\n    detectChangesInView(lView, mode);\n    // We don't need or want to do any looping when in exhaustive checkNoChanges because we\n    // already traverse all the views and nothing should change so we shouldn't have to do\n    // another pass to pick up new changes.\n    if (ngDevMode && isExhaustiveCheckNoChanges()) {\n      return;\n    }\n    let retries = 0;\n    // If after running change detection, this view still needs to be refreshed or there are\n    // descendants views that need to be refreshed due to re-dirtying during the change detection\n    // run, detect changes on the view again. We run change detection in `Targeted` mode to only\n    // refresh views with the `RefreshView` flag.\n    while (requiresRefreshOrTraversal(lView)) {\n      if (retries === MAXIMUM_REFRESH_RERUNS$1) {\n        throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode && 'Infinite change detection while trying to refresh views. ' + 'There may be components which each cause the other to require a refresh, ' + 'causing an infinite loop.');\n      }\n      retries++;\n      // Even if this view is detached, we still detect changes in targeted mode because this was\n      // the root of the change detection run.\n      detectChangesInView(lView, 1 /* ChangeDetectionMode.Targeted */);\n    }\n  } finally {\n    // restore state to what it was before entering this change detection loop\n    setIsRefreshingViews(lastIsRefreshingViewsValue);\n  }\n}\nfunction checkNoChangesInternal(lView, exhaustive) {\n  setIsInCheckNoChangesMode(exhaustive ? CheckNoChangesMode.Exhaustive : CheckNoChangesMode.OnlyDirtyViews);\n  try {\n    detectChangesInternal(lView);\n  } finally {\n    setIsInCheckNoChangesMode(CheckNoChangesMode.Off);\n  }\n}\n/**\r\n * Processes a view in update mode. This includes a number of steps in a specific order:\r\n * - executing a template function in update mode;\r\n * - executing hooks;\r\n * - refreshing queries;\r\n * - setting host bindings;\r\n * - refreshing child (embedded and component) views.\r\n */\nfunction refreshView(tView, lView, templateFn, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  if (isDestroyed(lView)) return;\n  const flags = lView[FLAGS];\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();\n  // Start component reactive context\n  // - We might already be in a reactive context if this is an embedded view of the host.\n  // - We might be descending into a view that needs a consumer.\n  enterView(lView);\n  let returnConsumerToPool = true;\n  let prevConsumer = null;\n  let currentConsumer = null;\n  if (!isInCheckNoChangesPass) {\n    if (viewShouldHaveReactiveConsumer(tView)) {\n      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);\n      prevConsumer = consumerBeforeComputation(currentConsumer);\n    } else if (getActiveConsumer() === null) {\n      // If the current view should not have a reactive consumer but we don't have an active consumer,\n      // we still need to create a temporary consumer to track any signal reads in this template.\n      // This is a rare case that can happen with\n      // - `viewContainerRef.createEmbeddedView(...).detectChanges()`.\n      // - `viewContainerRef.createEmbeddedView(...)` without any other dirty marking on the parent,\n      //   flagging the parent component for traversal but not triggering a full `refreshView`.\n      // This temporary consumer marks the first parent that _should_ have a consumer for refresh.\n      // Once that refresh happens, the signals will be tracked in the parent consumer and we can destroy\n      // the temporary one.\n      returnConsumerToPool = false;\n      currentConsumer = getOrCreateTemporaryConsumer(lView);\n      prevConsumer = consumerBeforeComputation(currentConsumer);\n    } else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {\n      consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\n      lView[REACTIVE_TEMPLATE_CONSUMER] = null;\n    }\n  }\n  try {\n    resetPreOrderHookFlags(lView);\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n    }\n    const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n        }\n        incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n      }\n    }\n    // We do not need to mark transplanted views for refresh when doing exhaustive checks\n    // because all views will be reached anyways during the traversal.\n    if (!isInExhaustiveCheckNoChangesPass) {\n      // First mark transplanted views that are declared in this lView as needing a refresh at their\n      // insertion points. This is needed to avoid the situation where the template is defined in this\n      // `LView` but its declaration appears after the insertion component.\n      markTransplantedViewsForRefresh(lView);\n    }\n    runEffectsInView(lView);\n    detectChangesInEmbeddedViews(lView, 0 /* ChangeDetectionMode.Global */);\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n        }\n        incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n      }\n    }\n    processHostBindingOpCodes(tView, lView);\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      detectChangesInChildComponents(lView, components, 0 /* ChangeDetectionMode.Global */);\n    }\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n    }\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n        }\n        incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n      }\n    }\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n    // Schedule any effects that are waiting on the update pass of this view.\n    if (lView[EFFECTS_TO_SCHEDULE]) {\n      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {\n        notifyEffect();\n      }\n      // Once they've been run, we can drop the array.\n      lView[EFFECTS_TO_SCHEDULE] = null;\n    }\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      addAfterRenderSequencesForView(lView);\n      lView[FLAGS] &= ~(64 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n    }\n  } catch (e) {\n    if (!isInCheckNoChangesPass) {\n      // If refreshing a view causes an error, we need to remark the ancestors as needing traversal\n      // because the error might have caused a situation where views below the current location are\n      // dirty but will be unreachable because the \"has dirty children\" flag in the ancestors has been\n      // cleared during change detection and we failed to run to completion.\n      markAncestorsForTraversal(lView);\n    }\n    throw e;\n  } finally {\n    if (currentConsumer !== null) {\n      consumerAfterComputation(currentConsumer, prevConsumer);\n      if (returnConsumerToPool) {\n        maybeReturnReactiveLViewConsumer(currentConsumer);\n      }\n    }\n    leaveView();\n  }\n}\n/**\r\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\r\n * them by executing an associated template function.\r\n */\nfunction detectChangesInEmbeddedViews(lView, mode) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      detectChangesInViewIfAttached(embeddedLView, mode);\n    }\n  }\n}\n/**\r\n * Mark transplanted views as needing to be refreshed at their attachment points.\r\n *\r\n * @param lView The `LView` that may have transplanted views.\r\n */\nfunction markTransplantedViewsForRefresh(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    if (!(lContainer[FLAGS] & 2 /* LContainerFlags.HasTransplantedViews */)) continue;\n    const movedViews = lContainer[MOVED_VIEWS];\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i];\n      markViewForRefresh(movedLView);\n    }\n  }\n}\n/**\r\n * Detects changes in a component by entering the component view and processing its bindings,\r\n * queries, etc. if it is CheckAlways, OnPush and Dirty, etc.\r\n *\r\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\r\n */\nfunction detectChangesInComponent(hostLView, componentHostIdx, mode) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  profiler(18 /* ProfilerEvent.ComponentStart */);\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  detectChangesInViewIfAttached(componentView, mode);\n  profiler(19 /* ProfilerEvent.ComponentEnd */, componentView[CONTEXT]);\n}\n/**\r\n * Visits a view as part of change detection traversal.\r\n *\r\n * If the view is detached, no additional traversal happens.\r\n */\nfunction detectChangesInViewIfAttached(lView, mode) {\n  if (!viewAttachedToChangeDetector(lView)) {\n    return;\n  }\n  detectChangesInView(lView, mode);\n}\n/**\r\n * Visits a view as part of change detection traversal.\r\n *\r\n * The view is refreshed if:\r\n * - If the view is CheckAlways or Dirty and ChangeDetectionMode is `Global`\r\n * - If the view has the `RefreshView` flag\r\n *\r\n * The view is not refreshed, but descendants are traversed in `ChangeDetectionMode.Targeted` if the\r\n * view HasChildViewsToRefresh flag is set.\r\n */\nfunction detectChangesInView(lView, mode) {\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const tView = lView[TVIEW];\n  const flags = lView[FLAGS];\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];\n  // Refresh CheckAlways views in Global mode.\n  let shouldRefreshView = !!(mode === 0 /* ChangeDetectionMode.Global */ && flags & 16 /* LViewFlags.CheckAlways */);\n  // Refresh Dirty views in Global mode, as long as we're not in checkNoChanges.\n  // CheckNoChanges never worked with `OnPush` components because the `Dirty` flag was\n  // cleared before checkNoChanges ran. Because there is now a loop for to check for\n  // backwards views, it gives an opportunity for `OnPush` components to be marked `Dirty`\n  // before the CheckNoChanges pass. We don't want existing errors that are hidden by the\n  // current CheckNoChanges bug to surface when making unrelated changes.\n  shouldRefreshView ||= !!(flags & 64 /* LViewFlags.Dirty */ && mode === 0 /* ChangeDetectionMode.Global */ && !isInCheckNoChangesPass);\n  // Always refresh views marked for refresh, regardless of mode.\n  shouldRefreshView ||= !!(flags & 1024 /* LViewFlags.RefreshView */);\n  // Refresh views when they have a dirty reactive consumer, regardless of mode.\n  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));\n  shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());\n  // Mark the Flags and `ReactiveNode` as not dirty before refreshing the component, so that they\n  // can be re-dirtied during the refresh process.\n  if (consumer) {\n    consumer.dirty = false;\n  }\n  lView[FLAGS] &= ~(8192 /* LViewFlags.HasChildViewsToRefresh */ | 1024 /* LViewFlags.RefreshView */);\n  if (shouldRefreshView) {\n    refreshView(tView, lView, tView.template, lView[CONTEXT]);\n  } else if (flags & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n    // Set active consumer to null to avoid inheriting an improper reactive context\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      if (!isInCheckNoChangesPass) {\n        runEffectsInView(lView);\n      }\n      detectChangesInEmbeddedViews(lView, 1 /* ChangeDetectionMode.Targeted */);\n      const components = tView.components;\n      if (components !== null) {\n        detectChangesInChildComponents(lView, components, 1 /* ChangeDetectionMode.Targeted */);\n      }\n      if (!isInCheckNoChangesPass) {\n        addAfterRenderSequencesForView(lView);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction detectChangesInChildComponents(hostLView, components, mode) {\n  for (let i = 0; i < components.length; i++) {\n    detectChangesInComponent(hostLView, components[i], mode);\n  }\n}\n/**\r\n * Invoke `HostBindingsFunction`s for view.\r\n *\r\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\r\n * `HostBindingsFunction`s associated with the current `LView`.\r\n *\r\n * @param tView Current `TView`.\r\n * @param lView Current `LView`.\r\n */\nfunction processHostBindingOpCodes(tView, lView) {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i];\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i];\n        const hostBindingFn = hostBindingOpCodes[++i];\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        profiler(24 /* ProfilerEvent.HostBindingsUpdateStart */, context);\n        hostBindingFn(2 /* RenderFlags.Update */, context);\n        profiler(25 /* ProfilerEvent.HostBindingsUpdateEnd */, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n\n/**\r\n * Marks current view and all ancestors dirty.\r\n *\r\n * Returns the root view because it is found as a byproduct of marking the view tree\r\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\r\n * change detection. Otherwise, such methods would need to traverse up the view tree\r\n * an additional time to get the root view and schedule a tick on it.\r\n *\r\n * @param lView The starting LView to mark dirty\r\n * @returns the root LView\r\n */\nfunction markViewDirty(lView, source) {\n  const dirtyBitsToUse = isRefreshingViews() ?\n  // When we are actively refreshing views, we only use the `Dirty` bit to mark a view\n  64 /* LViewFlags.Dirty */ :\n  // When we are not actively refreshing a view tree, it is absolutely\n  // valid to update state and mark views dirty. We use the `RefreshView` flag in this\n  // case to allow synchronously rerunning change detection. This applies today to\n  // afterRender hooks as well as animation listeners which execute after detecting\n  // changes in a view when the render factory flushes.\n  1024 /* LViewFlags.RefreshView */ | 64 /* LViewFlags.Dirty */;\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);\n  while (lView) {\n    lView[FLAGS] |= dirtyBitsToUse;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent;\n  }\n  return null;\n}\n\n/**\r\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\r\n *\r\n * @param hostNative The host element for the LContainer\r\n * @param hostTNode The host TNode for the LContainer\r\n * @param currentView The parent view of the LContainer\r\n * @param native The native comment element\r\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\r\n * @returns LContainer\r\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n  ngDevMode && assertLView(currentView);\n  const lContainer = [hostNative,\n  // host native\n  true,\n  // Boolean `true` in this position signifies that this is an `LContainer`\n  0,\n  // flags\n  currentView,\n  // parent\n  null,\n  // next\n  tNode,\n  // t_host\n  null,\n  // dehydrated views\n  native,\n  // native,\n  null,\n  // view refs\n  null // moved views\n  ];\n  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n  return lContainer;\n}\nfunction getLViewFromLContainer(lContainer, index) {\n  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\n  // avoid reading past the array boundaries\n  if (adjustedIndex < lContainer.length) {\n    const lView = lContainer[adjustedIndex];\n    ngDevMode && assertLView(lView);\n    return lView;\n  }\n  return undefined;\n}\nfunction addLViewToLContainer(lContainer, lView, index, addToDOM = true) {\n  const tView = lView[TVIEW];\n  // Insert into the view tree so the new view can be change-detected\n  insertView(tView, lView, lContainer, index);\n  // Insert elements that belong to this view into the DOM tree\n  if (addToDOM) {\n    const beforeNode = getBeforeNodeForView(index, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = renderer.parentNode(lContainer[NATIVE]);\n    if (parentRNode !== null) {\n      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n  }\n  // When in hydration mode, reset the pointer to the first child in\n  // the dehydrated view. This indicates that the view was hydrated and\n  // further attaching/detaching should work with this view as normal.\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\n    hydrationInfo.firstChild = null;\n  }\n}\nfunction removeLViewFromLContainer(lContainer, index) {\n  const lView = detachView(lContainer, index);\n  if (lView !== undefined) {\n    destroyLView(lView[TVIEW], lView);\n  }\n  return lView;\n}\n/**\r\n * Detaches a view from a container.\r\n *\r\n * This method removes the view from the container's array of active views. It also\r\n * removes the view's elements from the DOM.\r\n *\r\n * @param lContainer The container from which to detach a view\r\n * @param removeIndex The index of the view to detach\r\n * @returns Detached LView instance.\r\n */\nfunction detachView(lContainer, removeIndex) {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~128 /* LViewFlags.Attached */;\n  }\n  return viewToDetach;\n}\n/**\r\n * Inserts a view into a container.\r\n *\r\n * This adds the view to the container's array of active views in the correct\r\n * position. It also adds the view's elements to the DOM if the container isn't a\r\n * root node of another view (in that case, the view's elements will be added when\r\n * the container's parent view is added later).\r\n *\r\n * @param tView The `TView' of the `LView` to insert\r\n * @param lView The view to insert\r\n * @param lContainer The container into which the view should be inserted\r\n * @param index Which index in the container to insert the child view into\r\n */\nfunction insertView(tView, lView, lContainer, index) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n  lView[PARENT] = lContainer;\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n  updateAncestorTraversalFlagsOnAttach(lView);\n  // Sets the attached flag\n  lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n}\n/**\r\n * Track views created from the declaration container (TemplateRef) and inserted into a\r\n * different LContainer or attached directly to ApplicationRef.\r\n */\nfunction trackMovedView(declarationContainer, lView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const parent = lView[PARENT];\n  ngDevMode && assertDefined(parent, 'missing parent');\n  if (isLView(parent)) {\n    declarationContainer[FLAGS] |= 2 /* LContainerFlags.HasTransplantedViews */;\n  } else {\n    const insertedComponentLView = parent[PARENT][DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n      // At this point the declaration-component is not same as insertion-component; this means that\n      // this is a transplanted view. Mark the declared lView as having transplanted views so that\n      // those views can participate in CD.\n      declarationContainer[FLAGS] |= 2 /* LContainerFlags.HasTransplantedViews */;\n    }\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\nclass ViewRef {\n  _lView;\n  _cdRefInjectingView;\n  _appRef = null;\n  _attachedToViewContainer = false;\n  exhaustive;\n  get rootNodes() {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n  constructor(\n  /**\r\n   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\r\n   *\r\n   * When ViewRef is created for a dynamic component, this also represents the `LView` for the\r\n   * component.\r\n   *\r\n   * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\r\n   * view.\r\n   *\r\n   * @internal\r\n   */\n  _lView,\n  /**\r\n   * This represents the `LView` associated with the point where `ChangeDetectorRef` was\r\n   * requested.\r\n   *\r\n   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\r\n   */\n  _cdRefInjectingView) {\n    this._lView = _lView;\n    this._cdRefInjectingView = _cdRefInjectingView;\n  }\n  get context() {\n    return this._lView[CONTEXT];\n  }\n  /**\r\n   * @deprecated Replacing the full context object is not supported. Modify the context\r\n   *   directly, or consider using a `Proxy` if you need to replace the full object.\r\n   * // TODO(devversion): Remove this.\r\n   */\n  set context(value) {\n    if (ngDevMode) {\n      // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\n      // up for assignments on the setter. We want to let users know about the deprecated usage.\n      console.warn('Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.');\n    }\n    this._lView[CONTEXT] = value;\n  }\n  get destroyed() {\n    return isDestroyed(this._lView);\n  }\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS];\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n  onDestroy(callback) {\n    storeLViewOnDestroy(this._lView, callback);\n  }\n  /**\r\n   * Marks a view and all of its ancestors dirty.\r\n   *\r\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\r\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n   *\r\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n   *\r\n   * @usageNotes\r\n   * ### Example\r\n   *\r\n   * ```ts\r\n   * @Component({\r\n   *   selector: 'app-root',\r\n   *   template: `Number of ticks: {{numberOfTicks}}`\r\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n   * })\r\n   * class AppComponent {\r\n   *   numberOfTicks = 0;\r\n   *\r\n   *   constructor(private ref: ChangeDetectorRef) {\r\n   *     setInterval(() => {\r\n   *       this.numberOfTicks++;\r\n   *       // the following is required, otherwise the view will not be updated\r\n   *       this.ref.markForCheck();\r\n   *     }, 1000);\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\n  markForCheck() {\n    markViewDirty(this._cdRefInjectingView || this._lView, 4 /* NotificationSource.MarkForCheck */);\n  }\n  /**\r\n   * Detaches the view from the change detection tree.\r\n   *\r\n   * Detached views will not be checked during change detection runs until they are\r\n   * re-attached, even if they are dirty. `detach` can be used in combination with\r\n   * {@link ChangeDetectorRef#detectChanges} to implement local change\r\n   * detection checks.\r\n   *\r\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n   *\r\n   * @usageNotes\r\n   * ### Example\r\n   *\r\n   * The following example defines a component with a large list of readonly data.\r\n   * Imagine the data changes constantly, many times per second. For performance reasons,\r\n   * we want to check and update the list every five seconds. We can do that by detaching\r\n   * the component's change detector and doing a local check every five seconds.\r\n   *\r\n   * ```ts\r\n   * class DataProvider {\r\n   *   // in a real application the returned data will be different every time\r\n   *   get data() {\r\n   *     return [1,2,3,4,5];\r\n   *   }\r\n   * }\r\n   *\r\n   * @Component({\r\n   *   selector: 'giant-list',\r\n   *   template: `\r\n   *     @for(d of dataProvider.data; track $index) {\r\n   *        <li>Data {{d}}</li>\r\n   *     }\r\n   *   `,\r\n   * })\r\n   * class GiantList {\r\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n   *     ref.detach();\r\n   *     setInterval(() => {\r\n   *       this.ref.detectChanges();\r\n   *     }, 5000);\r\n   *   }\r\n   * }\r\n   *\r\n   * @Component({\r\n   *   selector: 'app',\r\n   *   providers: [DataProvider],\r\n   *   template: `\r\n   *     <giant-list><giant-list>\r\n   *   `,\r\n   * })\r\n   * class App {\r\n   * }\r\n   * ```\r\n   */\n  detach() {\n    this._lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n  }\n  /**\r\n   * Re-attaches a view to the change detection tree.\r\n   *\r\n   * This can be used to re-attach views that were previously detached from the tree\r\n   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\r\n   *\r\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n   *\r\n   * @usageNotes\r\n   * ### Example\r\n   *\r\n   * The following example creates a component displaying `live` data. The component will detach\r\n   * its change detector from the main change detector tree when the component's live property\r\n   * is set to false.\r\n   *\r\n   * ```ts\r\n   * class DataProvider {\r\n   *   data = 1;\r\n   *\r\n   *   constructor() {\r\n   *     setInterval(() => {\r\n   *       this.data = this.data * 2;\r\n   *     }, 500);\r\n   *   }\r\n   * }\r\n   *\r\n   * @Component({\r\n   *   selector: 'live-data',\r\n   *   inputs: ['live'],\r\n   *   template: 'Data: {{dataProvider.data}}'\r\n   * })\r\n   * class LiveData {\r\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n   *\r\n   *   set live(value) {\r\n   *     if (value) {\r\n   *       this.ref.reattach();\r\n   *     } else {\r\n   *       this.ref.detach();\r\n   *     }\r\n   *   }\r\n   * }\r\n   *\r\n   * @Component({\r\n   *   selector: 'app-root',\r\n   *   providers: [DataProvider],\r\n   *   template: `\r\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n   *     <live-data [live]=\"live\"><live-data>\r\n   *   `,\r\n   * })\r\n   * class AppComponent {\r\n   *   live = true;\r\n   * }\r\n   * ```\r\n   */\n  reattach() {\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n    this._lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n  }\n  /**\r\n   * Checks the view and its children.\r\n   *\r\n   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\r\n   * local change detection checks.\r\n   *\r\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n   *\r\n   * @usageNotes\r\n   * ### Example\r\n   *\r\n   * The following example defines a component with a large list of readonly data.\r\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n   * we want to check and update the list every five seconds.\r\n   *\r\n   * We can do that by detaching the component's change detector and doing a local change detection\r\n   * check every five seconds.\r\n   *\r\n   * See {@link ChangeDetectorRef#detach} for more information.\r\n   */\n  detectChanges() {\n    // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\n    // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\n    // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\n    // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\n    // in the state of the LViewFlags during template execution.\n    this._lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n    detectChangesInternal(this._lView);\n  }\n  /**\r\n   * Checks the change detector and its children, and throws if any changes are detected.\r\n   *\r\n   * This is used in development mode to verify that running change detection doesn't\r\n   * introduce other changes.\r\n   */\n  checkNoChanges() {\n    if (!ngDevMode) return;\n    try {\n      this.exhaustive ??= this._lView[INJECTOR].get(UseExhaustiveCheckNoChanges, USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT);\n    } catch {\n      this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n    }\n    checkNoChangesInternal(this._lView, this.exhaustive);\n  }\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n  detachFromAppRef() {\n    this._appRef = null;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      detachMovedView(declarationContainer, this._lView);\n    }\n    detachViewFromDOM(this._lView[TVIEW], this._lView);\n  }\n  attachToAppRef(appRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      trackMovedView(declarationContainer, this._lView);\n    }\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n  }\n}\n/**\r\n * Reports whether the given view is considered dirty according to the different marking mechanisms.\r\n */\nfunction isViewDirty(view) {\n  return requiresRefreshOrTraversal(view._lView) || !!(view._lView[FLAGS] & 64 /* LViewFlags.Dirty */);\n}\nfunction markForRefresh(view) {\n  // This function is only used by elements where _cdRefInjectingView is the same as _lView\n  markViewForRefresh(view._lView);\n}\n\n/**\r\n * Represents an embedded template that can be used to instantiate embedded views.\r\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\r\n * method `createEmbeddedView()`.\r\n *\r\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\r\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\r\n * is injected into the constructor of the directive,\r\n * using the `TemplateRef` token.\r\n *\r\n * You can also use a `Query` to find a `TemplateRef` associated with\r\n * a component or a directive.\r\n *\r\n * @see {@link ViewContainerRef}\r\n *\r\n * @publicApi\r\n */\nclass TemplateRef {\n  _declarationLView;\n  _declarationTContainer;\n  /**\r\n   * The anchor element in the parent view for this embedded view.\r\n   *\r\n   * The data-binding and [injection contexts](guide/di/dependency-injection-context) of embedded\r\n   * views created from this `TemplateRef` inherit from the contexts of this location.\r\n   *\r\n   * Typically new embedded views are attached to the view container of this location, but in\r\n   * advanced use-cases, the view can be attached to a different container while keeping the\r\n   * data-binding and injection context from the original location.\r\n   *\r\n   */\n  elementRef;\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = injectTemplateRef;\n  /** @internal */\n  constructor(_declarationLView, _declarationTContainer, elementRef) {\n    this._declarationLView = _declarationLView;\n    this._declarationTContainer = _declarationTContainer;\n    this.elementRef = elementRef;\n  }\n  /**\r\n   * Returns an `ssrId` associated with a TView, which was used to\r\n   * create this instance of the `TemplateRef`.\r\n   *\r\n   * @internal\r\n   */\n  get ssrId() {\n    return this._declarationTContainer.tView?.ssrId || null;\n  }\n  /**\r\n   * Instantiates an unattached embedded view based on this template.\r\n   * @param context The data-binding context of the embedded view, as declared\r\n   * in the `<ng-template>` usage.\r\n   * @param injector Injector to be used within the embedded view.\r\n   * @returns The new embedded view object.\r\n   */\n  createEmbeddedView(context, injector) {\n    return this.createEmbeddedViewImpl(context, injector);\n  }\n  /**\r\n   * Implementation of the `createEmbeddedView` function.\r\n   *\r\n   * This implementation is internal and allows framework code\r\n   * to invoke it with extra parameters (e.g. for hydration) without\r\n   * affecting public API.\r\n   *\r\n   * @internal\r\n   */\n  createEmbeddedViewImpl(context, injector, dehydratedView) {\n    const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context, {\n      embeddedViewInjector: injector,\n      dehydratedView\n    });\n    return new ViewRef(embeddedLView);\n  }\n}\n/**\r\n * Creates a TemplateRef given a node.\r\n *\r\n * @returns The TemplateRef instance to use\r\n */\nfunction injectTemplateRef() {\n  return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\r\n * Creates a TemplateRef and stores it on the injector.\r\n *\r\n * @param hostTNode The node on which a TemplateRef is requested\r\n * @param hostLView The `LView` to which the node belongs\r\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\r\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n  if (hostTNode.type & 4 /* TNodeType.Container */) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\nconst AT_THIS_LOCATION = '<-- AT THIS LOCATION';\n/**\r\n * Retrieves a user friendly string for a given TNodeType for use in\r\n * friendly error messages\r\n *\r\n * @param tNodeType\r\n * @returns\r\n */\nfunction getFriendlyStringFromTNodeType(tNodeType) {\n  switch (tNodeType) {\n    case 4 /* TNodeType.Container */:\n      return 'view container';\n    case 2 /* TNodeType.Element */:\n      return 'element';\n    case 8 /* TNodeType.ElementContainer */:\n      return 'ng-container';\n    case 32 /* TNodeType.Icu */:\n      return 'icu';\n    case 64 /* TNodeType.Placeholder */:\n      return 'i18n';\n    case 16 /* TNodeType.Projection */:\n      return 'projection';\n    case 1 /* TNodeType.Text */:\n      return 'text';\n    case 128 /* TNodeType.LetDeclaration */:\n      return '@let';\n    default:\n      // This should not happen as we cover all possible TNode types above.\n      return '<unknown>';\n  }\n}\n/**\r\n * Validates that provided nodes match during the hydration process.\r\n */\nfunction validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {\n  if (!node || node.nodeType !== nodeType || node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() !== tagName?.toLowerCase()) {\n    const expectedNode = shortRNodeDescription(nodeType, tagName, null);\n    let header = `During hydration Angular expected ${expectedNode} but `;\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef?.type?.name;\n    const expectedDom = describeExpectedDom(lView, tNode, isViewContainerAnchor);\n    const expected = `Angular expected this DOM:\\n\\n${expectedDom}\\n\\n`;\n    let actual = '';\n    const componentHostElement = unwrapRNode(lView[HOST]);\n    if (!node) {\n      // No node found during hydration.\n      header += `the node was not found.\\n\\n`;\n      // Since the node is missing, we use the closest node to attach the error to\n      markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom);\n    } else {\n      const actualNode = shortRNodeDescription(node.nodeType, node.tagName ?? null, node.textContent ?? null);\n      header += `found ${actualNode}.\\n\\n`;\n      const actualDom = describeDomFromNode(node);\n      actual = `Actual DOM is:\\n\\n${actualDom}\\n\\n`;\n      // DevTools only report hydration issues on the component level, so we attach extra debug\n      // info to a component host element to make it available to DevTools.\n      markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom, actualDom);\n    }\n    const footer = getHydrationErrorFooter(componentClassName);\n    const message = header + expected + actual + getHydrationAttributeNote() + footer;\n    throw new RuntimeError(-500 /* RuntimeErrorCode.HYDRATION_NODE_MISMATCH */, message);\n  }\n}\n/**\r\n * Validates that a given node has sibling nodes\r\n */\nfunction validateSiblingNodeExists(node) {\n  validateNodeExists(node);\n  if (!node.nextSibling) {\n    const header = 'During hydration Angular expected more sibling nodes to be present.\\n\\n';\n    const actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\n    const footer = getHydrationErrorFooter();\n    const message = header + actual + footer;\n    markRNodeAsHavingHydrationMismatch(node, '', actual);\n    throw new RuntimeError(-501 /* RuntimeErrorCode.HYDRATION_MISSING_SIBLINGS */, message);\n  }\n}\n/**\r\n * Validates that a node exists or throws\r\n */\nfunction validateNodeExists(node, lView = null, tNode = null) {\n  if (!node) {\n    const header = 'During hydration, Angular expected an element to be present at this location.\\n\\n';\n    let expected = '';\n    let footer = '';\n    if (lView !== null && tNode !== null) {\n      expected = describeExpectedDom(lView, tNode, false);\n      footer = getHydrationErrorFooter();\n      // Since the node is missing, we use the closest node to attach the error to\n      markRNodeAsHavingHydrationMismatch(unwrapRNode(lView[HOST]), expected, '');\n    }\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, `${header}${expected}\\n\\n${footer}`);\n  }\n}\n/**\r\n * Builds the hydration error message when a node is not found\r\n *\r\n * @param lView the LView where the node exists\r\n * @param tNode the TNode\r\n */\nfunction nodeNotFoundError(lView, tNode) {\n  const header = 'During serialization, Angular was unable to find an element in the DOM:\\n\\n';\n  const expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\n  const footer = getHydrationErrorFooter();\n  throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\n}\n/**\r\n * Builds a hydration error message when a node is not found at a path location\r\n *\r\n * @param host the Host Node\r\n * @param path the path to the node\r\n */\nfunction nodeNotFoundAtPathError(host, path) {\n  const header = `During hydration Angular was unable to locate a node ` + `using the \"${path}\" path, starting from the ${describeRNode(host)} node.\\n\\n`;\n  const footer = getHydrationErrorFooter();\n  markRNodeAsHavingHydrationMismatch(host);\n  throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + footer);\n}\n/**\r\n * Builds the hydration error message in the case that dom nodes are created outside of\r\n * the Angular context and are being used as projected nodes\r\n *\r\n * @param lView the LView\r\n * @param tNode the TNode\r\n * @returns an error\r\n */\nfunction unsupportedProjectionOfDomNodes(rNode) {\n  const header = 'During serialization, Angular detected DOM nodes ' + 'that were created outside of Angular context and provided as projectable nodes ' + '(likely via `ViewContainerRef.createComponent` or `createComponent` APIs). ' + 'Hydration is not supported for such cases, consider refactoring the code to avoid ' + 'this pattern or using `ngSkipHydration` on the host element of the component.\\n\\n';\n  const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n  const message = header + actual + getHydrationAttributeNote();\n  return new RuntimeError(-503 /* RuntimeErrorCode.UNSUPPORTED_PROJECTION_DOM_NODES */, message);\n}\n/**\r\n * Builds the hydration error message in the case that ngSkipHydration was used on a\r\n * node that is not a component host element or host binding\r\n *\r\n * @param rNode the HTML Element\r\n * @returns an error\r\n */\nfunction invalidSkipHydrationHost(rNode) {\n  const header = 'The `ngSkipHydration` flag is applied on a node ' + \"that doesn't act as a component host. Hydration can be \" + 'skipped only on per-component basis.\\n\\n';\n  const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n  const footer = 'Please move the `ngSkipHydration` attribute to the component host element.\\n\\n';\n  const message = header + actual + footer;\n  return new RuntimeError(-504 /* RuntimeErrorCode.INVALID_SKIP_HYDRATION_HOST */, message);\n}\n// Stringification methods\n/**\r\n * Stringifies a given TNode's attributes\r\n *\r\n * @param tNode a provided TNode\r\n * @returns string\r\n */\nfunction stringifyTNodeAttrs(tNode) {\n  const results = [];\n  if (tNode.attrs) {\n    for (let i = 0; i < tNode.attrs.length;) {\n      const attrName = tNode.attrs[i++];\n      // Once we reach the first flag, we know that the list of\n      // attributes is over.\n      if (typeof attrName == 'number') {\n        break;\n      }\n      const attrValue = tNode.attrs[i++];\n      results.push(`${attrName}=\"${shorten(attrValue)}\"`);\n    }\n  }\n  return results.join(' ');\n}\n/**\r\n * The list of internal attributes that should be filtered out while\r\n * producing an error message.\r\n */\nconst internalAttrs = new Set(['ngh', 'ng-version', 'ng-server-context']);\n/**\r\n * Stringifies an HTML Element's attributes\r\n *\r\n * @param rNode an HTML Element\r\n * @returns string\r\n */\nfunction stringifyRNodeAttrs(rNode) {\n  const results = [];\n  for (let i = 0; i < rNode.attributes.length; i++) {\n    const attr = rNode.attributes[i];\n    if (internalAttrs.has(attr.name)) continue;\n    results.push(`${attr.name}=\"${shorten(attr.value)}\"`);\n  }\n  return results.join(' ');\n}\n// Methods for Describing the DOM\n/**\r\n * Converts a tNode to a helpful readable string value for use in error messages\r\n *\r\n * @param tNode a given TNode\r\n * @param innerContent the content of the node\r\n * @returns string\r\n */\nfunction describeTNode(tNode, innerContent = '…') {\n  switch (tNode.type) {\n    case 1 /* TNodeType.Text */:\n      const content = tNode.value ? `(${tNode.value})` : '';\n      return `#text${content}`;\n    case 2 /* TNodeType.Element */:\n      const attrs = stringifyTNodeAttrs(tNode);\n      const tag = tNode.value.toLowerCase();\n      return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n    case 8 /* TNodeType.ElementContainer */:\n      return '<!-- ng-container -->';\n    case 4 /* TNodeType.Container */:\n      return '<!-- container -->';\n    default:\n      const typeAsString = getFriendlyStringFromTNodeType(tNode.type);\n      return `#node(${typeAsString})`;\n  }\n}\n/**\r\n * Converts an RNode to a helpful readable string value for use in error messages\r\n *\r\n * @param rNode a given RNode\r\n * @param innerContent the content of the node\r\n * @returns string\r\n */\nfunction describeRNode(rNode, innerContent = '…') {\n  const node = rNode;\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE:\n      const tag = node.tagName.toLowerCase();\n      const attrs = stringifyRNodeAttrs(node);\n      return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n    case Node.TEXT_NODE:\n      const content = node.textContent ? shorten(node.textContent) : '';\n      return `#text${content ? `(${content})` : ''}`;\n    case Node.COMMENT_NODE:\n      return `<!-- ${shorten(node.textContent ?? '')} -->`;\n    default:\n      return `#node(${node.nodeType})`;\n  }\n}\n/**\r\n * Builds the string containing the expected DOM present given the LView and TNode\r\n * values for a readable error message\r\n *\r\n * @param lView the lView containing the DOM\r\n * @param tNode the tNode\r\n * @param isViewContainerAnchor boolean\r\n * @returns string\r\n */\nfunction describeExpectedDom(lView, tNode, isViewContainerAnchor) {\n  const spacer = '  ';\n  let content = '';\n  if (tNode.prev) {\n    content += spacer + '…\\n';\n    content += spacer + describeTNode(tNode.prev) + '\\n';\n  } else if (tNode.type && tNode.type & 12 /* TNodeType.AnyContainer */) {\n    content += spacer + '…\\n';\n  }\n  if (isViewContainerAnchor) {\n    content += spacer + describeTNode(tNode) + '\\n';\n    content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}\\n`;\n  } else {\n    content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}\\n`;\n  }\n  content += spacer + '…\\n';\n  const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;\n  if (parentRNode) {\n    content = describeRNode(parentRNode, '\\n' + content);\n  }\n  return content;\n}\n/**\r\n * Builds the string containing the DOM present around a given RNode for a\r\n * readable error message\r\n *\r\n * @param node the RNode\r\n * @returns string\r\n */\nfunction describeDomFromNode(node) {\n  const spacer = '  ';\n  let content = '';\n  const currentNode = node;\n  if (currentNode.previousSibling) {\n    content += spacer + '…\\n';\n    content += spacer + describeRNode(currentNode.previousSibling) + '\\n';\n  }\n  content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}\\n`;\n  if (node.nextSibling) {\n    content += spacer + '…\\n';\n  }\n  if (node.parentNode) {\n    content = describeRNode(currentNode.parentNode, '\\n' + content);\n  }\n  return content;\n}\n/**\r\n * Shortens the description of a given RNode by its type for readability\r\n *\r\n * @param nodeType the type of node\r\n * @param tagName the node tag name\r\n * @param textContent the text content in the node\r\n * @returns string\r\n */\nfunction shortRNodeDescription(nodeType, tagName, textContent) {\n  switch (nodeType) {\n    case Node.ELEMENT_NODE:\n      return `<${tagName.toLowerCase()}>`;\n    case Node.TEXT_NODE:\n      const content = textContent ? ` (with the \"${shorten(textContent)}\" content)` : '';\n      return `a text node${content}`;\n    case Node.COMMENT_NODE:\n      return 'a comment node';\n    default:\n      return `#node(nodeType=${nodeType})`;\n  }\n}\n/**\r\n * Builds the footer hydration error message\r\n *\r\n * @param componentClassName the name of the component class\r\n * @returns string\r\n */\nfunction getHydrationErrorFooter(componentClassName) {\n  const componentInfo = componentClassName ? `the \"${componentClassName}\"` : 'corresponding';\n  return `To fix this problem:\\n` + `  * check ${componentInfo} component for hydration-related issues\\n` + `  * check to see if your template has valid HTML structure\\n` + `  * or skip hydration by adding the \\`ngSkipHydration\\` attribute ` + `to its host node in a template\\n\\n`;\n}\n/**\r\n * An attribute related note for hydration errors\r\n */\nfunction getHydrationAttributeNote() {\n  return 'Note: attributes are only displayed to better represent the DOM' + ' but have no effect on hydration mismatches.\\n\\n';\n}\n// Node string utility functions\n/**\r\n * Strips all newlines out of a given string\r\n *\r\n * @param input a string to be cleared of new line characters\r\n * @returns\r\n */\nfunction stripNewlines(input) {\n  return input.replace(/\\s+/gm, '');\n}\n/**\r\n * Reduces a string down to a maximum length of characters with ellipsis for readability\r\n *\r\n * @param input a string input\r\n * @param maxLength a maximum length in characters\r\n * @returns string\r\n */\nfunction shorten(input, maxLength = 50) {\n  if (!input) {\n    return '';\n  }\n  input = stripNewlines(input);\n  return input.length > maxLength ? `${input.substring(0, maxLength - 1)}…` : input;\n}\n\n/**\r\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\r\n *\r\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\r\n * takes `TNode.insertBeforeIndex` into account.\r\n *\r\n * @param parentTNode parent `TNode`\r\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\r\n * @param lView current `LView`\r\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n/**\r\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\r\n *\r\n * See `TNode.insertBeforeIndex`\r\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent = childRNode;\n    let anchorRNode = null;\n    if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index];\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= 32 /* TNodeFlags.isDetached */;\n    }\n  } else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  linkTNodeInTView(tView, tNode, currentTNode, isParent);\n  return tNode;\n}\nfunction linkTNodeInTView(tView, tNode, currentTNode, isParent) {\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  ngDevMode && assertNotSame(attrs, undefined, \"'undefined' is not valid value for 'attrs'\");\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  let flags = 0;\n  if (isInSkipHydrationBlock$1()) {\n    flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n  }\n  // TODO: would it be helpful to use a prototypal inheritance here, similar to the way we do so with signals?\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: null,\n    inputs: null,\n    hostDirectiveInputs: null,\n    outputs: null,\n    hostDirectiveOutputs: null,\n    directiveToIndex: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0,\n    styleBindings: 0\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n\n/**\r\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\r\n * `tNode.insertBeforeIndex`.\r\n *\r\n * Things to keep in mind:\r\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\r\n *    `ɵɵi18nStart` instruction.\r\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\r\n *    `ɵɵelementStart` instruction.\r\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\r\n *    smaller index `TNode` is guaranteed to be created before a larger one)\r\n *\r\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\r\n *\r\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\r\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\r\n * the next node is not yet created and therefore we can't insert in front of it.\r\n *\r\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\r\n *        know if there will be further `TNode`s inserted after.)\r\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\r\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\r\n *        previous to see if we can update its `insertBeforeTNode`)\r\n *\r\n * See `TNode.insertBeforeIndex` for more context.\r\n *\r\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\r\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\r\n * @param newTNode A TNode to add to the `previousTNodes` list.\r\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n  // Start with Rule1\n  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\nfunction isI18nText(tNode) {\n  return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n\n/**\r\n * Retrieve `TIcu` at a given `index`.\r\n *\r\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\r\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\r\n *\r\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\r\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\r\n * expressed (parent ICU may have selected a case which does not contain it.)\r\n *\r\n * @param tView Current `TView`.\r\n * @param index Index where the value should be read from.\r\n */\nfunction getTIcu(tView, index) {\n  const value = tView.data[index];\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode && !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError(\"We expect to get 'null'|'TIcu'|'TIcuContainer', but got: \" + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n/**\r\n * Store `TIcu` at a give `index`.\r\n *\r\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\r\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\r\n *\r\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\r\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\r\n * expressed (parent ICU may have selected a case which does not contain it.)\r\n *\r\n * @param tView Current `TView`.\r\n * @param index Index where the value should be stored at in `Tview.data`\r\n * @param tIcu The TIcu to store.\r\n */\nfunction setTIcu(tView, index, tIcu) {\n  const tNode = tView.data[index];\n  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, \"We expect to get 'null'|'TIcuContainer'\");\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n    tNode.value = tIcu;\n  }\n}\n/**\r\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\r\n *\r\n * See `TNode.insertBeforeIndex`\r\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [null /* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    insertBeforeIndex.push(index);\n  }\n}\n/**\r\n * Create `TNode.type=TNodeType.Placeholder` node.\r\n *\r\n * See `TNodeType.Placeholder` for more information.\r\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n  const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n/**\r\n * Returns current ICU case.\r\n *\r\n * ICU cases are stored as index into the `TIcu.cases`.\r\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\r\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\r\n * for cases which have just been switched. This function removes the negative flag.\r\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n  const currentCase = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n  return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n  return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n  return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n// Returns whether the given value corresponds to a root template message,\n// or a sub-template.\nfunction isRootTemplateMessage(subTemplateIndex) {\n  return subTemplateIndex === -1;\n}\nfunction enterIcu(state, tIcu, lView) {\n  state.index = 0;\n  const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n  if (currentCase !== null) {\n    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n    state.removes = tIcu.remove[currentCase];\n  } else {\n    state.removes = EMPTY_ARRAY;\n  }\n}\nfunction icuContainerIteratorNext(state) {\n  if (state.index < state.removes.length) {\n    const removeOpCode = state.removes[state.index++];\n    ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n    if (removeOpCode > 0) {\n      const rNode = state.lView[removeOpCode];\n      ngDevMode && assertDomNode(rNode);\n      return rNode;\n    } else {\n      state.stack.push(state.index, state.removes);\n      // ICUs are represented by negative indices\n      const tIcuIndex = ~removeOpCode;\n      const tIcu = state.lView[TVIEW].data[tIcuIndex];\n      ngDevMode && assertTIcu(tIcu);\n      enterIcu(state, tIcu, state.lView);\n      return icuContainerIteratorNext(state);\n    }\n  } else {\n    if (state.stack.length === 0) {\n      return null;\n    } else {\n      state.removes = state.stack.pop();\n      state.index = state.stack.pop();\n      return icuContainerIteratorNext(state);\n    }\n  }\n}\nfunction loadIcuContainerVisitor() {\n  const _state = {\n    stack: [],\n    index: -1\n  };\n  /**\r\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\r\n   * to determine which root belong to the ICU.\r\n   *\r\n   * Example of usage.\r\n   * ```ts\r\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\r\n   * let rNode: RNode|null;\r\n   * while(rNode = nextRNode()) {\r\n   *   console.log(rNode);\r\n   * }\r\n   * ```\r\n   *\r\n   * @param tIcuContainerNode Current `TIcuContainerNode`\r\n   * @param lView `LView` where the `RNode`s should be looked up.\r\n   */\n  function icuContainerIteratorStart(tIcuContainerNode, lView) {\n    _state.lView = lView;\n    while (_state.stack.length) _state.stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(_state, tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext.bind(null, _state);\n  }\n  return icuContainerIteratorStart;\n}\nfunction createIcuIterator(tIcu, lView) {\n  const state = {\n    stack: [],\n    index: -1,\n    lView\n  };\n  ngDevMode && assertTIcu(tIcu);\n  enterIcu(state, tIcu, lView);\n  return icuContainerIteratorNext.bind(null, state);\n}\n\n/**\r\n * Regexp that extracts a reference node information from the compressed node location.\r\n * The reference node is represented as either:\r\n *  - a number which points to an LView slot\r\n *  - the `b` char which indicates that the lookup should start from the `document.body`\r\n *  - the `h` char to start lookup from the component host node (`lView[HOST]`)\r\n */\nconst REF_EXTRACTOR_REGEXP = /* @__PURE__ */new RegExp(`^(\\\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);\n/**\r\n * Helper function that takes a reference node location and a set of navigation steps\r\n * (from the reference node) to a target node and outputs a string that represents\r\n * a location.\r\n *\r\n * For example, given: referenceNode = 'b' (body) and path = ['firstChild', 'firstChild',\r\n * 'nextSibling'], the function returns: `bf2n`.\r\n */\nfunction compressNodeLocation(referenceNode, path) {\n  const result = [referenceNode];\n  for (const segment of path) {\n    const lastIdx = result.length - 1;\n    if (lastIdx > 0 && result[lastIdx - 1] === segment) {\n      // An empty string in a count slot represents 1 occurrence of an instruction.\n      const value = result[lastIdx] || 1;\n      result[lastIdx] = value + 1;\n    } else {\n      // Adding a new segment to the path.\n      // Using an empty string in a counter field to avoid encoding `1`s\n      // into the path, since they are implicit (e.g. `f1n1` vs `fn`), so\n      // it's enough to have a single char in this case.\n      result.push(segment, '');\n    }\n  }\n  return result.join('');\n}\n/**\r\n * Helper function that reverts the `compressNodeLocation` and transforms a given\r\n * string into an array where at 0th position there is a reference node info and\r\n * after that it contains information (in pairs) about a navigation step and the\r\n * number of repetitions.\r\n *\r\n * For example, the path like 'bf2n' will be transformed to:\r\n * ['b', 'firstChild', 2, 'nextSibling', 1].\r\n *\r\n * This information is later consumed by the code that navigates the DOM to find\r\n * a given node by its location.\r\n */\nfunction decompressNodeLocation(path) {\n  const matches = path.match(REF_EXTRACTOR_REGEXP);\n  const [_, refNodeId, refNodeName, rest] = matches;\n  // If a reference node is represented by an index, transform it to a number.\n  const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;\n  const steps = [];\n  // Match all segments in a path.\n  for (const [_, step, count] of rest.matchAll(/(f|n)(\\d*)/g)) {\n    const repeat = parseInt(count, 10) || 1;\n    steps.push(step, repeat);\n  }\n  return [ref, ...steps];\n}\n\n/** Whether current TNode is a first node in an <ng-container>. */\nfunction isFirstElementInNgContainer(tNode) {\n  return !tNode.prev && tNode.parent?.type === 8 /* TNodeType.ElementContainer */;\n}\n/** Returns an instruction index (subtracting HEADER_OFFSET). */\nfunction getNoOffsetIndex(tNode) {\n  return tNode.index - HEADER_OFFSET;\n}\n/**\r\n * Check whether a given node exists, but is disconnected from the DOM.\r\n */\nfunction isDisconnectedNode(tNode, lView) {\n  return !(tNode.type & (16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */)) && !!lView[tNode.index] && isDisconnectedRNode(unwrapRNode(lView[tNode.index]));\n}\n/**\r\n * Check whether the given node exists, but is disconnected from the DOM.\r\n *\r\n * Note: we leverage the fact that we have this information available in the DOM emulation\r\n * layer (in Domino) for now. Longer-term solution should not rely on the DOM emulation and\r\n * only use internal data structures and state to compute this information.\r\n */\nfunction isDisconnectedRNode(rNode) {\n  return !!rNode && !rNode.isConnected;\n}\n/**\r\n * Locate a node in an i18n tree that corresponds to a given instruction index.\r\n *\r\n * @param hydrationInfo The hydration annotation data\r\n * @param noOffsetIndex the instruction index\r\n * @returns an RNode that corresponds to the instruction index\r\n */\nfunction locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex) {\n  const i18nNodes = hydrationInfo.i18nNodes;\n  if (i18nNodes) {\n    return i18nNodes.get(noOffsetIndex);\n  }\n  return undefined;\n}\n/**\r\n * Attempt to locate an RNode by a path, if it exists.\r\n *\r\n * @param hydrationInfo The hydration annotation data\r\n * @param lView the current lView\r\n * @param noOffsetIndex the instruction index\r\n * @returns an RNode that corresponds to the instruction index or null if no path exists\r\n */\nfunction tryLocateRNodeByPath(hydrationInfo, lView, noOffsetIndex) {\n  const nodes = hydrationInfo.data[NODES];\n  const path = nodes?.[noOffsetIndex];\n  return path ? locateRNodeByPath(path, lView) : null;\n}\n/**\r\n * Locate a node in DOM tree that corresponds to a given TNode.\r\n *\r\n * @param hydrationInfo The hydration annotation data\r\n * @param tView the current tView\r\n * @param lView the current lView\r\n * @param tNode the current tNode\r\n * @returns an RNode that represents a given tNode\r\n */\nfunction locateNextRNode(hydrationInfo, tView, lView, tNode) {\n  const noOffsetIndex = getNoOffsetIndex(tNode);\n  let native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);\n  if (native === undefined) {\n    const nodes = hydrationInfo.data[NODES];\n    if (nodes?.[noOffsetIndex]) {\n      // We know the exact location of the node.\n      native = locateRNodeByPath(nodes[noOffsetIndex], lView);\n    } else if (tView.firstChild === tNode) {\n      // We create a first node in this view, so we use a reference\n      // to the first child in this DOM segment.\n      native = hydrationInfo.firstChild;\n    } else {\n      // Locate a node based on a previous sibling or a parent node.\n      const previousTNodeParent = tNode.prev === null;\n      const previousTNode = tNode.prev ?? tNode.parent;\n      ngDevMode && assertDefined(previousTNode, 'Unexpected state: current TNode does not have a connection ' + 'to the previous node or a parent node.');\n      if (isFirstElementInNgContainer(tNode)) {\n        const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);\n        native = getSegmentHead(hydrationInfo, noOffsetParentIndex);\n      } else {\n        let previousRElement = getNativeByTNode(previousTNode, lView);\n        if (previousTNodeParent) {\n          native = previousRElement.firstChild;\n        } else {\n          // If the previous node is an element, but it also has container info,\n          // this means that we are processing a node like `<div #vcrTarget>`, which is\n          // represented in the DOM as `<div></div>...<!--container-->`.\n          // In this case, there are nodes *after* this element and we need to skip\n          // all of them to reach an element that we are looking for.\n          const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);\n          const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);\n          if (previousTNode.type === 2 /* TNodeType.Element */ && segmentHead) {\n            const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);\n            // `+1` stands for an anchor comment node after all the views in this container.\n            const nodesToSkip = numRootNodesToSkip + 1;\n            // First node after this segment.\n            native = siblingAfter(nodesToSkip, segmentHead);\n          } else {\n            native = previousRElement.nextSibling;\n          }\n        }\n      }\n    }\n  }\n  return native;\n}\n/**\r\n * Skips over a specified number of nodes and returns the next sibling node after that.\r\n */\nfunction siblingAfter(skip, from) {\n  let currentNode = from;\n  for (let i = 0; i < skip; i++) {\n    ngDevMode && validateSiblingNodeExists(currentNode);\n    currentNode = currentNode.nextSibling;\n  }\n  return currentNode;\n}\n/**\r\n * Helper function to produce a string representation of the navigation steps\r\n * (in terms of `nextSibling` and `firstChild` navigations). Used in error\r\n * messages in dev mode.\r\n */\nfunction stringifyNavigationInstructions(instructions) {\n  const container = [];\n  for (let i = 0; i < instructions.length; i += 2) {\n    const step = instructions[i];\n    const repeat = instructions[i + 1];\n    for (let r = 0; r < repeat; r++) {\n      container.push(step === NODE_NAVIGATION_STEP_FIRST_CHILD ? 'firstChild' : 'nextSibling');\n    }\n  }\n  return container.join('.');\n}\n/**\r\n * Helper function that navigates from a starting point node (the `from` node)\r\n * using provided set of navigation instructions (within `path` argument).\r\n */\nfunction navigateToNode(from, instructions) {\n  let node = from;\n  for (let i = 0; i < instructions.length; i += 2) {\n    const step = instructions[i];\n    const repeat = instructions[i + 1];\n    for (let r = 0; r < repeat; r++) {\n      if (ngDevMode && !node) {\n        throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n      }\n      switch (step) {\n        case NODE_NAVIGATION_STEP_FIRST_CHILD:\n          node = node.firstChild;\n          break;\n        case NODE_NAVIGATION_STEP_NEXT_SIBLING:\n          node = node.nextSibling;\n          break;\n      }\n    }\n  }\n  if (ngDevMode && !node) {\n    throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n  }\n  return node;\n}\n/**\r\n * Locates an RNode given a set of navigation instructions (which also contains\r\n * a starting point node info).\r\n */\nfunction locateRNodeByPath(path, lView) {\n  const [referenceNode, ...navigationInstructions] = decompressNodeLocation(path);\n  let ref;\n  if (referenceNode === REFERENCE_NODE_HOST) {\n    ref = lView[DECLARATION_COMPONENT_VIEW][HOST];\n  } else if (referenceNode === REFERENCE_NODE_BODY) {\n    ref = ɵɵresolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);\n  } else {\n    const parentElementId = Number(referenceNode);\n    ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);\n  }\n  return navigateToNode(ref, navigationInstructions);\n}\n/**\r\n * Generate a list of DOM navigation operations to get from node `start` to node `finish`.\r\n *\r\n * Note: assumes that node `start` occurs before node `finish` in an in-order traversal of the DOM\r\n * tree. That is, we should be able to get from `start` to `finish` purely by using `.firstChild`\r\n * and `.nextSibling` operations.\r\n */\nfunction navigateBetween(start, finish) {\n  if (start === finish) {\n    return [];\n  } else if (start.parentElement == null || finish.parentElement == null) {\n    return null;\n  } else if (start.parentElement === finish.parentElement) {\n    return navigateBetweenSiblings(start, finish);\n  } else {\n    // `finish` is a child of its parent, so the parent will always have a child.\n    const parent = finish.parentElement;\n    const parentPath = navigateBetween(start, parent);\n    const childPath = navigateBetween(parent.firstChild, finish);\n    if (!parentPath || !childPath) return null;\n    return [\n    // First navigate to `finish`'s parent\n    ...parentPath,\n    // Then to its first child.\n    NODE_NAVIGATION_STEP_FIRST_CHILD,\n    // And finally from that node to `finish` (maybe a no-op if we're already there).\n    ...childPath];\n  }\n}\n/**\r\n * Calculates a path between 2 sibling nodes (generates a number of `NextSibling` navigations).\r\n * Returns `null` if no such path exists between the given nodes.\r\n */\nfunction navigateBetweenSiblings(start, finish) {\n  const nav = [];\n  let node = null;\n  for (node = start; node != null && node !== finish; node = node.nextSibling) {\n    nav.push(NODE_NAVIGATION_STEP_NEXT_SIBLING);\n  }\n  // If the `node` becomes `null` or `undefined` at the end, that means that we\n  // didn't find the `end` node, thus return `null` (which would trigger serialization\n  // error to be produced).\n  return node == null ? null : nav;\n}\n/**\r\n * Calculates a path between 2 nodes in terms of `nextSibling` and `firstChild`\r\n * navigations:\r\n * - the `from` node is a known node, used as an starting point for the lookup\r\n *   (the `fromNodeName` argument is a string representation of the node).\r\n * - the `to` node is a node that the runtime logic would be looking up,\r\n *   using the path generated by this function.\r\n */\nfunction calcPathBetween(from, to, fromNodeName) {\n  const path = navigateBetween(from, to);\n  return path === null ? null : compressNodeLocation(fromNodeName, path);\n}\n/**\r\n * Invoked at serialization time (on the server) when a set of navigation\r\n * instructions needs to be generated for a TNode.\r\n */\nfunction calcPathForNode(tNode, lView, excludedParentNodes) {\n  let parentTNode = tNode.parent;\n  let parentIndex;\n  let parentRNode;\n  let referenceNodeName;\n  // Skip over all parent nodes that are disconnected from the DOM, such nodes\n  // can not be used as anchors.\n  //\n  // This might happen in certain content projection-based use-cases, where\n  // a content of an element is projected and used, when a parent element\n  // itself remains detached from DOM. In this scenario we try to find a parent\n  // element that is attached to DOM and can act as an anchor instead.\n  //\n  // It can also happen that the parent node should be excluded, for example,\n  // because it belongs to an i18n block, which requires paths which aren't\n  // relative to other views in an i18n block.\n  while (parentTNode !== null && (isDisconnectedNode(parentTNode, lView) || excludedParentNodes?.has(parentTNode.index))) {\n    parentTNode = parentTNode.parent;\n  }\n  if (parentTNode === null || !(parentTNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // If there is no parent TNode or a parent TNode does not represent an RNode\n    // (i.e. not a DOM node), use component host element as a reference node.\n    parentIndex = referenceNodeName = REFERENCE_NODE_HOST;\n    parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];\n  } else {\n    // Use parent TNode as a reference node.\n    parentIndex = parentTNode.index;\n    parentRNode = unwrapRNode(lView[parentIndex]);\n    referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);\n  }\n  let rNode = unwrapRNode(lView[tNode.index]);\n  if (tNode.type & (12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */)) {\n    // For <ng-container> nodes, instead of serializing a reference\n    // to the anchor comment node, serialize a location of the first\n    // DOM element. Paired with the container size (serialized as a part\n    // of `ngh.containers`), it should give enough information for runtime\n    // to hydrate nodes in this container.\n    const firstRNode = getFirstNativeNode(lView, tNode);\n    // If container is not empty, use a reference to the first element,\n    // otherwise, rNode would point to an anchor comment node.\n    if (firstRNode) {\n      rNode = firstRNode;\n    }\n  }\n  let path = calcPathBetween(parentRNode, rNode, referenceNodeName);\n  if (path === null && parentRNode !== rNode) {\n    // Searching for a path between elements within a host node failed.\n    // Trying to find a path to an element starting from the `document.body` instead.\n    //\n    // Important note: this type of reference is relatively unstable, since Angular\n    // may not be able to control parts of the page that the runtime logic navigates\n    // through. This is mostly needed to cover \"portals\" use-case (like menus, dialog boxes,\n    // etc), where nodes are content-projected (including direct DOM manipulations) outside\n    // of the host node. The better solution is to provide APIs to work with \"portals\",\n    // at which point this code path would not be needed.\n    const body = parentRNode.ownerDocument.body;\n    path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);\n    if (path === null) {\n      // If the path is still empty, it's likely that this node is detached and\n      // won't be found during hydration.\n      throw nodeNotFoundError(lView, tNode);\n    }\n  }\n  return path;\n}\n/**\r\n * Retrieves all comments nodes that contain ngh comments referring to a defer block\r\n */\nfunction gatherDeferBlocksCommentNodes(doc, node) {\n  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode\n  });\n  let currentNode;\n  const nodesByBlockId = new Map();\n  while (currentNode = commentNodesIterator.nextNode()) {\n    const nghPattern = 'ngh=';\n    const content = currentNode?.textContent;\n    const nghIdx = content?.indexOf(nghPattern) ?? -1;\n    if (nghIdx > -1) {\n      const nghValue = content.substring(nghIdx + nghPattern.length).trim();\n      // Make sure the value has an expected format.\n      ngDevMode && assertEqual(nghValue.startsWith('d'), true, 'Invalid defer block id found in a comment node.');\n      nodesByBlockId.set(nghValue, currentNode);\n    }\n  }\n  return nodesByBlockId;\n}\nfunction acceptNode(node) {\n  return node.textContent?.trimStart().startsWith('ngh=') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n}\nlet _isI18nHydrationSupportEnabled = false;\nlet _prepareI18nBlockForHydrationImpl = () => {\n  // noop unless `enablePrepareI18nBlockForHydrationImpl` is invoked.\n};\nfunction setIsI18nHydrationSupportEnabled(enabled) {\n  _isI18nHydrationSupportEnabled = enabled;\n}\nfunction isI18nHydrationSupportEnabled() {\n  return _isI18nHydrationSupportEnabled;\n}\n/**\r\n * Prepares an i18n block and its children, located at the given\r\n * view and instruction index, for hydration.\r\n *\r\n * @param lView lView with the i18n block\r\n * @param index index of the i18n block in the lView\r\n * @param parentTNode TNode of the parent of the i18n block\r\n * @param subTemplateIndex sub-template index, or -1 for the main template\r\n */\nfunction prepareI18nBlockForHydration(lView, index, parentTNode, subTemplateIndex) {\n  _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);\n}\nfunction enablePrepareI18nBlockForHydrationImpl() {\n  _prepareI18nBlockForHydrationImpl = prepareI18nBlockForHydrationImpl;\n}\nfunction isI18nHydrationEnabled(injector) {\n  injector = injector ?? inject(Injector);\n  return injector.get(IS_I18N_HYDRATION_ENABLED, false);\n}\n/**\r\n * Collects, if not already cached, all of the indices in the\r\n * given TView which are children of an i18n block.\r\n *\r\n * Since i18n blocks don't introduce a parent TNode, this is necessary\r\n * in order to determine which indices in a LView are translated.\r\n */\nfunction getOrComputeI18nChildren(tView, context) {\n  let i18nChildren = context.i18nChildren.get(tView);\n  if (i18nChildren === undefined) {\n    i18nChildren = collectI18nChildren(tView);\n    context.i18nChildren.set(tView, i18nChildren);\n  }\n  return i18nChildren;\n}\nfunction collectI18nChildren(tView) {\n  const children = new Set();\n  function collectI18nViews(node) {\n    children.add(node.index);\n    switch (node.kind) {\n      case 1 /* I18nNodeKind.ELEMENT */:\n      case 2 /* I18nNodeKind.PLACEHOLDER */:\n        {\n          for (const childNode of node.children) {\n            collectI18nViews(childNode);\n          }\n          break;\n        }\n      case 3 /* I18nNodeKind.ICU */:\n        {\n          for (const caseNodes of node.cases) {\n            for (const caseNode of caseNodes) {\n              collectI18nViews(caseNode);\n            }\n          }\n          break;\n        }\n    }\n  }\n  // Traverse through the AST of each i18n block in the LView,\n  // and collect every instruction index.\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const tI18n = tView.data[i];\n    if (!tI18n || !tI18n.ast) {\n      continue;\n    }\n    for (const node of tI18n.ast) {\n      collectI18nViews(node);\n    }\n  }\n  return children.size === 0 ? null : children;\n}\n/**\r\n * Attempts to serialize i18n data for an i18n block, located at\r\n * the given view and instruction index.\r\n *\r\n * @param lView lView with the i18n block\r\n * @param index index of the i18n block in the lView\r\n * @param context the hydration context\r\n * @returns the i18n data, or null if there is no relevant data\r\n */\nfunction trySerializeI18nBlock(lView, index, context) {\n  if (!context.isI18nHydrationEnabled) {\n    return null;\n  }\n  const tView = lView[TVIEW];\n  const tI18n = tView.data[index];\n  if (!tI18n || !tI18n.ast) {\n    return null;\n  }\n  const parentTNode = tView.data[tI18n.parentTNodeIndex];\n  if (parentTNode && isI18nInSkipHydrationBlock(parentTNode)) {\n    return null;\n  }\n  const serializedI18nBlock = {\n    caseQueue: [],\n    disconnectedNodes: new Set(),\n    disjointNodes: new Set()\n  };\n  serializeI18nBlock(lView, serializedI18nBlock, context, tI18n.ast);\n  return serializedI18nBlock.caseQueue.length === 0 && serializedI18nBlock.disconnectedNodes.size === 0 && serializedI18nBlock.disjointNodes.size === 0 ? null : serializedI18nBlock;\n}\nfunction serializeI18nBlock(lView, serializedI18nBlock, context, nodes) {\n  let prevRNode = null;\n  for (const node of nodes) {\n    const nextRNode = serializeI18nNode(lView, serializedI18nBlock, context, node);\n    if (nextRNode) {\n      if (isDisjointNode(prevRNode, nextRNode)) {\n        serializedI18nBlock.disjointNodes.add(node.index - HEADER_OFFSET);\n      }\n      prevRNode = nextRNode;\n    }\n  }\n  return prevRNode;\n}\n/**\r\n * Helper to determine whether the given nodes are \"disjoint\".\r\n *\r\n * The i18n hydration process walks through the DOM and i18n nodes\r\n * at the same time. It expects the sibling DOM node of the previous\r\n * i18n node to be the first node of the next i18n node.\r\n *\r\n * In cases of content projection, this won't always be the case. So\r\n * when we detect that, we mark the node as \"disjoint\", ensuring that\r\n * we will serialize the path to the node. This way, when we hydrate the\r\n * i18n node, we will be able to find the correct place to start.\r\n */\nfunction isDisjointNode(prevNode, nextNode) {\n  return prevNode && prevNode.nextSibling !== nextNode;\n}\n/**\r\n * Process the given i18n node for serialization.\r\n * Returns the first RNode for the i18n node to begin hydration.\r\n */\nfunction serializeI18nNode(lView, serializedI18nBlock, context, node) {\n  const maybeRNode = unwrapRNode(lView[node.index]);\n  if (!maybeRNode || isDisconnectedRNode(maybeRNode)) {\n    serializedI18nBlock.disconnectedNodes.add(node.index - HEADER_OFFSET);\n    return null;\n  }\n  const rNode = maybeRNode;\n  switch (node.kind) {\n    case 0 /* I18nNodeKind.TEXT */:\n      {\n        processTextNodeBeforeSerialization(context, rNode);\n        break;\n      }\n    case 1 /* I18nNodeKind.ELEMENT */:\n    case 2 /* I18nNodeKind.PLACEHOLDER */:\n      {\n        serializeI18nBlock(lView, serializedI18nBlock, context, node.children);\n        break;\n      }\n    case 3 /* I18nNodeKind.ICU */:\n      {\n        const currentCase = lView[node.currentCaseLViewIndex];\n        if (currentCase != null) {\n          // i18n uses a negative value to signal a change to a new case, so we\n          // need to invert it to get the proper value.\n          const caseIdx = currentCase < 0 ? ~currentCase : currentCase;\n          serializedI18nBlock.caseQueue.push(caseIdx);\n          serializeI18nBlock(lView, serializedI18nBlock, context, node.cases[caseIdx]);\n        }\n        break;\n      }\n  }\n  return getFirstNativeNodeForI18nNode(lView, node);\n}\n/**\r\n * Helper function to get the first native node to begin hydrating\r\n * the given i18n node.\r\n */\nfunction getFirstNativeNodeForI18nNode(lView, node) {\n  const tView = lView[TVIEW];\n  const maybeTNode = tView.data[node.index];\n  if (isTNodeShape(maybeTNode)) {\n    // If the node is backed by an actual TNode, we can simply delegate.\n    return getFirstNativeNode(lView, maybeTNode);\n  } else if (node.kind === 3 /* I18nNodeKind.ICU */) {\n    // A nested ICU container won't have an actual TNode. In that case, we can use\n    // an iterator to find the first child.\n    const icuIterator = createIcuIterator(maybeTNode, lView);\n    let rNode = icuIterator();\n    // If the ICU container has no nodes, then we use the ICU anchor as the node.\n    return rNode ?? unwrapRNode(lView[node.index]);\n  } else {\n    // Otherwise, the node is a text or trivial element in an ICU container,\n    // and we can just use the RNode directly.\n    return unwrapRNode(lView[node.index]) ?? null;\n  }\n}\nfunction setCurrentNode(state, node) {\n  state.currentNode = node;\n}\n/**\r\n * Marks the current RNode as the hydration root for the given\r\n * AST node.\r\n */\nfunction appendI18nNodeToCollection(context, state, astNode) {\n  const noOffsetIndex = astNode.index - HEADER_OFFSET;\n  const {\n    disconnectedNodes\n  } = context;\n  const currentNode = state.currentNode;\n  if (state.isConnected) {\n    context.i18nNodes.set(noOffsetIndex, currentNode);\n    // We expect the node to be connected, so ensure that it\n    // is not in the set, regardless of whether we found it,\n    // so that the downstream error handling can provide the\n    // proper context.\n    disconnectedNodes.delete(noOffsetIndex);\n  } else {\n    disconnectedNodes.add(noOffsetIndex);\n  }\n  return currentNode;\n}\n/**\r\n * Skip over some sibling nodes during hydration.\r\n *\r\n * Note: we use this instead of `siblingAfter` as it's expected that\r\n * sometimes we might encounter null nodes. In those cases, we want to\r\n * defer to downstream error handling to provide proper context.\r\n */\nfunction skipSiblingNodes(state, skip) {\n  let currentNode = state.currentNode;\n  for (let i = 0; i < skip; i++) {\n    if (!currentNode) {\n      break;\n    }\n    currentNode = currentNode?.nextSibling ?? null;\n  }\n  return currentNode;\n}\n/**\r\n * Fork the given state into a new state for hydrating children.\r\n */\nfunction forkHydrationState(state, nextNode) {\n  return {\n    currentNode: nextNode,\n    isConnected: state.isConnected\n  };\n}\nfunction prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex) {\n  const hydrationInfo = lView[HYDRATION];\n  if (!hydrationInfo) {\n    return;\n  }\n  if (!isI18nHydrationSupportEnabled() || parentTNode && (isI18nInSkipHydrationBlock(parentTNode) || isDisconnectedNode$1(hydrationInfo, parentTNode.index - HEADER_OFFSET))) {\n    return;\n  }\n  const tView = lView[TVIEW];\n  const tI18n = tView.data[index];\n  ngDevMode && assertDefined(tI18n, 'Expected i18n data to be present in a given TView slot during hydration');\n  function findHydrationRoot() {\n    if (isRootTemplateMessage(subTemplateIndex)) {\n      // This is the root of an i18n block. In this case, our hydration root will\n      // depend on where our parent TNode (i.e. the block with i18n applied) is\n      // in the DOM.\n      ngDevMode && assertDefined(parentTNode, 'Expected parent TNode while hydrating i18n root');\n      const rootNode = locateNextRNode(hydrationInfo, tView, lView, parentTNode);\n      // If this i18n block is attached to an <ng-container>, then we want to begin\n      // hydrating directly with the RNode. Otherwise, for a TNode with a physical DOM\n      // element, we want to recurse into the first child and begin there.\n      return parentTNode.type & 8 /* TNodeType.ElementContainer */ ? rootNode : rootNode.firstChild;\n    }\n    // This is a nested template in an i18n block. In this case, the entire view\n    // is translated, and part of a dehydrated view in a container. This means that\n    // we can simply begin hydration with the first dehydrated child.\n    return hydrationInfo?.firstChild;\n  }\n  const currentNode = findHydrationRoot();\n  ngDevMode && assertDefined(currentNode, 'Expected root i18n node during hydration');\n  const disconnectedNodes = initDisconnectedNodes(hydrationInfo) ?? new Set();\n  const i18nNodes = hydrationInfo.i18nNodes ??= new Map();\n  const caseQueue = hydrationInfo.data[I18N_DATA]?.[index - HEADER_OFFSET] ?? [];\n  const dehydratedIcuData = hydrationInfo.dehydratedIcuData ??= new Map();\n  collectI18nNodesFromDom({\n    hydrationInfo,\n    lView,\n    i18nNodes,\n    disconnectedNodes,\n    caseQueue,\n    dehydratedIcuData\n  }, {\n    currentNode,\n    isConnected: true\n  }, tI18n.ast);\n  // Nodes from inactive ICU cases should be considered disconnected. We track them above\n  // because they aren't (and shouldn't be) serialized. Since we may mutate or create a\n  // new set, we need to be sure to write the expected value back to the DehydratedView.\n  hydrationInfo.disconnectedNodes = disconnectedNodes.size === 0 ? null : disconnectedNodes;\n}\nfunction collectI18nNodesFromDom(context, state, nodeOrNodes) {\n  if (Array.isArray(nodeOrNodes)) {\n    let nextState = state;\n    for (const node of nodeOrNodes) {\n      // Whenever a node doesn't directly follow the previous RNode, it\n      // is given a path. We need to resume collecting nodes from that location\n      // until and unless we find another disjoint node.\n      const targetNode = tryLocateRNodeByPath(context.hydrationInfo, context.lView, node.index - HEADER_OFFSET);\n      if (targetNode) {\n        nextState = forkHydrationState(state, targetNode);\n      }\n      collectI18nNodesFromDom(context, nextState, node);\n    }\n  } else {\n    if (context.disconnectedNodes.has(nodeOrNodes.index - HEADER_OFFSET)) {\n      // i18n nodes can be considered disconnected if e.g. they were projected.\n      // In that case, we have to make sure to skip over them.\n      return;\n    }\n    switch (nodeOrNodes.kind) {\n      case 0 /* I18nNodeKind.TEXT */:\n        {\n          // Claim a text node for hydration\n          const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n          setCurrentNode(state, currentNode?.nextSibling ?? null);\n          break;\n        }\n      case 1 /* I18nNodeKind.ELEMENT */:\n        {\n          // Recurse into the current element's children...\n          collectI18nNodesFromDom(context, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);\n          // And claim the parent element itself.\n          const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n          setCurrentNode(state, currentNode?.nextSibling ?? null);\n          break;\n        }\n      case 2 /* I18nNodeKind.PLACEHOLDER */:\n        {\n          const noOffsetIndex = nodeOrNodes.index - HEADER_OFFSET;\n          const {\n            hydrationInfo\n          } = context;\n          const containerSize = getNgContainerSize(hydrationInfo, noOffsetIndex);\n          switch (nodeOrNodes.type) {\n            case 0 /* I18nPlaceholderType.ELEMENT */:\n              {\n                // Hydration expects to find the head of the element.\n                const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n                // A TNode for the node may not yet if we're hydrating during the first pass,\n                // so use the serialized data to determine if this is an <ng-container>.\n                if (isSerializedElementContainer(hydrationInfo, noOffsetIndex)) {\n                  // An <ng-container> doesn't have a physical DOM node, so we need to\n                  // continue hydrating from siblings.\n                  collectI18nNodesFromDom(context, state, nodeOrNodes.children);\n                  // Skip over the anchor element. It will be claimed by the\n                  // downstream container hydration.\n                  const nextNode = skipSiblingNodes(state, 1);\n                  setCurrentNode(state, nextNode);\n                } else {\n                  // Non-container elements represent an actual node in the DOM, so we\n                  // need to continue hydration with the children, and claim the node.\n                  collectI18nNodesFromDom(context, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);\n                  setCurrentNode(state, currentNode?.nextSibling ?? null);\n                  // Elements can also be the anchor of a view container, so there may\n                  // be elements after this node that we need to skip.\n                  if (containerSize !== null) {\n                    // `+1` stands for an anchor node after all of the views in the container.\n                    const nextNode = skipSiblingNodes(state, containerSize + 1);\n                    setCurrentNode(state, nextNode);\n                  }\n                }\n                break;\n              }\n            case 1 /* I18nPlaceholderType.SUBTEMPLATE */:\n              {\n                ngDevMode && assertNotEqual(containerSize, null, 'Expected a container size while hydrating i18n subtemplate');\n                // Hydration expects to find the head of the template.\n                appendI18nNodeToCollection(context, state, nodeOrNodes);\n                // Skip over all of the template children, as well as the anchor\n                // node, since the template itself will handle them instead.\n                const nextNode = skipSiblingNodes(state, containerSize + 1);\n                setCurrentNode(state, nextNode);\n                break;\n              }\n          }\n          break;\n        }\n      case 3 /* I18nNodeKind.ICU */:\n        {\n          // If the current node is connected, we need to pop the next case from the\n          // queue, so that the active case is also considered connected.\n          const selectedCase = state.isConnected ? context.caseQueue.shift() : null;\n          const childState = {\n            currentNode: null,\n            isConnected: false\n          };\n          // We traverse through each case, even if it's not active,\n          // so that we correctly populate disconnected nodes.\n          for (let i = 0; i < nodeOrNodes.cases.length; i++) {\n            collectI18nNodesFromDom(context, i === selectedCase ? state : childState, nodeOrNodes.cases[i]);\n          }\n          if (selectedCase !== null) {\n            // ICUs represent a branching state, and the selected case could be different\n            // than what it was on the server. In that case, we need to be able to clean\n            // up the nodes from the original case. To do that, we store the selected case.\n            context.dehydratedIcuData.set(nodeOrNodes.index, {\n              case: selectedCase,\n              node: nodeOrNodes\n            });\n          }\n          // Hydration expects to find the ICU anchor element.\n          const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n          setCurrentNode(state, currentNode?.nextSibling ?? null);\n          break;\n        }\n    }\n  }\n}\nlet _claimDehydratedIcuCaseImpl = () => {\n  // noop unless `enableClaimDehydratedIcuCaseImpl` is invoked\n};\n/**\r\n * Mark the case for the ICU node at the given index in the view as claimed,\r\n * allowing its nodes to be hydrated and not cleaned up.\r\n */\nfunction claimDehydratedIcuCase(lView, icuIndex, caseIndex) {\n  _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);\n}\nfunction enableClaimDehydratedIcuCaseImpl() {\n  _claimDehydratedIcuCaseImpl = claimDehydratedIcuCaseImpl;\n}\nfunction claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex) {\n  const dehydratedIcuDataMap = lView[HYDRATION]?.dehydratedIcuData;\n  if (dehydratedIcuDataMap) {\n    const dehydratedIcuData = dehydratedIcuDataMap.get(icuIndex);\n    if (dehydratedIcuData?.case === caseIndex) {\n      // If the case we're attempting to claim matches the dehydrated one,\n      // we remove it from the map to mark it as \"claimed.\"\n      dehydratedIcuDataMap.delete(icuIndex);\n    }\n  }\n}\n/**\r\n * Clean up all i18n hydration data associated with the given view.\r\n */\nfunction cleanupI18nHydrationData(lView) {\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo) {\n    const {\n      i18nNodes,\n      dehydratedIcuData: dehydratedIcuDataMap\n    } = hydrationInfo;\n    if (i18nNodes && dehydratedIcuDataMap) {\n      const renderer = lView[RENDERER];\n      for (const dehydratedIcuData of dehydratedIcuDataMap.values()) {\n        cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData);\n      }\n    }\n    hydrationInfo.i18nNodes = undefined;\n    hydrationInfo.dehydratedIcuData = undefined;\n  }\n}\nfunction cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData) {\n  for (const node of dehydratedIcuData.node.cases[dehydratedIcuData.case]) {\n    const rNode = i18nNodes.get(node.index - HEADER_OFFSET);\n    if (rNode) {\n      nativeRemoveNode(renderer, rNode, false);\n    }\n  }\n}\n\n/**\r\n * Removes all dehydrated views from a given LContainer:\r\n * both in internal data structure, as well as removing\r\n * corresponding DOM nodes that belong to that dehydrated view.\r\n */\nfunction removeDehydratedViews(lContainer) {\n  const views = lContainer[DEHYDRATED_VIEWS] ?? [];\n  const parentLView = lContainer[PARENT];\n  const renderer = parentLView[RENDERER];\n  const retainedViews = [];\n  for (const view of views) {\n    // Do not clean up contents of `@defer` blocks.\n    // The cleanup for this content would happen once a given block\n    // is triggered and hydrated.\n    if (view.data[DEFER_BLOCK_ID] !== undefined) {\n      retainedViews.push(view);\n    } else {\n      removeDehydratedView(view, renderer);\n      ngDevMode && ngDevMode.dehydratedViewsRemoved++;\n    }\n  }\n  // Reset the value to an array to indicate that no\n  // further processing of dehydrated views is needed for\n  // this view container (i.e. do not trigger the lookup process\n  // once again in case a `ViewContainerRef` is created later).\n  lContainer[DEHYDRATED_VIEWS] = retainedViews;\n}\nfunction removeDehydratedViewList(deferBlock) {\n  const {\n    lContainer\n  } = deferBlock;\n  const dehydratedViews = lContainer[DEHYDRATED_VIEWS];\n  if (dehydratedViews === null) return;\n  const parentLView = lContainer[PARENT];\n  const renderer = parentLView[RENDERER];\n  for (const view of dehydratedViews) {\n    removeDehydratedView(view, renderer);\n    ngDevMode && ngDevMode.dehydratedViewsRemoved++;\n  }\n}\n/**\r\n * Helper function to remove all nodes from a dehydrated view.\r\n */\nfunction removeDehydratedView(dehydratedView, renderer) {\n  let nodesRemoved = 0;\n  let currentRNode = dehydratedView.firstChild;\n  if (currentRNode) {\n    const numNodes = dehydratedView.data[NUM_ROOT_NODES];\n    while (nodesRemoved < numNodes) {\n      ngDevMode && validateSiblingNodeExists(currentRNode);\n      const nextSibling = currentRNode.nextSibling;\n      nativeRemoveNode(renderer, currentRNode, false);\n      currentRNode = nextSibling;\n      nodesRemoved++;\n    }\n  }\n}\n/**\r\n * Walks over all views within this LContainer invokes dehydrated views\r\n * cleanup function for each one.\r\n */\nfunction cleanupLContainer(lContainer) {\n  removeDehydratedViews(lContainer);\n  // The host could be an LView if this container is on a component node.\n  // In this case, descend into host LView for further cleanup. See also\n  // LContainer[HOST] docs for additional information.\n  const hostLView = lContainer[HOST];\n  if (isLView(hostLView)) {\n    cleanupLView(hostLView);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    cleanupLView(lContainer[i]);\n  }\n}\n/**\r\n * Walks over `LContainer`s and components registered within\r\n * this LView and invokes dehydrated views cleanup function for each one.\r\n */\nfunction cleanupLView(lView) {\n  cleanupI18nHydrationData(lView);\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      cleanupLContainer(lContainer);\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `cleanupLView` recursively.\n      cleanupLView(lView[i]);\n    }\n  }\n}\n/**\r\n * Walks over all views registered within the ApplicationRef and removes\r\n * all dehydrated views from all `LContainer`s along the way.\r\n */\nfunction cleanupDehydratedViews(appRef) {\n  const viewRefs = appRef._views;\n  for (const viewRef of viewRefs) {\n    const lNode = getLNodeForHydration(viewRef);\n    // An `lView` might be `null` if a `ViewRef` represents\n    // an embedded view (not a component view).\n    if (lNode !== null && lNode[HOST] !== null) {\n      if (isLView(lNode)) {\n        cleanupLView(lNode);\n      } else {\n        // Cleanup in all views within this view container\n        cleanupLContainer(lNode);\n      }\n      ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;\n    }\n  }\n}\n/**\r\n * post hydration cleanup handling for defer blocks that were incrementally\r\n * hydrated. This removes all the jsaction attributes, timers, observers,\r\n * dehydrated views and containers\r\n */\nfunction cleanupHydratedDeferBlocks(deferBlock, hydratedBlocks, registry, appRef) {\n  if (deferBlock !== null) {\n    registry.cleanup(hydratedBlocks);\n    cleanupLContainer(deferBlock.lContainer);\n    cleanupDehydratedViews(appRef);\n  }\n}\n\n/**\r\n * Given a current DOM node and a serialized information about the views\r\n * in a container, walks over the DOM structure, collecting the list of\r\n * dehydrated views.\r\n */\nfunction locateDehydratedViewsInContainer(currentRNode, serializedViews) {\n  const dehydratedViews = [];\n  for (const serializedView of serializedViews) {\n    // Repeats a view multiple times as needed, based on the serialized information\n    // (for example, for *ngFor-produced views).\n    for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {\n      const view = {\n        data: serializedView,\n        firstChild: null\n      };\n      if (serializedView[NUM_ROOT_NODES] > 0) {\n        // Keep reference to the first node in this view,\n        // so it can be accessed while invoking template instructions.\n        view.firstChild = currentRNode;\n        // Move over to the next node after this view, which can\n        // either be a first node of the next view or an anchor comment\n        // node after the last view in a container.\n        currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);\n      }\n      dehydratedViews.push(view);\n    }\n  }\n  return [currentRNode, dehydratedViews];\n}\n/**\r\n * Reference to a function that searches for a matching dehydrated views\r\n * stored on a given lContainer.\r\n * Returns `null` by default, when hydration is not enabled.\r\n */\nlet _findMatchingDehydratedViewImpl = () => null;\n/**\r\n * Reference to a function that searches for a matching dehydrated view\r\n * stored on a control flow lContainer and removes the dehydrated content\r\n * once found.\r\n * Returns `null` by default, when hydration is not enabled.\r\n */\nlet _findAndReconcileMatchingDehydratedViewsImpl = () => null;\nfunction enableFindMatchingDehydratedViewImpl() {\n  _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;\n  _findAndReconcileMatchingDehydratedViewsImpl = findAndReconcileMatchingDehydratedViewsImpl;\n}\n/**\r\n * Retrieves the next dehydrated view from the LContainer and verifies that\r\n * it matches a given template id (from the TView that was used to create this\r\n * instance of a view). If the id doesn't match, that means that we are in an\r\n * unexpected state and can not complete the reconciliation process. Thus,\r\n * all dehydrated views from this LContainer are removed (including corresponding\r\n * DOM nodes) and the rendering is performed as if there were no dehydrated views\r\n * in this container.\r\n */\nfunction findMatchingDehydratedViewImpl(lContainer, template) {\n  if (hasMatchingDehydratedView(lContainer, template)) {\n    return lContainer[DEHYDRATED_VIEWS].shift();\n  } else {\n    // Otherwise, we are at the state when reconciliation can not be completed,\n    // thus we remove all dehydrated views within this container (remove them\n    // from internal data structures as well as delete associated elements from\n    // the DOM tree).\n    removeDehydratedViews(lContainer);\n    return null;\n  }\n}\nfunction findMatchingDehydratedView(lContainer, template) {\n  return _findMatchingDehydratedViewImpl(lContainer, template);\n}\nfunction findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView) {\n  if (templateTNode.tView.ssrId === null) return null;\n  const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);\n  // we know that an ssrId was generated, but we were unable to match it to\n  // a dehydrated view, which means that we may have changed branches\n  // between server and client. We'll need to find and remove those\n  // stale dehydrated views.\n  if (hostLView[TVIEW].firstUpdatePass && dehydratedView === null) {\n    removeStaleDehydratedBranch(hostLView, templateTNode);\n  }\n  return dehydratedView;\n}\nfunction findAndReconcileMatchingDehydratedViews(lContainer, templateTNode, hostLView) {\n  return _findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView);\n}\n/**\r\n * In the case that we have control flow that changes branches between server and\r\n * client, we're left with dehydrated content that will not be used. We need to find\r\n * it and clean it up at the right time so that we don't see duplicate content for\r\n * a few moments before the application reaches stability. This navigates the\r\n * control flow containers by looking at the TNodeFlags to find the matching\r\n * dehydrated content for the branch that is now stale from the server and removes it.\r\n */\nfunction removeStaleDehydratedBranch(hostLView, tNode) {\n  let currentTNode = tNode;\n  while (currentTNode) {\n    // We can return here if we've found the dehydrated view and cleaned it up.\n    // Otherwise we continue on until we either find it or reach the start of\n    // the control flow.\n    if (cleanupMatchingDehydratedViews(hostLView, currentTNode)) return;\n    if ((currentTNode.flags & 256 /* TNodeFlags.isControlFlowStart */) === 256 /* TNodeFlags.isControlFlowStart */) {\n      // we've hit the top of the control flow loop\n      break;\n    }\n    currentTNode = currentTNode.prev;\n  }\n  currentTNode = tNode.next; // jump to place we started so we can navigate down from there\n  while (currentTNode) {\n    if ((currentTNode.flags & 512 /* TNodeFlags.isInControlFlow */) !== 512 /* TNodeFlags.isInControlFlow */) {\n      // we've exited control flow and need to exit the loop.\n      break;\n    }\n    // Similar to above, we can return here if we've found the dehydrated view\n    // and cleaned it up. Otherwise we continue on until we either find it or\n    // reach the end of the control flow.\n    if (cleanupMatchingDehydratedViews(hostLView, currentTNode)) return;\n    currentTNode = currentTNode.next;\n  }\n}\nfunction hasMatchingDehydratedView(lContainer, template) {\n  const views = lContainer[DEHYDRATED_VIEWS];\n  if (!template || views === null || views.length === 0) {\n    return false;\n  }\n  // Verify whether the first dehydrated view in the container matches\n  // the template id passed to this function (that originated from a TView\n  // that was used to create an instance of an embedded or component views.\n  return views[0].data[TEMPLATE_ID] === template;\n}\nfunction cleanupMatchingDehydratedViews(hostLView, currentTNode) {\n  const ssrId = currentTNode.tView?.ssrId;\n  if (ssrId == null /* check both `null` and `undefined` */) return false;\n  const container = hostLView[currentTNode.index];\n  // if we can find the dehydrated view in this container, we know we've found the stale view\n  // and we can remove it.\n  if (isLContainer(container) && hasMatchingDehydratedView(container, ssrId)) {\n    removeDehydratedViews(container);\n    return true;\n  }\n  return false;\n}\n\n/**\r\n * Represents a component created by a `ComponentFactory`.\r\n * Provides access to the component instance and related objects,\r\n * and provides the means of destroying the instance.\r\n *\r\n * @publicApi\r\n */\nlet ComponentRef$1 = class ComponentRef {};\n/**\r\n * Base class for a factory that can create a component dynamically.\r\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\r\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\r\n *     Component class can be used directly.\r\n */\nlet ComponentFactory$1 = class ComponentFactory {};\nclass _NullComponentFactoryResolver {\n  resolveComponentFactory(component) {\n    throw new RuntimeError(917 /* RuntimeErrorCode.NO_COMPONENT_FACTORY_FOUND */, typeof ngDevMode !== 'undefined' && ngDevMode && `No component factory found for ${stringify(component)}.`);\n  }\n}\n/**\r\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\r\n * that can be used to create instances of components.\r\n * Use to obtain the factory for a given component type,\r\n * then use the factory's `create()` method to create a component of that type.\r\n *\r\n * Note: since v13, dynamic component creation via\r\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\r\n * does **not** require resolving component factory: component class can be used directly.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\r\n *     Component class can be used directly.\r\n */\nlet ComponentFactoryResolver$1 = class ComponentFactoryResolver {\n  static NULL = new _NullComponentFactoryResolver();\n};\n\n/**\r\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\r\n *\r\n * @publicApi\r\n */\nclass RendererFactory2 {}\n/**\r\n * Extend this base class to implement custom rendering. By default, Angular\r\n * renders a template into DOM. You can use custom rendering to intercept\r\n * rendering calls, or to render to something other than DOM.\r\n *\r\n * <div class=\"docs-alert docs-alert-important\">\r\n * <p>\r\n * Please be aware that usage of `Renderer2`, in context of accessing DOM elements, provides no\r\n * extra security which makes it equivalent to\r\n * {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls Security vulnerabilities}.\r\n * </p>\r\n * </div>\r\n *\r\n * Create your custom renderer using `RendererFactory2`.\r\n *\r\n * Use a custom renderer to bypass Angular's templating and\r\n * make custom UI changes that can't be expressed declaratively.\r\n * For example if you need to set a property or an attribute whose name is\r\n * not statically known, use the `setProperty()` or\r\n * `setAttribute()` method.\r\n *\r\n * @publicApi\r\n */\nclass Renderer2 {\n  /**\r\n   * If null or undefined, the view engine won't call it.\r\n   * This is used as a performance optimization for production mode.\r\n   */\n  destroyNode = null;\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = () => injectRenderer2();\n}\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\r\n * Sanitizer is used by the views to sanitize potentially dangerous values.\r\n *\r\n * @publicApi\r\n */\nclass Sanitizer {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null\n  });\n}\nfunction isModuleWithProviders(value) {\n  return value.ngModule !== undefined;\n}\nfunction isNgModule(value) {\n  return !!getNgModuleDef(value);\n}\nfunction isPipe(value) {\n  return !!getPipeDef$1(value);\n}\nfunction isDirective(value) {\n  return !!getDirectiveDef(value);\n}\nfunction isComponent(value) {\n  return !!getComponentDef(value);\n}\nfunction getDependencyTypeForError(type) {\n  if (getComponentDef(type)) return 'component';\n  if (getDirectiveDef(type)) return 'directive';\n  if (getPipeDef$1(type)) return 'pipe';\n  return 'type';\n}\nfunction verifyStandaloneImport(depType, importingType) {\n  if (isForwardRef(depType)) {\n    depType = resolveForwardRef(depType);\n    if (!depType) {\n      throw new Error(`Expected forwardRef function, imported from \"${stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${stringifyForError(depType) || depType}\".`);\n    }\n  }\n  if (getNgModuleDef(depType) == null) {\n    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);\n    if (def != null) {\n      // if a component, directive or pipe is imported make sure that it is standalone\n      if (!def.standalone) {\n        throw new Error(`The \"${stringifyForError(depType)}\" ${getDependencyTypeForError(depType)}, imported from \"${stringifyForError(importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\n      }\n    } else {\n      // it can be either a module with provider or an unknown (not annotated) type\n      if (isModuleWithProviders(depType)) {\n        throw new Error(`A module with providers was imported from \"${stringifyForError(importingType)}\". Modules with providers are not supported in standalone components imports.`);\n      } else {\n        throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\n      }\n    }\n  }\n}\n\n/**\r\n * An implementation of DepsTrackerApi which will be used for JIT and local compilation.\r\n */\nclass DepsTracker {\n  ownerNgModule = new Map();\n  ngModulesWithSomeUnresolvedDecls = new Set();\n  ngModulesScopeCache = new Map();\n  standaloneComponentsScopeCache = new Map();\n  /**\r\n   * Attempts to resolve ng module's forward ref declarations as much as possible and add them to\r\n   * the `ownerNgModule` map. This method normally should be called after the initial parsing when\r\n   * all the forward refs are resolved (e.g., when trying to render a component)\r\n   */\n  resolveNgModulesDecls() {\n    if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {\n      return;\n    }\n    for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {\n      const def = getNgModuleDef(moduleType);\n      if (def?.declarations) {\n        for (const decl of maybeUnwrapFn(def.declarations)) {\n          if (isComponent(decl)) {\n            this.ownerNgModule.set(decl, moduleType);\n          }\n        }\n      }\n    }\n    this.ngModulesWithSomeUnresolvedDecls.clear();\n  }\n  /** @override */\n  getComponentDependencies(type, rawImports) {\n    this.resolveNgModulesDecls();\n    const def = getComponentDef(type);\n    if (def === null) {\n      throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);\n    }\n    if (def.standalone) {\n      const scope = this.getStandaloneComponentScope(type, rawImports);\n      if (scope.compilation.isPoisoned) {\n        return {\n          dependencies: []\n        };\n      }\n      return {\n        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes, ...scope.compilation.ngModules]\n      };\n    } else {\n      if (!this.ownerNgModule.has(type)) {\n        // This component is orphan! No need to handle the error since the component rendering\n        // pipeline (e.g., view_container_ref) will check for this error based on configs.\n        return {\n          dependencies: []\n        };\n      }\n      const scope = this.getNgModuleScope(this.ownerNgModule.get(type));\n      if (scope.compilation.isPoisoned) {\n        return {\n          dependencies: []\n        };\n      }\n      return {\n        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes]\n      };\n    }\n  }\n  /**\r\n   * @override\r\n   * This implementation does not make use of param scopeInfo since it assumes the scope info is\r\n   * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}\r\n   */\n  registerNgModule(type, scopeInfo) {\n    if (!isNgModule(type)) {\n      throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);\n    }\n    // Lazily process the NgModules later when needed.\n    this.ngModulesWithSomeUnresolvedDecls.add(type);\n  }\n  /** @override */\n  clearScopeCacheFor(type) {\n    this.ngModulesScopeCache.delete(type);\n    this.standaloneComponentsScopeCache.delete(type);\n  }\n  /** @override */\n  getNgModuleScope(type) {\n    if (this.ngModulesScopeCache.has(type)) {\n      return this.ngModulesScopeCache.get(type);\n    }\n    const scope = this.computeNgModuleScope(type);\n    this.ngModulesScopeCache.set(type, scope);\n    return scope;\n  }\n  /** Compute NgModule scope afresh. */\n  computeNgModuleScope(type) {\n    const def = getNgModuleDefOrThrow(type);\n    const scope = {\n      exported: {\n        directives: new Set(),\n        pipes: new Set()\n      },\n      compilation: {\n        directives: new Set(),\n        pipes: new Set()\n      }\n    };\n    // Analyzing imports\n    for (const imported of maybeUnwrapFn(def.imports)) {\n      if (isNgModule(imported)) {\n        const importedScope = this.getNgModuleScope(imported);\n        // When this module imports another, the imported module's exported directives and pipes\n        // are added to the compilation scope of this module.\n        addSet(importedScope.exported.directives, scope.compilation.directives);\n        addSet(importedScope.exported.pipes, scope.compilation.pipes);\n      } else if (isStandalone(imported)) {\n        if (isDirective(imported) || isComponent(imported)) {\n          scope.compilation.directives.add(imported);\n        } else if (isPipe(imported)) {\n          scope.compilation.pipes.add(imported);\n        } else {\n          // The standalone thing is neither a component nor a directive nor a pipe ... (what?)\n          throw new RuntimeError(980 /* RuntimeErrorCode.RUNTIME_DEPS_INVALID_IMPORTED_TYPE */, 'The standalone imported type is neither a component nor a directive nor a pipe');\n        }\n      } else {\n        // The import is neither a module nor a module-with-providers nor a standalone thing. This\n        // is going to be an error. So we short circuit.\n        scope.compilation.isPoisoned = true;\n        break;\n      }\n    }\n    // Analyzing declarations\n    if (!scope.compilation.isPoisoned) {\n      for (const decl of maybeUnwrapFn(def.declarations)) {\n        // Cannot declare another NgModule or a standalone thing\n        if (isNgModule(decl) || isStandalone(decl)) {\n          scope.compilation.isPoisoned = true;\n          break;\n        }\n        if (isPipe(decl)) {\n          scope.compilation.pipes.add(decl);\n        } else {\n          // decl is either a directive or a component. The component may not yet have the ɵcmp due\n          // to async compilation.\n          scope.compilation.directives.add(decl);\n        }\n      }\n    }\n    // Analyzing exports\n    for (const exported of maybeUnwrapFn(def.exports)) {\n      if (isNgModule(exported)) {\n        // When this module exports another, the exported module's exported directives and pipes\n        // are added to both the compilation and exported scopes of this module.\n        const exportedScope = this.getNgModuleScope(exported);\n        // Based on the current logic there is no way to have poisoned exported scope. So no need to\n        // check for it.\n        addSet(exportedScope.exported.directives, scope.exported.directives);\n        addSet(exportedScope.exported.pipes, scope.exported.pipes);\n        // Some test toolings which run in JIT mode depend on this behavior that the exported scope\n        // should also be present in the compilation scope, even though AoT does not support this\n        // and it is also in odds with NgModule metadata definitions. Without this some tests in\n        // Google will fail.\n        addSet(exportedScope.exported.directives, scope.compilation.directives);\n        addSet(exportedScope.exported.pipes, scope.compilation.pipes);\n      } else if (isPipe(exported)) {\n        scope.exported.pipes.add(exported);\n      } else {\n        scope.exported.directives.add(exported);\n      }\n    }\n    return scope;\n  }\n  /** @override */\n  getStandaloneComponentScope(type, rawImports) {\n    if (this.standaloneComponentsScopeCache.has(type)) {\n      return this.standaloneComponentsScopeCache.get(type);\n    }\n    const ans = this.computeStandaloneComponentScope(type, rawImports);\n    this.standaloneComponentsScopeCache.set(type, ans);\n    return ans;\n  }\n  computeStandaloneComponentScope(type, rawImports) {\n    const ans = {\n      compilation: {\n        // Standalone components are always able to self-reference.\n        directives: new Set([type]),\n        pipes: new Set(),\n        ngModules: new Set()\n      }\n    };\n    for (const rawImport of flatten(rawImports ?? [])) {\n      const imported = resolveForwardRef(rawImport);\n      try {\n        verifyStandaloneImport(imported, type);\n      } catch (e) {\n        // Short-circuit if an import is not valid\n        ans.compilation.isPoisoned = true;\n        return ans;\n      }\n      if (isNgModule(imported)) {\n        ans.compilation.ngModules.add(imported);\n        const importedScope = this.getNgModuleScope(imported);\n        // Short-circuit if an imported NgModule has corrupted exported scope.\n        if (importedScope.exported.isPoisoned) {\n          ans.compilation.isPoisoned = true;\n          return ans;\n        }\n        addSet(importedScope.exported.directives, ans.compilation.directives);\n        addSet(importedScope.exported.pipes, ans.compilation.pipes);\n      } else if (isPipe(imported)) {\n        ans.compilation.pipes.add(imported);\n      } else if (isDirective(imported) || isComponent(imported)) {\n        ans.compilation.directives.add(imported);\n      } else {\n        // The imported thing is not module/pipe/directive/component, so we error and short-circuit\n        // here\n        ans.compilation.isPoisoned = true;\n        return ans;\n      }\n    }\n    return ans;\n  }\n  /** @override */\n  isOrphanComponent(cmp) {\n    const def = getComponentDef(cmp);\n    if (!def || def.standalone) {\n      return false;\n    }\n    this.resolveNgModulesDecls();\n    return !this.ownerNgModule.has(cmp);\n  }\n}\nfunction addSet(sourceSet, targetSet) {\n  for (const m of sourceSet) {\n    targetSet.add(m);\n  }\n}\n/** The deps tracker to be used in the current Angular app in dev mode. */\nconst depsTracker = new DepsTracker();\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\n/**\r\n * Injector that looks up a value using a specific injector, before falling back to the module\r\n * injector. Used primarily when creating components or embedded views dynamically.\r\n */\nclass ChainedInjector {\n  injector;\n  parentInjector;\n  constructor(injector, parentInjector) {\n    this.injector = injector;\n    this.parentInjector = parentInjector;\n  }\n  get(token, notFoundValue, options) {\n    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, options);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value;\n    }\n    return this.parentInjector.get(token, notFoundValue, options);\n  }\n}\n\n/**\r\n * Compute the static styling (class/style) from `TAttributes`.\r\n *\r\n * This function should be called during `firstCreatePass` only.\r\n *\r\n * @param tNode The `TNode` into which the styling information should be loaded.\r\n * @param attrs `TAttributes` containing the styling information.\r\n * @param writeToHost Where should the resulting static styles be written?\r\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\r\n *   - `true` Write to `TNode.styles` / `TNode.classes`\r\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles = writeToHost ? tNode.styles : null;\n  let classes = writeToHost ? tNode.classes : null;\n  let mode = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == 1 /* AttributeMarker.Classes */) {\n        classes = concatStringsWithSpace(classes, value);\n      } else if (mode == 2 /* AttributeMarker.Styles */) {\n        const style = value;\n        const styleValue = attrs[++i];\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\nfunction ɵɵdirectiveInject(token, flags = 0 /* InternalInjectFlags.Default */) {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return __inject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n  ngDevMode && emitInjectEvent(token, value, flags);\n  return value;\n}\n/**\r\n * Throws an error indicating that a factory function could not be generated by the compiler for a\r\n * particular class.\r\n *\r\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\r\n * off, saving bytes of generated code while still providing a good experience in dev mode.\r\n *\r\n * The name of the class is not mentioned here, but will be in the generated factory function name\r\n * and thus in the stack trace.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵinvalidFactory() {\n  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n\n/**\r\n * Resolve the matched directives on a node.\r\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs, directiveMatcher) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n  const exportsMap = localRefs === null ? null : {\n    '': -1\n  };\n  const matchedDirectiveDefs = directiveMatcher(tView, tNode);\n  if (matchedDirectiveDefs !== null) {\n    let directiveDefs = matchedDirectiveDefs;\n    let hostDirectiveDefs = null;\n    let hostDirectiveRanges = null;\n    for (const def of matchedDirectiveDefs) {\n      if (def.resolveHostDirectives !== null) {\n        [directiveDefs, hostDirectiveDefs, hostDirectiveRanges] = def.resolveHostDirectives(matchedDirectiveDefs);\n        break;\n      }\n    }\n    ngDevMode && assertNoDuplicateDirectives(directiveDefs);\n    initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs, hostDirectiveRanges);\n  }\n  if (exportsMap !== null && localRefs !== null) {\n    cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  const localNames = tNode.localNames = [];\n  // Local names must be stored in tNode in the same order that localRefs are defined\n  // in the template to ensure the data is loaded in the same slots as their refs\n  // in the template (for template queries).\n  for (let i = 0; i < localRefs.length; i += 2) {\n    const index = exportsMap[localRefs[i + 1]];\n    if (index == null) throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n    localNames.push(localRefs[i], index);\n  }\n}\n/**\r\n * Marks a given TNode as a component's host. This consists of:\r\n * - setting the component offset on the TNode.\r\n * - storing index of component's host element so it will be queued for view refresh during CD.\r\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  (tView.components ??= []).push(hostTNode.index);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs, hostDirectiveRanges) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const directivesLength = directives.length;\n  let hasSeenComponent = false;\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    if (!hasSeenComponent && isComponentDef(def)) {\n      hasSeenComponent = true;\n      markAsComponentHost(tView, tNode, i);\n    }\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, def.type);\n  }\n  initTNodeFlags(tNode, tView.data.length, directivesLength);\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directivesLength, null);\n  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n  // If there's at least one directive, we'll have to track it so initialize the map.\n  if (directivesLength > 0) {\n    tNode.directiveToIndex = new Map();\n  }\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n    // If a directive has host directives, we need to track both its index and the range within\n    // the host directives are declared. Host directives are not tracked, but should be resolved\n    // by looking up the host and getting its indexes from there.\n    if (hostDirectiveRanges !== null && hostDirectiveRanges.has(def)) {\n      const [start, end] = hostDirectiveRanges.get(def);\n      tNode.directiveToIndex.set(def.type, [directiveIdx, start + tNode.directiveStart, end + tNode.directiveStart]);\n    } else if (hostDirectiveDefs === null || !hostDirectiveDefs.has(def)) {\n      tNode.directiveToIndex.set(def.type, directiveIdx);\n    }\n    if (def.contentQueries !== null) tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n    const lifeCycleHooks = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      (tView.preOrderHooks ??= []).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      (tView.preOrderCheckHooks ??= []).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n    directiveIdx++;\n  }\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\r\n * Initializes data structures required to work with directive inputs and outputs.\r\n * Initialization is done for all directives matched on a given TNode.\r\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs) {\n  ngDevMode && assertFirstCreatePass(tView);\n  for (let index = tNode.directiveStart; index < tNode.directiveEnd; index++) {\n    const directiveDef = tView.data[index];\n    if (hostDirectiveDefs === null || !hostDirectiveDefs.has(directiveDef)) {\n      setupSelectorMatchedInputsOrOutputs(0 /* BindingType.Inputs */, tNode, directiveDef, index);\n      setupSelectorMatchedInputsOrOutputs(1 /* BindingType.Outputs */, tNode, directiveDef, index);\n      setupInitialInputs(tNode, index, false);\n    } else {\n      const hostDirectiveDef = hostDirectiveDefs.get(directiveDef);\n      setupHostDirectiveInputsOrOutputs(0 /* BindingType.Inputs */, tNode, hostDirectiveDef, index);\n      setupHostDirectiveInputsOrOutputs(1 /* BindingType.Outputs */, tNode, hostDirectiveDef, index);\n      setupInitialInputs(tNode, index, true);\n    }\n  }\n}\n/**\r\n * Sets up the input/output bindings for a directive that was matched in the template through its\r\n * selector. This method is called repeatedly to build up all of the available inputs on a node.\r\n *\r\n * @param mode Whether inputs or outputs are being contructed.\r\n * @param tNode Node on which the bindings are being set up.\r\n * @param def Directive definition for which the bindings are being set up.\r\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\r\n */\nfunction setupSelectorMatchedInputsOrOutputs(mode, tNode, def, directiveIndex) {\n  const aliasMap = mode === 0 /* BindingType.Inputs */ ? def.inputs : def.outputs;\n  for (const publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      let bindings;\n      if (mode === 0 /* BindingType.Inputs */) {\n        bindings = tNode.inputs ??= {};\n      } else {\n        bindings = tNode.outputs ??= {};\n      }\n      bindings[publicName] ??= [];\n      bindings[publicName].push(directiveIndex);\n      setShadowStylingInputFlags(tNode, publicName);\n    }\n  }\n}\n/**\r\n * Sets up input/output bindings that were defined through host directives on a specific node.\r\n * @param mode Whether inputs or outputs are being contructed.\r\n * @param tNode Node on which the bindings are being set up.\r\n * @param config Host directive definition that is being set up.\r\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\r\n */\nfunction setupHostDirectiveInputsOrOutputs(mode, tNode, config, directiveIndex) {\n  const aliasMap = mode === 0 /* BindingType.Inputs */ ? config.inputs : config.outputs;\n  for (const initialName in aliasMap) {\n    if (aliasMap.hasOwnProperty(initialName)) {\n      const publicName = aliasMap[initialName];\n      let bindings;\n      if (mode === 0 /* BindingType.Inputs */) {\n        bindings = tNode.hostDirectiveInputs ??= {};\n      } else {\n        bindings = tNode.hostDirectiveOutputs ??= {};\n      }\n      bindings[publicName] ??= [];\n      bindings[publicName].push(directiveIndex, initialName);\n      setShadowStylingInputFlags(tNode, publicName);\n    }\n  }\n}\nfunction setShadowStylingInputFlags(tNode, publicName) {\n  if (publicName === 'class') {\n    tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n  } else if (publicName === 'style') {\n    tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n  }\n}\n/**\r\n * Sets up the initialInputData for a node and stores it in the template's static storage\r\n * so subsequent template invocations don't have to recalculate it.\r\n *\r\n * initialInputData is an array containing values that need to be set as input properties\r\n * for directives on this node, but only once on creation. We need this array to support\r\n * the case where you set an @Input property of a directive using attribute-like syntax.\r\n * e.g. if you have a `name` @Input, you can set it once like this:\r\n *\r\n * <my-component name=\"Bess\"></my-component>\r\n *\r\n * @param tNode TNode on which to set up the initial inputs.\r\n * @param directiveIndex Index of the directive that is currently being processed.\r\n */\nfunction setupInitialInputs(tNode, directiveIndex, isHostDirective) {\n  const {\n    attrs,\n    inputs,\n    hostDirectiveInputs\n  } = tNode;\n  if (attrs === null || !isHostDirective && inputs === null || isHostDirective && hostDirectiveInputs === null ||\n  // Do not use unbound attributes as inputs to structural directives, since structural\n  // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n  isInlineTemplate(tNode)) {\n    tNode.initialInputs ??= [];\n    tNode.initialInputs.push(null);\n    return;\n  }\n  let inputsToStore = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    } else if (typeof attrName === 'number') {\n      // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n      break;\n    }\n    if (!isHostDirective && inputs.hasOwnProperty(attrName)) {\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs[attrName];\n      for (const index of inputConfig) {\n        if (index === directiveIndex) {\n          inputsToStore ??= [];\n          inputsToStore.push(attrName, attrs[i + 1]);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    } else if (isHostDirective && hostDirectiveInputs.hasOwnProperty(attrName)) {\n      const config = hostDirectiveInputs[attrName];\n      for (let j = 0; j < config.length; j += 2) {\n        if (config[j] === directiveIndex) {\n          inputsToStore ??= [];\n          inputsToStore.push(config[j + 1], attrs[i + 1]);\n          break;\n        }\n      }\n    }\n    i += 2;\n  }\n  tNode.initialInputs ??= [];\n  tNode.initialInputs.push(inputsToStore);\n}\n/**\r\n * Setup directive for instantiation.\r\n *\r\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\r\n * as `LView`. `TView` gets the `DirectiveDef`.\r\n *\r\n * @param tView `TView`\r\n * @param tNode `TNode`\r\n * @param lView `LView`\r\n * @param directiveIndex Index where the directive will be stored in the Expando.\r\n * @param def `DirectiveDef`\r\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\n/**\r\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\r\n *\r\n * @param tView `TView` to which the `hostBindings` should be added.\r\n * @param tNode `TNode` the element which contains the directive\r\n * @param directiveIdx Directive index in view.\r\n * @param directiveVarsIdx Where will the directive's vars be stored\r\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\r\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [];\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n/**\r\n * Returns the last selected element index in the `HostBindingOpCodes`\r\n *\r\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\r\n * if it changes. This method returns the last index (or '0' if not found.)\r\n *\r\n * Selected element index are only the ones which are negative.\r\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n/**\r\n * Builds up an export map as directives are created, so local refs can be quickly mapped\r\n * to their directive instances.\r\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n/**\r\n * Initializes the flags on the current node, setting all indices to the initial index,\r\n * the directive count to 0, and adding the isComponent flag.\r\n * @param index the initial index\r\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\nfunction assertNoDuplicateDirectives(directives) {\n  // The array needs at least two elements in order to have duplicates.\n  if (directives.length < 2) {\n    return;\n  }\n  const seenDirectives = new Set();\n  for (const current of directives) {\n    if (seenDirectives.has(current)) {\n      throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTIVE */, `Directive ${current.type.name} matches multiple times on the same element. ` + `Directives can only match an element once.`);\n    }\n    seenDirectives.add(current);\n  }\n}\nfunction elementStartFirstCreatePass(index, tView, lView, name, directiveMatcher, bindingsEnabled, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n  if (bindingsEnabled) {\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), directiveMatcher);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\nfunction elementEndFirstCreatePass(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  registerPostOrderHooks(tView, tNode);\n  if (isContentQueryHost(tNode)) {\n    tView.queries.elementEnd(tNode);\n  }\n}\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) &&\n  // JS Map are iterables but return entries as [k, v]\n  Symbol.iterator in obj; // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\nfunction devModeEqual(a, b) {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\r\n * Updates binding if changed, then returns whether it was updated.\r\n *\r\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\r\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\r\n * behavior.\r\n *\r\n * @param lView current `LView`\r\n * @param bindingIndex The binding in the `LView` to check\r\n * @param value New value to check against `lView[bindingIndex]`\r\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\r\n *          `CheckNoChangesMode`)\r\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  if (value === NO_CHANGE) {\n    return false;\n  }\n  const oldValue = lView[bindingIndex];\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\r\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\r\n * if applicable.\r\n *\r\n * @param tNode The TNode associated with this listener\r\n * @param lView The LView that contains this listener\r\n * @param listenerFn The listener function to call\r\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\r\n * (the procedural renderer does this already, so in those cases, we should skip)\r\n */\nfunction wrapListener(tNode, lView, listenerFn) {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(event) {\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = isComponentHost(tNode) ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView, 5 /* NotificationSource.Listener */);\n    const context = lView[CONTEXT];\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, event);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, event) && result;\n      nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n    }\n    return result;\n  };\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n  const prevConsumer = setActiveConsumer$1(null);\n  try {\n    profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleUncaughtError(lView, error);\n    return false;\n  } finally {\n    profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n    setActiveConsumer$1(prevConsumer);\n  }\n}\n/**\r\n * Listen to a DOM event on a specific node.\r\n * @param tNode TNode on which to listen.\r\n * @param tView TView in which the node is placed.\r\n * @param lView LView in which the node instance is placed.\r\n * @param eventTargetResolver Resolver for global event targets.\r\n * @param renderer Renderer to use for listening to the event.\r\n * @param eventName Name of the event.\r\n * @param originalListener Original listener as it was created by the compiler. Necessary for event\r\n *   coalescing.\r\n * @param wrappedListener Listener wrapped with additional logic like marking for check and error\r\n *   handling.\r\n * @returns Boolean indicating whether the event was bound or was coalesced into an existing\r\n *   listener.\r\n */\nfunction listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, originalListener, wrappedListener) {\n  ngDevMode && assertNotSame(wrappedListener, originalListener, 'Expected wrapped and original listeners to be different.');\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  let hasCoalesced = false;\n  // In order to match current behavior, native DOM event listeners must be added for all\n  // events (including outputs).\n  // There might be cases where multiple directives on the same element try to register an event\n  // handler function for the same event. In this situation we want to avoid registration of\n  // several native listeners as each registration would be intercepted by NgZone and\n  // trigger change detection. This would mean that a single user action would result in several\n  // change detections being invoked. To avoid this situation we want to have only one call to\n  // native handler registration (for the same element and same type of event).\n  //\n  // In order to have just one native event handler in presence of multiple handler functions,\n  // we just register a first handler function as a native event listener and then chain\n  // (coalesce) other handler functions on top of the first native handler function.\n  let existingListener = null;\n  // Please note that the coalescing described here doesn't happen for events specifying an\n  // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n  // view engine.\n  // Also, we don't have to search for existing listeners if there are no directives\n  // matching on a given node as we can't register multiple event handlers for the same event in\n  // a template (this would mean having duplicate attributes).\n  if (!eventTargetResolver && isTNodeDirectiveHost) {\n    existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n  }\n  if (existingListener !== null) {\n    // Attach a new listener to coalesced listeners list, maintaining the order in which\n    // listeners are registered. For performance reasons, we keep a reference to the last\n    // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n    // the entire set each time we need to add a new listener.\n    const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n    lastListenerFn.__ngNextListenerFn__ = originalListener;\n    existingListener.__ngLastListenerFn__ = originalListener;\n    hasCoalesced = true;\n  } else {\n    const native = getNativeByTNode(tNode, lView);\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    stashEventListenerImpl(lView, target, eventName, wrappedListener);\n    const cleanupFn = renderer.listen(target, eventName, wrappedListener);\n    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;\n    storeListenerCleanup(idxOrTargetGetter, tView, lView, eventName, wrappedListener, cleanupFn, false);\n  }\n  return hasCoalesced;\n}\n/**\r\n * A utility function that checks if a given element has already an event handler registered for an\r\n * event with a specified name. The TView.cleanup data structure is used to find out which events\r\n * are registered for a given element.\r\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIndex) {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIndex) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP];\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup && lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\n/**\r\n * Stores a cleanup function for an event listener.\r\n * @param indexOrTargetGetter Either the index of the TNode on which the event is bound or a\r\n *  function that when invoked will return the event target.\r\n * @param tView TView in which the event is bound.\r\n * @param lView LView in which the event is bound.\r\n * @param eventName Name of the event.\r\n * @param listenerFn Final callback of the event.\r\n * @param cleanup Function to invoke during cleanup.\r\n * @param isOutput Whether this is an output listener or a native DOM listener.\r\n */\nfunction storeListenerCleanup(indexOrTargetGetter, tView, lView, eventName, listenerFn, cleanup, isOutput) {\n  const tCleanup = tView.firstCreatePass ? getOrCreateTViewCleanup(tView) : null;\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  const index = lCleanup.length;\n  lCleanup.push(listenerFn, cleanup);\n  tCleanup && tCleanup.push(eventName, indexOrTargetGetter, index, (index + 1) * (isOutput ? -1 : 1));\n}\nfunction createOutputListener(tNode, lView, listenerFn, targetDef, eventName) {\n  // TODO(pk): decouple checks from the actual binding\n  const wrappedListener = wrapListener(tNode, lView, listenerFn);\n  const hasBound = listenToDirectiveOutput(tNode, lView, targetDef, eventName, wrappedListener);\n  if (!hasBound && ngDevMode) {\n    throw new RuntimeError(316 /* RuntimeErrorCode.INVALID_BINDING_TARGET */, `${stringifyForError(targetDef.type)} does not have an output with a public name of \"${eventName}\".`);\n  }\n}\n/** Listens to an output on a specific directive. */\nfunction listenToDirectiveOutput(tNode, lView, target, eventName, listenerFn) {\n  let hostIndex = null;\n  let hostDirectivesStart = null;\n  let hostDirectivesEnd = null;\n  let hasOutput = false;\n  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\n    throw new Error(`Node does not have a directive with type ${target.type.name}`);\n  }\n  const data = tNode.directiveToIndex.get(target.type);\n  if (typeof data === 'number') {\n    hostIndex = data;\n  } else {\n    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\n  }\n  if (hostDirectivesStart !== null && hostDirectivesEnd !== null && tNode.hostDirectiveOutputs?.hasOwnProperty(eventName)) {\n    const hostDirectiveOutputs = tNode.hostDirectiveOutputs[eventName];\n    for (let i = 0; i < hostDirectiveOutputs.length; i += 2) {\n      const index = hostDirectiveOutputs[i];\n      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\n        ngDevMode && assertIndexInRange(lView, index);\n        hasOutput = true;\n        listenToOutput(tNode, lView, index, hostDirectiveOutputs[i + 1], eventName, listenerFn);\n      } else if (index > hostDirectivesEnd) {\n        break;\n      }\n    }\n  }\n  if (target.outputs.hasOwnProperty(eventName)) {\n    ngDevMode && assertIndexInRange(lView, hostIndex);\n    hasOutput = true;\n    listenToOutput(tNode, lView, hostIndex, eventName, eventName, listenerFn);\n  }\n  return hasOutput;\n}\nfunction listenToOutput(tNode, lView, directiveIndex, lookupName, eventName, listenerFn) {\n  ngDevMode && assertIndexInRange(lView, directiveIndex);\n  const instance = lView[directiveIndex];\n  const tView = lView[TVIEW];\n  const def = tView.data[directiveIndex];\n  const propertyName = def.outputs[lookupName];\n  const output = instance[propertyName];\n  if (ngDevMode && !isOutputSubscribable(output)) {\n    throw new Error(`@Output ${propertyName} not initialized in '${instance.constructor.name}'.`);\n  }\n  const subscription = output.subscribe(listenerFn);\n  storeListenerCleanup(tNode.index, tView, lView, eventName, listenerFn, subscription, true);\n}\n/**\r\n * Whether the given value represents a subscribable output.\r\n *\r\n * For example, an `EventEmitter, a `Subject`, an `Observable` or an\r\n * `OutputEmitter`.\r\n */\nfunction isOutputSubscribable(value) {\n  return value != null && typeof value.subscribe === 'function';\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/** Symbol used to store and retrieve metadata about a binding. */\nconst BINDING = /* @__PURE__ */Symbol('BINDING');\n// These are constant between all the bindings so we can reuse the objects.\nconst INPUT_BINDING_METADATA = {\n  kind: 'input',\n  requiredVars: 1\n};\nconst OUTPUT_BINDING_METADATA = {\n  kind: 'output',\n  requiredVars: 0\n};\n// TODO(pk): this is a sketch of an input binding instruction that still needs some cleanups\n// - take an index of a directive on TNode (as matched), review all the index mappings that we need to do\n// - move more logic to the first creation pass\n// - move this function to under the instructions folder\nfunction inputBindingUpdate(targetDirectiveIdx, publicName, value) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = lView[TVIEW];\n    const tNode = getSelectedTNode();\n    // TODO(pk): don't check on each and every binding, just assert in dev mode\n    const targetDef = tView.directiveRegistry[targetDirectiveIdx];\n    if (ngDevMode && !targetDef) {\n      throw new RuntimeError(315 /* RuntimeErrorCode.NO_BINDING_TARGET */, `Input binding to property \"${publicName}\" does not have a target.`);\n    }\n    // TODO(pk): the hasSet check should be replaced by one-off check in the first creation pass\n    const hasSet = setDirectiveInput(tNode, tView, lView, targetDef, publicName, value);\n    if (ngDevMode) {\n      if (!hasSet) {\n        throw new RuntimeError(315 /* RuntimeErrorCode.NO_BINDING_TARGET */, `${stringifyForError(targetDef.type)} does not have an input with a public name of \"${publicName}\".`);\n      }\n      storePropertyBindingMetadata(tView.data, tNode, publicName, bindingIndex);\n    }\n  }\n}\n/**\r\n * Creates an input binding.\r\n * @param publicName Public name of the input to bind to.\r\n * @param value Callback that returns the current value for the binding. Can be either a signal or\r\n *   a plain getter function.\r\n *\r\n * ### Usage Example\r\n * In this example we create an instance of the `MyButton` component and bind the value of\r\n * the `isDisabled` signal to its `disabled` input.\r\n *\r\n * ```\r\n * const isDisabled = signal(false);\r\n *\r\n * createComponent(MyButton, {\r\n *   bindings: [inputBinding('disabled', isDisabled)]\r\n * });\r\n * ```\r\n */\nfunction inputBinding(publicName, value) {\n  // Note: ideally we would use a class here, but it seems like they\n  // don't get tree shaken when constructed by a function like this.\n  const binding = {\n    [BINDING]: INPUT_BINDING_METADATA,\n    update: () => inputBindingUpdate(binding.targetIdx, publicName, value())\n  };\n  return binding;\n}\n/**\r\n * Creates an output binding.\r\n * @param eventName Public name of the output to listen to.\r\n * @param listener Function to be called when the output emits.\r\n *\r\n * ### Usage example\r\n * In this example we create an instance of the `MyCheckbox` component and listen\r\n * to its `onChange` event.\r\n *\r\n * ```\r\n * interface CheckboxChange {\r\n *   value: string;\r\n * }\r\n *\r\n * createComponent(MyCheckbox, {\r\n *   bindings: [\r\n *    outputBinding<CheckboxChange>('onChange', event => console.log(event.value))\r\n *   ],\r\n * });\r\n * ```\r\n */\nfunction outputBinding(eventName, listener) {\n  // Note: ideally we would use a class here, but it seems like they\n  // don't get tree shaken when constructed by a function like this.\n  const binding = {\n    [BINDING]: OUTPUT_BINDING_METADATA,\n    create: () => {\n      const lView = getLView();\n      const tNode = getCurrentTNode();\n      const tView = lView[TVIEW];\n      const targetDef = tView.directiveRegistry[binding.targetIdx];\n      createOutputListener(tNode, lView, listener, targetDef, eventName);\n    }\n  };\n  return binding;\n}\n/**\r\n * Creates a two-way binding.\r\n * @param eventName Public name of the two-way compatible input.\r\n * @param value Writable signal from which to get the current value and to which to write new\r\n * values.\r\n *\r\n * ### Usage example\r\n * In this example we create an instance of the `MyCheckbox` component and bind to its `value`\r\n * input using a two-way binding.\r\n *\r\n * ```\r\n * const checkboxValue = signal('');\r\n *\r\n * createComponent(MyCheckbox, {\r\n *   bindings: [\r\n *    twoWayBinding('value', checkboxValue),\r\n *   ],\r\n * });\r\n * ```\r\n */\nfunction twoWayBinding(publicName, value) {\n  const input = inputBinding(publicName, value);\n  const output = outputBinding(publicName + 'Change', eventValue => value.set(eventValue));\n  // We take advantage of inputs only having a `create` block and outputs only having an `update`\n  // block by passing them through directly instead of creating dedicated functions here. This\n  // assumption can break down if one of them starts targeting both blocks. These assertions\n  // are here to help us catch it if something changes in the future.\n  ngDevMode && assertNotDefined(input.create, 'Unexpected `create` callback in inputBinding');\n  ngDevMode && assertNotDefined(output.update, 'Unexpected `update` callback in outputBinding');\n  const binding = {\n    [BINDING]: {\n      kind: 'twoWay',\n      requiredVars: input[BINDING].requiredVars + output[BINDING].requiredVars\n    },\n    set targetIdx(idx) {\n      input.targetIdx = idx;\n      output.targetIdx = idx;\n    },\n    create: output.create,\n    update: input.update\n  };\n  return binding;\n}\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n  ngModule;\n  /**\r\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\r\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component);\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\nfunction toInputRefArray(map) {\n  return Object.keys(map).map(name => {\n    const [propName, flags, transform] = map[name];\n    const inputData = {\n      propName: propName,\n      templateName: name,\n      isSignal: (flags & InputFlags.SignalBased) !== 0\n    };\n    if (transform) {\n      inputData.transform = transform;\n    }\n    return inputData;\n  });\n}\nfunction toOutputRefArray(map) {\n  return Object.keys(map).map(name => ({\n    propName: map[name],\n    templateName: name\n  }));\n}\nfunction verifyNotAnOrphanComponent(componentDef) {\n  // TODO(pk): create assert that verifies ngDevMode\n  if ((typeof ngJitMode === 'undefined' || ngJitMode) && componentDef.debugInfo?.forbidOrphanRendering) {\n    if (depsTracker.isOrphanComponent(componentDef.type)) {\n      throw new RuntimeError(981 /* RuntimeErrorCode.RUNTIME_DEPS_ORPHAN_COMPONENT */, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(componentDef.type)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);\n    }\n  }\n}\nfunction createRootViewInjector(componentDef, environmentInjector, injector) {\n  let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;\n  if (realEnvironmentInjector && componentDef.getStandaloneInjector !== null) {\n    realEnvironmentInjector = componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n  }\n  const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n  return rootViewInjector;\n}\nfunction createRootLViewEnvironment(rootLViewInjector) {\n  const rendererFactory = rootLViewInjector.get(RendererFactory2, null);\n  if (rendererFactory === null) {\n    throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode && 'Angular was not able to inject a renderer (RendererFactory2). ' + 'Likely this is due to a broken DI hierarchy. ' + 'Make sure that any injector used to create this component has a correct parent.');\n  }\n  const sanitizer = rootLViewInjector.get(Sanitizer, null);\n  const changeDetectionScheduler = rootLViewInjector.get(ChangeDetectionScheduler, null);\n  let ngReflect = false;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngReflect = rootLViewInjector.get(NG_REFLECT_ATTRS_FLAG, NG_REFLECT_ATTRS_FLAG_DEFAULT);\n  }\n  return {\n    rendererFactory,\n    sanitizer,\n    changeDetectionScheduler,\n    ngReflect\n  };\n}\nfunction createHostElement(componentDef, render) {\n  // Determine a tag name used for creating host elements when this component is created\n  // dynamically. Default to 'div' if this component did not specify any tag name in its\n  // selector.\n  const tagName = (componentDef.selectors[0][0] || 'div').toLowerCase();\n  const namespace = tagName === 'svg' ? SVG_NAMESPACE : tagName === 'math' ? MATH_ML_NAMESPACE : null;\n  return createElementNode(render, tagName, namespace);\n}\n/**\r\n * ComponentFactory interface implementation.\r\n */\nclass ComponentFactory extends ComponentFactory$1 {\n  componentDef;\n  ngModule;\n  selector;\n  componentType;\n  ngContentSelectors;\n  isBoundToModule;\n  cachedInputs = null;\n  cachedOutputs = null;\n  get inputs() {\n    this.cachedInputs ??= toInputRefArray(this.componentDef.inputs);\n    return this.cachedInputs;\n  }\n  get outputs() {\n    this.cachedOutputs ??= toOutputRefArray(this.componentDef.outputs);\n    return this.cachedOutputs;\n  }\n  /**\r\n   * @param componentDef The component definition.\r\n   * @param ngModule The NgModuleRef to which the factory is bound.\r\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ?? [];\n    this.isBoundToModule = !!ngModule;\n  }\n  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector, directives, componentBindings) {\n    profiler(22 /* ProfilerEvent.DynamicComponentStart */);\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const cmpDef = this.componentDef;\n      ngDevMode && verifyNotAnOrphanComponent(cmpDef);\n      const rootTView = createRootTView(rootSelectorOrNode, cmpDef, componentBindings, directives);\n      const rootViewInjector = createRootViewInjector(cmpDef, environmentInjector || this.ngModule, injector);\n      const environment = createRootLViewEnvironment(rootViewInjector);\n      const hostRenderer = environment.rendererFactory.createRenderer(null, cmpDef);\n      const hostElement = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, cmpDef.encapsulation, rootViewInjector) : createHostElement(cmpDef, hostRenderer);\n      const hasInputBindings = componentBindings?.some(isInputBinding) || directives?.some(d => typeof d !== 'function' && d.bindings.some(isInputBinding));\n      const rootLView = createLView(null, rootTView, null, 512 /* LViewFlags.IsRoot */ | getInitialLViewFlagsFromDef(cmpDef), null, null, environment, hostRenderer, rootViewInjector, null, retrieveHydrationInfo(hostElement, rootViewInjector, true /* isRootView */));\n      rootLView[HEADER_OFFSET] = hostElement;\n      // rootView is the parent when bootstrapping\n      // TODO(misko): it looks like we are entering view here but we don't really need to as\n      // `renderView` does that. However as the code is written it is needed because\n      // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n      // issues would allow us to drop this.\n      enterView(rootLView);\n      let componentView = null;\n      try {\n        const hostTNode = elementStartFirstCreatePass(HEADER_OFFSET, rootTView, rootLView, '#host', () => rootTView.directiveRegistry, true, 0);\n        // ---- element instruction\n        // TODO(crisbeto): in practice `hostElement` should always be defined, but there are some\n        // tests where the renderer is mocked out and `undefined` is returned. We should update the\n        // tests so that this check can be removed.\n        if (hostElement) {\n          setupStaticAttributes(hostRenderer, hostElement, hostTNode);\n          attachPatchData(hostElement, rootLView);\n        }\n        // TODO(pk): this logic is similar to the instruction code where a node can have directives\n        createDirectivesInstances(rootTView, rootLView, hostTNode);\n        executeContentQueries(rootTView, hostTNode, rootLView);\n        elementEndFirstCreatePass(rootTView, hostTNode);\n        if (projectableNodes !== undefined) {\n          projectNodes(hostTNode, this.ngContentSelectors, projectableNodes);\n        }\n        componentView = getComponentLViewByIndex(hostTNode.index, rootLView);\n        // TODO(pk): why do we need this logic?\n        rootLView[CONTEXT] = componentView[CONTEXT];\n        renderView(rootTView, rootLView, null);\n      } catch (e) {\n        // Stop tracking the views if creation failed since\n        // the consumer won't have a way to dereference them.\n        if (componentView !== null) {\n          unregisterLView(componentView);\n        }\n        unregisterLView(rootLView);\n        throw e;\n      } finally {\n        profiler(23 /* ProfilerEvent.DynamicComponentEnd */);\n        leaveView();\n      }\n      return new ComponentRef(this.componentType, rootLView, !!hasInputBindings);\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\nfunction createRootTView(rootSelectorOrNode, componentDef, componentBindings, directives) {\n  const tAttributes = rootSelectorOrNode ? ['ng-version', '20.0.6'] :\n  // Extract attributes and classes from the first selector only to match VE behavior.\n  extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n  let creationBindings = null;\n  let updateBindings = null;\n  let varsToAllocate = 0;\n  if (componentBindings) {\n    for (const binding of componentBindings) {\n      varsToAllocate += binding[BINDING].requiredVars;\n      if (binding.create) {\n        binding.targetIdx = 0;\n        (creationBindings ??= []).push(binding);\n      }\n      if (binding.update) {\n        binding.targetIdx = 0;\n        (updateBindings ??= []).push(binding);\n      }\n    }\n  }\n  if (directives) {\n    for (let i = 0; i < directives.length; i++) {\n      const directive = directives[i];\n      if (typeof directive !== 'function') {\n        for (const binding of directive.bindings) {\n          varsToAllocate += binding[BINDING].requiredVars;\n          const targetDirectiveIdx = i + 1;\n          if (binding.create) {\n            binding.targetIdx = targetDirectiveIdx;\n            (creationBindings ??= []).push(binding);\n          }\n          if (binding.update) {\n            binding.targetIdx = targetDirectiveIdx;\n            (updateBindings ??= []).push(binding);\n          }\n        }\n      }\n    }\n  }\n  const directivesToApply = [componentDef];\n  if (directives) {\n    for (const directive of directives) {\n      const directiveType = typeof directive === 'function' ? directive : directive.type;\n      const directiveDef = ngDevMode ? getDirectiveDefOrThrow(directiveType) : getDirectiveDef(directiveType);\n      if (ngDevMode && !directiveDef.standalone) {\n        throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(directiveType)} directive must be standalone in ` + `order to be applied to a dynamically-created component.`);\n      }\n      directivesToApply.push(directiveDef);\n    }\n  }\n  const rootTView = createTView(0 /* TViewType.Root */, null, getRootTViewTemplate(creationBindings, updateBindings), 1, varsToAllocate, directivesToApply, null, null, null, [tAttributes], null);\n  return rootTView;\n}\nfunction getRootTViewTemplate(creationBindings, updateBindings) {\n  if (!creationBindings && !updateBindings) {\n    return null;\n  }\n  return flags => {\n    if (flags & 1 /* RenderFlags.Create */ && creationBindings) {\n      for (const binding of creationBindings) {\n        binding.create();\n      }\n    }\n    if (flags & 2 /* RenderFlags.Update */ && updateBindings) {\n      for (const binding of updateBindings) {\n        binding.update();\n      }\n    }\n  };\n}\nfunction isInputBinding(binding) {\n  const kind = binding[BINDING].kind;\n  return kind === 'input' || kind === 'twoWay';\n}\n/**\r\n * Represents an instance of a Component created via a {@link ComponentFactory}.\r\n *\r\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\r\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\r\n * method.\r\n *\r\n */\nclass ComponentRef extends ComponentRef$1 {\n  _rootLView;\n  _hasInputBindings;\n  instance;\n  hostView;\n  changeDetectorRef;\n  componentType;\n  location;\n  previousInputValues = null;\n  _tNode;\n  constructor(componentType, _rootLView, _hasInputBindings) {\n    super();\n    this._rootLView = _rootLView;\n    this._hasInputBindings = _hasInputBindings;\n    this._tNode = getTNode(_rootLView[TVIEW], HEADER_OFFSET);\n    this.location = createElementRef(this._tNode, _rootLView);\n    this.instance = getComponentLViewByIndex(this._tNode.index, _rootLView)[CONTEXT];\n    this.hostView = this.changeDetectorRef = new ViewRef(_rootLView, undefined /* _cdRefInjectingView */);\n    this.componentType = componentType;\n  }\n  setInput(name, value) {\n    if (this._hasInputBindings && ngDevMode) {\n      throw new RuntimeError(317 /* RuntimeErrorCode.INVALID_SET_INPUT_CALL */, 'Cannot call `setInput` on a component that is using the `inputBinding` or `twoWayBinding` functions.');\n    }\n    const tNode = this._tNode;\n    this.previousInputValues ??= new Map();\n    // Do not set the input if it is the same as the last value\n    // This behavior matches `bindingUpdated` when binding inputs in templates.\n    if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {\n      return;\n    }\n    const lView = this._rootLView;\n    const hasSetInput = setAllInputsForProperty(tNode, lView[TVIEW], lView, name, value);\n    this.previousInputValues.set(name, value);\n    const childComponentLView = getComponentLViewByIndex(tNode.index, lView);\n    markViewDirty(childComponentLView, 1 /* NotificationSource.SetInput */);\n    if (ngDevMode && !hasSetInput) {\n      const cmpNameForError = stringifyForError(this.componentType);\n      let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n      message += `Make sure that the '${name}' property is declared as an input using the @Input() decorator or the input() function.`;\n      reportUnknownPropertyError(message);\n    }\n  }\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n  destroy() {\n    this.hostView.destroy();\n  }\n  onDestroy(callback) {\n    this.hostView.onDestroy(callback);\n  }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n  const projection = tNode.projection = [];\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null && nodesforSlot.length ? Array.from(nodesforSlot) : null);\n  }\n}\n\n/**\r\n * Represents a container where one or more views can be attached to a component.\r\n *\r\n * Can contain *host views* (created by instantiating a\r\n * component with the `createComponent()` method), and *embedded views*\r\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\r\n *\r\n * A view container instance can contain other view containers,\r\n * creating a view hierarchy.\r\n *\r\n * @usageNotes\r\n *\r\n * The example below demonstrates how the `createComponent` function can be used\r\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\r\n * so that it gets included into change detection cycles.\r\n *\r\n * Note: the example uses standalone components, but the function can also be used for\r\n * non-standalone components (declared in an NgModule) as well.\r\n *\r\n * ```angular-ts\r\n * @Component({\r\n *   standalone: true,\r\n *   selector: 'dynamic',\r\n *   template: `<span>This is a content of a dynamic component.</span>`,\r\n * })\r\n * class DynamicComponent {\r\n *   vcr = inject(ViewContainerRef);\r\n * }\r\n *\r\n * @Component({\r\n *   standalone: true,\r\n *   selector: 'app',\r\n *   template: `<main>Hi! This is the main content.</main>`,\r\n * })\r\n * class AppComponent {\r\n *   vcr = inject(ViewContainerRef);\r\n *\r\n *   ngAfterViewInit() {\r\n *     const compRef = this.vcr.createComponent(DynamicComponent);\r\n *     compRef.changeDetectorRef.detectChanges();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @see {@link ComponentRef}\r\n * @see {@link EmbeddedViewRef}\r\n *\r\n * @publicApi\r\n */\nclass ViewContainerRef {\n  /**\r\n   * @internal\r\n   * @nocollapse\r\n   */\n  static __NG_ELEMENT_ID__ = injectViewContainerRef;\n}\n/**\r\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\r\n * already exists, retrieves the existing ViewContainerRef.\r\n *\r\n * @returns The ViewContainerRef instance to use\r\n */\nfunction injectViewContainerRef() {\n  const previousTNode = getCurrentTNode();\n  return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  _lContainer;\n  _hostTNode;\n  _hostLView;\n  constructor(_lContainer, _hostTNode, _hostLView) {\n    super();\n    this._lContainer = _lContainer;\n    this._hostTNode = _hostTNode;\n    this._hostLView = _hostLView;\n  }\n  get element() {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n  get injector() {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n  /** @deprecated No replacement */\n  get parentInjector() {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n  clear() {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n  get(index) {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n  get length() {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  createEmbeddedView(templateRef, context, indexOrOptions) {\n    let index;\n    let injector;\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);\n    const viewRef = templateRef.createEmbeddedViewImpl(context || {}, injector, dehydratedView);\n    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return viewRef;\n  }\n  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector, directives, bindings) {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index;\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + \"which to insert the new component's host view into this container)\");\n      }\n      index = indexOrOptions;\n    } else {\n      if (ngDevMode) {\n        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);\n        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + \"and a number (representing an index at which to insert the new component's \" + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = indexOrOptions || {};\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n      directives = options.directives;\n      bindings = options.bindings;\n    }\n    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));\n    const contextInjector = injector || this.parentInjector;\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && componentFactory.ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n    const componentDef = getComponentDef(componentFactory.componentType ?? {});\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);\n    const rNode = dehydratedView?.firstChild ?? null;\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector, directives, bindings);\n    this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return componentRef;\n  }\n  insert(viewRef, index) {\n    return this.insertImpl(viewRef, index, true);\n  }\n  insertImpl(viewRef, index, addToDOM) {\n    const lView = viewRef._lView;\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n      const prevIdx = this.indexOf(viewRef);\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT];\n        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);\n    viewRef.attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n    return viewRef;\n  }\n  move(viewRef, newIndex) {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n  indexOf(viewRef) {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n  remove(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n  detach(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new ViewRef(view) : null;\n  }\n  _adjustIndex(index, shift = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\nfunction getViewRefs(lContainer) {\n  return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);\n}\n/**\r\n * Creates a ViewContainerRef and stores it on the injector.\r\n *\r\n * @param hostTNode The node that is requesting a ViewContainerRef\r\n * @param hostLView The view to which the node belongs\r\n * @returns The ViewContainerRef instance to use\r\n */\nfunction createContainerRef(hostTNode, hostLView) {\n  ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  let lContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    // An LContainer anchor can not be `null`, but we set it here temporarily\n    // and update to the actual value later in this function (see\n    // `_locateOrCreateAnchorNode`).\n    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);\n    hostLView[hostTNode.index] = lContainer;\n    addToEndOfViewTree(hostLView, lContainer);\n  }\n  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n/**\r\n * Creates and inserts a comment node that acts as an anchor for a view container.\r\n *\r\n * If the host is a regular element, we have to insert a comment node manually which will\r\n * be used as an anchor when inserting elements. In this specific case we use low-level DOM\r\n * manipulation to insert it.\r\n */\nfunction insertAnchorNode(hostLView, hostTNode) {\n  const renderer = hostLView[RENDERER];\n  const commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n  const hostNative = getNativeByTNode(hostTNode, hostLView);\n  const parentOfHostNative = renderer.parentNode(hostNative);\n  nativeInsertBefore(renderer, parentOfHostNative, commentNode, renderer.nextSibling(hostNative), false);\n  return commentNode;\n}\nlet _locateOrCreateAnchorNode = createAnchorNode;\nlet _populateDehydratedViewsInLContainer = () => false; // noop by default\n/**\r\n * Looks up dehydrated views that belong to a given LContainer and populates\r\n * this information into the `LContainer[DEHYDRATED_VIEWS]` slot. When running\r\n * in client-only mode, this function is a noop.\r\n *\r\n * @param lContainer LContainer that should be populated.\r\n * @param tNode Corresponding TNode.\r\n * @param hostLView LView that hosts LContainer.\r\n * @returns a boolean flag that indicates whether a populating operation\r\n *   was successful. The operation might be unsuccessful in case is has completed\r\n *   previously, we are rendering in client-only mode or this content is located\r\n *   in a skip hydration section.\r\n */\nfunction populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {\n  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);\n}\n/**\r\n * Regular creation mode: an anchor is created and\r\n * assigned to the `lContainer[NATIVE]` slot.\r\n */\nfunction createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n  // We already have a native element (anchor) set, return.\n  if (lContainer[NATIVE]) return;\n  let commentNode;\n  // If the host is an element container, the native host element is guaranteed to be a\n  // comment and we can reuse that comment as anchor element for the new LContainer.\n  // The comment node in question is already part of the DOM structure so we don't need to append\n  // it again.\n  if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n    commentNode = unwrapRNode(slotValue);\n  } else {\n    commentNode = insertAnchorNode(hostLView, hostTNode);\n  }\n  lContainer[NATIVE] = commentNode;\n}\n/**\r\n * Hydration logic that looks up all dehydrated views in this container\r\n * and puts them into `lContainer[DEHYDRATED_VIEWS]` slot.\r\n *\r\n * @returns a boolean flag that indicates whether a populating operation\r\n *   was successful. The operation might be unsuccessful in case is has completed\r\n *   previously, we are rendering in client-only mode or this content is located\r\n *   in a skip hydration section.\r\n */\nfunction populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {\n  // We already have a native element (anchor) set and the process\n  // of finding dehydrated views happened (so the `lContainer[DEHYDRATED_VIEWS]`\n  // is not null), exit early.\n  if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {\n    return true;\n  }\n  const hydrationInfo = hostLView[HYDRATION];\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock(tNode) || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return false;\n  }\n  // Hydration mode, looking up an anchor node and dehydrated views in DOM.\n  const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);\n  const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];\n  ngDevMode && assertDefined(serializedViews, 'Unexpected state: no hydration info available for a given TNode, ' + 'which represents a view container.');\n  const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);\n  if (ngDevMode) {\n    validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);\n    // Do not throw in case this node is already claimed (thus `false` as a second\n    // argument). If this container is created based on an `<ng-template>`, the comment\n    // node would be already claimed from the `template` instruction. If an element acts\n    // as an anchor (e.g. <div #vcRef>), a separate comment node would be created/located,\n    // so we need to claim it here.\n    markRNodeAsClaimedByHydration(commentNode, false);\n  }\n  lContainer[NATIVE] = commentNode;\n  lContainer[DEHYDRATED_VIEWS] = dehydratedViews;\n  return true;\n}\nfunction locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n  if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {\n    // Populating dehydrated views operation returned `false`, which indicates\n    // that the logic was running in client-only mode, this an anchor comment\n    // node should be created for this container.\n    createAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  }\n}\nfunction enableLocateOrCreateContainerRefImpl() {\n  _locateOrCreateAnchorNode = locateOrCreateAnchorNode;\n  _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;\n}\nclass LQuery_ {\n  queryList;\n  matches = null;\n  constructor(queryList) {\n    this.queryList = queryList;\n  }\n  clone() {\n    return new LQuery_(this.queryList);\n  }\n  setDirty() {\n    this.queryList.setDirty();\n  }\n}\nclass LQueries_ {\n  queries;\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  createEmbeddedView(tView) {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries = [];\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n      return new LQueries_(viewLQueries);\n    }\n    return null;\n  }\n  insertView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  detachView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  finishViewCreation(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  dirtyQueriesWithMatches(tView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\nclass TQueryMetadata_ {\n  flags;\n  read;\n  predicate;\n  constructor(predicate, flags, read = null) {\n    this.flags = flags;\n    this.read = read;\n    // Compiler might not be able to pre-optimize and split multiple selectors.\n    if (typeof predicate === 'string') {\n      this.predicate = splitQueryMultiSelectors(predicate);\n    } else {\n      this.predicate = predicate;\n    }\n  }\n}\nclass TQueries_ {\n  queries;\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  elementStart(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode) {\n    let queriesForTemplateRef = null;\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n  template(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n  getByIndex(index) {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n  get length() {\n    return this.queries.length;\n  }\n  track(tquery) {\n    this.queries.push(tquery);\n  }\n}\nclass TQuery_ {\n  metadata;\n  matches = null;\n  indexInDeclarationView = -1;\n  crossesNgTemplate = false;\n  /**\r\n   * A node index on which a query was declared (-1 for view queries and ones inherited from the\r\n   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\r\n   * when to apply content queries to elements in a template.\r\n   */\n  _declarationNodeIndex;\n  /**\r\n   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\r\n   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\r\n   * elements in a template.\r\n   */\n  _appliesToNextNode = true;\n  constructor(metadata, nodeIndex = -1) {\n    this.metadata = metadata;\n    this._declarationNodeIndex = nodeIndex;\n  }\n  elementStart(tView, tNode) {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n  template(tView, tNode) {\n    this.elementStart(tView, tNode);\n  }\n  embeddedTView(tNode, childQueryIndex) {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n  isApplyingToNode(tNode) {\n    if (this._appliesToNextNode && (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && parent.type & 8 /* TNodeType.ElementContainer */ && parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n  matchTNode(tView, tNode) {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if (predicate === TemplateRef) {\n        if (tNode.type & 4 /* TNodeType.Container */) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4 /* TNodeType.Container */) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n  addMatch(tNodeIdx, matchIdx) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n/**\r\n * Iterates over local names for a given node and returns directive index\r\n * (or -1 if a local name points to an element).\r\n *\r\n * @param tNode static data of a node to check\r\n * @param selector selector to match\r\n * @returns directive index, -1 or null if a selector didn't match any of the local names\r\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1];\n      }\n    }\n  }\n  return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n  }\n}\nfunction createSpecialToken(lView, tNode, read) {\n  if (read === ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    return createContainerRef(tNode, lView);\n  } else {\n    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n  }\n}\n/**\r\n * A helper function that creates query results for a given view. This function is meant to do the\r\n * processing once and only once for a given view instance (a set of results for a given view\r\n * doesn't change).\r\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n  const lQuery = lView[QUERIES].queries[queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result = [];\n    for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx];\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n  return lQuery.matches;\n}\n/**\r\n * A helper function that collects (already materialized) query results from a tree of views,\r\n * starting with a provided LView.\r\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n  const tQuery = tView.queries.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2]);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n        const declarationLContainer = lView[-tNodeIdx];\n        ngDevMode && assertLContainer(declarationLContainer);\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\nfunction loadQueryInternal(lView, queryIndex) {\n  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n  return lView[QUERIES].queries[queryIndex].queryList;\n}\n/**\r\n * Creates a new instance of LQuery and returns its index in the collection of LQuery objects.\r\n *\r\n * @returns index in the collection of LQuery objects\r\n */\nfunction createLQuery(tView, lView, flags) {\n  const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n  const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;\n  return lQueries.push(new LQuery_(queryList)) - 1;\n}\nfunction createViewQuery(predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticViewQueries = true;\n    }\n  }\n  return createLQuery(tView, getLView(), flags);\n}\nfunction createContentQuery(directiveIndex, predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode();\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticContentQueries = true;\n    }\n  }\n  return createLQuery(tView, getLView(), flags);\n}\n/** Splits multiple selectors in the locator. */\nfunction splitQueryMultiSelectors(locator) {\n  return locator.split(',').map(s => s.trim());\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n  }\n}\nfunction getTQuery(tView, index) {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries.getByIndex(index);\n}\n/**\r\n * A helper function collecting results from all the views where a given query was active.\r\n * @param lView\r\n * @param queryIndex\r\n */\nfunction getQueryResults(lView, queryIndex) {\n  const tView = lView[TVIEW];\n  const tQuery = getTQuery(tView, queryIndex);\n  return tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);\n}\n\n/**\r\n * A signal factory function in charge of creating a new computed signal capturing query\r\n * results. This centralized creation function is used by all types of queries (child / children,\r\n * required / optional).\r\n *\r\n * @param firstOnly indicates if all or only the first result should be returned\r\n * @param required indicates if at least one result is required\r\n * @returns a read-only signal with query results\r\n */\nfunction createQuerySignalFn(firstOnly, required, opts) {\n  let node;\n  const signalFn = createComputed(() => {\n    // A dedicated signal that increments its value every time a query changes its dirty status. By\n    // using this signal we can implement a query as computed and avoid creation of a specialized\n    // reactive node type. Please note that a query gets marked dirty under the following\n    // circumstances:\n    // - a view (where a query is active) finished its first creation pass;\n    // - a new view is inserted / deleted and it impacts query results.\n    node._dirtyCounter();\n    const value = refreshSignalQuery(node, firstOnly);\n    if (required && value === undefined) {\n      throw new RuntimeError(-951 /* RuntimeErrorCode.REQUIRED_QUERY_NO_VALUE */, ngDevMode && 'Child query result is required but no value is available.');\n    }\n    return value;\n  });\n  node = signalFn[SIGNAL];\n  node._dirtyCounter = signal(0);\n  node._flatValue = undefined;\n  if (ngDevMode) {\n    signalFn.toString = () => `[Query Signal]`;\n    node.debugName = opts?.debugName;\n  }\n  return signalFn;\n}\nfunction createSingleResultOptionalQuerySignalFn(opts) {\n  return createQuerySignalFn(/* firstOnly */true, /* required */false, opts);\n}\nfunction createSingleResultRequiredQuerySignalFn(opts) {\n  return createQuerySignalFn(/* firstOnly */true, /* required */true, opts);\n}\nfunction createMultiResultQuerySignalFn(opts) {\n  return createQuerySignalFn(/* firstOnly */false, /* required */false, opts);\n}\nfunction bindQueryToSignal(target, queryIndex) {\n  const node = target[SIGNAL];\n  node._lView = getLView();\n  node._queryIndex = queryIndex;\n  node._queryList = loadQueryInternal(node._lView, queryIndex);\n  node._queryList.onDirty(() => node._dirtyCounter.update(v => v + 1));\n}\nfunction refreshSignalQuery(node, firstOnly) {\n  const lView = node._lView;\n  const queryIndex = node._queryIndex;\n  // There are 2 conditions under which we want to return \"empty\" results instead of the ones\n  // collected by a query:\n  //\n  // 1) a given query wasn't created yet (this is a period of time between the directive creation\n  // and execution of the query creation function) - in this case a query doesn't exist yet and we\n  // don't have any results to return.\n  //\n  // 2) we are in the process of constructing a view (the first\n  // creation pass didn't finish) and a query might have partial results, but we don't want to\n  // return those - instead we do delay results collection until all nodes had a chance of matching\n  // and we can present consistent, \"atomic\" (on a view level) results.\n  if (lView === undefined || queryIndex === undefined || lView[FLAGS] & 4 /* LViewFlags.CreationMode */) {\n    return firstOnly ? undefined : EMPTY_ARRAY;\n  }\n  const queryList = loadQueryInternal(lView, queryIndex);\n  const results = getQueryResults(lView, queryIndex);\n  queryList.reset(results, unwrapElementRef);\n  if (firstOnly) {\n    return queryList.first;\n  } else {\n    // TODO: remove access to the private _changesDetected field by abstracting / removing usage of\n    // QueryList in the signal-based queries (perf follow-up)\n    const resultChanged = queryList._changesDetected;\n    if (resultChanged || node._flatValue === undefined) {\n      return node._flatValue = queryList.toArray();\n    }\n    return node._flatValue;\n  }\n}\n\n/**\r\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\r\n *\r\n * Example:\r\n * ```ts\r\n * @Component({\r\n *   selector: 'my-comp',\r\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\r\n * })\r\n * class MyComponent{\r\n * }\r\n *\r\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\r\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\r\n *\r\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\r\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\r\n *\r\n * // Use browser's `fetch()` function as the default resource resolution strategy.\r\n * resolveComponentResources(fetch).then(() => {\r\n *   // After resolution all URLs have been converted into `template` strings.\r\n *   renderComponent(MyComponent);\r\n * });\r\n *\r\n * ```\r\n *\r\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\r\n * to call this method outside JIT mode.\r\n *\r\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\r\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\r\n */\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = [];\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map();\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n    return promise;\n  }\n  componentResourceResolutionQueue.forEach((component, type) => {\n    const promises = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n    const styles = typeof component.styles === 'string' ? [component.styles] : component.styles || [];\n    component.styles = styles;\n    if (component.styleUrl && component.styleUrls?.length) {\n      throw new Error('@Component cannot define both `styleUrl` and `styleUrls`. ' + 'Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple');\n    } else if (component.styleUrls?.length) {\n      const styleOffset = component.styles.length;\n      const styleUrls = component.styleUrls;\n      component.styleUrls.forEach((styleUrl, index) => {\n        styles.push(''); // pre-allocate array.\n        promises.push(cachedResourceResolve(styleUrl).then(style => {\n          styles[styleOffset + index] = style;\n          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n          if (styleUrls.length == 0) {\n            component.styleUrls = undefined;\n          }\n        }));\n      });\n    } else if (component.styleUrl) {\n      promises.push(cachedResourceResolve(component.styleUrl).then(style => {\n        styles.push(style);\n        component.styleUrl = undefined;\n      }));\n    }\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length || component.styleUrl);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n\n/**\r\n * Map of module-id to the corresponding NgModule.\r\n */\nconst modules = new Map();\n/**\r\n * Whether to check for duplicate NgModule registrations.\r\n *\r\n * This can be disabled for testing.\r\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\r\n * Adds the given NgModule type to Angular's NgModule registry.\r\n *\r\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\r\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\r\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\r\n * fully resolved when it's registered.\r\n *\r\n * @codeGenApi\r\n */\nfunction registerNgModuleType(ngModuleType, id) {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\nfunction getRegisteredNgModuleType(id) {\n  return modules.get(id);\n}\n/**\r\n * Control whether the NgModule registration system enforces that each NgModule type registered has\r\n * a unique id.\r\n *\r\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\r\n * Angular's current API.\r\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\r\n * Validation function invoked at runtime for each binding that might potentially\r\n * represent a security-sensitive attribute of an <iframe>.\r\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\r\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\r\n * of such attributes.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  const element = getNativeByTNode(tNode, lView);\n  // Restrict any dynamic bindings of security-sensitive attributes/properties\n  // on an <iframe> for security reasons.\n  if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n    const iframe = element;\n    // Unset previously applied `src` and `srcdoc` if we come across a situation when\n    // a security-sensitive attribute is set later via an attribute/property binding.\n    iframe.src = '';\n    iframe.srcdoc = trustedHTMLFromString('');\n    // Also remove the <iframe> from the document.\n    nativeRemoveNode(lView[RENDERER], iframe);\n    const errorMessage = ngDevMode && `Angular has detected that the \\`${attrName}\\` was applied ` + `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` + `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` + `as a static attribute only. \\n` + `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` + `in a template or in host bindings section.`;\n    throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n  }\n  return attrValue;\n}\nconst markedFeatures = new Set();\n// tslint:disable:ban\n/**\r\n * A guarded `performance.mark` for feature marking.\r\n *\r\n * This method exists because while all supported browser and node.js version supported by Angular\r\n * support performance.mark API. This is not the case for other environments such as JSDOM and\r\n * Cloudflare workers.\r\n */\nfunction performanceMarkFeature(feature) {\n  if (markedFeatures.has(feature)) {\n    return;\n  }\n  markedFeatures.add(feature);\n  performance?.mark?.('mark_feature_usage', {\n    detail: {\n      feature\n    }\n  });\n}\n\n/**\r\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\r\n * Provides access to the `NgModule` instance and related objects.\r\n *\r\n * @publicApi\r\n */\nlet NgModuleRef$1 = class NgModuleRef {};\n/**\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\r\n * JIT mode. Angular provides APIs that accept NgModule classes directly (such as\r\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\r\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\r\n * using factory-based ones.\r\n */\nlet NgModuleFactory$1 = class NgModuleFactory {};\n\n/**\r\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\r\n *\r\n * @param ngModule NgModule class.\r\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\r\n *     not provided, `NullInjector` will be used instead.\r\n * @returns NgModuleRef that represents an NgModule instance.\r\n *\r\n * @publicApi\r\n */\nfunction createNgModule(ngModule, parentInjector) {\n  return new NgModuleRef(ngModule, parentInjector ?? null, []);\n}\n/**\r\n * The `createNgModule` function alias for backwards-compatibility.\r\n * Please avoid using it directly and use `createNgModule` instead.\r\n *\r\n * @deprecated Use `createNgModule` instead.\r\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n  ngModuleType;\n  _parent;\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents = [];\n  _r3Injector;\n  instance;\n  destroyCbs = [];\n  // When bootstrapping a module we have a dependency graph that looks like this:\n  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n  // circular dependency which will result in a runtime error, because the injector doesn't\n  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n  // and providing it, rather than letting the injector resolve it.\n  componentFactoryResolver = new ComponentFactoryResolver(this);\n  constructor(ngModuleType, _parent, additionalProviders, runInjectorInitializers = true) {\n    super();\n    this.ngModuleType = ngModuleType;\n    this._parent = _parent;\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }, ...additionalProviders], stringify(ngModuleType), new Set(['environment']));\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    if (runInjectorInitializers) {\n      this.resolveInjectorInitializers();\n    }\n  }\n  resolveInjectorInitializers() {\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(this.ngModuleType);\n  }\n  get injector() {\n    return this._r3Injector;\n  }\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs.push(callback);\n  }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n  moduleType;\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n  create(parentInjector) {\n    return new NgModuleRef(this.moduleType, parentInjector, []);\n  }\n}\nfunction createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {\n  return new NgModuleRef(moduleType, parentInjector, additionalProviders, false);\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n  injector;\n  componentFactoryResolver = new ComponentFactoryResolver(this);\n  instance = null;\n  constructor(config) {\n    super();\n    const injector = new R3Injector([...config.providers, {\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], config.parent || getNullInjector(), config.debugName, new Set(['environment']));\n    this.injector = injector;\n    if (config.runEnvironmentInitializers) {\n      injector.resolveInjectorInitializers();\n    }\n  }\n  destroy() {\n    this.injector.destroy();\n  }\n  onDestroy(callback) {\n    this.injector.onDestroy(callback);\n  }\n}\n/**\r\n * Create a new environment injector.\r\n *\r\n * @param providers An array of providers.\r\n * @param parent A parent environment injector.\r\n * @param debugName An optional name for this injector instance, which will be used in error\r\n *     messages.\r\n *\r\n * @publicApi\r\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n  const adapter = new EnvironmentNgModuleRefAdapter({\n    providers,\n    parent,\n    debugName,\n    runEnvironmentInitializers: true\n  });\n  return adapter.injector;\n}\n\n/**\r\n * A service used by the framework to create instances of standalone injectors. Those injectors are\r\n * created on demand in case of dynamic component instantiation and contain ambient providers\r\n * collected from the imports graph rooted at a given standalone component.\r\n */\nclass StandaloneService {\n  _injector;\n  cachedInjectors = new Map();\n  constructor(_injector) {\n    this._injector = _injector;\n  }\n  getOrCreateStandaloneInjector(componentDef) {\n    if (!componentDef.standalone) {\n      return null;\n    }\n    if (!this.cachedInjectors.has(componentDef)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;\n      this.cachedInjectors.set(componentDef, standaloneInjector);\n    }\n    return this.cachedInjectors.get(componentDef);\n  }\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: StandaloneService,\n    providedIn: 'environment',\n    factory: () => new StandaloneService(__inject(EnvironmentInjector))\n  });\n}\n\n/**\r\n * Create a component definition object.\r\n *\r\n *\r\n * # Example\r\n * ```ts\r\n * class MyComponent {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ɵcmp = defineComponent({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @codeGenApi\r\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    const baseDef = getNgDirectiveDef(componentDefinition);\n    const def = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null,\n      // assigned in noSideEffects\n      pipeDefs: null,\n      // assigned in noSideEffects\n      dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: baseDef.standalone ? parentInjector => {\n        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);\n      } : null,\n      getExternalStyles: null,\n      signals: componentDefinition.signals ?? false,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n      id: ''\n    };\n    // TODO: Do we still need/want this ?\n    if (baseDef.standalone) {\n      performanceMarkFeature('NgStandalone');\n    }\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */false);\n    def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */true);\n    def.id = getComponentId(def);\n    return def;\n  });\n}\nfunction extractDirectiveDef(type) {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n  return value !== null;\n}\n/**\r\n * @codeGenApi\r\n */\nfunction ɵɵdefineNgModule(def) {\n  return noSideEffects(() => {\n    const res = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null\n    };\n    return res;\n  });\n}\n/**\r\n * Converts binding objects from the `DirectiveDefinition` into more efficient\r\n * lookup dictionaries that are optimized for the framework runtime.\r\n *\r\n * This function converts inputs or output directive information into new objects\r\n * where the public name conveniently maps to the minified internal field name.\r\n *\r\n * For inputs, the input flags are additionally persisted into the new data structure,\r\n * so that those can be quickly retrieved when needed.\r\n *\r\n * e.g. for\r\n *\r\n * ```ts\r\n * class Comp {\r\n *   @Input()\r\n *   propName1: string;\r\n *\r\n *   @Input('publicName2')\r\n *   declaredPropName2: number;\r\n *\r\n *   inputSignal = input(3);\r\n * }\r\n * ```\r\n *\r\n * will be serialized as\r\n *\r\n * ```ts\r\n * {\r\n *   propName1: 'propName1',\r\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\r\n *   inputSignal: [InputFlags.SignalBased, 'inputSignal'],\r\n * }\r\n * ```\r\n *\r\n * which is than translated by the minifier as:\r\n *\r\n * ```ts\r\n * {\r\n *   minifiedPropName1: 'propName1',\r\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\r\n *   minifiedInputSignal: [InputFlags.SignalBased, 'inputSignal'],\r\n * }\r\n * ```\r\n *\r\n * becomes: (public name => minifiedName + isSignal if needed)\r\n *\r\n * ```ts\r\n * {\r\n *  'propName1': 'minifiedPropName1',\r\n *  'publicName2': 'minifiedPropName2',\r\n *  'inputSignal': ['minifiedInputSignal', InputFlags.SignalBased],\r\n * }\r\n * ```\r\n *\r\n * Optionally the function can take `declaredInputs` which will result\r\n * in: (public name => declared name)\r\n *\r\n * ```ts\r\n * {\r\n *  'propName1': 'propName1',\r\n *  'publicName2': 'declaredPropName2',\r\n *  'inputSignal': 'inputSignal',\r\n * }\r\n * ```\r\n *\r\n\r\n */\nfunction parseAndConvertInputsForDefinition(obj, declaredInputs) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      const value = obj[minifiedKey];\n      let publicName;\n      let declaredName;\n      let inputFlags;\n      let transform;\n      if (Array.isArray(value)) {\n        inputFlags = value[0];\n        publicName = value[1];\n        declaredName = value[2] ?? publicName; // declared name might not be set to save bytes.\n        transform = value[3] || null;\n      } else {\n        publicName = value;\n        declaredName = value;\n        inputFlags = InputFlags.None;\n        transform = null;\n      }\n      newLookup[publicName] = [minifiedKey, inputFlags, transform];\n      declaredInputs[publicName] = declaredName;\n    }\n  }\n  return newLookup;\n}\nfunction parseAndConvertOutputsForDefinition(obj) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      newLookup[obj[minifiedKey]] = minifiedKey;\n    }\n  }\n  return newLookup;\n}\n/**\r\n * Create a directive definition object.\r\n *\r\n * # Example\r\n * ```ts\r\n * class MyDirective {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ɵdir = ɵɵdefineDirective({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n    return def;\n  });\n}\n/**\r\n * Create a pipe definition object.\r\n *\r\n * # Example\r\n * ```ts\r\n * class MyPipe implements PipeTransform {\r\n *   // Generated by Angular Template Compiler\r\n *   static ɵpipe = definePipe({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @param pipeDef Pipe definition generated by the compiler\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdefinePipe(pipeDef) {\n  return {\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone ?? true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  };\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n  const declaredInputs = {};\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs: declaredInputs,\n    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone ?? true,\n    signals: directiveDefinition.signals === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    resolveHostDirectives: null,\n    hostDirectives: null,\n    inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),\n    outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),\n    debugInfo: null\n  };\n}\nfunction initFeatures(definition) {\n  definition.features?.forEach(fn => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, pipeDef) {\n  if (!dependencies) {\n    return null;\n  }\n  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\n  return () => (typeof dependencies === 'function' ? dependencies() : dependencies).map(dep => defExtractor(dep)).filter(nonNull);\n}\n/**\r\n * A map that contains the generated component IDs and type.\r\n */\nconst GENERATED_COMP_IDS = new Map();\n/**\r\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\r\n * algorithm.\r\n */\nfunction getComponentId(componentDef) {\n  let hash = 0;\n  // For components with i18n in templates, the `consts` array is generated by the compiler\n  // as a function. If client and server bundles were produced with different minification\n  // configurations, the serializable contents of the function body would be different on\n  // the client and on the server. This might result in different ids generated. To avoid this\n  // issue, we do not take the `consts` contents into account if it's a function.\n  // See https://github.com/angular/angular/issues/58713.\n  const componentDefConsts = typeof componentDef.consts === 'function' ? '' : componentDef.consts;\n  // We cannot rely solely on the component selector as the same selector can be used in different\n  // modules.\n  //\n  // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\n  // component styles has no sourcemaps and browsers do.\n  //\n  // Example:\n  // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\n  // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\n  const hashSelectors = [componentDef.selectors, componentDef.ngContentSelectors, componentDef.hostVars, componentDef.hostAttrs, componentDefConsts, componentDef.vars, componentDef.decls, componentDef.encapsulation, componentDef.standalone, componentDef.signals, componentDef.exportAs, JSON.stringify(componentDef.inputs), JSON.stringify(componentDef.outputs),\n  // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\n  // match in the server and browser bundles.\n  Object.getOwnPropertyNames(componentDef.type.prototype), !!componentDef.contentQueries, !!componentDef.viewQuery];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // If client and server bundles were produced with different minification configurations,\n    // the serializable contents of the function body would be different on the client and on\n    // the server. Ensure that we do not accidentally use functions in component id computation.\n    for (const item of hashSelectors) {\n      assertNotEqual(typeof item, 'function', 'Internal error: attempting to use a function in component id computation logic.');\n    }\n  }\n  for (const char of hashSelectors.join('|')) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n  const compId = 'c' + hash;\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && (\n  // Skip the check on the server since we can't guarantee the same component instance between\n  // requests. Note that we can't use DI to check if we're on the server, because the component\n  // hasn't been instantiated yet.\n  typeof ngServerMode === 'undefined' || !ngServerMode)) {\n    if (GENERATED_COMP_IDS.has(compId)) {\n      const previousCompDefType = GENERATED_COMP_IDS.get(compId);\n      if (previousCompDefType !== componentDef.type) {\n        console.warn(formatRuntimeError(-912 /* RuntimeErrorCode.COMPONENT_ID_COLLISION */, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));\n      }\n    } else {\n      GENERATED_COMP_IDS.set(compId, componentDef.type);\n    }\n  }\n  return compId;\n}\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\r\n * Merges the definition from a super class to a sub class.\r\n * @param definition The definition that is a SubClass of another directive of component\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain = [definition];\n  while (superType) {\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n        // Merge inputs and outputs\n        mergeInputsWithTransforms(definition, superDef);\n        fillProperties(definition.outputs, superDef.outputs);\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = definition.data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            feature(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\nfunction mergeInputsWithTransforms(target, source) {\n  for (const key in source.inputs) {\n    if (!source.inputs.hasOwnProperty(key)) {\n      continue;\n    }\n    if (target.inputs.hasOwnProperty(key)) {\n      continue;\n    }\n    const value = source.inputs[key];\n    if (value !== undefined) {\n      target.inputs[key] = value;\n      target.declaredInputs[key] = source.declaredInputs[key];\n    }\n  }\n}\n/**\r\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\r\n *\r\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\r\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\r\n * type.\r\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n  let hostVars = 0;\n  let hostAttrs = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = hostVars += def.hostVars;\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf, ctx) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n\n/**\r\n * Fields which exist on either directive or component definitions, and need to be copied from\r\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\r\n */\nconst COPY_DIRECTIVE_FIELDS = [\n// The child class should use the providers of its parent.\n'providersResolver'\n// Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n// as inputs, outputs, and host binding functions.\n];\n/**\r\n * Fields which exist only on component definitions, and need to be copied from parent to child\r\n * classes by the `ɵɵCopyDefinitionFeature`.\r\n *\r\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\r\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\r\n */\nconst COPY_COMPONENT_FIELDS = [\n// The child class should use the template function of its parent, including all template\n// semantics.\n'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors',\n// The child class should use the CSS styles of its parent, including all styling semantics.\n'styles', 'encapsulation',\n// The child class should be checked by the runtime in the same way as its parent.\n'schemas'];\n/**\r\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\r\n * definition.\r\n *\r\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\r\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\r\n * generates a skeleton definition on the child class, and applies this feature.\r\n *\r\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\r\n * including things like the component template function.\r\n *\r\n * @param definition The definition of a child class which inherits from a parent class with its\r\n * own definition.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let superDef = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir;\n  }\n  // Needed because `definition` fields are readonly.\n  const defAny = definition;\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n\n/**\r\n * This feature adds the host directives behavior to a directive definition by patching a\r\n * function onto it. The expectation is that the runtime will invoke the function during\r\n * directive matching.\r\n *\r\n * For example:\r\n * ```ts\r\n * class ComponentWithHostDirective {\r\n *   static ɵcmp = defineComponent({\r\n *    type: ComponentWithHostDirective,\r\n *    features: [ɵɵHostDirectivesFeature([\r\n *      SimpleHostDirective,\r\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\r\n *    ])]\r\n *  });\r\n * }\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n  const feature = definition => {\n    const isEager = Array.isArray(rawHostDirectives);\n    if (definition.hostDirectives === null) {\n      definition.resolveHostDirectives = resolveHostDirectives;\n      definition.hostDirectives = isEager ? rawHostDirectives.map(createHostDirectiveDef) : [rawHostDirectives];\n    } else if (isEager) {\n      definition.hostDirectives.unshift(...rawHostDirectives.map(createHostDirectiveDef));\n    } else {\n      definition.hostDirectives.unshift(rawHostDirectives);\n    }\n  };\n  feature.ngInherit = true;\n  return feature;\n}\n/**\r\n * Function that will be patched onto a definition to enable host directives. It is intended to\r\n * be called once during directive matching and is the same for all definitions.\r\n * @param matches Directives resolved through selector matching.\r\n */\nfunction resolveHostDirectives(matches) {\n  const allDirectiveDefs = [];\n  let hasComponent = false;\n  let hostDirectiveDefs = null;\n  let hostDirectiveRanges = null;\n  // Components are inserted at the front of the matches array so that their lifecycle\n  // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n  // compatibility. This logic doesn't make sense with host directives, because it\n  // would allow the host directives to undo any overrides the host may have made.\n  // To handle this case, the host directives of components are inserted at the beginning\n  // of the array, followed by the component. As such, the insertion order is as follows:\n  // 1. Host directives belonging to the selector-matched component.\n  // 2. Selector-matched component.\n  // 3. Host directives belonging to selector-matched directives.\n  // 4. Selector-matched dir\n  for (let i = 0; i < matches.length; i++) {\n    const def = matches[i];\n    if (def.hostDirectives !== null) {\n      const start = allDirectiveDefs.length;\n      hostDirectiveDefs ??= new Map();\n      hostDirectiveRanges ??= new Map();\n      // TODO(pk): probably could return matches instead of taking in an array to fill in?\n      findHostDirectiveDefs(def, allDirectiveDefs, hostDirectiveDefs);\n      // Note that these indexes are within the offset by `directiveStart`. We can't do the\n      // offsetting here, because `directiveStart` hasn't been initialized on the TNode yet.\n      hostDirectiveRanges.set(def, [start, allDirectiveDefs.length - 1]);\n    }\n    // Component definition is always first and needs to be\n    // pushed early to maintain the correct ordering.\n    if (i === 0 && isComponentDef(def)) {\n      hasComponent = true;\n      allDirectiveDefs.push(def);\n    }\n  }\n  for (let i = hasComponent ? 1 : 0; i < matches.length; i++) {\n    allDirectiveDefs.push(matches[i]);\n  }\n  return [allDirectiveDefs, hostDirectiveDefs, hostDirectiveRanges];\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n  if (currentDef.hostDirectives !== null) {\n    for (const configOrFn of currentDef.hostDirectives) {\n      if (typeof configOrFn === 'function') {\n        const resolved = configOrFn();\n        for (const config of resolved) {\n          trackHostDirectiveDef(createHostDirectiveDef(config), matchedDefs, hostDirectiveDefs);\n        }\n      } else {\n        trackHostDirectiveDef(configOrFn, matchedDefs, hostDirectiveDefs);\n      }\n    }\n  }\n}\n/** Tracks a single host directive during directive matching. */\nfunction trackHostDirectiveDef(def, matchedDefs, hostDirectiveDefs) {\n  const hostDirectiveDef = getDirectiveDef(def.directive);\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    validateHostDirective(def, hostDirectiveDef);\n  }\n  // We need to patch the `declaredInputs` so that\n  // `ngOnChanges` can map the properties correctly.\n  patchDeclaredInputs(hostDirectiveDef.declaredInputs, def.inputs);\n  // Host directives execute before the host so that its host bindings can be overwritten.\n  findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n  hostDirectiveDefs.set(hostDirectiveDef, def);\n  matchedDefs.push(hostDirectiveDef);\n}\n/** Creates a `HostDirectiveDef` from a used-defined host directive configuration. */\nfunction createHostDirectiveDef(config) {\n  return typeof config === 'function' ? {\n    directive: resolveForwardRef(config),\n    inputs: EMPTY_OBJ,\n    outputs: EMPTY_OBJ\n  } : {\n    directive: resolveForwardRef(config.directive),\n    inputs: bindingArrayToMap(config.inputs),\n    outputs: bindingArrayToMap(config.outputs)\n  };\n}\n/**\r\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\r\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\r\n */\nfunction bindingArrayToMap(bindings) {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n  const result = {};\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n  return result;\n}\n/**\r\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\r\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\r\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\r\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\r\n * minification.\r\n *\r\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\r\n * definition is declared. When a property is written to the directive instance, the\r\n * `NgOnChangesFeature` will try to remap the property name being written to using the\r\n * `declaredInputs`.\r\n *\r\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\r\n * won't contain the new alias that the input is available under. This function addresses the\r\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\r\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\r\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\r\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\r\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {\n        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n      }\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n/**\r\n * Verifies that the host directive has been configured correctly.\r\n * @param hostDirectiveConfig Host directive configuration object.\r\n * @param directiveDef Directive definition of the host directive.\r\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef) {\n  const type = hostDirectiveConfig.directive;\n  if (directiveDef === null) {\n    if (getComponentDef(type) !== null) {\n      throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n    }\n    throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` + `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n  }\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n  }\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\r\n * Checks that the host directive inputs/outputs configuration is valid.\r\n * @param bindingType Kind of binding that is being validated. Used in the error message.\r\n * @param def Definition of the host directive that is being validated against.\r\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\r\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n  const className = def.type.name;\n  const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n      }\n      const remappedPublicName = hostDirectiveBindings[publicName];\n      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {\n        throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n      }\n    }\n  }\n}\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrs, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, attrs || null);\n  if (getBindingsEnabled()) {\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), findDirectiveDefMatches);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  registerPostOrderHooks(tView, tNode);\n  const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts, null /* ssrId */);\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n  return tNode;\n}\n/**\r\n * Creates an LContainer for an embedded view.\r\n *\r\n * @param declarationLView LView in which the template was declared.\r\n * @param declarationTView TView in which the template wa declared.\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n */\nfunction declareTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, flags, localRefsIndex, localRefExtractor) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = declarationTView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, declarationTView, declarationLView, templateFn, decls, vars, tagName, attrs, localRefsIndex) : declarationTView.data[adjustedIndex];\n  if (flags) {\n    tNode.flags |= flags;\n  }\n  setCurrentTNode(tNode, false);\n  const comment = _locateOrCreateContainerAnchor(declarationTView, declarationLView, tNode, index);\n  if (wasLastNodeCreated()) {\n    appendChild(declarationTView, declarationLView, comment, tNode);\n  }\n  attachPatchData(comment, declarationLView);\n  const lContainer = createLContainer(comment, declarationLView, comment, tNode);\n  declarationLView[adjustedIndex] = lContainer;\n  addToEndOfViewTree(declarationLView, lContainer);\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(declarationTView, declarationLView, tNode);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\n  }\n  return tNode;\n}\n/**\r\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\r\n *\r\n * <ng-template #foo>\r\n *    <div></div>\r\n * </ng-template>\r\n *\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, undefined, localRefsIndex, localRefExtractor);\n  return ɵɵtemplate;\n}\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\n/**\r\n * Regular creation mode for LContainers and their anchor (comment) nodes.\r\n */\nfunction createContainerAnchorImpl(tView, lView, tNode, index) {\n  lastNodeWasCreated(true);\n  return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n}\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode for LContainers and their\r\n * anchor (comment) nodes.\r\n */\nfunction locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode) || isDisconnectedNode$1(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n  const ssrId = hydrationInfo?.data[TEMPLATES]?.[index] ?? null;\n  // Apply `ssrId` value to the underlying TView if it was not previously set.\n  //\n  // There might be situations when the same component is present in a template\n  // multiple times and some instances are opted-out of using hydration via\n  // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\n  // the `ssrId` might be `null` (if the first component is opted-out of hydration).\n  // The code below makes sure that the `ssrId` is applied to the TView if it's still\n  // `null` and verifies we never try to override it with a different value.\n  if (ssrId !== null && tNode.tView !== null) {\n    if (tNode.tView.ssrId === null) {\n      tNode.tView.ssrId = ssrId;\n    } else {\n      ngDevMode && assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\n    }\n  }\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createContainerAnchorImpl(tView, lView);\n  }\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\n  const comment = siblingAfter(viewContainerSize, currentRNode);\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n  return comment;\n}\nfunction enableLocateOrCreateContainerAnchorImpl() {\n  _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\n}\n\n/**\r\n * Describes the state of defer block dependency loading.\r\n */\nvar DeferDependenciesLoadingState;\n(function (DeferDependenciesLoadingState) {\n  /** Initial state, dependency loading is not yet triggered */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n  /** Dependency loading is in progress */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  /** Dependency loading has completed successfully */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"COMPLETE\"] = 2] = \"COMPLETE\";\n  /** Dependency loading has failed */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"FAILED\"] = 3] = \"FAILED\";\n})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));\n/** Slot index where `minimum` parameter value is stored. */\nconst MINIMUM_SLOT = 0;\n/** Slot index where `after` parameter value is stored. */\nconst LOADING_AFTER_SLOT = 1;\n/**\r\n * Describes the current state of this defer block instance.\r\n *\r\n * @publicApi\r\n */\nvar DeferBlockState;\n(function (DeferBlockState) {\n  /** The placeholder block content is rendered */\n  DeferBlockState[DeferBlockState[\"Placeholder\"] = 0] = \"Placeholder\";\n  /** The loading block content is rendered */\n  DeferBlockState[DeferBlockState[\"Loading\"] = 1] = \"Loading\";\n  /** The main content block content is rendered */\n  DeferBlockState[DeferBlockState[\"Complete\"] = 2] = \"Complete\";\n  /** The error block content is rendered */\n  DeferBlockState[DeferBlockState[\"Error\"] = 3] = \"Error\";\n})(DeferBlockState || (DeferBlockState = {}));\n/**\r\n * Describes the initial state of this defer block instance.\r\n *\r\n * Note: this state is internal only and *must* be represented\r\n * with a number lower than any value in the `DeferBlockState` enum.\r\n */\nvar DeferBlockInternalState;\n(function (DeferBlockInternalState) {\n  /** Initial state. Nothing is rendered yet. */\n  DeferBlockInternalState[DeferBlockInternalState[\"Initial\"] = -1] = \"Initial\";\n})(DeferBlockInternalState || (DeferBlockInternalState = {}));\nconst NEXT_DEFER_BLOCK_STATE = 0;\n// Note: it's *important* to keep the state in this slot, because this slot\n// is used by runtime logic to differentiate between LViews, LContainers and\n// other types (see `isLView` and `isLContainer` functions). In case of defer\n// blocks, this slot would always be a number.\nconst DEFER_BLOCK_STATE = 1;\nconst STATE_IS_FROZEN_UNTIL = 2;\nconst LOADING_AFTER_CLEANUP_FN = 3;\nconst TRIGGER_CLEANUP_FNS = 4;\nconst PREFETCH_TRIGGER_CLEANUP_FNS = 5;\nconst SSR_UNIQUE_ID = 6;\nconst SSR_BLOCK_STATE = 7;\nconst ON_COMPLETE_FNS = 8;\nconst HYDRATE_TRIGGER_CLEANUP_FNS = 9;\n/**\r\n * Options for configuring defer blocks behavior.\r\n * @publicApi\r\n */\nvar DeferBlockBehavior;\n(function (DeferBlockBehavior) {\n  /**\r\n   * Manual triggering mode for defer blocks. Provides control over when defer blocks render\r\n   * and which state they render.\r\n   */\n  DeferBlockBehavior[DeferBlockBehavior[\"Manual\"] = 0] = \"Manual\";\n  /**\r\n   * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.\r\n   * This is the default behavior in test environments.\r\n   */\n  DeferBlockBehavior[DeferBlockBehavior[\"Playthrough\"] = 1] = \"Playthrough\";\n})(DeferBlockBehavior || (DeferBlockBehavior = {}));\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Registers a cleanup function associated with a prefetching trigger\r\n * or a regular trigger of a defer block.\r\n */\nfunction storeTriggerCleanupFn(type, lDetails, cleanupFn) {\n  const key = getCleanupFnKeyByType(type);\n  if (lDetails[key] === null) {\n    lDetails[key] = [];\n  }\n  lDetails[key].push(cleanupFn);\n}\n/**\r\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\r\n */\nfunction invokeTriggerCleanupFns(type, lDetails) {\n  const key = getCleanupFnKeyByType(type);\n  const cleanupFns = lDetails[key];\n  if (cleanupFns !== null) {\n    for (const cleanupFn of cleanupFns) {\n      cleanupFn();\n    }\n    lDetails[key] = null;\n  }\n}\n/**\r\n * Invokes registered cleanup functions for prefetch, hydrate, and regular triggers.\r\n */\nfunction invokeAllTriggerCleanupFns(lDetails) {\n  invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n  invokeTriggerCleanupFns(0 /* TriggerType.Regular */, lDetails);\n  invokeTriggerCleanupFns(2 /* TriggerType.Hydrate */, lDetails);\n}\nfunction getCleanupFnKeyByType(type) {\n  let key = TRIGGER_CLEANUP_FNS;\n  if (type === 1 /* TriggerType.Prefetch */) {\n    key = PREFETCH_TRIGGER_CLEANUP_FNS;\n  } else if (type === 2 /* TriggerType.Hydrate */) {\n    key = HYDRATE_TRIGGER_CLEANUP_FNS;\n  }\n  return key;\n}\n\n/** Actions that are supported by the tracing framework. */\nvar TracingAction;\n(function (TracingAction) {\n  TracingAction[TracingAction[\"CHANGE_DETECTION\"] = 0] = \"CHANGE_DETECTION\";\n  TracingAction[TracingAction[\"AFTER_NEXT_RENDER\"] = 1] = \"AFTER_NEXT_RENDER\";\n})(TracingAction || (TracingAction = {}));\n/**\r\n * Injection token for a `TracingService`, optionally provided.\r\n */\nconst TracingService = new InjectionToken(ngDevMode ? 'TracingService' : '');\nconst SCHEDULE_IN_ROOT_ZONE_DEFAULT = false;\nclass EventEmitter_ extends Subject {\n  // tslint:disable-next-line:require-internal-with-underscore\n  __isAsync;\n  destroyRef = undefined;\n  pendingTasks = undefined;\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n    // Attempt to retrieve a `DestroyRef` and `PendingTasks` optionally.\n    // For backwards compatibility reasons, this cannot be required.\n    if (isInInjectionContext()) {\n      // `DestroyRef` is optional because it is not available in all contexts.\n      // But it is useful to properly complete the `EventEmitter` if used with `outputToObservable`\n      // when the component/directive is destroyed. (See `outputToObservable` for more details.)\n      this.destroyRef = inject(DestroyRef, {\n        optional: true\n      }) ?? undefined;\n      this.pendingTasks = inject(PendingTasksInternal, {\n        optional: true\n      }) ?? undefined;\n    }\n  }\n  emit(value) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      super.next(value);\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  subscribe(observerOrNext, error, complete) {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n    if (this.__isAsync) {\n      errorFn = this.wrapInTimeout(errorFn);\n      if (nextFn) {\n        nextFn = this.wrapInTimeout(nextFn);\n      }\n      if (completeFn) {\n        completeFn = this.wrapInTimeout(completeFn);\n      }\n    }\n    const sink = super.subscribe({\n      next: nextFn,\n      error: errorFn,\n      complete: completeFn\n    });\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n    return sink;\n  }\n  wrapInTimeout(fn) {\n    return value => {\n      const taskId = this.pendingTasks?.add();\n      setTimeout(() => {\n        try {\n          fn(value);\n        } finally {\n          if (taskId !== undefined) {\n            this.pendingTasks?.remove(taskId);\n          }\n        }\n      });\n    };\n  }\n}\n/**\r\n * @publicApi\r\n */\nconst EventEmitter = EventEmitter_;\n\n/**\r\n * Gets a scheduling function that runs the callback after the first of setTimeout and\r\n * requestAnimationFrame resolves.\r\n *\r\n * - `requestAnimationFrame` ensures that change detection runs ahead of a browser repaint.\r\n * This ensures that the create and update passes of a change detection always happen\r\n * in the same frame.\r\n * - When the browser is resource-starved, `rAF` can execute _before_ a `setTimeout` because\r\n * rendering is a very high priority process. This means that `setTimeout` cannot guarantee\r\n * same-frame create and update pass, when `setTimeout` is used to schedule the update phase.\r\n * - While `rAF` gives us the desirable same-frame updates, it has two limitations that\r\n * prevent it from being used alone. First, it does not run in background tabs, which would\r\n * prevent Angular from initializing an application when opened in a new tab (for example).\r\n * Second, repeated calls to requestAnimationFrame will execute at the refresh rate of the\r\n * hardware (~16ms for a 60Hz display). This would cause significant slowdown of tests that\r\n * are written with several updates and asserts in the form of \"update; await stable; assert;\".\r\n * - Both `setTimeout` and `rAF` are able to \"coalesce\" several events from a single user\r\n * interaction into a single change detection. Importantly, this reduces view tree traversals when\r\n * compared to an alternative timing mechanism like `queueMicrotask`, where change detection would\r\n * then be interleaves between each event.\r\n *\r\n * By running change detection after the first of `setTimeout` and `rAF` to execute, we get the\r\n * best of both worlds.\r\n *\r\n * @returns a function to cancel the scheduled callback\r\n */\nfunction scheduleCallbackWithRafRace(callback) {\n  let timeoutId;\n  let animationFrameId;\n  function cleanup() {\n    callback = noop;\n    try {\n      if (animationFrameId !== undefined && typeof cancelAnimationFrame === 'function') {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n    } catch {\n      // Clearing/canceling can fail in tests due to the timing of functions being patched and unpatched\n      // Just ignore the errors - we protect ourselves from this issue by also making the callback a no-op.\n    }\n  }\n  timeoutId = setTimeout(() => {\n    callback();\n    cleanup();\n  });\n  if (typeof requestAnimationFrame === 'function') {\n    animationFrameId = requestAnimationFrame(() => {\n      callback();\n      cleanup();\n    });\n  }\n  return () => cleanup();\n}\nfunction scheduleCallbackWithMicrotask(callback) {\n  queueMicrotask(() => callback());\n  return () => {\n    callback = noop;\n  };\n}\nclass AsyncStackTaggingZoneSpec {\n  createTask;\n  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {\n    this.name = 'asyncStackTagging for ' + namePrefix;\n    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\n  }\n  // ZoneSpec implementation below.\n  name;\n  onScheduleTask(delegate, _current, target, task) {\n    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n    return delegate.scheduleTask(target, task);\n  }\n  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {\n    let ret;\n    if (task.consoleTask) {\n      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n    } else {\n      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    }\n    return ret;\n  }\n}\nconst isAngularZoneProperty = 'isAngularZone';\nconst angularZoneInstanceIdProperty = isAngularZoneProperty + '_ID';\nlet ngZoneInstanceId = 0;\n/**\r\n * An injectable service for executing work inside or outside of the Angular zone.\r\n *\r\n * The most common use of this service is to optimize performance when starting a work consisting of\r\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\r\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\r\n * can reenter the Angular zone via {@link #run}.\r\n *\r\n * <!-- TODO: add/fix links to:\r\n *   - docs explaining zones and the use of zones in Angular and change-detection\r\n *   - link to runOutsideAngular/run (throughout this file!)\r\n *   -->\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```ts\r\n * import {Component, NgZone} from '@angular/core';\r\n *\r\n * @Component({\r\n *   selector: 'ng-zone-demo',\r\n *   template: `\r\n *     <h2>Demo: NgZone</h2>\r\n *\r\n *     <p>Progress: {{progress}}%</p>\r\n *     @if(progress >= 100) {\r\n *        <p>Done processing {{label}} of Angular zone!</p>\r\n *     }\r\n *\r\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\r\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\r\n *   `,\r\n * })\r\n * export class NgZoneDemo {\r\n *   progress: number = 0;\r\n *   label: string;\r\n *\r\n *   constructor(private _ngZone: NgZone) {}\r\n *\r\n *   // Loop inside the Angular zone\r\n *   // so the UI DOES refresh after each setTimeout cycle\r\n *   processWithinAngularZone() {\r\n *     this.label = 'inside';\r\n *     this.progress = 0;\r\n *     this._increaseProgress(() => console.log('Inside Done!'));\r\n *   }\r\n *\r\n *   // Loop outside of the Angular zone\r\n *   // so the UI DOES NOT refresh after each setTimeout cycle\r\n *   processOutsideOfAngularZone() {\r\n *     this.label = 'outside';\r\n *     this.progress = 0;\r\n *     this._ngZone.runOutsideAngular(() => {\r\n *       this._increaseProgress(() => {\r\n *         // reenter the Angular zone and display done\r\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\r\n *       });\r\n *     });\r\n *   }\r\n *\r\n *   _increaseProgress(doneCallback: () => void) {\r\n *     this.progress += 1;\r\n *     console.log(`Current progress: ${this.progress}%`);\r\n *\r\n *     if (this.progress < 100) {\r\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\r\n *     } else {\r\n *       doneCallback();\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass NgZone {\n  hasPendingMacrotasks = false;\n  hasPendingMicrotasks = false;\n  /**\r\n   * Whether there are no outstanding microtasks or macrotasks.\r\n   */\n  isStable = true;\n  /**\r\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\r\n   */\n  onUnstable = new EventEmitter(false);\n  /**\r\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\r\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\r\n   * For this reason this event can fire multiple times per VM Turn.\r\n   */\n  onMicrotaskEmpty = new EventEmitter(false);\n  /**\r\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\r\n   * implies we are about to relinquish VM turn.\r\n   * This event gets called just once.\r\n   */\n  onStable = new EventEmitter(false);\n  /**\r\n   * Notifies that an error has been delivered.\r\n   */\n  onError = new EventEmitter(false);\n  constructor(options) {\n    const {\n      enableLongStackTrace = false,\n      shouldCoalesceEventChangeDetection = false,\n      shouldCoalesceRunChangeDetection = false,\n      scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT\n    } = options;\n    if (typeof Zone == 'undefined') {\n      throw new RuntimeError(908 /* RuntimeErrorCode.MISSING_ZONEJS */, ngDevMode && `In this configuration Angular requires Zone.js`);\n    }\n    Zone.assertZonePatched();\n    const self = this;\n    self._nesting = 0;\n    self._outer = self._inner = Zone.current;\n    // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n    // where the async operation is scheduled. For more details, refer\n    // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n    // And we only import this AsyncStackTaggingZoneSpec in development mode,\n    // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n    if (ngDevMode) {\n      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n    }\n    if (Zone['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());\n    }\n    if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.callbackScheduled = false;\n    self.scheduleInRootZone = scheduleInRootZone;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n  /**\r\n    This method checks whether the method call happens within an Angular Zone instance.\r\n  */\n  static isInAngularZone() {\n    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n    return typeof Zone !== 'undefined' && Zone.current.get(isAngularZoneProperty) === true;\n  }\n  /**\r\n    Assures that the method is called within the Angular Zone, otherwise throws an error.\r\n  */\n  static assertInAngularZone() {\n    if (!NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to be in Angular Zone, but it is not!');\n    }\n  }\n  /**\r\n    Assures that the method is called outside of the Angular Zone, otherwise throws an error.\r\n  */\n  static assertNotInAngularZone() {\n    if (NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to not be in Angular Zone, but it is!');\n    }\n  }\n  /**\r\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n   * the function.\r\n   *\r\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n   *\r\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n   * within the Angular zone.\r\n   *\r\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n   */\n  run(fn, applyThis, applyArgs) {\n    return this._inner.run(fn, applyThis, applyArgs);\n  }\n  /**\r\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n   * returned by the function.\r\n   *\r\n   * Running functions via `runTask` allows you to reenter Angular zone from a task that was executed\r\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n   *\r\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n   * within the Angular zone.\r\n   *\r\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n   */\n  runTask(fn, applyThis, applyArgs, name) {\n    const zone = this._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n  /**\r\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n   * rethrown.\r\n   */\n  runGuarded(fn, applyThis, applyArgs) {\n    return this._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n  /**\r\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n   * the function.\r\n   *\r\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n   * work that\r\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n   *\r\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n   * outside of the Angular zone.\r\n   *\r\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\r\n   */\n  runOutsideAngular(fn) {\n    return this._outer.run(fn);\n  }\n}\nconst EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\nfunction delayChangeDetectionForEvents(zone) {\n  /**\r\n   * We also need to check _nesting here\r\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\r\n   *\r\n   * ngZone.run(() => {});\r\n   * ngZone.run(() => {});\r\n   *\r\n   * We want the two `ngZone.run()` only trigger one change detection\r\n   * when shouldCoalesceRunChangeDetection is true.\r\n   * And because in this case, change detection run in async way(requestAnimationFrame),\r\n   * so we also need to check the _nesting here to prevent multiple\r\n   * change detections.\r\n   */\n  if (zone.isCheckStableRunning || zone.callbackScheduled) {\n    return;\n  }\n  zone.callbackScheduled = true;\n  function scheduleCheckStable() {\n    scheduleCallbackWithRafRace(() => {\n      zone.callbackScheduled = false;\n      updateMicroTaskStatus(zone);\n      zone.isCheckStableRunning = true;\n      checkStable(zone);\n      zone.isCheckStableRunning = false;\n    });\n  }\n  if (zone.scheduleInRootZone) {\n    Zone.root.run(() => {\n      scheduleCheckStable();\n    });\n  } else {\n    zone._outer.run(() => {\n      scheduleCheckStable();\n    });\n  }\n  updateMicroTaskStatus(zone);\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  const instanceId = ngZoneInstanceId++;\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: {\n      [isAngularZoneProperty]: true,\n      [angularZoneInstanceIdProperty]: instanceId,\n      [angularZoneInstanceIdProperty + instanceId]: true\n    },\n    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n      // Prevent triggering change detection when the flag is detected.\n      if (shouldBeIgnoredByZone(applyArgs)) {\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      }\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        if (zone.shouldCoalesceRunChangeDetection &&\n        // Do not delay change detection when the task is the scheduler's tick.\n        // We need to synchronously trigger the stability logic so that the\n        // zone-based scheduler can prevent a duplicate ApplicationRef.tick\n        // by first checking if the scheduler tick is running. This does seem a bit roundabout,\n        // but we _do_ still want to trigger all the correct events when we exit the zone.run\n        // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which\n        // relies on these events happening after change detection runs).\n        // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate\n        // but is added here as well to prevent reads of applyArgs when not necessary\n        !zone.callbackScheduled && !isSchedulerTick(applyArgs)) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onHasTask: (delegate, current, target, hasTaskState) => {\n      delegate.hasTask(target, hasTaskState);\n      if (current === target) {\n        // We are only interested in hasTask events which originate from our zone\n        // (A child hasTask event is not interesting to us)\n        if (hasTaskState.change == 'microTask') {\n          zone._hasPendingMicrotasks = hasTaskState.microTask;\n          updateMicroTaskStatus(zone);\n          checkStable(zone);\n        } else if (hasTaskState.change == 'macroTask') {\n          zone.hasPendingMacrotasks = hasTaskState.macroTask;\n        }\n      }\n    },\n    onHandleError: (delegate, current, target, error) => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\nfunction updateMicroTaskStatus(zone) {\n  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.callbackScheduled === true) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\nfunction onEnter(zone) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\nfunction onLeave(zone) {\n  zone._nesting--;\n  checkStable(zone);\n}\n/**\r\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\r\n * to framework to perform rendering.\r\n */\nclass NoopNgZone {\n  hasPendingMicrotasks = false;\n  hasPendingMacrotasks = false;\n  isStable = true;\n  onUnstable = new EventEmitter();\n  onMicrotaskEmpty = new EventEmitter();\n  onStable = new EventEmitter();\n  onError = new EventEmitter();\n  run(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runGuarded(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runOutsideAngular(fn) {\n    return fn();\n  }\n  runTask(fn, applyThis, applyArgs, name) {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\nfunction shouldBeIgnoredByZone(applyArgs) {\n  return hasApplyArgsData(applyArgs, '__ignore_ng_zone__');\n}\nfunction isSchedulerTick(applyArgs) {\n  return hasApplyArgsData(applyArgs, '__scheduler_tick__');\n}\nfunction hasApplyArgsData(applyArgs, key) {\n  if (!Array.isArray(applyArgs)) {\n    return false;\n  }\n  // We should only ever get 1 arg passed through to invokeTask.\n  // Short circuit here incase that behavior changes.\n  if (applyArgs.length !== 1) {\n    return false;\n  }\n  return applyArgs[0]?.data?.[key] === true;\n}\nfunction getNgZone(ngZoneToUse = 'zone.js', options) {\n  if (ngZoneToUse === 'noop') {\n    return new NoopNgZone();\n  }\n  if (ngZoneToUse === 'zone.js') {\n    return new NgZone(options);\n  }\n  return ngZoneToUse;\n}\nclass AfterRenderManager {\n  impl = null;\n  execute() {\n    this.impl?.execute();\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: AfterRenderManager,\n    providedIn: 'root',\n    factory: () => new AfterRenderManager()\n  });\n}\nconst AFTER_RENDER_PHASES = /* @__PURE__ **/(() => [0 /* AfterRenderPhase.EarlyRead */, 1 /* AfterRenderPhase.Write */, 2 /* AfterRenderPhase.MixedReadWrite */, 3 /* AfterRenderPhase.Read */])();\nclass AfterRenderImpl {\n  ngZone = inject(NgZone);\n  scheduler = inject(ChangeDetectionScheduler);\n  errorHandler = inject(ErrorHandler, {\n    optional: true\n  });\n  /** Current set of active sequences. */\n  sequences = new Set();\n  /** Tracks registrations made during the current set of executions. */\n  deferredRegistrations = new Set();\n  /** Whether the `AfterRenderManager` is currently executing hooks. */\n  executing = false;\n  constructor() {\n    // Inject the tracing service to make sure it's initialized.\n    inject(TracingService, {\n      optional: true\n    });\n  }\n  /**\r\n   * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more\r\n   * might be scheduled.\r\n   */\n  execute() {\n    const hasSequencesToExecute = this.sequences.size > 0;\n    if (hasSequencesToExecute) {\n      profiler(16 /* ProfilerEvent.AfterRenderHooksStart */);\n    }\n    this.executing = true;\n    for (const phase of AFTER_RENDER_PHASES) {\n      for (const sequence of this.sequences) {\n        if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {\n          continue;\n        }\n        try {\n          sequence.pipelinedValue = this.ngZone.runOutsideAngular(() => this.maybeTrace(() => {\n            const hookFn = sequence.hooks[phase];\n            const value = hookFn(sequence.pipelinedValue);\n            return value;\n          }, sequence.snapshot));\n        } catch (err) {\n          sequence.erroredOrDestroyed = true;\n          this.errorHandler?.handleError(err);\n        }\n      }\n    }\n    this.executing = false;\n    // Cleanup step to reset sequence state and also collect one-shot sequences for removal.\n    for (const sequence of this.sequences) {\n      sequence.afterRun();\n      if (sequence.once) {\n        this.sequences.delete(sequence);\n        // Destroy the sequence so its on destroy callbacks can be cleaned up\n        // immediately, instead of waiting until the injector is destroyed.\n        sequence.destroy();\n      }\n    }\n    for (const sequence of this.deferredRegistrations) {\n      this.sequences.add(sequence);\n    }\n    if (this.deferredRegistrations.size > 0) {\n      this.scheduler.notify(7 /* NotificationSource.RenderHook */);\n    }\n    this.deferredRegistrations.clear();\n    if (hasSequencesToExecute) {\n      profiler(17 /* ProfilerEvent.AfterRenderHooksEnd */);\n    }\n  }\n  register(sequence) {\n    const {\n      view\n    } = sequence;\n    if (view !== undefined) {\n      // Delay adding it to the manager, add it to the view instead.\n      (view[AFTER_RENDER_SEQUENCES_TO_ADD] ??= []).push(sequence);\n      // Mark the view for traversal to ensure we eventually schedule the afterNextRender.\n      markAncestorsForTraversal(view);\n      view[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n    } else if (!this.executing) {\n      this.addSequence(sequence);\n    } else {\n      this.deferredRegistrations.add(sequence);\n    }\n  }\n  addSequence(sequence) {\n    this.sequences.add(sequence);\n    // Trigger an `ApplicationRef.tick()` if one is not already pending/running, because we have a\n    // new render hook that needs to run.\n    this.scheduler.notify(7 /* NotificationSource.RenderHook */);\n  }\n  unregister(sequence) {\n    if (this.executing && this.sequences.has(sequence)) {\n      // We can't remove an `AfterRenderSequence` in the middle of iteration.\n      // Instead, mark it as destroyed so it doesn't run any more, and mark it as one-shot so it'll\n      // be removed at the end of the current execution.\n      sequence.erroredOrDestroyed = true;\n      sequence.pipelinedValue = undefined;\n      sequence.once = true;\n    } else {\n      // It's safe to directly remove this sequence.\n      this.sequences.delete(sequence);\n      this.deferredRegistrations.delete(sequence);\n    }\n  }\n  maybeTrace(fn, snapshot) {\n    // Only trace the execution if the snapshot is defined.\n    return snapshot ? snapshot.run(TracingAction.AFTER_NEXT_RENDER, fn) : fn();\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: AfterRenderImpl,\n    providedIn: 'root',\n    factory: () => new AfterRenderImpl()\n  });\n}\nclass AfterRenderSequence {\n  impl;\n  hooks;\n  view;\n  once;\n  snapshot;\n  /**\r\n   * Whether this sequence errored or was destroyed during this execution, and hooks should no\r\n   * longer run for it.\r\n   */\n  erroredOrDestroyed = false;\n  /**\r\n   * The value returned by the last hook execution (if any), ready to be pipelined into the next\r\n   * one.\r\n   */\n  pipelinedValue = undefined;\n  unregisterOnDestroy;\n  constructor(impl, hooks, view, once, destroyRef, snapshot = null) {\n    this.impl = impl;\n    this.hooks = hooks;\n    this.view = view;\n    this.once = once;\n    this.snapshot = snapshot;\n    this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());\n  }\n  afterRun() {\n    this.erroredOrDestroyed = false;\n    this.pipelinedValue = undefined;\n    // Clear the tracing snapshot after the initial run. This snapshot only\n    // associates the initial run of the hook with the context that created it.\n    // Follow-up runs are independent of that initial context and have different\n    // triggers.\n    this.snapshot?.dispose();\n    this.snapshot = null;\n  }\n  destroy() {\n    this.impl.unregister(this);\n    this.unregisterOnDestroy?.();\n    const scheduled = this.view?.[AFTER_RENDER_SEQUENCES_TO_ADD];\n    if (scheduled) {\n      this.view[AFTER_RENDER_SEQUENCES_TO_ADD] = scheduled.filter(s => s !== this);\n    }\n  }\n}\nfunction afterEveryRender(callbackOrSpec, options) {\n  ngDevMode && assertNotInReactiveContext(afterEveryRender, 'Call `afterEveryRender` outside of a reactive context. For example, schedule the render ' + 'callback inside the component constructor`.');\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(afterEveryRender);\n  }\n  const injector = options?.injector ?? inject(Injector);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  performanceMarkFeature('NgAfterRender');\n  return afterEveryRenderImpl(callbackOrSpec, injector, options, /* once */false);\n}\nfunction afterNextRender(callbackOrSpec, options) {\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(afterNextRender);\n  }\n  const injector = options?.injector ?? inject(Injector);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  performanceMarkFeature('NgAfterNextRender');\n  return afterEveryRenderImpl(callbackOrSpec, injector, options, /* once */true);\n}\nfunction getHooks(callbackOrSpec) {\n  if (callbackOrSpec instanceof Function) {\n    return [undefined, undefined, /* MixedReadWrite */callbackOrSpec, undefined];\n  } else {\n    return [callbackOrSpec.earlyRead, callbackOrSpec.write, callbackOrSpec.mixedReadWrite, callbackOrSpec.read];\n  }\n}\n/**\r\n * Shared implementation for `afterEveryRender` and `afterNextRender`.\r\n */\nfunction afterEveryRenderImpl(callbackOrSpec, injector, options, once) {\n  const manager = injector.get(AfterRenderManager);\n  // Lazily initialize the handler implementation, if necessary. This is so that it can be\n  // tree-shaken if `afterEveryRender` and `afterNextRender` aren't used.\n  manager.impl ??= injector.get(AfterRenderImpl);\n  const tracing = injector.get(TracingService, null, {\n    optional: true\n  });\n  const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\n  const viewContext = injector.get(ViewContext, null, {\n    optional: true\n  });\n  const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec), viewContext?.view, once, destroyRef, tracing?.snapshot(null));\n  manager.impl.register(sequence);\n  return sequence;\n}\n/** `AfterRenderRef` that does nothing. */\nconst NOOP_AFTER_RENDER_REF = {\n  destroy() {}\n};\n\n/**\r\n * Calculates a data slot index for defer block info (either static or\r\n * instance-specific), given an index of a defer instruction.\r\n */\nfunction getDeferBlockDataIndex(deferBlockIndex) {\n  // Instance state is located at the *next* position\n  // after the defer block slot in an LView or TView.data.\n  return deferBlockIndex + 1;\n}\n/** Retrieves a defer block state from an LView, given a TNode that represents a block. */\nfunction getLDeferBlockDetails(lView, tNode) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return lView[slotIndex];\n}\n/** Stores a defer block instance state in LView. */\nfunction setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  lView[slotIndex] = lDetails;\n}\n/** Retrieves static info about a defer block, given a TView and a TNode that represents a block. */\nfunction getTDeferBlockDetails(tView, tNode) {\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return tView.data[slotIndex];\n}\n/** Stores a defer block static info in `TView.data`. */\nfunction setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  tView.data[slotIndex] = deferBlockConfig;\n}\nfunction getTemplateIndexForState(newState, hostLView, tNode) {\n  const tView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  switch (newState) {\n    case DeferBlockState.Complete:\n      return tDetails.primaryTmplIndex;\n    case DeferBlockState.Loading:\n      return tDetails.loadingTmplIndex;\n    case DeferBlockState.Error:\n      return tDetails.errorTmplIndex;\n    case DeferBlockState.Placeholder:\n      return tDetails.placeholderTmplIndex;\n    default:\n      ngDevMode && throwError(`Unexpected defer block state: ${newState}`);\n      return null;\n  }\n}\n/**\r\n * Returns a minimum amount of time that a given state should be rendered for,\r\n * taking into account `minimum` parameter value. If the `minimum` value is\r\n * not specified - returns `null`.\r\n */\nfunction getMinimumDurationForState(tDetails, currentState) {\n  if (currentState === DeferBlockState.Placeholder) {\n    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;\n  } else if (currentState === DeferBlockState.Loading) {\n    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;\n  }\n  return null;\n}\n/** Retrieves the value of the `after` parameter on the @loading block. */\nfunction getLoadingBlockAfter(tDetails) {\n  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;\n}\n/**\r\n * Adds downloaded dependencies into a directive or a pipe registry,\r\n * making sure that a dependency doesn't yet exist in the registry.\r\n */\nfunction addDepsToRegistry(currentDeps, newDeps) {\n  if (!currentDeps || currentDeps.length === 0) {\n    return newDeps;\n  }\n  const currentDepSet = new Set(currentDeps);\n  for (const dep of newDeps) {\n    currentDepSet.add(dep);\n  }\n  // If `currentDeps` is the same length, there were no new deps and can\n  // return the original array.\n  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);\n}\n/** Retrieves a TNode that represents main content of a defer block. */\nfunction getPrimaryBlockTNode(tView, tDetails) {\n  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;\n  return getTNode(tView, adjustedIndex);\n}\n/**\r\n * Asserts whether all dependencies for a defer block are loaded.\r\n * Always run this function (in dev mode) before rendering a defer\r\n * block in completed state.\r\n */\nfunction assertDeferredDependenciesLoaded(tDetails) {\n  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, 'Expecting all deferred dependencies to be loaded.');\n}\n/**\r\n * Determines if a given value matches the expected structure of a defer block\r\n *\r\n * We can safely rely on the primaryTmplIndex because every defer block requires\r\n * that a primary template exists. All the other template options are optional.\r\n */\nfunction isTDeferBlockDetails(value) {\n  return value !== null && typeof value === 'object' && typeof value.primaryTmplIndex === 'number';\n}\n/**\r\n * Whether a given TNode represents a defer block.\r\n */\nfunction isDeferBlock(tView, tNode) {\n  let tDetails = null;\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  // Check if a slot index is in the reasonable range.\n  // Note: we do `-1` on the right border, since defer block details are stored\n  // in the `n+1` slot, see `getDeferBlockDataIndex` for more info.\n  if (HEADER_OFFSET < slotIndex && slotIndex < tView.bindingStartIndex) {\n    tDetails = getTDeferBlockDetails(tView, tNode);\n  }\n  return !!tDetails && isTDeferBlockDetails(tDetails);\n}\n/**\r\n * Tracks debugging information about a trigger.\r\n * @param tView TView in which the trigger is declared.\r\n * @param tNode TNode on which the trigger is declared.\r\n * @param textRepresentation Text representation of the trigger to be used for debugging purposes.\r\n */\nfunction trackTriggerForDebugging(tView, tNode, textRepresentation) {\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  tDetails.debug ??= {};\n  tDetails.debug.triggers ??= new Set();\n  tDetails.debug.triggers.add(textRepresentation);\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Wrapper for onViewport trigger with angular specific Injector for resolving NgZone instance\r\n * and creating an IntersectionObserver which can run outside of Angular zone.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger comes into the viewport.\r\n * @param injector Injector that can be used by the trigger to resolve DI tokens.\r\n */\nfunction onViewportWrapper(trigger, callback, injector) {\n  const ngZone = injector.get(NgZone);\n  return onViewport(trigger, () => ngZone.run(callback), () => ngZone.runOutsideAngular(() => createIntersectionObserver()));\n}\n/**\r\n * Helper function to get the LView in which a deferred block's trigger is rendered.\r\n * @param deferredHostLView LView in which the deferred block is defined.\r\n * @param deferredTNode TNode defining the deferred block.\r\n * @param walkUpTimes Number of times to go up in the view hierarchy to find the trigger's view.\r\n *   A negative value means that the trigger is inside the block's placeholder, while an undefined\r\n *   value means that the trigger is in the same LView as the deferred block.\r\n */\nfunction getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {\n  // The trigger is in the same view, we don't need to traverse.\n  if (walkUpTimes == null) {\n    return deferredHostLView;\n  }\n  // A positive value or zero means that the trigger is in a parent view.\n  if (walkUpTimes >= 0) {\n    return walkUpViews(walkUpTimes, deferredHostLView);\n  }\n  // If the value is negative, it means that the trigger is inside the placeholder.\n  const deferredContainer = deferredHostLView[deferredTNode.index];\n  ngDevMode && assertLContainer(deferredContainer);\n  const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;\n  // We need to null check, because the placeholder might not have been rendered yet.\n  if (ngDevMode && triggerLView !== null) {\n    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);\n    const renderedState = lDetails[DEFER_BLOCK_STATE];\n    assertEqual(renderedState, DeferBlockState.Placeholder, 'Expected a placeholder to be rendered in this defer block.');\n    assertLView(triggerLView);\n  }\n  return triggerLView;\n}\n/**\r\n * Gets the element that a deferred block's trigger is pointing to.\r\n * @param triggerLView LView in which the trigger is defined.\r\n * @param triggerIndex Index at which the trigger element should've been rendered.\r\n */\nfunction getTriggerElement(triggerLView, triggerIndex) {\n  const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);\n  ngDevMode && assertElement(element);\n  return element;\n}\n/**\r\n * Registers a DOM-node based trigger.\r\n * @param initialLView LView in which the defer block is rendered.\r\n * @param tNode TNode representing the defer block.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to go up/down in the view hierarchy to find the trigger.\r\n * @param registerFn Function that will register the DOM events.\r\n * @param callback Callback to be invoked when the trigger receives the event that should render\r\n *     the deferred block.\r\n * @param type Trigger type to distinguish between regular and prefetch triggers.\r\n */\nfunction registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {\n  const injector = initialLView[INJECTOR];\n  const zone = injector.get(NgZone);\n  let poll;\n  function pollDomTrigger() {\n    // If the initial view was destroyed, we don't need to do anything.\n    if (isDestroyed(initialLView)) {\n      poll.destroy();\n      return;\n    }\n    const lDetails = getLDeferBlockDetails(initialLView, tNode);\n    const renderedState = lDetails[DEFER_BLOCK_STATE];\n    // If the block was loaded before the trigger was resolved, we don't need to do anything.\n    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {\n      poll.destroy();\n      return;\n    }\n    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);\n    // Keep polling until we resolve the trigger's LView.\n    if (!triggerLView) {\n      // Keep polling.\n      return;\n    }\n    poll.destroy();\n    // It's possible that the trigger's view was destroyed before we resolved the trigger element.\n    if (isDestroyed(triggerLView)) {\n      return;\n    }\n    const element = getTriggerElement(triggerLView, triggerIndex);\n    const cleanup = registerFn(element, () => {\n      // `pollDomTrigger` runs outside the zone (because of `afterNextRender`) and registers its\n      // listeners outside the zone, so we jump back into the zone prior to running the callback.\n      zone.run(() => {\n        if (initialLView !== triggerLView) {\n          removeLViewOnDestroy(triggerLView, cleanup);\n        }\n        callback();\n      });\n    }, injector);\n    // The trigger and deferred block might be in different LViews.\n    // For the main LView the cleanup would happen as a part of\n    // `storeTriggerCleanupFn` logic. For trigger LView we register\n    // a cleanup function there to remove event handlers in case an\n    // LView gets destroyed before a trigger is invoked.\n    if (initialLView !== triggerLView) {\n      storeLViewOnDestroy(triggerLView, cleanup);\n    }\n    storeTriggerCleanupFn(type, lDetails, cleanup);\n  }\n  // Begin polling for the trigger.\n  poll = afterEveryRender({\n    read: pollDomTrigger\n  }, {\n    injector\n  });\n}\n\n/**\r\n * Helper function to schedule a callback to be invoked when a browser becomes idle.\r\n *\r\n * @param callback A function to be invoked when a browser becomes idle.\r\n * @param injector injector for the app\r\n */\nfunction onIdle(callback, injector) {\n  const scheduler = injector.get(IdleScheduler);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(callback);\n  return cleanupFn;\n}\n/**\r\n * Use shims for the `requestIdleCallback` and `cancelIdleCallback` functions for\r\n * environments where those functions are not available (e.g. Node.js and Safari).\r\n *\r\n * Note: we wrap the `requestIdleCallback` call into a function, so that it can be\r\n * overridden/mocked in test environment and picked up by the runtime code.\r\n */\nconst _requestIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? requestIdleCallback : setTimeout;\nconst _cancelIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n/**\r\n * Helper service to schedule `requestIdleCallback`s for batches of defer blocks,\r\n * to avoid calling `requestIdleCallback` for each defer block (e.g. if\r\n * defer blocks are defined inside a for loop).\r\n */\nclass IdleScheduler {\n  // Indicates whether current callbacks are being invoked.\n  executingCallbacks = false;\n  // Currently scheduled idle callback id.\n  idleId = null;\n  // Set of callbacks to be invoked next.\n  current = new Set();\n  // Set of callbacks collected while invoking current set of callbacks.\n  // Those callbacks are scheduled for the next idle period.\n  deferred = new Set();\n  ngZone = inject(NgZone);\n  requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);\n  cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);\n  add(callback) {\n    const target = this.executingCallbacks ? this.deferred : this.current;\n    target.add(callback);\n    if (this.idleId === null) {\n      this.scheduleIdleCallback();\n    }\n  }\n  remove(callback) {\n    const {\n      current,\n      deferred\n    } = this;\n    current.delete(callback);\n    deferred.delete(callback);\n    // If the last callback was removed and there is a pending\n    // idle callback - cancel it.\n    if (current.size === 0 && deferred.size === 0) {\n      this.cancelIdleCallback();\n    }\n  }\n  scheduleIdleCallback() {\n    const callback = () => {\n      this.cancelIdleCallback();\n      this.executingCallbacks = true;\n      for (const callback of this.current) {\n        callback();\n      }\n      this.current.clear();\n      this.executingCallbacks = false;\n      // If there are any callbacks added during an invocation\n      // of the current ones - make them \"current\" and schedule\n      // a new idle callback.\n      if (this.deferred.size > 0) {\n        for (const callback of this.deferred) {\n          this.current.add(callback);\n        }\n        this.deferred.clear();\n        this.scheduleIdleCallback();\n      }\n    };\n    // Ensure that the callback runs in the NgZone since\n    // the `requestIdleCallback` is not currently patched by Zone.js.\n    this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));\n  }\n  cancelIdleCallback() {\n    if (this.idleId !== null) {\n      this.cancelIdleCallbackFn(this.idleId);\n      this.idleId = null;\n    }\n  }\n  ngOnDestroy() {\n    this.cancelIdleCallback();\n    this.current.clear();\n    this.deferred.clear();\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: IdleScheduler,\n    providedIn: 'root',\n    factory: () => new IdleScheduler()\n  });\n}\n\n/**\r\n * Returns a function that captures a provided delay.\r\n * Invoking the returned function schedules a trigger.\r\n */\nfunction onTimer(delay) {\n  return (callback, injector) => scheduleTimerTrigger(delay, callback, injector);\n}\n/**\r\n * Schedules a callback to be invoked after a given timeout.\r\n *\r\n * @param delay A number of ms to wait until firing a callback.\r\n * @param callback A function to be invoked after a timeout.\r\n * @param injector injector for the app.\r\n */\nfunction scheduleTimerTrigger(delay, callback, injector) {\n  const scheduler = injector.get(TimerScheduler);\n  const ngZone = injector.get(NgZone);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(delay, callback, ngZone);\n  return cleanupFn;\n}\n/**\r\n * Helper service to schedule `setTimeout`s for batches of defer blocks,\r\n * to avoid calling `setTimeout` for each defer block (e.g. if defer blocks\r\n * are created inside a for loop).\r\n */\nclass TimerScheduler {\n  // Indicates whether current callbacks are being invoked.\n  executingCallbacks = false;\n  // Currently scheduled `setTimeout` id.\n  timeoutId = null;\n  // When currently scheduled timer would fire.\n  invokeTimerAt = null;\n  // List of callbacks to be invoked.\n  // For each callback we also store a timestamp on when the callback\n  // should be invoked. We store timestamps and callback functions\n  // in a flat array to avoid creating new objects for each entry.\n  // [timestamp1, callback1, timestamp2, callback2, ...]\n  current = [];\n  // List of callbacks collected while invoking current set of callbacks.\n  // Those callbacks are added to the \"current\" queue at the end of\n  // the current callback invocation. The shape of this list is the same\n  // as the shape of the `current` list.\n  deferred = [];\n  add(delay, callback, ngZone) {\n    const target = this.executingCallbacks ? this.deferred : this.current;\n    this.addToQueue(target, Date.now() + delay, callback);\n    this.scheduleTimer(ngZone);\n  }\n  remove(callback) {\n    const {\n      current,\n      deferred\n    } = this;\n    const callbackIndex = this.removeFromQueue(current, callback);\n    if (callbackIndex === -1) {\n      // Try cleaning up deferred queue only in case\n      // we didn't find a callback in the \"current\" queue.\n      this.removeFromQueue(deferred, callback);\n    }\n    // If the last callback was removed and there is a pending timeout - cancel it.\n    if (current.length === 0 && deferred.length === 0) {\n      this.clearTimeout();\n    }\n  }\n  addToQueue(target, invokeAt, callback) {\n    let insertAtIndex = target.length;\n    for (let i = 0; i < target.length; i += 2) {\n      const invokeQueuedCallbackAt = target[i];\n      if (invokeQueuedCallbackAt > invokeAt) {\n        // We've reached a first timer that is scheduled\n        // for a later time than what we are trying to insert.\n        // This is the location at which we need to insert,\n        // no need to iterate further.\n        insertAtIndex = i;\n        break;\n      }\n    }\n    arrayInsert2(target, insertAtIndex, invokeAt, callback);\n  }\n  removeFromQueue(target, callback) {\n    let index = -1;\n    for (let i = 0; i < target.length; i += 2) {\n      const queuedCallback = target[i + 1];\n      if (queuedCallback === callback) {\n        index = i;\n        break;\n      }\n    }\n    if (index > -1) {\n      // Remove 2 elements: a timestamp slot and\n      // the following slot with a callback function.\n      arraySplice(target, index, 2);\n    }\n    return index;\n  }\n  scheduleTimer(ngZone) {\n    const callback = () => {\n      this.clearTimeout();\n      this.executingCallbacks = true;\n      // Clone the current state of the queue, since it might be altered\n      // as we invoke callbacks.\n      const current = [...this.current];\n      // Invoke callbacks that were scheduled to run before the current time.\n      const now = Date.now();\n      for (let i = 0; i < current.length; i += 2) {\n        const invokeAt = current[i];\n        const callback = current[i + 1];\n        if (invokeAt <= now) {\n          callback();\n        } else {\n          // We've reached a timer that should not be invoked yet.\n          break;\n        }\n      }\n      // The state of the queue might've changed after callbacks invocation,\n      // run the cleanup logic based on the *current* state of the queue.\n      let lastCallbackIndex = -1;\n      for (let i = 0; i < this.current.length; i += 2) {\n        const invokeAt = this.current[i];\n        if (invokeAt <= now) {\n          // Add +1 to account for a callback function that\n          // goes after the timestamp in events array.\n          lastCallbackIndex = i + 1;\n        } else {\n          // We've reached a timer that should not be invoked yet.\n          break;\n        }\n      }\n      if (lastCallbackIndex >= 0) {\n        arraySplice(this.current, 0, lastCallbackIndex + 1);\n      }\n      this.executingCallbacks = false;\n      // If there are any callbacks added during an invocation\n      // of the current ones - move them over to the \"current\"\n      // queue.\n      if (this.deferred.length > 0) {\n        for (let i = 0; i < this.deferred.length; i += 2) {\n          const invokeAt = this.deferred[i];\n          const callback = this.deferred[i + 1];\n          this.addToQueue(this.current, invokeAt, callback);\n        }\n        this.deferred.length = 0;\n      }\n      this.scheduleTimer(ngZone);\n    };\n    // Avoid running timer callbacks more than once per\n    // average frame duration. This is needed for better\n    // batching and to avoid kicking off excessive change\n    // detection cycles.\n    const FRAME_DURATION_MS = 16; // 1000ms / 60fps\n    if (this.current.length > 0) {\n      const now = Date.now();\n      // First element in the queue points at the timestamp\n      // of the first (earliest) event.\n      const invokeAt = this.current[0];\n      if (this.timeoutId === null ||\n      // Reschedule a timer in case a queue contains an item with\n      // an earlier timestamp and the delta is more than an average\n      // frame duration.\n      this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {\n        // There was a timeout already, but an earlier event was added\n        // into the queue. In this case we drop an old timer and setup\n        // a new one with an updated (smaller) timeout.\n        this.clearTimeout();\n        const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);\n        this.invokeTimerAt = invokeAt;\n        this.timeoutId = ngZone.runOutsideAngular(() => {\n          return setTimeout(() => ngZone.run(callback), timeout);\n        });\n      }\n    }\n  }\n  clearTimeout() {\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n  ngOnDestroy() {\n    this.clearTimeout();\n    this.current.length = 0;\n    this.deferred.length = 0;\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: TimerScheduler,\n    providedIn: 'root',\n    factory: () => new TimerScheduler()\n  });\n}\n\n/**\r\n * A service used by the framework to create and cache injector instances.\r\n *\r\n * This service is used to create a single injector instance for each defer\r\n * block definition, to avoid creating an injector for each defer block instance\r\n * of a certain type.\r\n */\nclass CachedInjectorService {\n  cachedInjectors = new Map();\n  getOrCreateInjector(key, parentInjector, providers, debugName) {\n    if (!this.cachedInjectors.has(key)) {\n      const injector = providers.length > 0 ? createEnvironmentInjector(providers, parentInjector, debugName) : null;\n      this.cachedInjectors.set(key, injector);\n    }\n    return this.cachedInjectors.get(key);\n  }\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n    token: CachedInjectorService,\n    providedIn: 'environment',\n    factory: () => new CachedInjectorService()\n  });\n}\n\n/**\r\n * **INTERNAL**, avoid referencing it in application code.\r\n * *\r\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\r\n * implementation.\r\n *\r\n * This token is only injected in devMode\r\n */\nconst DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = /* @__PURE__ */new InjectionToken('DEFER_BLOCK_DEPENDENCY_INTERCEPTOR');\n/**\r\n * **INTERNAL**, token used for configuring defer block behavior.\r\n */\nconst DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? 'DEFER_BLOCK_CONFIG' : '');\n/**\r\n * Checks whether there is a cached injector associated with a given defer block\r\n * declaration and returns if it exists. If there is no cached injector present -\r\n * creates a new injector and stores in the cache.\r\n */\nfunction getOrCreateEnvironmentInjector(parentInjector, tDetails, providers) {\n  return parentInjector.get(CachedInjectorService).getOrCreateInjector(tDetails, parentInjector, providers, ngDevMode ? 'DeferBlock Injector' : '');\n}\n/** Injector Helpers */\n/**\r\n * Creates a new injector, which contains providers collected from dependencies (NgModules) of\r\n * defer-loaded components. This function detects different types of parent injectors and creates\r\n * a new injector based on that.\r\n */\nfunction createDeferBlockInjector(parentInjector, tDetails, providers) {\n  // Check if the parent injector is an instance of a `ChainedInjector`.\n  //\n  // In this case, we retain the shape of the injector and use a newly created\n  // `EnvironmentInjector` as a parent in the `ChainedInjector`. That is needed to\n  // make sure that the primary injector gets consulted first (since it's typically\n  // a NodeInjector) and `EnvironmentInjector` tree is consulted after that.\n  if (parentInjector instanceof ChainedInjector) {\n    const origInjector = parentInjector.injector;\n    // Guaranteed to be an environment injector\n    const parentEnvInjector = parentInjector.parentInjector;\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(origInjector, envInjector);\n  }\n  const parentEnvInjector = parentInjector.get(EnvironmentInjector);\n  // If the `parentInjector` is *not* an `EnvironmentInjector` - we need to create\n  // a new `ChainedInjector` with the following setup:\n  //\n  //  - the provided `parentInjector` becomes a primary injector\n  //  - an existing (real) `EnvironmentInjector` becomes a parent injector for\n  //    a newly-created one, which contains extra providers\n  //\n  // So the final order in which injectors would be consulted in this case would look like this:\n  //\n  //  1. Provided `parentInjector`\n  //  2. Newly-created `EnvironmentInjector` with extra providers\n  //  3. `EnvironmentInjector` from the `parentInjector`\n  if (parentEnvInjector !== parentInjector) {\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(parentInjector, envInjector);\n  }\n  // The `parentInjector` is an instance of an `EnvironmentInjector`.\n  // No need for special handling, we can use `parentInjector` as a\n  // parent injector directly.\n  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);\n}\n/** Rendering Helpers */\n/**\r\n * Transitions a defer block to the new state. Updates the  necessary\r\n * data structures and renders corresponding block.\r\n *\r\n * @param newState New state that should be applied to the defer block.\r\n * @param tNode TNode that represents a defer block.\r\n * @param lContainer Represents an instance of a defer block.\r\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\r\n *   should be rendered immediately, even if they have `after` or `minimum` config\r\n *   options setup. This flag to needed for testing APIs to transition defer block\r\n *   between states via `DeferFixture.render` method.\r\n */\nfunction renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {\n  const hostLView = lContainer[PARENT];\n  const hostTView = hostLView[TVIEW];\n  // Check if this view is not destroyed. Since the loading process was async,\n  // the view might end up being destroyed by the time rendering happens.\n  if (isDestroyed(hostLView)) return;\n  // Make sure this TNode belongs to TView that represents host LView.\n  ngDevMode && assertTNodeForLView(tNode, hostLView);\n  const lDetails = getLDeferBlockDetails(hostLView, tNode);\n  ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\n  const currentState = lDetails[DEFER_BLOCK_STATE];\n  const ssrState = lDetails[SSR_BLOCK_STATE];\n  if (ssrState !== null && newState < ssrState) {\n    return; // trying to render a previous state, exit\n  }\n  if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\n    // Skips scheduling on the server since it can delay the server response.\n    const needsScheduling = !skipTimerScheduling && (typeof ngServerMode === 'undefined' || !ngServerMode) && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\n    if (ngDevMode && needsScheduling) {\n      assertDefined(applyDeferBlockStateWithSchedulingImpl, 'Expected scheduling function to be defined');\n    }\n    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;\n    try {\n      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\n    } catch (error) {\n      handleUncaughtError(hostLView, error);\n    }\n  }\n}\nfunction findMatchingDehydratedViewForDeferBlock(lContainer, lDetails) {\n  const dehydratedViewIx = lContainer[DEHYDRATED_VIEWS]?.findIndex(view => view.data[DEFER_BLOCK_STATE$1] === lDetails[DEFER_BLOCK_STATE]) ?? -1;\n  const dehydratedView = dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS][dehydratedViewIx] : null;\n  return {\n    dehydratedView,\n    dehydratedViewIx\n  };\n}\n/**\r\n * Applies changes to the DOM to reflect a given state.\r\n */\nfunction applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {\n  profiler(20 /* ProfilerEvent.DeferBlockStateStart */);\n  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\n  if (stateTmplIndex !== null) {\n    lDetails[DEFER_BLOCK_STATE] = newState;\n    const hostTView = hostLView[TVIEW];\n    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\n    // The TNode that represents a template that will activated in the defer block\n    const activeBlockTNode = getTNode(hostTView, adjustedIndex);\n    // There is only 1 view that can be present in an LContainer that\n    // represents a defer block, so always refer to the first one.\n    const viewIndex = 0;\n    removeLViewFromLContainer(lContainer, viewIndex);\n    let injector;\n    if (newState === DeferBlockState.Complete) {\n      // When we render a defer block in completed state, there might be\n      // newly loaded standalone components used within the block, which may\n      // import NgModules with providers. In order to make those providers\n      // available for components declared in that NgModule, we create an instance\n      // of an environment injector to host those providers and pass this injector\n      // to the logic that creates a view.\n      const tDetails = getTDeferBlockDetails(hostTView, tNode);\n      const providers = tDetails.providers;\n      if (providers && providers.length > 0) {\n        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);\n      }\n    }\n    const {\n      dehydratedView,\n      dehydratedViewIx\n    } = findMatchingDehydratedViewForDeferBlock(lContainer, lDetails);\n    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {\n      injector,\n      dehydratedView\n    });\n    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));\n    markViewDirty(embeddedLView, 2 /* NotificationSource.DeferBlockStateUpdate */);\n    if (dehydratedViewIx > -1) {\n      // Erase dehydrated view info in a given LContainer, so that the view is not\n      // removed later by post-hydration cleanup process (which iterates over all\n      // dehydrated views in component tree). This clears only the dehydrated view\n      // that was found for this render, which in most cases will be the only view.\n      // In the case that there was control flow that changed, there may be either\n      // more than one or the views would not match up due to the server rendered\n      // content being a different branch of the control flow.\n      lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);\n    }\n    if ((newState === DeferBlockState.Complete || newState === DeferBlockState.Error) && Array.isArray(lDetails[ON_COMPLETE_FNS])) {\n      for (const callback of lDetails[ON_COMPLETE_FNS]) {\n        callback();\n      }\n      lDetails[ON_COMPLETE_FNS] = null;\n    }\n  }\n  profiler(21 /* ProfilerEvent.DeferBlockStateEnd */);\n}\n/**\r\n * Extends the `applyDeferBlockState` with timer-based scheduling.\r\n * This function becomes available on a page if there are defer blocks\r\n * that use `after` or `minimum` parameters in the `@loading` or\r\n * `@placeholder` blocks.\r\n */\nfunction applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {\n  const now = Date.now();\n  const hostTView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(hostTView, tNode);\n  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    const loadingAfter = getLoadingBlockAfter(tDetails);\n    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\n    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\n      // Trying to render loading, but it has an `after` config,\n      // so schedule an update action after a timeout.\n      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);\n      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\n    } else {\n      // If we transition to a complete or an error state and there is a pending\n      // operation to render loading after a timeout - invoke a cleanup operation,\n      // which stops the timer.\n      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\n        lDetails[LOADING_AFTER_CLEANUP_FN]();\n        lDetails[LOADING_AFTER_CLEANUP_FN] = null;\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n      }\n      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\n      const duration = getMinimumDurationForState(tDetails, newState);\n      if (duration !== null) {\n        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\n        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\n      }\n    }\n  } else {\n    // We are still rendering the previous state.\n    // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\n    // picked up once it's time to transition to the next state.\n    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n  }\n}\n/**\r\n * Schedules an update operation after a specified timeout.\r\n */\nfunction scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {\n  const callback = () => {\n    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n    if (nextState !== null) {\n      renderDeferBlockState(nextState, tNode, lContainer);\n    }\n  };\n  return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);\n}\n/**\r\n * Checks whether we can transition to the next state.\r\n *\r\n * We transition to the next state if the previous state was represented\r\n * with a number that is less than the next state. For example, if the current\r\n * state is \"loading\" (represented as `1`), we should not show a placeholder\r\n * (represented as `0`), but we can show a completed state (represented as `2`)\r\n * or an error state (represented as `3`).\r\n */\nfunction isValidStateChange(currentState, newState) {\n  return currentState < newState;\n}\n/** Utility function to render placeholder content (if present) */\nfunction renderPlaceholder(lView, tNode) {\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\n}\n/**\r\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\r\n * based on the loading results.\r\n *\r\n * @param lContainer Represents an instance of a defer block.\r\n * @param tNode Represents defer block info shared across all instances.\r\n */\nfunction renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {\n  ngDevMode && assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\n  tDetails.loadingPromise.then(() => {\n    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      // Everything is loaded, show the primary block content\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n    }\n  });\n}\n/**\r\n * Reference to the timer-based scheduler implementation of defer block state\r\n * rendering method. It's used to make timer-based scheduling tree-shakable.\r\n * If `minimum` or `after` parameters are used, compiler generates an extra\r\n * argument for the `ɵɵdefer` instruction, which references a timer-based\r\n * implementation.\r\n */\nlet applyDeferBlockStateWithSchedulingImpl = null;\n/**\r\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\r\n * on the `@loading` or `@placeholder` blocks.\r\n */\nfunction ɵɵdeferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {\n  const tViewConsts = tView.consts;\n  if (placeholderConfigIndex != null) {\n    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);\n  }\n  if (loadingConfigIndex != null) {\n    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);\n  }\n  // Enable implementation that supports timer-based scheduling.\n  if (applyDeferBlockStateWithSchedulingImpl === null) {\n    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\n  }\n}\n\n/**\r\n * The name of a field that Angular monkey-patches onto a component\r\n * class to store a function that loads defer-loadable dependencies\r\n * and applies metadata to a class.\r\n */\nconst ASYNC_COMPONENT_METADATA_FN = '__ngAsyncComponentMetadataFn__';\n/**\r\n * If a given component has unresolved async metadata - returns a reference\r\n * to a function that applies component metadata after resolving defer-loadable\r\n * dependencies. Otherwise - this function returns `null`.\r\n */\nfunction getAsyncClassMetadataFn(type) {\n  const componentClass = type; // cast to `any`, so that we can read a monkey-patched field\n  return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;\n}\n/**\r\n * Handles the process of applying metadata info to a component class in case\r\n * component template has defer blocks (thus some dependencies became deferrable).\r\n *\r\n * @param type Component class where metadata should be added\r\n * @param dependencyLoaderFn Function that loads dependencies\r\n * @param metadataSetterFn Function that forms a scope in which the `setClassMetadata` is invoked\r\n */\nfunction setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {\n  const componentClass = type; // cast to `any`, so that we can monkey-patch it\n  componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then(dependencies => {\n    metadataSetterFn(...dependencies);\n    // Metadata is now set, reset field value to indicate that this component\n    // can by used/compiled synchronously.\n    componentClass[ASYNC_COMPONENT_METADATA_FN] = null;\n    return dependencies;\n  });\n  return componentClass[ASYNC_COMPONENT_METADATA_FN];\n}\n/**\r\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\r\n * on the type.\r\n *\r\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\r\n *\r\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\r\n * being tree-shaken away during production builds.\r\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  return noSideEffects(() => {\n    const clazz = type;\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = {\n          ...clazz.propDecorators,\n          ...propDecorators\n        };\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  });\n}\nclass Console {\n  log(message) {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message) {\n    console.warn(message);\n  }\n  static ɵfac = function Console_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Console)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: Console,\n    factory: Console.ɵfac,\n    providedIn: 'platform'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n\n/**\r\n * These are the data structures that our framework injector profiler will fill with data in order\r\n * to support DI debugging APIs.\r\n *\r\n * resolverToTokenToDependencies: Maps an injector to a Map of tokens to an Array of\r\n * dependencies. Injector -> Token -> Dependencies This is used to support the\r\n * getDependenciesFromInjectable API, which takes in an injector and a token and returns it's\r\n * dependencies.\r\n *\r\n * resolverToProviders: Maps a DI resolver (an Injector or a TNode) to the providers configured\r\n * within it This is used to support the getInjectorProviders API, which takes in an injector and\r\n * returns the providers that it was configured with. Note that for the element injector case we\r\n * use the TNode instead of the LView as the DI resolver. This is because the registration of\r\n * providers happens only once per type of TNode. If an injector is created with an identical TNode,\r\n * the providers for that injector will not be reconfigured.\r\n *\r\n * standaloneInjectorToComponent: Maps the injector of a standalone component to the standalone\r\n * component that it is associated with. Used in the getInjectorProviders API, specificially in the\r\n * discovery of import paths for each provider. This is necessary because the imports array of a\r\n * standalone component is processed and configured in its standalone injector, but exists within\r\n * the component's definition. Because getInjectorProviders takes in an injector, if that injector\r\n * is the injector of a standalone component, we need to be able to discover the place where the\r\n * imports array is located (the component) in order to flatten the imports array within it to\r\n * discover all of it's providers.\r\n *\r\n *\r\n * All of these data structures are instantiated with WeakMaps. This will ensure that the presence\r\n * of any object in the keys of these maps does not prevent the garbage collector from collecting\r\n * those objects. Because of this property of WeakMaps, these data structures will never be the\r\n * source of a memory leak.\r\n *\r\n * An example of this advantage: When components are destroyed, we don't need to do\r\n * any additional work to remove that component from our mappings.\r\n *\r\n */\nclass DIDebugData {\n  resolverToTokenToDependencies = new WeakMap();\n  resolverToProviders = new WeakMap();\n  resolverToEffects = new WeakMap();\n  standaloneInjectorToComponent = new WeakMap();\n  reset() {\n    this.resolverToTokenToDependencies = new WeakMap();\n    this.resolverToProviders = new WeakMap();\n    this.standaloneInjectorToComponent = new WeakMap();\n  }\n}\nlet frameworkDIDebugData = new DIDebugData();\nfunction getFrameworkDIDebugData() {\n  return frameworkDIDebugData;\n}\n/**\r\n * Initalize default handling of injector events. This handling parses events\r\n * as they are emitted and constructs the data structures necessary to support\r\n * some of debug APIs.\r\n *\r\n * See handleInjectEvent, handleCreateEvent and handleProviderConfiguredEvent\r\n * for descriptions of each handler\r\n *\r\n * Supported APIs:\r\n *               - getDependenciesFromInjectable\r\n *               - getInjectorProviders\r\n */\nfunction setupFrameworkInjectorProfiler() {\n  frameworkDIDebugData.reset();\n  setInjectorProfiler(injectorProfilerEventHandler);\n}\nfunction injectorProfilerEventHandler(injectorProfilerEvent) {\n  const {\n    context,\n    type\n  } = injectorProfilerEvent;\n  if (type === 0 /* InjectorProfilerEventType.Inject */) {\n    handleInjectEvent(context, injectorProfilerEvent.service);\n  } else if (type === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\n    handleInstanceCreatedByInjectorEvent(context, injectorProfilerEvent.instance);\n  } else if (type === 2 /* InjectorProfilerEventType.ProviderConfigured */) {\n    handleProviderConfiguredEvent(context, injectorProfilerEvent.providerRecord);\n  } else if (type === 3 /* InjectorProfilerEventType.EffectCreated */) {\n    handleEffectCreatedEvent(context, injectorProfilerEvent.effect);\n  }\n}\nfunction handleEffectCreatedEvent(context, effect) {\n  const diResolver = getDIResolver(context.injector);\n  if (diResolver === null) {\n    throwError('An EffectCreated event must be run within an injection context.');\n  }\n  const {\n    resolverToEffects\n  } = frameworkDIDebugData;\n  if (!resolverToEffects.has(diResolver)) {\n    resolverToEffects.set(diResolver, []);\n  }\n  resolverToEffects.get(diResolver).push(effect);\n}\n/**\r\n *\r\n * Stores the injected service in frameworkDIDebugData.resolverToTokenToDependencies\r\n * based on it's injector and token.\r\n *\r\n * @param context InjectorProfilerContext the injection context that this event occurred in.\r\n * @param data InjectedService the service associated with this inject event.\r\n *\r\n */\nfunction handleInjectEvent(context, data) {\n  const diResolver = getDIResolver(context.injector);\n  if (diResolver === null) {\n    throwError('An Inject event must be run within an injection context.');\n  }\n  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;\n  if (!diResolverToInstantiatedToken.has(diResolver)) {\n    diResolverToInstantiatedToken.set(diResolver, new WeakMap());\n  }\n  // if token is a primitive type, ignore this event. We do this because we cannot keep track of\n  // non-primitive tokens in WeakMaps since they are not garbage collectable.\n  if (!canBeHeldWeakly(context.token)) {\n    return;\n  }\n  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);\n  if (!instantiatedTokenToDependencies.has(context.token)) {\n    instantiatedTokenToDependencies.set(context.token, []);\n  }\n  const {\n    token,\n    value,\n    flags\n  } = data;\n  assertDefined(context.token, 'Injector profiler context token is undefined.');\n  const dependencies = instantiatedTokenToDependencies.get(context.token);\n  assertDefined(dependencies, 'Could not resolve dependencies for token.');\n  if (context.injector instanceof NodeInjector) {\n    dependencies.push({\n      token,\n      value,\n      flags,\n      injectedIn: getNodeInjectorContext(context.injector)\n    });\n  } else {\n    dependencies.push({\n      token,\n      value,\n      flags\n    });\n  }\n}\n/**\r\n *\r\n * Returns the LView and TNode associated with a NodeInjector. Returns undefined if the injector\r\n * is not a NodeInjector.\r\n *\r\n * @param injector\r\n * @returns {lView: LView, tNode: TNode}|undefined\r\n */\nfunction getNodeInjectorContext(injector) {\n  if (!(injector instanceof NodeInjector)) {\n    throwError('getNodeInjectorContext must be called with a NodeInjector');\n  }\n  const lView = getNodeInjectorLView(injector);\n  const tNode = getNodeInjectorTNode(injector);\n  if (tNode === null) {\n    return;\n  }\n  assertTNodeForLView(tNode, lView);\n  return {\n    lView,\n    tNode\n  };\n}\n/**\r\n *\r\n * If the created instance is an instance of a standalone component, maps the injector to that\r\n * standalone component in frameworkDIDebugData.standaloneInjectorToComponent\r\n *\r\n * @param context InjectorProfilerContext the injection context that this event occurred in.\r\n * @param data InjectorCreatedInstance an object containing the instance that was just created\r\n *\r\n */\nfunction handleInstanceCreatedByInjectorEvent(context, data) {\n  const {\n    value\n  } = data;\n  // It might happen that a DI token is requested but there is no corresponding value.\n  // The InstanceCreatedByInjectorEvent will be still emitted in this case (to mirror the InjectorToCreateInstanceEvent) but we don't want to do any particular processing for those situations.\n  if (data.value == null) {\n    return;\n  }\n  if (getDIResolver(context.injector) === null) {\n    throwError('An InjectorCreatedInstance event must be run within an injection context.');\n  }\n  // if our value is an instance of a standalone component, map the injector of that standalone\n  // component to the component class. Otherwise, this event is a noop.\n  let standaloneComponent = undefined;\n  if (typeof value === 'object') {\n    standaloneComponent = value?.constructor;\n  }\n  // We want to also cover if `standaloneComponent === null` in addition to `undefined`\n  if (standaloneComponent == undefined || !isStandaloneComponent(standaloneComponent)) {\n    return;\n  }\n  const environmentInjector = context.injector.get(EnvironmentInjector, null, {\n    optional: true\n  });\n  // Standalone components should have an environment injector. If one cannot be\n  // found we may be in a test case for low level functionality that did not explicitly\n  // setup this injector. In those cases, we simply ignore this event.\n  if (environmentInjector === null) {\n    return;\n  }\n  const {\n    standaloneInjectorToComponent\n  } = frameworkDIDebugData;\n  // If our injector has already been mapped, as is the case\n  // when a standalone component imports another standalone component,\n  // we consider the original component (the component doing the importing)\n  // as the component connected to our injector.\n  if (standaloneInjectorToComponent.has(environmentInjector)) {\n    return;\n  }\n  // If our injector hasn't been mapped, then we map it to the standalone component\n  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);\n}\nfunction isStandaloneComponent(value) {\n  const def = getComponentDef(value);\n  return !!def?.standalone;\n}\n/**\r\n *\r\n * Stores the emitted ProviderRecords from the InjectorProfilerEventType.ProviderConfigured\r\n * event in frameworkDIDebugData.resolverToProviders\r\n *\r\n * @param context InjectorProfilerContext the injection context that this event occurred in.\r\n * @param data ProviderRecord an object containing the instance that was just created\r\n *\r\n */\nfunction handleProviderConfiguredEvent(context, data) {\n  const {\n    resolverToProviders\n  } = frameworkDIDebugData;\n  let diResolver;\n  if (context?.injector instanceof NodeInjector) {\n    diResolver = getNodeInjectorTNode(context.injector);\n  } else {\n    diResolver = context.injector;\n  }\n  if (diResolver === null) {\n    throwError('A ProviderConfigured event must be run within an injection context.');\n  }\n  if (!resolverToProviders.has(diResolver)) {\n    resolverToProviders.set(diResolver, []);\n  }\n  resolverToProviders.get(diResolver).push(data);\n}\nfunction getDIResolver(injector) {\n  let diResolver = null;\n  if (injector === undefined) {\n    return diResolver;\n  }\n  // We use the LView as the diResolver for NodeInjectors because they\n  // do not persist anywhere in the framework. They are simply wrappers around an LView and a TNode\n  // that do persist. Because of this, we rely on the LView of the NodeInjector in order to use\n  // as a concrete key to represent this injector. If we get the same LView back later, we know\n  // we're looking at the same injector.\n  if (injector instanceof NodeInjector) {\n    diResolver = getNodeInjectorLView(injector);\n  }\n  // Other injectors can be used a keys for a map because their instances\n  // persist\n  else {\n    diResolver = injector;\n  }\n  return diResolver;\n}\n// inspired by\n// https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-canbeheldweakly\nfunction canBeHeldWeakly(value) {\n  // we check for value !== null here because typeof null === 'object\n  return value !== null && (typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol');\n}\n\n/**\r\n * Marks a component for check (in case of OnPush components) and synchronously\r\n * performs change detection on the application this component belongs to.\r\n *\r\n * @param component Component to {@link /api/core/ChangeDetectorRef#markForCheck mark for check}\r\n *\r\n * @publicApi\r\n */\nfunction applyChanges(component) {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component), 3 /* NotificationSource.DebugApplyChanges */);\n  getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));\n}\n/**\r\n * Synchronously perform change detection on a component (and possibly its sub-components).\r\n *\r\n * This function triggers change detection in a synchronous way on a component.\r\n *\r\n * @param component The component which the change detection should be performed on.\r\n */\nfunction detectChanges(component) {\n  const view = getComponentViewByInstance(component);\n  view[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  detectChangesInternal(view);\n}\n\n/**\r\n * Retrieves all defer blocks in a given LView.\r\n *\r\n * @param lView lView with defer blocks\r\n * @param deferBlocks defer block aggregator array\r\n */\nfunction getDeferBlocks$1(lView, deferBlocks) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      // An LContainer may represent an instance of a defer block, in which case\n      // we store it as a result. Otherwise, keep iterating over LContainer views and\n      // look for defer blocks.\n      const isLast = i === tView.bindingStartIndex - 1;\n      if (!isLast) {\n        const tNode = tView.data[i];\n        const tDetails = getTDeferBlockDetails(tView, tNode);\n        if (isTDeferBlockDetails(tDetails)) {\n          deferBlocks.push({\n            lContainer,\n            lView,\n            tNode,\n            tDetails\n          });\n          // This LContainer represents a defer block, so we exit\n          // this iteration and don't inspect views in this LContainer.\n          continue;\n        }\n      }\n      // The host can be an `LView` if this is the container\n      // for a component that injects `ViewContainerRef`.\n      if (isLView(lContainer[HOST])) {\n        getDeferBlocks$1(lContainer[HOST], deferBlocks);\n      }\n      for (let j = CONTAINER_HEADER_OFFSET; j < lContainer.length; j++) {\n        getDeferBlocks$1(lContainer[j], deferBlocks);\n      }\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `getDeferBlocks` recursively.\n      getDeferBlocks$1(lView[i], deferBlocks);\n    }\n  }\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Gets all of the `@defer` blocks that are present inside the specified DOM node.\r\n * @param node Node in which to look for `@defer` blocks.\r\n *\r\n * @publicApi\r\n */\nfunction getDeferBlocks(node) {\n  const results = [];\n  const lView = getLContext(node)?.lView;\n  if (lView) {\n    findDeferBlocks(node, lView, results);\n  }\n  return results;\n}\n/**\r\n * Finds all the `@defer` blocks inside a specific node and view.\r\n * @param node Node in which to search for blocks.\r\n * @param lView View within the node in which to search for blocks.\r\n * @param results Array to which to add blocks once they're found.\r\n */\nfunction findDeferBlocks(node, lView, results) {\n  const viewInjector = lView[INJECTOR];\n  const registry = viewInjector.get(DEHYDRATED_BLOCK_REGISTRY, null, {\n    optional: true\n  });\n  const blocks = [];\n  getDeferBlocks$1(lView, blocks);\n  const transferState = viewInjector.get(TransferState);\n  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  for (const details of blocks) {\n    const native = getNativeByTNode(details.tNode, details.lView);\n    const lDetails = getLDeferBlockDetails(details.lView, details.tNode);\n    // The LView from `getLContext` might be the view the element is placed in.\n    // Filter out defer blocks that aren't inside the specified root node.\n    if (!node.contains(native)) {\n      continue;\n    }\n    const tDetails = details.tDetails;\n    const renderedLView = getRendererLView(details);\n    const rootNodes = [];\n    const hydrationState = inferHydrationState(tDetails, lDetails, registry);\n    if (renderedLView !== null) {\n      collectNativeNodes(renderedLView[TVIEW], renderedLView, renderedLView[TVIEW].firstChild, rootNodes);\n    } else if (hydrationState === 'dehydrated') {\n      // We'll find the number of root nodes in the transfer state and\n      // collect that number of elements that precede the defer block comment node.\n      const deferId = lDetails[SSR_UNIQUE_ID];\n      const deferData = deferBlockParents[deferId];\n      const numberOfRootNodes = deferData[NUM_ROOT_NODES];\n      let collectedNodeCount = 0;\n      const deferBlockCommentNode = details.lContainer[NATIVE];\n      let currentNode = deferBlockCommentNode.previousSibling;\n      while (collectedNodeCount < numberOfRootNodes && currentNode) {\n        rootNodes.unshift(currentNode);\n        currentNode = currentNode.previousSibling;\n        collectedNodeCount++;\n      }\n    }\n    const data = {\n      state: stringifyState(lDetails[DEFER_BLOCK_STATE]),\n      incrementalHydrationState: hydrationState,\n      hasErrorBlock: tDetails.errorTmplIndex !== null,\n      loadingBlock: {\n        exists: tDetails.loadingTmplIndex !== null,\n        minimumTime: tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null,\n        afterTime: tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null\n      },\n      placeholderBlock: {\n        exists: tDetails.placeholderTmplIndex !== null,\n        minimumTime: tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null\n      },\n      triggers: tDetails.debug?.triggers ? Array.from(tDetails.debug.triggers).sort() : [],\n      rootNodes\n    };\n    results.push(data);\n    // `getDeferBlocks` does not resolve nested defer blocks so we have to recurse manually.\n    if (renderedLView !== null) {\n      findDeferBlocks(node, renderedLView, results);\n    }\n  }\n}\n/**\r\n * Turns the `DeferBlockState` into a string which is more readable than the enum form.\r\n *\r\n * @param lDetails Information about the\r\n * @returns\r\n */\nfunction stringifyState(state) {\n  switch (state) {\n    case DeferBlockState.Complete:\n      return 'complete';\n    case DeferBlockState.Loading:\n      return 'loading';\n    case DeferBlockState.Placeholder:\n      return 'placeholder';\n    case DeferBlockState.Error:\n      return 'error';\n    case DeferBlockInternalState.Initial:\n      return 'initial';\n    default:\n      throw new Error(`Unrecognized state ${state}`);\n  }\n}\n/**\r\n * Infers the hydration state of a specific defer block.\r\n * @param tDetails Static defer block information.\r\n * @param lDetails Instance defer block information.\r\n * @param registry Registry coordinating the hydration of defer blocks.\r\n */\nfunction inferHydrationState(tDetails, lDetails, registry) {\n  if (registry === null || lDetails[SSR_UNIQUE_ID] === null || tDetails.hydrateTriggers === null || tDetails.hydrateTriggers.has(7 /* DeferBlockTrigger.Never */)) {\n    return 'not-configured';\n  }\n  return registry.has(lDetails[SSR_UNIQUE_ID]) ? 'dehydrated' : 'hydrated';\n}\n/**\r\n * Gets the current LView that is rendered out in a defer block.\r\n * @param details Instance information about the block.\r\n */\nfunction getRendererLView(details) {\n  // Defer block containers can only ever contain one view.\n  // If they're empty, it means that nothing is rendered.\n  if (details.lContainer.length <= CONTAINER_HEADER_OFFSET) {\n    return null;\n  }\n  const lView = details.lContainer[CONTAINER_HEADER_OFFSET];\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n\n/**\r\n * Discovers the dependencies of an injectable instance. Provides DI information about each\r\n * dependency that the injectable was instantiated with, including where they were provided from.\r\n *\r\n * @param injector An injector instance\r\n * @param token a DI token that was constructed by the given injector instance\r\n * @returns an object that contains the created instance of token as well as all of the dependencies\r\n * that it was instantiated with OR undefined if the token was not created within the given\r\n * injector.\r\n */\nfunction getDependenciesFromInjectable(injector, token) {\n  // First we check to see if the token given maps to an actual instance in the injector given.\n  // We use `self: true` because we only want to look at the injector we were given.\n  // We use `optional: true` because it's possible that the token we were given was never\n  // constructed by the injector we were given.\n  const instance = injector.get(token, null, {\n    self: true,\n    optional: true\n  });\n  if (instance === null) {\n    throw new Error(`Unable to determine instance of ${token} in given injector`);\n  }\n  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);\n  const resolutionPath = getInjectorResolutionPath(injector);\n  const dependencies = unformattedDependencies.map(dep => {\n    // injectedIn contains private fields, so we omit it from the response\n    const formattedDependency = {\n      value: dep.value\n    };\n    // convert injection flags to booleans\n    const flags = dep.flags;\n    formattedDependency.flags = {\n      optional: (8 /* InternalInjectFlags.Optional */ & flags) === 8 /* InternalInjectFlags.Optional */,\n      host: (1 /* InternalInjectFlags.Host */ & flags) === 1 /* InternalInjectFlags.Host */,\n      self: (2 /* InternalInjectFlags.Self */ & flags) === 2 /* InternalInjectFlags.Self */,\n      skipSelf: (4 /* InternalInjectFlags.SkipSelf */ & flags) === 4 /* InternalInjectFlags.SkipSelf */\n    };\n    // find the injector that provided the dependency\n    for (let i = 0; i < resolutionPath.length; i++) {\n      const injectorToCheck = resolutionPath[i];\n      // if skipSelf is true we skip the first injector\n      if (i === 0 && formattedDependency.flags.skipSelf) {\n        continue;\n      }\n      // host only applies to NodeInjectors\n      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {\n        break;\n      }\n      const instance = injectorToCheck.get(dep.token, null, {\n        self: true,\n        optional: true\n      });\n      if (instance !== null) {\n        // if host flag is true we double check that we can get the service from the first element\n        // in the resolution path by using the host flag. This is done to make sure that we've found\n        // the correct providing injector, and not a node injector that is connected to our path via\n        // a router outlet.\n        if (formattedDependency.flags.host) {\n          const firstInjector = resolutionPath[0];\n          const lookupFromFirstInjector = firstInjector.get(dep.token, null, {\n            ...formattedDependency.flags,\n            optional: true\n          });\n          if (lookupFromFirstInjector !== null) {\n            formattedDependency.providedIn = injectorToCheck;\n          }\n          break;\n        }\n        formattedDependency.providedIn = injectorToCheck;\n        break;\n      }\n      // if self is true we stop after the first injector\n      if (i === 0 && formattedDependency.flags.self) {\n        break;\n      }\n    }\n    if (dep.token) formattedDependency.token = dep.token;\n    return formattedDependency;\n  });\n  return {\n    instance,\n    dependencies\n  };\n}\nfunction getDependenciesForTokenInInjector(token, injector) {\n  const {\n    resolverToTokenToDependencies\n  } = getFrameworkDIDebugData();\n  if (!(injector instanceof NodeInjector)) {\n    return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];\n  }\n  const lView = getNodeInjectorLView(injector);\n  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);\n  const dependencies = tokenDependencyMap?.get(token) ?? [];\n  // In the NodeInjector case, all injections for every node are stored in the same lView.\n  // We use the injectedIn field of the dependency to filter out the dependencies that\n  // do not come from the same node as the instance we're looking at.\n  return dependencies.filter(dependency => {\n    const dependencyNode = dependency.injectedIn?.tNode;\n    if (dependencyNode === undefined) {\n      return false;\n    }\n    const instanceNode = getNodeInjectorTNode(injector);\n    assertTNode(dependencyNode);\n    assertTNode(instanceNode);\n    return dependencyNode === instanceNode;\n  });\n}\n/**\r\n * Gets the class associated with an injector that contains a provider `imports` array in it's\r\n * definition\r\n *\r\n * For Module Injectors this returns the NgModule constructor.\r\n *\r\n * For Standalone injectors this returns the standalone component constructor.\r\n *\r\n * @param injector Injector an injector instance\r\n * @returns the constructor where the `imports` array that configures this injector is located\r\n */\nfunction getProviderImportsContainer(injector) {\n  const {\n    standaloneInjectorToComponent\n  } = getFrameworkDIDebugData();\n  // standalone components configure providers through a component def, so we have to\n  // use the standalone component associated with this injector if Injector represents\n  // a standalone components EnvironmentInjector\n  if (standaloneInjectorToComponent.has(injector)) {\n    return standaloneInjectorToComponent.get(injector);\n  }\n  // Module injectors configure providers through their NgModule def, so we use the\n  // injector to lookup its NgModuleRef and through that grab its instance\n  const defTypeRef = injector.get(NgModuleRef$1, null, {\n    self: true,\n    optional: true\n  });\n  // If we can't find an associated imports container, return null.\n  // This could be the case if this function is called with an R3Injector that does not represent\n  // a standalone component or NgModule.\n  if (defTypeRef === null) {\n    return null;\n  }\n  // In standalone applications, the root environment injector created by bootstrapApplication\n  // may have no associated \"instance\".\n  if (defTypeRef.instance === null) {\n    return null;\n  }\n  return defTypeRef.instance.constructor;\n}\n/**\r\n * Gets the providers configured on a NodeInjector\r\n *\r\n * @param injector A NodeInjector instance\r\n * @returns ProviderRecord[] an array of objects representing the providers configured on this\r\n *     injector\r\n */\nfunction getNodeInjectorProviders(injector) {\n  const diResolver = getNodeInjectorTNode(injector);\n  const {\n    resolverToProviders\n  } = getFrameworkDIDebugData();\n  return resolverToProviders.get(diResolver) ?? [];\n}\n/**\r\n * Gets a mapping of providers configured on an injector to their import paths\r\n *\r\n * ModuleA -> imports ModuleB\r\n * ModuleB -> imports ModuleC\r\n * ModuleB -> provides MyServiceA\r\n * ModuleC -> provides MyServiceB\r\n *\r\n * getProviderImportPaths(ModuleA)\r\n * > Map(2) {\r\n *   MyServiceA => [ModuleA, ModuleB]\r\n *   MyServiceB => [ModuleA, ModuleB, ModuleC]\r\n *  }\r\n *\r\n * @param providerImportsContainer constructor of class that contains an `imports` array in it's\r\n *     definition\r\n * @returns A Map object that maps providers to an array of constructors representing it's import\r\n *     path\r\n *\r\n */\nfunction getProviderImportPaths(providerImportsContainer) {\n  const providerToPath = new Map();\n  const visitedContainers = new Set();\n  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);\n  walkProviderTree(providerImportsContainer, visitor, [], new Set());\n  return providerToPath;\n}\n/**\r\n *\r\n * Higher order function that returns a visitor for WalkProviderTree\r\n *\r\n * Takes in a Map and Set to keep track of the providers and containers\r\n * visited, so that we can discover the import paths of these providers\r\n * during the traversal.\r\n *\r\n * This visitor takes advantage of the fact that walkProviderTree performs a\r\n * postorder traversal of the provider tree for the passed in container. Because postorder\r\n * traversal recursively processes subtrees from leaf nodes until the traversal reaches the root,\r\n * we write a visitor that constructs provider import paths in reverse.\r\n *\r\n *\r\n * We use the visitedContainers set defined outside this visitor\r\n * because we want to run some logic only once for\r\n * each container in the tree. That logic can be described as:\r\n *\r\n *\r\n * 1. for each discovered_provider and discovered_path in the incomplete provider paths we've\r\n * already discovered\r\n * 2. get the first container in discovered_path\r\n * 3. if that first container is in the imports array of the container we're visiting\r\n *    Then the container we're visiting is also in the import path of discovered_provider, so we\r\n *    unshift discovered_path with the container we're currently visiting\r\n *\r\n *\r\n * Example Run:\r\n * ```\r\n *                 ┌──────────┐\r\n *                 │containerA│\r\n *      ┌─imports-─┤          ├──imports─┐\r\n *      │          │  provA   │          │\r\n *      │          │  provB   │          │\r\n *      │          └──────────┘          │\r\n *      │                                │\r\n *     ┌▼─────────┐             ┌────────▼─┐\r\n *     │containerB│             │containerC│\r\n *     │          │             │          │\r\n *     │  provD   │             │  provF   │\r\n *     │  provE   │             │  provG   │\r\n *     └──────────┘             └──────────┘\r\n * ```\r\n *\r\n * Each step of the traversal,\r\n *\r\n * ```\r\n * visitor(provD, containerB)\r\n * providerToPath === Map { provD => [containerB] }\r\n * visitedContainers === Set { containerB }\r\n *\r\n * visitor(provE, containerB)\r\n * providerToPath === Map { provD => [containerB], provE => [containerB] }\r\n * visitedContainers === Set { containerB }\r\n *\r\n * visitor(provF, containerC)\r\n * providerToPath === Map { provD => [containerB], provE => [containerB], provF => [containerC] }\r\n * visitedContainers === Set { containerB, containerC }\r\n *\r\n * visitor(provG, containerC)\r\n * providerToPath === Map {\r\n *   provD => [containerB], provE => [containerB], provF => [containerC], provG => [containerC]\r\n * }\r\n * visitedContainers === Set { containerB, containerC }\r\n *\r\n * visitor(provA, containerA)\r\n * providerToPath === Map {\r\n *   provD => [containerA, containerB],\r\n *   provE => [containerA, containerB],\r\n *   provF => [containerA, containerC],\r\n *   provG => [containerA, containerC],\r\n *   provA => [containerA]\r\n * }\r\n * visitedContainers === Set { containerB, containerC, containerA }\r\n *\r\n * visitor(provB, containerA)\r\n * providerToPath === Map {\r\n *   provD => [containerA, containerB],\r\n *   provE => [containerA, containerB],\r\n *   provF => [containerA, containerC],\r\n *   provG => [containerA, containerC],\r\n *   provA => [containerA]\r\n *   provB => [containerA]\r\n * }\r\n * visitedContainers === Set { containerB, containerC, containerA }\r\n * ```\r\n *\r\n * @param providerToPath Map map of providers to paths that this function fills\r\n * @param visitedContainers Set a set to keep track of the containers we've already visited\r\n * @return function(provider SingleProvider, container: Type<unknown> | InjectorType<unknown>) =>\r\n *     void\r\n */\nfunction walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {\n  return (provider, container) => {\n    // If the provider is not already in the providerToPath map,\n    // add an entry with the provider as the key and an array containing the current container as\n    // the value\n    if (!providerToPath.has(provider)) {\n      providerToPath.set(provider, [container]);\n    }\n    // This block will run exactly once for each container in the import tree.\n    // This is where we run the logic to check the imports array of the current\n    // container to see if it's the next container in the path for our currently\n    // discovered providers.\n    if (!visitedContainers.has(container)) {\n      // Iterate through the providers we've already seen\n      for (const prov of providerToPath.keys()) {\n        const existingImportPath = providerToPath.get(prov);\n        let containerDef = getInjectorDef(container);\n        if (!containerDef) {\n          const ngModule = container.ngModule;\n          containerDef = getInjectorDef(ngModule);\n        }\n        if (!containerDef) {\n          return;\n        }\n        const lastContainerAddedToPath = existingImportPath[0];\n        let isNextStepInPath = false;\n        deepForEach(containerDef.imports, moduleImport => {\n          if (isNextStepInPath) {\n            return;\n          }\n          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;\n          if (isNextStepInPath) {\n            providerToPath.get(prov)?.unshift(container);\n          }\n        });\n      }\n    }\n    visitedContainers.add(container);\n  };\n}\n/**\r\n * Gets the providers configured on an EnvironmentInjector\r\n *\r\n * @param injector EnvironmentInjector\r\n * @returns an array of objects representing the providers of the given injector\r\n */\nfunction getEnvironmentInjectorProviders(injector) {\n  const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];\n  // platform injector has no provider imports container so can we skip trying to\n  // find import paths\n  if (isPlatformInjector(injector)) {\n    return providerRecordsWithoutImportPaths;\n  }\n  const providerImportsContainer = getProviderImportsContainer(injector);\n  if (providerImportsContainer === null) {\n    // We assume that if an environment injector exists without an associated provider imports\n    // container, it was created without such a container. Some examples cases where this could\n    // happen:\n    // - The root injector of a standalone application\n    // - A router injector created by using the providers array in a lazy loaded route\n    // - A manually created injector that is attached to the injector tree\n    // Since each of these cases has no provider container, there is no concept of import paths,\n    // so we can simply return the provider records.\n    return providerRecordsWithoutImportPaths;\n  }\n  const providerToPath = getProviderImportPaths(providerImportsContainer);\n  const providerRecords = [];\n  for (const providerRecord of providerRecordsWithoutImportPaths) {\n    const provider = providerRecord.provider;\n    // Ignore these special providers for now until we have a cleaner way of\n    // determing when they are provided by the framework vs provided by the user.\n    const token = provider.provide;\n    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {\n      continue;\n    }\n    let importPath = providerToPath.get(provider) ?? [];\n    const def = getComponentDef(providerImportsContainer);\n    const isStandaloneComponent = !!def?.standalone;\n    // We prepend the component constructor in the standalone case\n    // because walkProviderTree does not visit this constructor during it's traversal\n    if (isStandaloneComponent) {\n      importPath = [providerImportsContainer, ...importPath];\n    }\n    providerRecords.push({\n      ...providerRecord,\n      importPath\n    });\n  }\n  return providerRecords;\n}\nfunction isPlatformInjector(injector) {\n  return injector instanceof R3Injector && injector.scopes.has('platform');\n}\n/**\r\n * Gets the providers configured on an injector.\r\n *\r\n * @param injector the injector to lookup the providers of\r\n * @returns ProviderRecord[] an array of objects representing the providers of the given injector\r\n */\nfunction getInjectorProviders(injector) {\n  if (injector instanceof NodeInjector) {\n    return getNodeInjectorProviders(injector);\n  } else if (injector instanceof EnvironmentInjector) {\n    return getEnvironmentInjectorProviders(injector);\n  }\n  throwError('getInjectorProviders only supports NodeInjector and EnvironmentInjector');\n}\n/**\r\n *\r\n * Given an injector, this function will return\r\n * an object containing the type and source of the injector.\r\n *\r\n * |              | type        | source                                                      |\r\n * |--------------|-------------|-------------------------------------------------------------|\r\n * | NodeInjector | element     | DOM element that created this injector                      |\r\n * | R3Injector   | environment | `injector.source`                                           |\r\n * | NullInjector | null        | null                                                        |\r\n *\r\n * @param injector the Injector to get metadata for\r\n * @returns an object containing the type and source of the given injector. If the injector metadata\r\n *     cannot be determined, returns null.\r\n */\nfunction getInjectorMetadata(injector) {\n  if (injector instanceof NodeInjector) {\n    const lView = getNodeInjectorLView(injector);\n    const tNode = getNodeInjectorTNode(injector);\n    assertTNodeForLView(tNode, lView);\n    return {\n      type: 'element',\n      source: getNativeByTNode(tNode, lView)\n    };\n  }\n  if (injector instanceof R3Injector) {\n    return {\n      type: 'environment',\n      source: injector.source ?? null\n    };\n  }\n  if (injector instanceof NullInjector) {\n    return {\n      type: 'null',\n      source: null\n    };\n  }\n  return null;\n}\nfunction getInjectorResolutionPath(injector) {\n  const resolutionPath = [injector];\n  getInjectorResolutionPathHelper(injector, resolutionPath);\n  return resolutionPath;\n}\nfunction getInjectorResolutionPathHelper(injector, resolutionPath) {\n  const parent = getInjectorParent(injector);\n  // if getInjectorParent can't find a parent, then we've either reached the end\n  // of the path, or we need to move from the Element Injector tree to the\n  // module injector tree using the first injector in our path as the connection point.\n  if (parent === null) {\n    if (injector instanceof NodeInjector) {\n      const firstInjector = resolutionPath[0];\n      if (firstInjector instanceof NodeInjector) {\n        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);\n        if (moduleInjector === null) {\n          throwError('NodeInjector must have some connection to the module injector tree');\n        }\n        resolutionPath.push(moduleInjector);\n        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);\n      }\n      return resolutionPath;\n    }\n  } else {\n    resolutionPath.push(parent);\n    getInjectorResolutionPathHelper(parent, resolutionPath);\n  }\n  return resolutionPath;\n}\n/**\r\n * Gets the parent of an injector.\r\n *\r\n * This function is not able to make the jump from the Element Injector Tree to the Module\r\n * injector tree. This is because the \"parent\" (the next step in the reoslution path)\r\n * of a root NodeInjector is dependent on which NodeInjector ancestor initiated\r\n * the DI lookup. See getInjectorResolutionPath for a function that can make this jump.\r\n *\r\n * In the below diagram:\r\n * ```ts\r\n * getInjectorParent(NodeInjectorB)\r\n *  > NodeInjectorA\r\n * getInjectorParent(NodeInjectorA) // or getInjectorParent(getInjectorParent(NodeInjectorB))\r\n *  > null // cannot jump to ModuleInjector tree\r\n * ```\r\n *\r\n * ```\r\n *                ┌───────┐                ┌───────────────────┐\r\n *    ┌───────────┤ModuleA├───Injector────►│EnvironmentInjector│\r\n *    │           └───┬───┘                └───────────────────┘\r\n *    │               │\r\n *    │           bootstraps\r\n *    │               │\r\n *    │               │\r\n *    │          ┌────▼─────┐                 ┌─────────────┐\r\n * declares      │ComponentA├────Injector────►│NodeInjectorA│\r\n *    │          └────┬─────┘                 └─────▲───────┘\r\n *    │               │                             │\r\n *    │            renders                        parent\r\n *    │               │                             │\r\n *    │          ┌────▼─────┐                 ┌─────┴───────┐\r\n *    └─────────►│ComponentB├────Injector────►│NodeInjectorB│\r\n *               └──────────┘                 └─────────────┘\r\n *```\r\n *\r\n * @param injector an Injector to get the parent of\r\n * @returns Injector the parent of the given injector\r\n */\nfunction getInjectorParent(injector) {\n  if (injector instanceof R3Injector) {\n    return injector.parent;\n  }\n  let tNode;\n  let lView;\n  if (injector instanceof NodeInjector) {\n    tNode = getNodeInjectorTNode(injector);\n    lView = getNodeInjectorLView(injector);\n  } else if (injector instanceof NullInjector) {\n    return null;\n  } else if (injector instanceof ChainedInjector) {\n    return injector.parentInjector;\n  } else {\n    throwError('getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector');\n  }\n  const parentLocation = getParentInjectorLocation(tNode, lView);\n  if (hasParentInjector(parentLocation)) {\n    const parentInjectorIndex = getParentInjectorIndex(parentLocation);\n    const parentLView = getParentInjectorView(parentLocation, lView);\n    const parentTView = parentLView[TVIEW];\n    const parentTNode = parentTView.data[parentInjectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n    return new NodeInjector(parentTNode, parentLView);\n  } else {\n    const chainedInjector = lView[INJECTOR];\n    // Case where chainedInjector.injector is an OutletInjector and chainedInjector.injector.parent\n    // is a NodeInjector.\n    // todo(aleksanderbodurri): ideally nothing in packages/core should deal\n    // directly with router concerns. Refactor this so that we can make the jump from\n    // NodeInjector -> OutletInjector -> NodeInjector\n    // without explicitly relying on types contracts from packages/router\n    const injectorParent = chainedInjector.injector?.parent;\n    if (injectorParent instanceof NodeInjector) {\n      return injectorParent;\n    }\n  }\n  return null;\n}\n/**\r\n * Gets the module injector of a NodeInjector.\r\n *\r\n * @param injector NodeInjector to get module injector of\r\n * @returns Injector representing module injector of the given NodeInjector\r\n */\nfunction getModuleInjectorOfNodeInjector(injector) {\n  let lView;\n  if (injector instanceof NodeInjector) {\n    lView = getNodeInjectorLView(injector);\n  } else {\n    throwError('getModuleInjectorOfNodeInjector must be called with a NodeInjector');\n  }\n  const inj = lView[INJECTOR];\n  const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;\n  if (!moduleInjector) {\n    throwError('NodeInjector must have some connection to the module injector tree');\n  }\n  return moduleInjector;\n}\nfunction isComputedNode(node) {\n  return node.kind === 'computed';\n}\nfunction isTemplateEffectNode(node) {\n  return node.kind === 'template';\n}\nfunction isEffectNode(node) {\n  return node.kind === 'effect';\n}\nfunction isSignalNode(node) {\n  return node.kind === 'signal';\n}\n/**\r\n *\r\n * @param injector\r\n * @returns Template consumer of given NodeInjector\r\n */\nfunction getTemplateConsumer(injector) {\n  const tNode = getNodeInjectorTNode(injector);\n  assertTNode(tNode);\n  const lView = getNodeInjectorLView(injector);\n  assertLView(lView);\n  const templateLView = lView[tNode.index];\n  if (isLView(templateLView)) {\n    return templateLView[REACTIVE_TEMPLATE_CONSUMER] ?? null;\n  }\n  return null;\n}\nfunction getNodesAndEdgesFromSignalMap(signalMap) {\n  const nodes = Array.from(signalMap.keys());\n  const debugSignalGraphNodes = [];\n  const edges = [];\n  for (const [consumer, producers] of signalMap.entries()) {\n    const consumerIndex = nodes.indexOf(consumer);\n    // collect node\n    if (isComputedNode(consumer) || isSignalNode(consumer)) {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName,\n        value: consumer.value,\n        kind: consumer.kind\n      });\n    } else if (isTemplateEffectNode(consumer)) {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName ?? consumer.lView?.[HOST]?.tagName?.toLowerCase?.(),\n        kind: consumer.kind\n      });\n    } else if (isEffectNode(consumer)) {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName,\n        kind: consumer.kind\n      });\n    } else {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName,\n        kind: consumer.kind\n      });\n    }\n    // collect edges for node\n    for (const producer of producers) {\n      edges.push({\n        consumer: consumerIndex,\n        producer: nodes.indexOf(producer)\n      });\n    }\n  }\n  return {\n    nodes: debugSignalGraphNodes,\n    edges\n  };\n}\nfunction extractEffectsFromInjector(injector) {\n  let diResolver = injector;\n  if (injector instanceof NodeInjector) {\n    const lView = getNodeInjectorLView(injector);\n    diResolver = lView;\n  }\n  const resolverToEffects = getFrameworkDIDebugData().resolverToEffects;\n  const effects = resolverToEffects.get(diResolver) ?? [];\n  return effects.map(effect => effect[SIGNAL]);\n}\nfunction extractSignalNodesAndEdgesFromRoots(nodes, signalDependenciesMap = new Map()) {\n  for (const node of nodes) {\n    if (signalDependenciesMap.has(node)) {\n      continue;\n    }\n    const producerNodes = node.producerNode ?? [];\n    signalDependenciesMap.set(node, producerNodes);\n    extractSignalNodesAndEdgesFromRoots(producerNodes, signalDependenciesMap);\n  }\n  return signalDependenciesMap;\n}\n/**\r\n * Returns a debug representation of the signal graph for the given injector.\r\n *\r\n * Currently only supports element injectors. Starts by discovering the consumer nodes\r\n * and then traverses their producer nodes to build the signal graph.\r\n *\r\n * @param injector The injector to get the signal graph for.\r\n * @returns A debug representation of the signal graph.\r\n * @throws If the injector is an environment injector.\r\n */\nfunction getSignalGraph(injector) {\n  let templateConsumer = null;\n  if (!(injector instanceof NodeInjector) && !(injector instanceof R3Injector)) {\n    return throwError('getSignalGraph must be called with a NodeInjector or R3Injector');\n  }\n  if (injector instanceof NodeInjector) {\n    templateConsumer = getTemplateConsumer(injector);\n  }\n  const nonTemplateEffectNodes = extractEffectsFromInjector(injector);\n  const signalNodes = templateConsumer ? [templateConsumer, ...nonTemplateEffectNodes] : nonTemplateEffectNodes;\n  const signalDependenciesMap = extractSignalNodesAndEdgesFromRoots(signalNodes);\n  return getNodesAndEdgesFromSignalMap(signalDependenciesMap);\n}\nlet changeDetectionRuns = 0;\nlet changeDetectionSyncRuns = 0;\nlet counter = 0;\nconst eventsStack = [];\nfunction measureStart(startEvent) {\n  eventsStack.push([startEvent, counter]);\n  console.timeStamp('Event_' + startEvent + '_' + counter++);\n}\nfunction measureEnd(startEvent, entryName, color) {\n  const top = eventsStack.pop();\n  assertDefined(top, 'Profiling error: could not find start event entry ' + startEvent);\n  assertEqual(top[0], startEvent, `Profiling error: expected to see ${startEvent} event but got ${top[0]}`);\n  console.timeStamp(entryName, 'Event_' + top[0] + '_' + top[1], undefined, '\\u{1F170}\\uFE0F Angular', undefined, color);\n}\nconst chromeDevToolsInjectorProfiler = event => {\n  const eventType = event.type;\n  if (eventType === 4 /* InjectorProfilerEventType.InjectorToCreateInstanceEvent */) {\n    measureStart(100 /* ProfilerDIEvent.InjectorToCreateInstanceEvent */);\n  } else if (eventType === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\n    const token = event.context.token;\n    measureEnd(100 /* ProfilerDIEvent.InjectorToCreateInstanceEvent */, getProviderTokenMeasureName(token), 'tertiary-dark');\n  }\n};\nconst devToolsProfiler = (event, instance, eventFn) => {\n  switch (event) {\n    case 8 /* ProfilerEvent.BootstrapApplicationStart */:\n    case 10 /* ProfilerEvent.BootstrapComponentStart */:\n    case 12 /* ProfilerEvent.ChangeDetectionStart */:\n    case 14 /* ProfilerEvent.ChangeDetectionSyncStart */:\n    case 16 /* ProfilerEvent.AfterRenderHooksStart */:\n    case 18 /* ProfilerEvent.ComponentStart */:\n    case 20 /* ProfilerEvent.DeferBlockStateStart */:\n    case 22 /* ProfilerEvent.DynamicComponentStart */:\n    case 0 /* ProfilerEvent.TemplateCreateStart */:\n    case 4 /* ProfilerEvent.LifecycleHookStart */:\n    case 2 /* ProfilerEvent.TemplateUpdateStart */:\n    case 24 /* ProfilerEvent.HostBindingsUpdateStart */:\n    case 6 /* ProfilerEvent.OutputStart */:\n      {\n        measureStart(event);\n        break;\n      }\n    case 9 /* ProfilerEvent.BootstrapApplicationEnd */:\n      {\n        measureEnd(8 /* ProfilerEvent.BootstrapApplicationStart */, 'Bootstrap application', 'primary-dark');\n        break;\n      }\n    case 11 /* ProfilerEvent.BootstrapComponentEnd */:\n      {\n        measureEnd(10 /* ProfilerEvent.BootstrapComponentStart */, 'Bootstrap component', 'primary-dark');\n        break;\n      }\n    case 13 /* ProfilerEvent.ChangeDetectionEnd */:\n      {\n        changeDetectionSyncRuns = 0;\n        measureEnd(12 /* ProfilerEvent.ChangeDetectionStart */, 'Change detection ' + changeDetectionRuns++, 'primary-dark');\n        break;\n      }\n    case 15 /* ProfilerEvent.ChangeDetectionSyncEnd */:\n      {\n        measureEnd(14 /* ProfilerEvent.ChangeDetectionSyncStart */, 'Synchronization ' + changeDetectionSyncRuns++, 'primary');\n        break;\n      }\n    case 17 /* ProfilerEvent.AfterRenderHooksEnd */:\n      {\n        measureEnd(16 /* ProfilerEvent.AfterRenderHooksStart */, 'After render hooks', 'primary');\n        break;\n      }\n    case 19 /* ProfilerEvent.ComponentEnd */:\n      {\n        const typeName = getComponentMeasureName(instance);\n        measureEnd(18 /* ProfilerEvent.ComponentStart */, typeName, 'primary-light');\n        break;\n      }\n    case 21 /* ProfilerEvent.DeferBlockStateEnd */:\n      {\n        measureEnd(20 /* ProfilerEvent.DeferBlockStateStart */, 'Defer block', 'primary-dark');\n        break;\n      }\n    case 23 /* ProfilerEvent.DynamicComponentEnd */:\n      {\n        measureEnd(22 /* ProfilerEvent.DynamicComponentStart */, 'Dynamic component creation', 'primary-dark');\n        break;\n      }\n    case 3 /* ProfilerEvent.TemplateUpdateEnd */:\n      {\n        measureEnd(2 /* ProfilerEvent.TemplateUpdateStart */, stringifyForError(eventFn) + ' (update)', 'secondary-dark');\n        break;\n      }\n    case 1 /* ProfilerEvent.TemplateCreateEnd */:\n      {\n        measureEnd(0 /* ProfilerEvent.TemplateCreateStart */, stringifyForError(eventFn) + ' (create)', 'secondary');\n        break;\n      }\n    case 25 /* ProfilerEvent.HostBindingsUpdateEnd */:\n      {\n        measureEnd(24 /* ProfilerEvent.HostBindingsUpdateStart */, 'HostBindings', 'secondary-dark');\n        break;\n      }\n    case 5 /* ProfilerEvent.LifecycleHookEnd */:\n      {\n        const typeName = getComponentMeasureName(instance);\n        measureEnd(4 /* ProfilerEvent.LifecycleHookStart */, `${typeName}:${stringifyForError(eventFn)}`, 'tertiary');\n        break;\n      }\n    case 7 /* ProfilerEvent.OutputEnd */:\n      {\n        measureEnd(6 /* ProfilerEvent.OutputStart */, stringifyForError(eventFn), 'tertiary-light');\n        break;\n      }\n    default:\n      {\n        throw new Error('Unexpected profiling event type: ' + event);\n      }\n  }\n};\nfunction getComponentMeasureName(instance) {\n  return instance.constructor.name;\n}\nfunction getProviderTokenMeasureName(token) {\n  if (isTypeProvider(token)) {\n    return token.name;\n  } else if (token.provide != null) {\n    return getProviderTokenMeasureName(token.provide);\n  }\n  return token.toString();\n}\n/**\r\n * Start listening to the Angular's internal performance-related events and route those to the Chrome DevTools performance panel.\r\n * This enables Angular-specific data visualization when recording a performance profile directly in the Chrome DevTools.\r\n *\r\n * Note: integration is enabled in the development mode only, this operation is noop in the production mode.\r\n *\r\n * @experimental\r\n *\r\n * @returns a function that can be invoked to stop sending profiling data.\r\n */\nfunction enableProfiling() {\n  performanceMarkFeature('Chrome DevTools profiling');\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const removeInjectorProfiler = setInjectorProfiler(chromeDevToolsInjectorProfiler);\n    const removeProfiler = setProfiler(devToolsProfiler);\n    return () => {\n      removeInjectorProfiler();\n      removeProfiler();\n    };\n  }\n  return () => {};\n}\n\n/// <reference path=\"../../../../goog.d.ts\" />\n/**\r\n * This file introduces series of globally accessible debug tools\r\n * to allow for the Angular debugging story to function.\r\n *\r\n * To see this in action run the following command:\r\n *\r\n *   bazel run //packages/core/test/bundling/todo:devserver\r\n *\r\n *  Then load `localhost:5432` and start using the console tools.\r\n */\n/**\r\n * This value reflects the property on the window where the dev\r\n * tools are patched (window.ng).\r\n * */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\nconst globalUtilsFunctions = {\n  /**\r\n   * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon\r\n   * in application's code. The contract of those functions might be changed in any release and/or a\r\n   * function can be removed completely.\r\n   */\n  'ɵgetDependenciesFromInjectable': getDependenciesFromInjectable,\n  'ɵgetInjectorProviders': getInjectorProviders,\n  'ɵgetInjectorResolutionPath': getInjectorResolutionPath,\n  'ɵgetInjectorMetadata': getInjectorMetadata,\n  'ɵsetProfiler': setProfiler,\n  'ɵgetSignalGraph': getSignalGraph,\n  'ɵgetDeferBlocks': getDeferBlocks,\n  'getDirectiveMetadata': getDirectiveMetadata$1,\n  'getComponent': getComponent,\n  'getContext': getContext,\n  'getListeners': getListeners,\n  'getOwningComponent': getOwningComponent,\n  'getHostElement': getHostElement,\n  'getInjector': getInjector,\n  'getRootComponents': getRootComponents,\n  'getDirectives': getDirectives,\n  'applyChanges': applyChanges,\n  'isSignal': isSignal,\n  'enableProfiling': enableProfiling\n};\nlet _published = false;\n/**\r\n * Publishes a collection of default debug tools onto`window.ng`.\r\n *\r\n * These functions are available globally when Angular is in development\r\n * mode and are automatically stripped away from prod mode is on.\r\n */\nfunction publishDefaultGlobalUtils$1() {\n  if (!_published) {\n    _published = true;\n    if (typeof window !== 'undefined') {\n      // Only configure the injector profiler when running in the browser.\n      setupFrameworkInjectorProfiler();\n    }\n    for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {\n      publishGlobalUtil(methodName, method);\n    }\n  }\n}\n/**\r\n * Publishes the given function to `window.ng` so that it can be\r\n * used from the browser console when an application is not in production.\r\n */\nfunction publishGlobalUtil(name, fn) {\n  publishUtil(name, fn);\n}\n/**\r\n * Publishes the given function to `window.ng` from package other than @angular/core\r\n * So that it can be used from the browser console when an application is not in production.\r\n */\nfunction publishExternalGlobalUtil(name, fn) {\n  publishUtil(name, fn);\n}\nfunction publishUtil(name, fn) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for AngularJS (via `goog.provide('ng....')`).\n    const w = _global;\n    ngDevMode && assertDefined(fn, 'function not defined');\n    w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};\n    w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn;\n  }\n}\n\n/**\r\n * Internal injection token that can used to access an instance of a Testability class.\r\n *\r\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\r\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\r\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\r\n * should be available, this token is used to add a provider that references the `Testability`\r\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\r\n */\nconst TESTABILITY = new InjectionToken('');\n/**\r\n * Internal injection token to retrieve Testability getter class instance.\r\n */\nconst TESTABILITY_GETTER = new InjectionToken('');\n/**\r\n * The Testability service provides testing hooks that can be accessed from\r\n * the browser.\r\n *\r\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\r\n * instantiate Testability by default (in both development and production modes).\r\n *\r\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\r\n * included by default. You can include it into your applications by getting the list of necessary\r\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\r\n * `options.providers` array. Example:\r\n *\r\n * ```ts\r\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\r\n *\r\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass Testability {\n  _ngZone;\n  registry;\n  _isZoneStable = true;\n  _callbacks = [];\n  _taskTrackingZone = null;\n  _destroyRef;\n  constructor(_ngZone, registry, testabilityGetter) {\n    this._ngZone = _ngZone;\n    this.registry = registry;\n    // Attempt to retrieve a `DestroyRef` optionally.\n    // For backwards compatibility reasons, this cannot be required.\n    if (isInInjectionContext()) {\n      this._destroyRef = inject(DestroyRef, {\n        optional: true\n      }) ?? undefined;\n    }\n    // If there was no Testability logic registered in the global scope\n    // before, register the current testability getter as a global one.\n    if (!_testabilityGetter) {\n      setTestabilityGetter(testabilityGetter);\n      testabilityGetter.addToWindow(registry);\n    }\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this._taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n  _watchAngularEvents() {\n    const onUnstableSubscription = this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._isZoneStable = false;\n      }\n    });\n    const onStableSubscription = this._ngZone.runOutsideAngular(() => this._ngZone.onStable.subscribe({\n      next: () => {\n        NgZone.assertNotInAngularZone();\n        queueMicrotask(() => {\n          this._isZoneStable = true;\n          this._runCallbacksIfReady();\n        });\n      }\n    }));\n    this._destroyRef?.onDestroy(() => {\n      onUnstableSubscription.unsubscribe();\n      onStableSubscription.unsubscribe();\n    });\n  }\n  /**\r\n   * Whether an associated application is stable\r\n   */\n  isStable() {\n    return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;\n  }\n  _runCallbacksIfReady() {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      queueMicrotask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop();\n          clearTimeout(cb.timeoutId);\n          cb.doneCb();\n        }\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter(cb => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n        return true;\n      });\n    }\n  }\n  getPendingTasks() {\n    if (!this._taskTrackingZone) {\n      return [];\n    }\n    // Copy the tasks data so that we don't leak tasks.\n    return this._taskTrackingZone.macroTasks.map(t => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: t.creationLocation,\n        data: t.data\n      };\n    });\n  }\n  addCallback(cb, timeout, updateCb) {\n    let timeoutId = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter(cb => cb.timeoutId !== timeoutId);\n        cb();\n      }, timeout);\n    }\n    this._callbacks.push({\n      doneCb: cb,\n      timeoutId: timeoutId,\n      updateCb: updateCb\n    });\n  }\n  /**\r\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n   *\r\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\r\n   *    whichever comes first.\r\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n   *    specified, whenStable() will wait forever.\r\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n   *    and no further updates will be issued.\r\n   */\n  whenStable(doneCb, timeout, updateCb) {\n    if (updateCb && !this._taskTrackingZone) {\n      throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n    }\n    this.addCallback(doneCb, timeout, updateCb);\n    this._runCallbacksIfReady();\n  }\n  /**\r\n   * Registers an application with a testability hook so that it can be tracked.\r\n   * @param token token of application, root element\r\n   *\r\n   * @internal\r\n   */\n  registerApplication(token) {\n    this.registry.registerApplication(token, this);\n  }\n  /**\r\n   * Unregisters an application.\r\n   * @param token token of application, root element\r\n   *\r\n   * @internal\r\n   */\n  unregisterApplication(token) {\n    this.registry.unregisterApplication(token);\n  }\n  /**\r\n   * Find providers by name\r\n   * @param using The root element to search from\r\n   * @param provider The name of binding variable\r\n   * @param exactMatch Whether using exactMatch\r\n   */\n  findProviders(using, provider, exactMatch) {\n    // TODO(juliemr): implement.\n    return [];\n  }\n  static ɵfac = function Testability_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Testability)(__inject(NgZone), __inject(TestabilityRegistry), __inject(TESTABILITY_GETTER));\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: Testability,\n    factory: Testability.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n    type: Injectable\n  }], () => [{\n    type: NgZone\n  }, {\n    type: TestabilityRegistry\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [TESTABILITY_GETTER]\n    }]\n  }], null);\n})();\n/**\r\n * A global registry of {@link Testability} instances for specific elements.\r\n * @publicApi\r\n */\nclass TestabilityRegistry {\n  /** @internal */\n  _applications = new Map();\n  /**\r\n   * Registers an application with a testability hook so that it can be tracked\r\n   * @param token token of application, root element\r\n   * @param testability Testability hook\r\n   */\n  registerApplication(token, testability) {\n    this._applications.set(token, testability);\n  }\n  /**\r\n   * Unregisters an application.\r\n   * @param token token of application, root element\r\n   */\n  unregisterApplication(token) {\n    this._applications.delete(token);\n  }\n  /**\r\n   * Unregisters all applications\r\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n  /**\r\n   * Get a testability hook associated with the application\r\n   * @param elem root element\r\n   */\n  getTestability(elem) {\n    return this._applications.get(elem) || null;\n  }\n  /**\r\n   * Get all registered testabilities\r\n   */\n  getAllTestabilities() {\n    return Array.from(this._applications.values());\n  }\n  /**\r\n   * Get all registered applications(root elements)\r\n   */\n  getAllRootElements() {\n    return Array.from(this._applications.keys());\n  }\n  /**\r\n   * Find testability of a node in the Tree\r\n   * @param elem node\r\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\r\n   * current node\r\n   */\n  findTestabilityInTree(elem, findInAncestors = true) {\n    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n  }\n  static ɵfac = function TestabilityRegistry_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TestabilityRegistry)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: TestabilityRegistry,\n    factory: TestabilityRegistry.ɵfac,\n    providedIn: 'platform'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n/**\r\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\r\n * @publicApi\r\n */\nfunction setTestabilityGetter(getter) {\n  _testabilityGetter = getter;\n}\nlet _testabilityGetter;\n\n/**\r\n * Determine if the argument is shaped like a Promise\r\n */\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\r\n * Determine if the argument is a Subscribable\r\n */\nfunction isSubscribable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\r\n * A DI token that you can use to provide\r\n * one or more initialization functions.\r\n *\r\n * The provided functions are injected at application startup and executed during\r\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\r\n * does not complete until the Promise is resolved or the Observable is completed.\r\n *\r\n * You can, for example, create a factory function that loads language data\r\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\r\n * The function is executed during the application bootstrap process,\r\n * and the needed data is available on startup.\r\n *\r\n * Note that the provided initializer is run in the injection context.\r\n *\r\n * @deprecated from v19.0.0, use provideAppInitializer instead\r\n *\r\n * @see {@link ApplicationInitStatus}\r\n * @see {@link provideAppInitializer}\r\n *\r\n * @usageNotes\r\n *\r\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\r\n * and a function returning a promise.\r\n * ### Example with NgModule-based application\r\n * ```ts\r\n *  function initializeApp(): Promise<any> {\r\n *    const http = inject(HttpClient);\r\n *    return firstValueFrom(\r\n *      http\r\n *        .get(\"https://someUrl.com/api/user\")\r\n *        .pipe(tap(user => { ... }))\r\n *    );\r\n *  }\r\n *\r\n *  @NgModule({\r\n *   imports: [BrowserModule],\r\n *   declarations: [AppComponent],\r\n *   bootstrap: [AppComponent],\r\n *   providers: [{\r\n *     provide: APP_INITIALIZER,\r\n *     useValue: initializeApp,\r\n *     multi: true,\r\n *    }]\r\n *   })\r\n *  export class AppModule {}\r\n * ```\r\n *\r\n * ### Example with standalone application\r\n * ```ts\r\n * function initializeApp() {\r\n *   const http = inject(HttpClient);\r\n *   return firstValueFrom(\r\n *     http\r\n *       .get(\"https://someUrl.com/api/user\")\r\n *       .pipe(tap(user => { ... }))\r\n *   );\r\n * }\r\n *\r\n * bootstrapApplication(App, {\r\n *   providers: [\r\n *     provideHttpClient(),\r\n *     {\r\n *       provide: APP_INITIALIZER,\r\n *       useValue: initializeApp,\r\n *       multi: true,\r\n *     },\r\n *   ],\r\n * });\r\n\r\n * ```\r\n *\r\n *\r\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\r\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\r\n * demo purposes to illustrate how the factory function can work with other providers available\r\n * through DI.\r\n *\r\n * ### Example with NgModule-based application\r\n * ```ts\r\n * function initializeApp() {\r\n *   const http = inject(HttpClient);\r\n *   return firstValueFrom(\r\n *     http\r\n *       .get(\"https://someUrl.com/api/user\")\r\n *       .pipe(tap(user => { ... }))\r\n *   );\r\n * }\r\n *\r\n * @NgModule({\r\n *   imports: [BrowserModule, HttpClientModule],\r\n *   declarations: [AppComponent],\r\n *   bootstrap: [AppComponent],\r\n *   providers: [{\r\n *     provide: APP_INITIALIZER,\r\n *     useValue: initializeApp,\r\n *     multi: true,\r\n *   }]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n *\r\n * ### Example with standalone application\r\n * ```ts\r\n * function initializeApp() {\r\n *   const http = inject(HttpClient);\r\n *   return firstValueFrom(\r\n *     http\r\n *       .get(\"https://someUrl.com/api/user\")\r\n *       .pipe(tap(user => { ... }))\r\n *   );\r\n * }\r\n *\r\n * bootstrapApplication(App, {\r\n *   providers: [\r\n *     provideHttpClient(),\r\n *     {\r\n *       provide: APP_INITIALIZER,\r\n *       useValue: initializeApp,\r\n *       multi: true,\r\n *     },\r\n *   ],\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nconst APP_INITIALIZER = new InjectionToken(ngDevMode ? 'Application Initializer' : '');\n/**\r\n * @description\r\n * The provided function is injected at application startup and executed during\r\n * app initialization. If the function returns a Promise or an Observable, initialization\r\n * does not complete until the Promise is resolved or the Observable is completed.\r\n *\r\n * You can, for example, create a function that loads language data\r\n * or an external configuration, and provide that function using `provideAppInitializer()`.\r\n * The function is executed during the application bootstrap process,\r\n * and the needed data is available on startup.\r\n *\r\n * Note that the provided initializer is run in the injection context.\r\n *\r\n * Previously, this was achieved using the `APP_INITIALIZER` token which is now deprecated.\r\n *\r\n * @see {@link APP_INITIALIZER}\r\n *\r\n * @usageNotes\r\n * The following example illustrates how to configure an initialization function using\r\n * `provideAppInitializer()`\r\n * ```ts\r\n * bootstrapApplication(App, {\r\n *   providers: [\r\n *     provideAppInitializer(() => {\r\n *       const http = inject(HttpClient);\r\n *       return firstValueFrom(\r\n *         http\r\n *           .get(\"https://someUrl.com/api/user\")\r\n *           .pipe(tap(user => { ... }))\r\n *       );\r\n *     }),\r\n *     provideHttpClient(),\r\n *   ],\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction provideAppInitializer(initializerFn) {\n  return makeEnvironmentProviders([{\n    provide: APP_INITIALIZER,\n    multi: true,\n    useValue: initializerFn\n  }]);\n}\n/**\r\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\r\n *\r\n * @publicApi\r\n */\nclass ApplicationInitStatus {\n  // Using non null assertion, these fields are defined below\n  // within the `new Promise` callback (synchronously).\n  resolve;\n  reject;\n  initialized = false;\n  done = false;\n  donePromise = new Promise((res, rej) => {\n    this.resolve = res;\n    this.reject = rej;\n  });\n  appInits = inject(APP_INITIALIZER, {\n    optional: true\n  }) ?? [];\n  injector = inject(Injector);\n  constructor() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\n      throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_INITIALIZER` token value ' + `(expected an array, but got ${typeof this.appInits}). ` + 'Please check that the `APP_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n    }\n  }\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n    const asyncInitPromises = [];\n    for (const appInits of this.appInits) {\n      const initResult = runInInjectionContext(this.injector, appInits);\n      if (isPromise(initResult)) {\n        asyncInitPromises.push(initResult);\n      } else if (isSubscribable(initResult)) {\n        const observableAsPromise = new Promise((resolve, reject) => {\n          initResult.subscribe({\n            complete: resolve,\n            error: reject\n          });\n        });\n        asyncInitPromises.push(observableAsPromise);\n      }\n    }\n    const complete = () => {\n      // @ts-expect-error overwriting a readonly\n      this.done = true;\n      this.resolve();\n    };\n    Promise.all(asyncInitPromises).then(() => {\n      complete();\n    }).catch(e => {\n      this.reject(e);\n    });\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n  static ɵfac = function ApplicationInitStatus_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ApplicationInitStatus)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: ApplicationInitStatus,\n    factory: ApplicationInitStatus.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n/**\r\n * A DI token that provides a set of callbacks to\r\n * be called for every component that is bootstrapped.\r\n *\r\n * Each callback must take a `ComponentRef` instance and return nothing.\r\n *\r\n * `(componentRef: ComponentRef) => void`\r\n *\r\n * @publicApi\r\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken(ngDevMode ? 'appBootstrapListener' : '');\nfunction publishDefaultGlobalUtils() {\n  ngDevMode && publishDefaultGlobalUtils$1();\n}\n/**\r\n * Sets the error for an invalid write to a signal to be an Angular `RuntimeError`.\r\n */\nfunction publishSignalConfiguration() {\n  setThrowInvalidWriteToSignalError(() => {\n    let errorMessage = '';\n    if (ngDevMode) {\n      const activeConsumer = getActiveConsumer();\n      errorMessage = activeConsumer && isReactiveLViewConsumer(activeConsumer) ? 'Writing to signals is not allowed while Angular renders the template (eg. interpolations)' : 'Writing to signals is not allowed in a `computed`';\n    }\n    throw new RuntimeError(600 /* RuntimeErrorCode.SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT */, errorMessage);\n  });\n}\nfunction isBoundToModule(cf) {\n  return cf.isBoundToModule;\n}\n/**\r\n * A token for third-party components that can register themselves with NgProbe.\r\n *\r\n * @deprecated\r\n * @publicApi\r\n */\nclass NgProbeToken {\n  name;\n  token;\n  constructor(name, token) {\n    this.name = name;\n    this.token = token;\n  }\n}\n/** Maximum number of times ApplicationRef will refresh all attached views in a single tick. */\nconst MAXIMUM_REFRESH_RERUNS = 10;\nfunction optionsReducer(dst, objs) {\n  if (Array.isArray(objs)) {\n    return objs.reduce(optionsReducer, dst);\n  }\n  return {\n    ...dst,\n    ...objs\n  };\n}\n/**\r\n * A reference to an Angular application running on a page.\r\n *\r\n * @usageNotes\r\n * ### isStable examples and caveats\r\n *\r\n * Note two important points about `isStable`, demonstrated in the examples below:\r\n * - the application will never be stable if you start any kind\r\n * of recurrent asynchronous task when the application starts\r\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\r\n * or using RxJS operators like `interval`);\r\n * - the `isStable` Observable runs outside of the Angular zone.\r\n *\r\n * Let's imagine that you start a recurrent task\r\n * (here incrementing a counter, using RxJS `interval`),\r\n * and at the same time subscribe to `isStable`.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef) {\r\n *   appRef.isStable.pipe(\r\n *      filter(stable => stable)\r\n *   ).subscribe(() => console.log('App is stable now');\r\n *   interval(1000).subscribe(counter => console.log(counter));\r\n * }\r\n * ```\r\n * In this example, `isStable` will never emit `true`,\r\n * and the trace \"App is stable now\" will never get logged.\r\n *\r\n * If you want to execute something when the app is stable,\r\n * you have to wait for the application to be stable\r\n * before starting your polling process.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     tap(stable => console.log('App is stable now')),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => console.log(counter));\r\n * }\r\n * ```\r\n * In this example, the trace \"App is stable now\" will be logged\r\n * and then the counter starts incrementing every second.\r\n *\r\n * Note also that this Observable runs outside of the Angular zone,\r\n * which means that the code in the subscription\r\n * to this Observable will not trigger the change detection.\r\n *\r\n * Let's imagine that instead of logging the counter value,\r\n * you update a field of your component\r\n * and display it in its template.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => this.value = counter);\r\n * }\r\n * ```\r\n * As the `isStable` Observable runs outside the zone,\r\n * the `value` field will be updated properly,\r\n * but the template will not be refreshed!\r\n *\r\n * You'll have to manually trigger the change detection to update the template.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => {\r\n *     this.value = counter;\r\n *     cd.detectChanges();\r\n *   });\r\n * }\r\n * ```\r\n *\r\n * Or make the subscription callback run inside the zone.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef, zone: NgZone) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => zone.run(() => this.value = counter));\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass ApplicationRef {\n  /** @internal */\n  _runningTick = false;\n  _destroyed = false;\n  _destroyListeners = [];\n  /** @internal */\n  _views = [];\n  internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n  afterRenderManager = inject(AfterRenderManager);\n  zonelessEnabled = inject(ZONELESS_ENABLED);\n  rootEffectScheduler = inject(EffectScheduler);\n  /**\r\n   * Current dirty state of the application across a number of dimensions (views, afterRender hooks,\r\n   * etc).\r\n   *\r\n   * A flag set here means that `tick()` will attempt to resolve the dirtiness when executed.\r\n   *\r\n   * @internal\r\n   */\n  dirtyFlags = 0 /* ApplicationRefDirtyFlags.None */;\n  /**\r\n   * Most recent snapshot from the `TracingService`, if any.\r\n   *\r\n   * This snapshot attempts to capture the context when `tick()` was first\r\n   * scheduled. It then runs wrapped in this context.\r\n   *\r\n   * @internal\r\n   */\n  tracingSnapshot = null;\n  // Needed for ComponentFixture temporarily during migration of autoDetect behavior\n  // Eventually the hostView of the fixture should just attach to ApplicationRef.\n  allTestViews = new Set();\n  autoDetectTestViews = new Set();\n  includeAllTestViews = false;\n  /** @internal */\n  afterTick = new Subject();\n  /** @internal */\n  get allViews() {\n    return [...(this.includeAllTestViews ? this.allTestViews : this.autoDetectTestViews).keys(), ...this._views];\n  }\n  /**\r\n   * Indicates whether this instance was destroyed.\r\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  /**\r\n   * Get a list of component types registered to this application.\r\n   * This list is populated even before the component is created.\r\n   */\n  componentTypes = [];\n  /**\r\n   * Get a list of components registered to this application.\r\n   */\n  components = [];\n  internalPendingTask = inject(PendingTasksInternal);\n  /**\r\n   * Returns an Observable that indicates when the application is stable or unstable.\r\n   */\n  get isStable() {\n    // This is a getter because it might be invoked after the application has been destroyed.\n    return this.internalPendingTask.hasPendingTasksObservable.pipe(map(pending => !pending));\n  }\n  constructor() {\n    // Inject the tracing service to initialize it.\n    inject(TracingService, {\n      optional: true\n    });\n  }\n  /**\r\n   * @returns A promise that resolves when the application becomes stable\r\n   */\n  whenStable() {\n    let subscription;\n    return new Promise(resolve => {\n      subscription = this.isStable.subscribe({\n        next: stable => {\n          if (stable) {\n            resolve();\n          }\n        }\n      });\n    }).finally(() => {\n      subscription.unsubscribe();\n    });\n  }\n  _injector = inject(EnvironmentInjector);\n  _rendererFactory = null;\n  /**\r\n   * The `EnvironmentInjector` used to create this application.\r\n   */\n  get injector() {\n    return this._injector;\n  }\n  /**\r\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\r\n   * specified element.\r\n   *\r\n   * @usageNotes\r\n   * ### Bootstrap process\r\n   *\r\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\r\n   * and kicks off automatic change detection. The target DOM element can be\r\n   * provided using the `rootSelectorOrNode` argument.\r\n   *\r\n   * If the target DOM element is not provided, Angular tries to find one on a page\r\n   * using the `selector` of the component that is being bootstrapped\r\n   * (first matched element is used).\r\n   *\r\n   * ### Example\r\n   *\r\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\r\n   * but it requires us to know the component while writing the application code.\r\n   *\r\n   * Imagine a situation where we have to wait for an API call to decide about the component to\r\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\r\n   * dynamically bootstrap a component.\r\n   *\r\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\r\n   *\r\n   * Optionally, a component can be mounted onto a DOM element that does not match the\r\n   * selector of the bootstrapped component.\r\n   *\r\n   * In the following example, we are providing a CSS selector to match the target element.\r\n   *\r\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\r\n   *\r\n   * While in this example, we are providing reference to a DOM node.\r\n   *\r\n   * {@example core/ts/platform/platform.ts region='domNode'}\r\n   */\n  bootstrap(componentOrFactory, rootSelectorOrNode) {\n    return this.bootstrapImpl(componentOrFactory, rootSelectorOrNode);\n  }\n  bootstrapImpl(componentOrFactory, rootSelectorOrNode, injector = Injector.NULL) {\n    const ngZone = this._injector.get(NgZone);\n    return ngZone.run(() => {\n      profiler(10 /* ProfilerEvent.BootstrapComponentStart */);\n      (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n      const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;\n      const initStatus = this._injector.get(ApplicationInitStatus);\n      if (!initStatus.done) {\n        let errorMessage = '';\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n          errorMessage = 'Cannot bootstrap as there are still asynchronous initializers running.' + (standalone ? '' : ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        throw new RuntimeError(405 /* RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING */, errorMessage);\n      }\n      let componentFactory;\n      if (isComponentFactory) {\n        componentFactory = componentOrFactory;\n      } else {\n        const resolver = this._injector.get(ComponentFactoryResolver$1);\n        componentFactory = resolver.resolveComponentFactory(componentOrFactory);\n      }\n      this.componentTypes.push(componentFactory.componentType);\n      // Create a factory associated with the current module if it's not bound to some other\n      const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);\n      const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n      const compRef = componentFactory.create(injector, [], selectorOrNode, ngModule);\n      const nativeElement = compRef.location.nativeElement;\n      const testability = compRef.injector.get(TESTABILITY, null);\n      testability?.registerApplication(nativeElement);\n      compRef.onDestroy(() => {\n        this.detachView(compRef.hostView);\n        remove(this.components, compRef);\n        testability?.unregisterApplication(nativeElement);\n      });\n      this._loadComponent(compRef);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const _console = this._injector.get(Console);\n        _console.log(`Angular is running in development mode.`);\n      }\n      profiler(11 /* ProfilerEvent.BootstrapComponentEnd */, compRef);\n      return compRef;\n    });\n  }\n  /**\r\n   * Invoke this method to explicitly process change detection and its side-effects.\r\n   *\r\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n   * further changes are detected. If additional changes are picked up during this second cycle,\r\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n   * pass.\r\n   * In this case, Angular throws an error, since an Angular application can only have one change\r\n   * detection pass during which all change detection must complete.\r\n   */\n  tick() {\n    if (!this.zonelessEnabled) {\n      this.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\n    }\n    this._tick();\n  }\n  /** @internal */\n  _tick() {\n    profiler(12 /* ProfilerEvent.ChangeDetectionStart */);\n    if (this.tracingSnapshot !== null) {\n      // Ensure we always run `tickImpl()` in the context of the most recent snapshot,\n      // if one exists. Snapshots may be reference counted by the implementation so\n      // we want to ensure that if we request a snapshot that we use it.\n      this.tracingSnapshot.run(TracingAction.CHANGE_DETECTION, this.tickImpl);\n    } else {\n      this.tickImpl();\n    }\n  }\n  tickImpl = () => {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    if (this._runningTick) {\n      throw new RuntimeError(101 /* RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK */, ngDevMode && 'ApplicationRef.tick is called recursively');\n    }\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      this._runningTick = true;\n      this.synchronize();\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (let view of this.allViews) {\n          view.checkNoChanges();\n        }\n      }\n    } finally {\n      this._runningTick = false;\n      this.tracingSnapshot?.dispose();\n      this.tracingSnapshot = null;\n      setActiveConsumer(prevConsumer);\n      this.afterTick.next();\n      profiler(13 /* ProfilerEvent.ChangeDetectionEnd */);\n    }\n  };\n  /**\r\n   * Performs the core work of synchronizing the application state with the UI, resolving any\r\n   * pending dirtiness (potentially in a loop).\r\n   */\n  synchronize() {\n    if (this._rendererFactory === null && !this._injector.destroyed) {\n      this._rendererFactory = this._injector.get(RendererFactory2, null, {\n        optional: true\n      });\n    }\n    let runs = 0;\n    while (this.dirtyFlags !== 0 /* ApplicationRefDirtyFlags.None */ && runs++ < MAXIMUM_REFRESH_RERUNS) {\n      profiler(14 /* ProfilerEvent.ChangeDetectionSyncStart */);\n      this.synchronizeOnce();\n      profiler(15 /* ProfilerEvent.ChangeDetectionSyncEnd */);\n    }\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {\n      throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode && 'Infinite change detection while refreshing application views. ' + 'Ensure views are not calling `markForCheck` on every template execution or ' + 'that afterRender hooks always mark views for check.');\n    }\n  }\n  /**\r\n   * Perform a single synchronization pass.\r\n   */\n  synchronizeOnce() {\n    // First, process any dirty root effects.\n    if (this.dirtyFlags & 16 /* ApplicationRefDirtyFlags.RootEffects */) {\n      this.dirtyFlags &= ~16 /* ApplicationRefDirtyFlags.RootEffects */;\n      this.rootEffectScheduler.flush();\n    }\n    // First check dirty views, if there are any.\n    let ranDetectChanges = false;\n    if (this.dirtyFlags & 7 /* ApplicationRefDirtyFlags.ViewTreeAny */) {\n      // Change detection on views starts in targeted mode (only check components if they're\n      // marked as dirty) unless global checking is specifically requested via APIs like\n      // `ApplicationRef.tick()` and the `NgZone` integration.\n      const useGlobalCheck = Boolean(this.dirtyFlags & 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */);\n      // Clear the view-related dirty flags.\n      this.dirtyFlags &= ~7 /* ApplicationRefDirtyFlags.ViewTreeAny */;\n      // Set the AfterRender bit, as we're checking views and will need to run afterRender hooks.\n      this.dirtyFlags |= 8 /* ApplicationRefDirtyFlags.AfterRender */;\n      // Check all potentially dirty views.\n      for (let {\n        _lView\n      } of this.allViews) {\n        // When re-checking, only check views which actually need it.\n        if (!useGlobalCheck && !requiresRefreshOrTraversal(_lView)) {\n          continue;\n        }\n        const mode = useGlobalCheck && !this.zonelessEnabled ?\n        // Global mode includes `CheckAlways` views.\n        0 /* ChangeDetectionMode.Global */ :\n        // Only refresh views with the `RefreshView` flag or views is a changed signal\n        1 /* ChangeDetectionMode.Targeted */;\n        detectChangesInternal(_lView, mode);\n        ranDetectChanges = true;\n      }\n      // If `markForCheck()` was called during view checking, it will have set the `ViewTreeCheck`\n      // flag. We clear the flag here because, for backwards compatibility, `markForCheck()`\n      // during view checking doesn't cause the view to be re-checked.\n      this.dirtyFlags &= ~4 /* ApplicationRefDirtyFlags.ViewTreeCheck */;\n      // Check if any views are still dirty after checking and we need to loop back.\n      this.syncDirtyFlagsWithViews();\n      if (this.dirtyFlags & (7 /* ApplicationRefDirtyFlags.ViewTreeAny */ | 16 /* ApplicationRefDirtyFlags.RootEffects */)) {\n        // If any views or effects are still dirty after checking, loop back before running render\n        // hooks.\n        return;\n      }\n    }\n    if (!ranDetectChanges) {\n      // If we skipped refreshing views above, there might still be unflushed animations\n      // because we never called `detectChangesInternal` on the views.\n      this._rendererFactory?.begin?.();\n      this._rendererFactory?.end?.();\n    }\n    // Even if there were no dirty views, afterRender hooks might still be dirty.\n    if (this.dirtyFlags & 8 /* ApplicationRefDirtyFlags.AfterRender */) {\n      this.dirtyFlags &= ~8 /* ApplicationRefDirtyFlags.AfterRender */;\n      this.afterRenderManager.execute();\n      // afterRender hooks might influence dirty flags.\n    }\n    this.syncDirtyFlagsWithViews();\n  }\n  /**\r\n   * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`\r\n   * accordingly, with two potential behaviors:\r\n   *\r\n   * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.\r\n   *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the\r\n   *    view was marked as needing updating.\r\n   *\r\n   *    TODO(alxhub): figure out if this behavior is still needed for edge cases.\r\n   *\r\n   * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This\r\n   *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't\r\n   *    reachable through traversal from our roots (e.g. it's detached from the CD tree).\r\n   */\n  syncDirtyFlagsWithViews() {\n    if (this.allViews.some(({\n      _lView\n    }) => requiresRefreshOrTraversal(_lView))) {\n      // If after running all afterRender callbacks new views are dirty, ensure we loop back.\n      this.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n      return;\n    } else {\n      // Even though this flag may be set, none of _our_ views require traversal, and so the\n      // `ApplicationRef` doesn't require any repeated checking.\n      this.dirtyFlags &= ~7 /* ApplicationRefDirtyFlags.ViewTreeAny */;\n    }\n  }\n  /**\r\n   * Attaches a view so that it will be dirty checked.\r\n   * The view will be automatically detached when it is destroyed.\r\n   * This will throw if the view is already attached to a ViewContainer.\r\n   */\n  attachView(viewRef) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    const view = viewRef;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n  /**\r\n   * Detaches a view from dirty checking again.\r\n   */\n  detachView(viewRef) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    const view = viewRef;\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n  _loadComponent(componentRef) {\n    this.attachView(componentRef.hostView);\n    try {\n      this.tick();\n    } catch (e) {\n      this.internalErrorHandler(e);\n    }\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n    if (ngDevMode && !Array.isArray(listeners)) {\n      throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' + `(expected an array, but got ${typeof listeners}). ` + 'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' + '`multi: true` provider.');\n    }\n    listeners.forEach(listener => listener(componentRef));\n  }\n  /** @internal */\n  ngOnDestroy() {\n    if (this._destroyed) return;\n    try {\n      // Call all the lifecycle hooks.\n      this._destroyListeners.forEach(listener => listener());\n      // Destroy all registered views.\n      this._views.slice().forEach(view => view.destroy());\n    } finally {\n      // Indicate that this instance is destroyed.\n      this._destroyed = true;\n      // Release all references.\n      this._views = [];\n      this._destroyListeners = [];\n    }\n  }\n  /**\r\n   * Registers a listener to be called when an instance is destroyed.\r\n   *\r\n   * @param callback A callback function to add as a listener.\r\n   * @returns A function which unregisters a listener.\r\n   */\n  onDestroy(callback) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    this._destroyListeners.push(callback);\n    return () => remove(this._destroyListeners, callback);\n  }\n  /**\r\n   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\r\n   * will destroy the associated environment injectors as well as all the bootstrapped components\r\n   * with their views.\r\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new RuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\n    }\n    const injector = this._injector;\n    // Check that this injector instance supports destroy operation.\n    if (injector.destroy && !injector.destroyed) {\n      // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n      // hook, which invokes the remaining cleanup actions.\n      injector.destroy();\n    }\n  }\n  /**\r\n   * Returns the number of attached views.\r\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n  static ɵfac = function ApplicationRef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ApplicationRef)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: ApplicationRef,\n    factory: ApplicationRef.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nfunction warnIfDestroyed(destroyed) {\n  if (destroyed) {\n    console.warn(formatRuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, 'This instance of the `ApplicationRef` has already been destroyed.'));\n  }\n}\nfunction remove(list, el) {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\n/**\r\n * Schedules triggering of a defer block for `on idle` and `on timer` conditions.\r\n */\nfunction scheduleDelayedTrigger(scheduleFn) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  renderPlaceholder(lView, tNode);\n  // Exit early to avoid invoking `scheduleFn`, which would\n  // add `setTimeout` call and potentially delay serialization\n  // on the server unnecessarily.\n  if (!shouldTriggerDeferBlock(0 /* TriggerType.Regular */, lView)) return;\n  const injector = lView[INJECTOR];\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const cleanupFn = scheduleFn(() => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), injector);\n  storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, cleanupFn);\n}\n/**\r\n * Schedules prefetching for `on idle` and `on timer` triggers.\r\n *\r\n * @param scheduleFn A function that does the scheduling.\r\n */\nfunction scheduleDelayedPrefetching(scheduleFn, trigger) {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n  const lView = getLView();\n  const injector = lView[INJECTOR];\n  // Only trigger the scheduled trigger on the browser\n  // since we don't want to delay the server response.\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);\n    const cleanupFn = scheduleFn(prefetch, injector);\n    storeTriggerCleanupFn(1 /* TriggerType.Prefetch */, lDetails, cleanupFn);\n  }\n}\n/**\r\n * Schedules hydration triggering of a defer block for `on idle` and `on timer` conditions.\r\n */\nfunction scheduleDelayedHydrating(scheduleFn, lView, tNode) {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n  // Only trigger the scheduled trigger on the browser\n  // since we don't want to delay the server response.\n  const injector = lView[INJECTOR];\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\n  ngDevMode && assertSsrIdDefined(ssrUniqueId);\n  const cleanupFn = scheduleFn(() => triggerHydrationFromBlockName(injector, ssrUniqueId), injector);\n  storeTriggerCleanupFn(2 /* TriggerType.Hydrate */, lDetails, cleanupFn);\n}\n/**\r\n * Trigger prefetching of dependencies for a defer block.\r\n *\r\n * @param tDetails Static information about this defer block.\r\n * @param lView LView of a host view.\r\n * @param tNode TNode that represents a defer block.\r\n */\nfunction triggerPrefetching(tDetails, lView, tNode) {\n  triggerResourceLoading(tDetails, lView, tNode);\n}\n/**\r\n * Trigger loading of defer block dependencies if the process hasn't started yet.\r\n *\r\n * @param tDetails Static information about this defer block.\r\n * @param lView LView of a host view.\r\n */\nfunction triggerResourceLoading(tDetails, lView, tNode) {\n  const injector = lView[INJECTOR];\n  const tView = lView[TVIEW];\n  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {\n    // If the loading status is different from initial one, it means that\n    // the loading of dependencies is in progress and there is nothing to do\n    // in this function. All details can be obtained from the `tDetails` object.\n    return tDetails.loadingPromise ?? Promise.resolve();\n  }\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);\n  // Switch from NOT_STARTED -> IN_PROGRESS state.\n  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;\n  // Prefetching is triggered, cleanup all registered prefetch triggers.\n  invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n  let dependenciesFn = tDetails.dependencyResolverFn;\n  if (ngDevMode) {\n    // Check if dependency function interceptor is configured.\n    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {\n      optional: true\n    });\n    if (deferDependencyInterceptor) {\n      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);\n    }\n  }\n  // Indicate that an application is not stable and has a pending task.\n  const removeTask = injector.get(PendingTasks).add();\n  // The `dependenciesFn` might be `null` when all dependencies within\n  // a given defer block were eagerly referenced elsewhere in a file,\n  // thus no dynamic `import()`s were produced.\n  if (!dependenciesFn) {\n    tDetails.loadingPromise = Promise.resolve().then(() => {\n      tDetails.loadingPromise = null;\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n      removeTask();\n    });\n    return tDetails.loadingPromise;\n  }\n  // Start downloading of defer block dependencies.\n  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then(results => {\n    let failed = false;\n    const directiveDefs = [];\n    const pipeDefs = [];\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        const dependency = result.value;\n        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);\n        if (directiveDef) {\n          directiveDefs.push(directiveDef);\n        } else {\n          const pipeDef = getPipeDef$1(dependency);\n          if (pipeDef) {\n            pipeDefs.push(pipeDef);\n          }\n        }\n      } else {\n        failed = true;\n        break;\n      }\n    }\n    if (failed) {\n      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;\n      if (tDetails.errorTmplIndex === null) {\n        const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : '';\n        const error = new RuntimeError(-750 /* RuntimeErrorCode.DEFER_LOADING_FAILED */, ngDevMode && 'Loading dependencies for `@defer` block failed, ' + `but no \\`@error\\` block was configured${templateLocation}. ` + 'Consider using the `@error` block to render an error state.');\n        handleUncaughtError(lView, error);\n      }\n    } else {\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n      // Update directive and pipe registries to add newly downloaded dependencies.\n      const primaryBlockTView = primaryBlockTNode.tView;\n      if (directiveDefs.length > 0) {\n        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);\n        // Extract providers from all NgModules imported by standalone components\n        // used within this defer block.\n        const directiveTypes = directiveDefs.map(def => def.type);\n        const providers = internalImportProvidersFrom(false, ...directiveTypes);\n        tDetails.providers = providers;\n      }\n      if (pipeDefs.length > 0) {\n        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);\n      }\n    }\n  });\n  return tDetails.loadingPromise.finally(() => {\n    // Loading is completed, we no longer need the loading Promise\n    // and a pending task should also be removed.\n    tDetails.loadingPromise = null;\n    removeTask();\n  });\n}\n/**\r\n * Defines whether we should proceed with triggering a given defer block.\r\n */\nfunction shouldTriggerDeferBlock(triggerType, lView) {\n  // prevents triggering regular triggers when on the server.\n  if (triggerType === 0 /* TriggerType.Regular */ && typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return false;\n  }\n  // prevents triggering in the case of a test run with manual defer block configuration.\n  const injector = lView[INJECTOR];\n  const config = injector.get(DEFER_BLOCK_CONFIG, null, {\n    optional: true\n  });\n  if (config?.behavior === DeferBlockBehavior.Manual) {\n    return false;\n  }\n  return true;\n}\n/**\r\n * Attempts to trigger loading of defer block dependencies.\r\n * If the block is already in a loading, completed or an error state -\r\n * no additional actions are taken.\r\n */\nfunction triggerDeferBlock(triggerType, lView, tNode) {\n  const tView = lView[TVIEW];\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n  if (!shouldTriggerDeferBlock(triggerType, lView)) return;\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  // Defer block is triggered, cleanup all registered trigger functions.\n  invokeAllTriggerCleanupFns(lDetails);\n  switch (tDetails.loadingState) {\n    case DeferDependenciesLoadingState.NOT_STARTED:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      triggerResourceLoading(tDetails, lView, tNode);\n      // The `loadingState` might have changed to \"loading\".\n      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {\n        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      }\n      break;\n    case DeferDependenciesLoadingState.IN_PROGRESS:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.COMPLETE:\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.FAILED:\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n      break;\n    default:\n      if (ngDevMode) {\n        throwError('Unknown defer block state');\n      }\n  }\n}\n/**\r\n * The core mechanism for incremental hydration. This triggers or\r\n * queues hydration for all the blocks in the tree that need to be hydrated\r\n * and keeps track of all those blocks that were hydrated along the way.\r\n *\r\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\r\n * as a result of an event replay (via JsAction). When hydration is invoked from\r\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\r\n * events.\r\n */\nfunction triggerHydrationFromBlockName(_x, _x2, _x3) {\n  return _triggerHydrationFromBlockName.apply(this, arguments);\n}\n/**\r\n * The core mechanism for incremental hydration. This triggers\r\n * hydration for all the blocks in the tree that need to be hydrated\r\n * and keeps track of all those blocks that were hydrated along the way.\r\n *\r\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\r\n * as a result of an event replay (via JsAction). When hydration is invoked from\r\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\r\n * events.\r\n */\nfunction _triggerHydrationFromBlockName() {\n  _triggerHydrationFromBlockName = _asyncToGenerator(function* (injector, blockName, replayQueuedEventsFn) {\n    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n    // Make sure we don't hydrate/trigger the same thing multiple times\n    if (blocksBeingHydrated.has(blockName)) {\n      return;\n    }\n    // Trigger resource loading and hydration for the blocks in the queue in the order of highest block\n    // to lowest block. Once a block has finished resource loading, after next render fires after hydration\n    // finishes. The new block will have its defer instruction called and will be in the registry.\n    // Due to timing related to potential nested control flow, this has to be scheduled after the next render.\n    const {\n      parentBlockPromise,\n      hydrationQueue\n    } = getParentBlockHydrationQueue(blockName, injector);\n    if (hydrationQueue.length === 0) return;\n    // It's possible that the hydrationQueue topmost item is actually in the process of hydrating and has\n    // a promise already. In that case, we don't want to destroy that promise and queue it again.\n    if (parentBlockPromise !== null) {\n      hydrationQueue.shift();\n    }\n    // The hydrating map in the registry prevents re-triggering hydration for a block that's already in\n    // the hydration queue. Here we generate promises for each of the blocks about to be hydrated\n    populateHydratingStateForQueue(dehydratedBlockRegistry, hydrationQueue);\n    // We await this after populating the hydration state so we can prevent re-triggering hydration for\n    // the same blocks while this promise is being awaited.\n    if (parentBlockPromise !== null) {\n      yield parentBlockPromise;\n    }\n    const topmostParentBlock = hydrationQueue[0];\n    if (dehydratedBlockRegistry.has(topmostParentBlock)) {\n      // the topmost parent block is already in the registry and we can proceed\n      // with hydration.\n      yield triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);\n    } else {\n      // the topmost parent block is not yet in the registry, which may mean\n      // a lazy loaded route, a control flow branch was taken, a route has\n      // been navigated, etc. So we need to queue up the hydration process\n      // so that it can be finished after the top block has had its defer\n      // instruction executed.\n      dehydratedBlockRegistry.awaitParentBlock(topmostParentBlock, /*#__PURE__*/_asyncToGenerator(function* () {\n        return yield triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);\n      }));\n    }\n  });\n  return _triggerHydrationFromBlockName.apply(this, arguments);\n}\nfunction triggerHydrationForBlockQueue(_x4, _x5, _x6) {\n  return _triggerHydrationForBlockQueue.apply(this, arguments);\n}\nfunction _triggerHydrationForBlockQueue() {\n  _triggerHydrationForBlockQueue = _asyncToGenerator(function* (injector, hydrationQueue, replayQueuedEventsFn) {\n    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n    // Indicate that we have some pending async work.\n    const pendingTasks = injector.get(PendingTasksInternal);\n    const taskId = pendingTasks.add();\n    // Actually do the triggering and hydration of the queue of blocks\n    for (let blockQueueIdx = 0; blockQueueIdx < hydrationQueue.length; blockQueueIdx++) {\n      const dehydratedBlockId = hydrationQueue[blockQueueIdx];\n      const dehydratedDeferBlock = dehydratedBlockRegistry.get(dehydratedBlockId);\n      if (dehydratedDeferBlock != null) {\n        // trigger the block resources and await next render for hydration. This should result\n        // in the next block ɵɵdefer instruction being called and that block being added to the dehydrated registry.\n        yield triggerResourceLoadingForHydration(dehydratedDeferBlock);\n        yield nextRender(injector);\n        // if the content has changed since server rendering, we need to check for the expected block\n        // being in the registry or if errors occurred. In that case, we need to clean up the remaining expected\n        // content that won't be rendered or fetched.\n        if (deferBlockHasErrored(dehydratedDeferBlock)) {\n          // Either the expected block has not yet had its ɵɵdefer instruction called or the block errored out when fetching\n          // resources. In the former case, either we're hydrating too soon or the client and server differ. In both cases,\n          // we need to clean up child content and promises.\n          removeDehydratedViewList(dehydratedDeferBlock);\n          cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\n          break;\n        }\n        // The defer block has not errored and we've finished fetching resources and rendering.\n        // At this point it is safe to resolve the hydration promise.\n        blocksBeingHydrated.get(dehydratedBlockId).resolve();\n      } else {\n        // The expected block has not yet had its ɵɵdefer instruction called. This is likely due to content changing between\n        // client and server. We need to clean up the dehydrated DOM in the container since it no longer is valid.\n        cleanupParentContainer(blockQueueIdx, hydrationQueue, dehydratedBlockRegistry);\n        cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\n        break;\n      }\n    }\n    const lastBlockName = hydrationQueue[hydrationQueue.length - 1];\n    // Await hydration completion for the last block.\n    yield blocksBeingHydrated.get(lastBlockName)?.promise;\n    // All async work is done, remove the taskId from the registry.\n    pendingTasks.remove(taskId);\n    // Replay any queued events, if any exist and the replay operation was requested.\n    if (replayQueuedEventsFn) {\n      replayQueuedEventsFn(hydrationQueue);\n    }\n    // Cleanup after hydration of all affected defer blocks.\n    cleanupHydratedDeferBlocks(dehydratedBlockRegistry.get(lastBlockName), hydrationQueue, dehydratedBlockRegistry, injector.get(ApplicationRef));\n  });\n  return _triggerHydrationForBlockQueue.apply(this, arguments);\n}\nfunction deferBlockHasErrored(deferBlock) {\n  return getLDeferBlockDetails(deferBlock.lView, deferBlock.tNode)[DEFER_BLOCK_STATE] === DeferBlockState.Error;\n}\n/**\r\n * Clean up the parent container of a block where content changed between server and client.\r\n * The parent of a block going through `triggerHydrationFromBlockName` will contain the\r\n * dehydrated content that needs to be cleaned up. So we have to do the clean up from that location\r\n * in the tree.\r\n */\nfunction cleanupParentContainer(currentBlockIdx, hydrationQueue, dehydratedBlockRegistry) {\n  // If a parent block exists, it's in the hydration queue in front of the current block.\n  const parentDeferBlockIdx = currentBlockIdx - 1;\n  const parentDeferBlock = parentDeferBlockIdx > -1 ? dehydratedBlockRegistry.get(hydrationQueue[parentDeferBlockIdx]) : null;\n  if (parentDeferBlock) {\n    cleanupLContainer(parentDeferBlock.lContainer);\n  }\n}\nfunction cleanupRemainingHydrationQueue(hydrationQueue, dehydratedBlockRegistry) {\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n  for (const dehydratedBlockId in hydrationQueue) {\n    blocksBeingHydrated.get(dehydratedBlockId)?.reject();\n  }\n  dehydratedBlockRegistry.cleanup(hydrationQueue);\n}\n/**\r\n * Generates a new promise for every defer block in the hydrating queue\r\n */\nfunction populateHydratingStateForQueue(registry, queue) {\n  for (let blockId of queue) {\n    registry.hydrating.set(blockId, Promise.withResolvers());\n  }\n}\n// Waits for the next render cycle to complete\nfunction nextRender(injector) {\n  return new Promise(resolveFn => afterNextRender(resolveFn, {\n    injector\n  }));\n}\nfunction triggerResourceLoadingForHydration(_x7) {\n  return _triggerResourceLoadingForHydration.apply(this, arguments);\n}\n/**\r\n * Registers cleanup functions for a defer block when the block has finished\r\n * fetching and rendering\r\n */\nfunction _triggerResourceLoadingForHydration() {\n  _triggerResourceLoadingForHydration = _asyncToGenerator(function* (dehydratedBlock) {\n    const {\n      tNode,\n      lView\n    } = dehydratedBlock;\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    return new Promise(resolve => {\n      onDeferBlockCompletion(lDetails, resolve);\n      triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n    });\n  });\n  return _triggerResourceLoadingForHydration.apply(this, arguments);\n}\nfunction onDeferBlockCompletion(lDetails, callback) {\n  if (!Array.isArray(lDetails[ON_COMPLETE_FNS])) {\n    lDetails[ON_COMPLETE_FNS] = [];\n  }\n  lDetails[ON_COMPLETE_FNS].push(callback);\n}\n/**\r\n * Determines whether specific trigger types should be attached during an instruction firing\r\n * to ensure the proper triggers for a given type are used.\r\n */\nfunction shouldAttachTrigger(triggerType, lView, tNode) {\n  if (triggerType === 0 /* TriggerType.Regular */) {\n    return shouldAttachRegularTrigger(lView, tNode);\n  } else if (triggerType === 2 /* TriggerType.Hydrate */) {\n    return !shouldAttachRegularTrigger(lView, tNode);\n  }\n  // TriggerType.Prefetch is active only on the client\n  return !(typeof ngServerMode !== 'undefined' && ngServerMode);\n}\n/** Whether a given defer block has `hydrate` triggers. */\nfunction hasHydrateTriggers(flags) {\n  return flags != null && (flags & 1 /* TDeferDetailsFlags.HasHydrateTriggers */) === 1 /* TDeferDetailsFlags.HasHydrateTriggers */;\n}\n/**\r\n * Defines whether a regular trigger logic (e.g. \"on viewport\") should be attached\r\n * to a defer block. This function defines a condition, which mutually excludes\r\n * `deferOn*` and `deferHydrateOn*` triggers, to make sure only one of the trigger\r\n * types is active for a block with the current state.\r\n */\nfunction shouldAttachRegularTrigger(lView, tNode) {\n  const injector = lView[INJECTOR];\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  const incrementalHydrationEnabled = isIncrementalHydrationEnabled(injector);\n  const _hasHydrateTriggers = hasHydrateTriggers(tDetails.flags);\n  // On the server:\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // Regular triggers are activated on the server when:\n    //  - Either Incremental Hydration is *not* enabled\n    //  - Or Incremental Hydration is enabled, but a given block doesn't have \"hydrate\" triggers\n    return !incrementalHydrationEnabled || !_hasHydrateTriggers;\n  }\n  // On the client:\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const wasServerSideRendered = lDetails[SSR_UNIQUE_ID] !== null;\n  if (_hasHydrateTriggers && wasServerSideRendered && incrementalHydrationEnabled) {\n    return false;\n  }\n  return true;\n}\n/**\r\n * Retrives a Defer Block's list of hydration triggers\r\n */\nfunction getHydrateTriggers(tView, tNode) {\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  return tDetails.hydrateTriggers ??= new Map();\n}\n/**\r\n * Loops through all defer block summaries and ensures all the blocks triggers are\r\n * properly initialized\r\n */\nfunction processAndInitTriggers(injector, blockData, nodes) {\n  const idleElements = [];\n  const timerElements = [];\n  const viewportElements = [];\n  const immediateElements = [];\n  for (let [blockId, blockSummary] of blockData) {\n    const commentNode = nodes.get(blockId);\n    if (commentNode !== undefined) {\n      const numRootNodes = blockSummary.data[NUM_ROOT_NODES];\n      let currentNode = commentNode;\n      for (let i = 0; i < numRootNodes; i++) {\n        currentNode = currentNode.previousSibling;\n        if (currentNode.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n        const elementTrigger = {\n          el: currentNode,\n          blockName: blockId\n        };\n        // hydrate\n        if (blockSummary.hydrate.idle) {\n          idleElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.immediate) {\n          immediateElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.timer !== null) {\n          elementTrigger.delay = blockSummary.hydrate.timer;\n          timerElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.viewport) {\n          viewportElements.push(elementTrigger);\n        }\n      }\n    }\n  }\n  setIdleTriggers(injector, idleElements);\n  setImmediateTriggers(injector, immediateElements);\n  setViewportTriggers(injector, viewportElements);\n  setTimerTriggers(injector, timerElements);\n}\nfunction setIdleTriggers(injector, elementTriggers) {\n  for (const elementTrigger of elementTriggers) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n    const cleanupFn = onIdle(onInvoke, injector);\n    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n  }\n}\nfunction setViewportTriggers(injector, elementTriggers) {\n  if (elementTriggers.length > 0) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    for (let elementTrigger of elementTriggers) {\n      const cleanupFn = onViewportWrapper(elementTrigger.el, () => triggerHydrationFromBlockName(injector, elementTrigger.blockName), injector);\n      registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n    }\n  }\n}\nfunction setTimerTriggers(injector, elementTriggers) {\n  for (const elementTrigger of elementTriggers) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n    const timerFn = onTimer(elementTrigger.delay);\n    const cleanupFn = timerFn(onInvoke, injector);\n    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n  }\n}\nfunction setImmediateTriggers(injector, elementTriggers) {\n  for (const elementTrigger of elementTriggers) {\n    // Note: we intentionally avoid awaiting each call and instead kick off\n    // the hydration process simultaneously for all defer blocks with this trigger;\n    triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n  }\n}\n\n/**\r\n * Indicates whether we've already produced a warning,\r\n * prevents the logic from producing it multiple times.\r\n */\nlet _hmrWarningProduced = false;\n/**\r\n * Logs a message into the console to indicate that `@defer` block\r\n * dependencies are loaded eagerly when the HMR mode is enabled.\r\n */\nfunction logHmrWarning(injector) {\n  if (!_hmrWarningProduced) {\n    _hmrWarningProduced = true;\n    const console = injector.get(Console);\n    // tslint:disable-next-line:no-console\n    console.log(formatRuntimeError(-751 /* RuntimeErrorCode.DEFER_IN_HMR_MODE */, 'Angular has detected that this application contains `@defer` blocks ' + 'and the hot module replacement (HMR) mode is enabled. All `@defer` ' + 'block dependencies will be loaded eagerly.'));\n  }\n}\n/**\r\n * Creates runtime data structures for defer blocks.\r\n *\r\n * @param index Index of the `defer` instruction.\r\n * @param primaryTmplIndex Index of the template with the primary block content.\r\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\r\n * @param loadingTmplIndex Index of the template with the loading block content.\r\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\r\n * @param errorTmplIndex Index of the template with the error block content.\r\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\r\n *     block.\r\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\r\n *     placeholder block.\r\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\r\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\r\n * @param flags A set of flags to define a particular behavior (e.g. to indicate that\r\n *              hydrate triggers are present and regular triggers should be deactivated\r\n *              in certain scenarios).\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdefer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling, flags) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = declareTemplate(lView, tView, index, null, 0, 0);\n  const injector = lView[INJECTOR];\n  if (tView.firstCreatePass) {\n    performanceMarkFeature('NgDefer');\n    if (ngDevMode) {\n      if (typeof ngHmrMode !== 'undefined' && ngHmrMode) {\n        logHmrWarning(injector);\n      }\n      if (hasHydrateTriggers(flags)) {\n        assertIncrementalHydrationIsConfigured(injector);\n      }\n    }\n    const tDetails = {\n      primaryTmplIndex,\n      loadingTmplIndex: loadingTmplIndex ?? null,\n      placeholderTmplIndex: placeholderTmplIndex ?? null,\n      errorTmplIndex: errorTmplIndex ?? null,\n      placeholderBlockConfig: null,\n      loadingBlockConfig: null,\n      dependencyResolverFn: dependencyResolverFn ?? null,\n      loadingState: DeferDependenciesLoadingState.NOT_STARTED,\n      loadingPromise: null,\n      providers: null,\n      hydrateTriggers: null,\n      debug: null,\n      flags: flags ?? 0 /* TDeferDetailsFlags.Default */\n    };\n    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\n    setTDeferBlockDetails(tView, adjustedIndex, tDetails);\n  }\n  const lContainer = lView[adjustedIndex];\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n  let ssrBlockState = null;\n  let ssrUniqueId = null;\n  if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {\n    const info = lContainer[DEHYDRATED_VIEWS][0].data;\n    ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;\n    ssrBlockState = info[DEFER_BLOCK_STATE$1];\n  }\n  // Init instance-specific defer details and store it.\n  const lDetails = [null,\n  // NEXT_DEFER_BLOCK_STATE\n  DeferBlockInternalState.Initial,\n  // DEFER_BLOCK_STATE\n  null,\n  // STATE_IS_FROZEN_UNTIL\n  null,\n  // LOADING_AFTER_CLEANUP_FN\n  null,\n  // TRIGGER_CLEANUP_FNS\n  null,\n  // PREFETCH_TRIGGER_CLEANUP_FNS\n  ssrUniqueId,\n  // SSR_UNIQUE_ID\n  ssrBlockState,\n  // SSR_BLOCK_STATE\n  null,\n  // ON_COMPLETE_FNS\n  null // HYDRATE_TRIGGER_CLEANUP_FNS\n  ];\n  setLDeferBlockDetails(lView, adjustedIndex, lDetails);\n  let registry = null;\n  if (ssrUniqueId !== null) {\n    // Store this defer block in the registry, to have an access to\n    // internal data structures from hydration runtime code.\n    registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    registry.add(ssrUniqueId, {\n      lView,\n      tNode,\n      lContainer\n    });\n  }\n  const onLViewDestroy = () => {\n    invokeAllTriggerCleanupFns(lDetails);\n    if (ssrUniqueId !== null) {\n      registry?.cleanup([ssrUniqueId]);\n    }\n  };\n  // When defer block is triggered - unsubscribe from LView destroy cleanup.\n  storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, () => removeLViewOnDestroy(lView, onLViewDestroy));\n  storeLViewOnDestroy(lView, onLViewDestroy);\n}\n/**\r\n * Loads defer block dependencies when a trigger value becomes truthy.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferWhen(rawValue) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'when <expression>');\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const lDetails = getLDeferBlockDetails(lView, tNode);\n      const renderedState = lDetails[DEFER_BLOCK_STATE];\n      if (value === false && renderedState === DeferBlockInternalState.Initial) {\n        // If nothing is rendered yet, render a placeholder (if defined).\n        renderPlaceholder(lView, tNode);\n      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {\n        triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n/**\r\n * Prefetches the deferred content when a value becomes truthy.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchWhen(rawValue) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch when <expression>');\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const tView = lView[TVIEW];\n      const tNode = getSelectedTNode();\n      const tDetails = getTDeferBlockDetails(tView, tNode);\n      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        // If loading has not been started yet, trigger it now.\n        triggerPrefetching(tDetails, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n/**\r\n * Hydrates the deferred content when a value becomes truthy.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateWhen(rawValue) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate when <expression>');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  // TODO(incremental-hydration): audit all defer instructions to reduce unnecessary work by\n  // moving function calls inside their relevant control flow blocks\n  const bindingIndex = nextBindingIndex();\n  const tView = getTView();\n  const hydrateTriggers = getHydrateTriggers(tView, tNode);\n  hydrateTriggers.set(6 /* DeferBlockTrigger.When */, null);\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      // We are on the server and SSR for defer blocks is enabled.\n      triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n    } else {\n      const injector = lView[INJECTOR];\n      const prevConsumer = setActiveConsumer(null);\n      try {\n        const value = Boolean(rawValue); // handle truthy or falsy values\n        if (value === true) {\n          // The `when` condition has changed to `true`, trigger defer block loading\n          // if the block is either in initial (nothing is rendered) or a placeholder\n          // state.\n          const lDetails = getLDeferBlockDetails(lView, tNode);\n          const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\n          ngDevMode && assertSsrIdDefined(ssrUniqueId);\n          triggerHydrationFromBlockName(injector, ssrUniqueId);\n        }\n      } finally {\n        setActiveConsumer(prevConsumer);\n      }\n    }\n  }\n}\n/**\r\n * Specifies that hydration never occurs.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateNever() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate never');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(7 /* DeferBlockTrigger.Never */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n}\n/**\r\n * Sets up logic to handle the `on idle` deferred trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on idle');\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  scheduleDelayedTrigger(onIdle);\n}\n/**\r\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on idle');\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  scheduleDelayedPrefetching(onIdle);\n}\n/**\r\n * Sets up logic to handle the `on idle` deferred trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on idle');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(0 /* DeferBlockTrigger.Idle */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onIdle, lView, tNode);\n  }\n}\n/**\r\n * Sets up logic to handle the `on immediate` deferred trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on immediate');\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  // Render placeholder block only if loading template is not present and we're on\n  // the client to avoid content flickering, since it would be immediately replaced\n  // by the loading block.\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  if (tDetails.loadingTmplIndex === null) {\n    renderPlaceholder(lView, tNode);\n  }\n  triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode);\n}\n/**\r\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on immediate');\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    triggerResourceLoading(tDetails, lView, tNode);\n  }\n}\n/**\r\n * Sets up logic to handle the `on immediate` hydrate trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on immediate');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(1 /* DeferBlockTrigger.Immediate */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  } else {\n    const injector = lView[INJECTOR];\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\n    ngDevMode && assertSsrIdDefined(ssrUniqueId);\n    triggerHydrationFromBlockName(injector, ssrUniqueId);\n  }\n}\n/**\r\n * Creates runtime data structures for the `on timer` deferred trigger.\r\n * @param delay Amount of time to wait before loading the content.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferOnTimer(delay) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  scheduleDelayedTrigger(onTimer(delay));\n}\n/**\r\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\r\n * @param delay Amount of time to wait before prefetching the content.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchOnTimer(delay) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  scheduleDelayedPrefetching(onTimer(delay));\n}\n/**\r\n * Creates runtime data structures for the `on timer` hydrate trigger.\r\n * @param delay Amount of time to wait before loading the content.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateOnTimer(delay) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(5 /* DeferBlockTrigger.Timer */, {\n    delay\n  });\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onTimer(delay), lView, tNode);\n  }\n}\n/**\r\n * Creates runtime data structures for the `on hover` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferOnHover(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on hover${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  renderPlaceholder(lView, tNode);\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\n  }\n}\n/**\r\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchOnHover(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on hover${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\r\n * Creates runtime data structures for the `on hover` hydrate trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateOnHover() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on hover');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(4 /* DeferBlockTrigger.Hover */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n  // The actual triggering of hydration on hover is handled by JSAction in\n  // event_replay.ts.\n}\n/**\r\n * Creates runtime data structures for the `on interaction` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferOnInteraction(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  renderPlaceholder(lView, tNode);\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\n  }\n}\n/**\r\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchOnInteraction(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\r\n * Creates runtime data structures for the `on interaction` hydrate trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateOnInteraction() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on interaction');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(3 /* DeferBlockTrigger.Interaction */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n  // The actual triggering of hydration on interaction is handled by JSAction in\n  // event_replay.ts.\n}\n/**\r\n * Creates runtime data structures for the `on viewport` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferOnViewport(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  renderPlaceholder(lView, tNode);\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewportWrapper, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\n  }\n}\n/**\r\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferPrefetchOnViewport(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewportWrapper, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\r\n * Creates runtime data structures for the `on viewport` hydrate trigger.\r\n * @codeGenApi\r\n */\nfunction ɵɵdeferHydrateOnViewport() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on viewport');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(2 /* DeferBlockTrigger.Viewport */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n  // The actual triggering of hydration on viewport happens in triggering.ts,\n  // since these instructions won't exist for dehydrated content.\n}\n\n/**\r\n * Updates the value of or removes a bound attribute on an Element.\r\n *\r\n * Used in the case of `[attr.title]=\"value\"`\r\n *\r\n * @param name name The name of the attribute.\r\n * @param value value The attribute is removed when value is `null` or `undefined`.\r\n *                  Otherwise the attribute value is set to the stringified value.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @param namespace Optional namespace to use when setting the attribute.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Instruction that returns the component instance in which the current instruction is executing.\r\n * This is a constant-time version of `nextContent` for the case where we know that we need the\r\n * component instance specifically, rather than the context of a particular template.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵcomponentInstance() {\n  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];\n  ngDevMode && assertDefined(instance, 'Expected component instance to be defined');\n  return instance;\n}\n\n/**\r\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\r\n * is an adapter class that makes it possible to work with different internal data structures,\r\n * regardless of the actual values of the incoming collection.\r\n */\nclass LiveCollection {\n  destroy(item) {\n    // noop by default\n  }\n  updateValue(index, value) {\n    // noop by default\n  }\n  // operations below could be implemented on top of the operations defined so far, but having\n  // them explicitly allow clear expression of intent and potentially more performant\n  // implementations\n  swap(index1, index2) {\n    const startIdx = Math.min(index1, index2);\n    const endIdx = Math.max(index1, index2);\n    const endItem = this.detach(endIdx);\n    if (endIdx - startIdx > 1) {\n      const startItem = this.detach(startIdx);\n      this.attach(startIdx, endItem);\n      this.attach(endIdx, startItem);\n    } else {\n      this.attach(startIdx, endItem);\n    }\n  }\n  move(prevIndex, newIdx) {\n    this.attach(newIdx, this.detach(prevIndex));\n  }\n}\nfunction valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {\n  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\n    // matching and no value identity to update\n    return 1;\n  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\n    // matching but requires value identity update\n    return -1;\n  }\n  return 0;\n}\nfunction recordDuplicateKeys(keyToIdx, key, idx) {\n  const idxSoFar = keyToIdx.get(key);\n  if (idxSoFar !== undefined) {\n    idxSoFar.add(idx);\n  } else {\n    keyToIdx.set(key, new Set([idx]));\n  }\n}\n/**\r\n * The live collection reconciliation algorithm that perform various in-place operations, so it\r\n * reflects the content of the new (incoming) collection.\r\n *\r\n * The reconciliation algorithm has 2 code paths:\r\n * - \"fast\" path that don't require any memory allocation;\r\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\r\n * collect additional information about the live collection.\r\n * It might happen that the algorithm switches between the two modes in question in a single\r\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\r\n *\r\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\r\n * length of the live collection and m is the length of the incoming collection). Given the problem\r\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\r\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\r\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\r\n * certain situations.\r\n *\r\n * @param liveCollection the current, live collection;\r\n * @param newCollection the new, incoming collection;\r\n * @param trackByFn key generation function that determines equality between items in the life and\r\n *     incoming collection;\r\n */\nfunction reconcile(liveCollection, newCollection, trackByFn) {\n  let detachedItems = undefined;\n  let liveKeysInTheFuture = undefined;\n  let liveStartIdx = 0;\n  let liveEndIdx = liveCollection.length - 1;\n  const duplicateKeys = ngDevMode ? new Map() : undefined;\n  if (Array.isArray(newCollection)) {\n    let newEndIdx = newCollection.length - 1;\n    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\n      // compare from the beginning\n      const liveStartValue = liveCollection.at(liveStartIdx);\n      const newStartValue = newCollection[liveStartIdx];\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newStartValue), liveStartIdx);\n      }\n      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);\n      if (isStartMatching !== 0) {\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newStartValue);\n        }\n        liveStartIdx++;\n        continue;\n      }\n      // compare from the end\n      // TODO(perf): do _all_ the matching from the end\n      const liveEndValue = liveCollection.at(liveEndIdx);\n      const newEndValue = newCollection[newEndIdx];\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys, trackByFn(newEndIdx, newEndValue), newEndIdx);\n      }\n      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);\n      if (isEndMatching !== 0) {\n        if (isEndMatching < 0) {\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n        }\n        liveEndIdx--;\n        newEndIdx--;\n        continue;\n      }\n      // Detect swap and moves:\n      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\n      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\n      const newStartKey = trackByFn(liveStartIdx, newStartValue);\n      if (Object.is(newStartKey, liveEndKey)) {\n        const newEndKey = trackByFn(newEndIdx, newEndValue);\n        // detect swap on both ends;\n        if (Object.is(newEndKey, liveStartKey)) {\n          liveCollection.swap(liveStartIdx, liveEndIdx);\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n          newEndIdx--;\n          liveEndIdx--;\n        } else {\n          // the new item is the same as the live item with the end pointer - this is a move forward\n          // to an earlier index;\n          liveCollection.move(liveEndIdx, liveStartIdx);\n        }\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        continue;\n      }\n      // Fallback to the slow path: we need to learn more about the content of the live and new\n      // collections.\n      detachedItems ??= new UniqueValueMultiKeyMap();\n      liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n      // Check if I'm inserting a previously detached item: if so, attach it here\n      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else if (!liveKeysInTheFuture.has(newStartKey)) {\n        // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\n        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\n        liveCollection.attach(liveStartIdx, newItem);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else {\n        // We know that the new item exists later on in old collection but we don't know its index\n        // and as the consequence can't move it (don't know where to find it). Detach the old item,\n        // hoping that it unlocks the fast path again.\n        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\n        liveEndIdx--;\n      }\n    }\n    // Final cleanup steps:\n    // - more items in the new collection => insert\n    while (liveStartIdx <= newEndIdx) {\n      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);\n      liveStartIdx++;\n    }\n  } else if (newCollection != null) {\n    // iterable - immediately fallback to the slow path\n    const newCollectionIterator = newCollection[Symbol.iterator]();\n    let newIterationResult = newCollectionIterator.next();\n    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\n      const liveValue = liveCollection.at(liveStartIdx);\n      const newValue = newIterationResult.value;\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newValue), liveStartIdx);\n      }\n      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);\n      if (isStartMatching !== 0) {\n        // found a match - move on, but update value\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n        }\n        liveStartIdx++;\n        newIterationResult = newCollectionIterator.next();\n      } else {\n        detachedItems ??= new UniqueValueMultiKeyMap();\n        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n        // Check if I'm inserting a previously detached item: if so, attach it here\n        const newKey = trackByFn(liveStartIdx, newValue);\n        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else if (!liveKeysInTheFuture.has(newKey)) {\n          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else {\n          // it is a move forward - detach the current item without advancing in collections\n          const liveKey = trackByFn(liveStartIdx, liveValue);\n          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\n          liveEndIdx--;\n        }\n      }\n    }\n    // this is a new item as we run out of the items in the old collection - create or attach a\n    // previously detached one\n    while (!newIterationResult.done) {\n      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);\n      newIterationResult = newCollectionIterator.next();\n    }\n  }\n  // Cleanups common to the array and iterable:\n  // - more items in the live collection => delete starting from the end;\n  while (liveStartIdx <= liveEndIdx) {\n    liveCollection.destroy(liveCollection.detach(liveEndIdx--));\n  }\n  // - destroy items that were detached but never attached again.\n  detachedItems?.forEach(item => {\n    liveCollection.destroy(item);\n  });\n  // report duplicate keys (dev mode only)\n  if (ngDevMode) {\n    let duplicatedKeysMsg = [];\n    for (const [key, idxSet] of duplicateKeys) {\n      if (idxSet.size > 1) {\n        const idx = [...idxSet].sort((a, b) => a - b);\n        for (let i = 1; i < idx.length; i++) {\n          duplicatedKeysMsg.push(`key \"${stringifyForError(key)}\" at index \"${idx[i - 1]}\" and \"${idx[i]}\"`);\n        }\n      }\n    }\n    if (duplicatedKeysMsg.length > 0) {\n      const message = formatRuntimeError(-955 /* RuntimeErrorCode.LOOP_TRACK_DUPLICATE_KEYS */, 'The provided track expression resulted in duplicated keys for a given collection. ' + 'Adjust the tracking expression such that it uniquely identifies all the items in the collection. ' + 'Duplicated keys were: \\n' + duplicatedKeysMsg.join(', \\n') + '.');\n      console.warn(message);\n    }\n  }\n}\nfunction attachPreviouslyDetached(prevCollection, detachedItems, index, key) {\n  if (detachedItems !== undefined && detachedItems.has(key)) {\n    prevCollection.attach(index, detachedItems.get(key));\n    detachedItems.delete(key);\n    return true;\n  }\n  return false;\n}\nfunction createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {\n  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\n    const newItem = liveCollection.create(index, value);\n    liveCollection.attach(index, newItem);\n  } else {\n    liveCollection.updateValue(index, value);\n  }\n}\nfunction initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {\n  const keys = new Set();\n  for (let i = start; i <= end; i++) {\n    keys.add(trackByFn(i, liveCollection.at(i)));\n  }\n  return keys;\n}\n/**\r\n * A specific, partial implementation of the Map interface with the following characteristics:\r\n * - allows multiple values for a given key;\r\n * - maintain FIFO order for multiple values corresponding to a given key;\r\n * - assumes that all values are unique.\r\n *\r\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\r\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\r\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\r\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\r\n * values (in the entire collection) are unique.\r\n */\nclass UniqueValueMultiKeyMap {\n  // A map from a key to the first value corresponding to this key.\n  kvMap = new Map();\n  // A map that acts as a linked list of values - each value maps to the next value in this \"linked\n  // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\n  // there are no duplicated values.\n  _vMap = undefined;\n  has(key) {\n    return this.kvMap.has(key);\n  }\n  delete(key) {\n    if (!this.has(key)) return false;\n    const value = this.kvMap.get(key);\n    if (this._vMap !== undefined && this._vMap.has(value)) {\n      this.kvMap.set(key, this._vMap.get(value));\n      this._vMap.delete(value);\n    } else {\n      this.kvMap.delete(key);\n    }\n    return true;\n  }\n  get(key) {\n    return this.kvMap.get(key);\n  }\n  set(key, value) {\n    if (this.kvMap.has(key)) {\n      let prevValue = this.kvMap.get(key);\n      // Note: we don't use `assertNotSame`, because the value needs to be stringified even if\n      // there is no error which can freeze the browser for large values (see #58509).\n      if (ngDevMode && prevValue === value) {\n        throw new Error(`Detected a duplicated value ${value} for the key ${key}`);\n      }\n      if (this._vMap === undefined) {\n        this._vMap = new Map();\n      }\n      const vMap = this._vMap;\n      while (vMap.has(prevValue)) {\n        prevValue = vMap.get(prevValue);\n      }\n      vMap.set(prevValue, value);\n    } else {\n      this.kvMap.set(key, value);\n    }\n  }\n  forEach(cb) {\n    for (let [key, value] of this.kvMap) {\n      cb(value, key);\n      if (this._vMap !== undefined) {\n        const vMap = this._vMap;\n        while (vMap.has(value)) {\n          value = vMap.get(value);\n          cb(value, key);\n        }\n      }\n    }\n  }\n}\n\n/**\r\n * Creates an LContainer for an ng-template representing a root node\r\n * of control flow (@if, @switch). We use this to explicitly set\r\n * flags on the TNode created to identify which nodes are in control\r\n * flow or starting control flow for hydration identification and\r\n * cleanup timing.\r\n *\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n * @codeGenApi\r\n */\nfunction ɵɵconditionalCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  performanceMarkFeature('NgControlFlow');\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 256 /* TNodeFlags.isControlFlowStart */, localRefsIndex, localRefExtractor);\n  return ɵɵconditionalBranchCreate;\n}\n/**\r\n * Creates an LContainer for an ng-template representing a branch\r\n * of control flow (@else, @case, @default). We use this to explicitly\r\n * set flags on the TNode created to identify which nodes are in\r\n * control flow or starting control flow for hydration identification\r\n * and cleanup timing.\r\n *\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n * @codeGenApi\r\n */\nfunction ɵɵconditionalBranchCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  performanceMarkFeature('NgControlFlow');\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 512 /* TNodeFlags.isInControlFlow */, localRefsIndex, localRefExtractor);\n  return ɵɵconditionalBranchCreate;\n}\n/**\r\n * The conditional instruction represents the basic building block on the runtime side to support\r\n * built-in \"if\" and \"switch\". On the high level this instruction is responsible for adding and\r\n * removing views selected by a conditional expression.\r\n *\r\n * @param matchingTemplateIndex Index of a template TNode representing a conditional view to be\r\n *     inserted; -1 represents a special case when there is no view to insert.\r\n * @param contextValue Value that should be exposed as the context of the conditional.\r\n * @codeGenApi\r\n */\nfunction ɵɵconditional(matchingTemplateIndex, contextValue) {\n  performanceMarkFeature('NgControlFlow');\n  const hostLView = getLView();\n  const bindingIndex = nextBindingIndex();\n  const prevMatchingTemplateIndex = hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;\n  const prevContainer = prevMatchingTemplateIndex !== -1 ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex) : undefined;\n  const viewInContainerIdx = 0;\n  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // The index of the view to show changed - remove the previously displayed one\n      // (it is a noop if there are no active views in a container).\n      if (prevContainer !== undefined) {\n        removeLViewFromLContainer(prevContainer, viewInContainerIdx);\n      }\n      // Index -1 is a special case where none of the conditions evaluates to\n      // a truthy value and as the consequence we've got no view to show.\n      if (matchingTemplateIndex !== -1) {\n        const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;\n        const nextContainer = getLContainer(hostLView, nextLContainerIndex);\n        const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);\n        const dehydratedView = findAndReconcileMatchingDehydratedViews(nextContainer, templateTNode, hostLView);\n        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {\n          dehydratedView\n        });\n        addLViewToLContainer(nextContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  } else if (prevContainer !== undefined) {\n    // We might keep displaying the same template but the actual value of the expression could have\n    // changed - re-bind in context.\n    const lView = getLViewFromLContainer(prevContainer, viewInContainerIdx);\n    if (lView !== undefined) {\n      lView[CONTEXT] = contextValue;\n    }\n  }\n}\nclass RepeaterContext {\n  lContainer;\n  $implicit;\n  $index;\n  constructor(lContainer, $implicit, $index) {\n    this.lContainer = lContainer;\n    this.$implicit = $implicit;\n    this.$index = $index;\n  }\n  get $count() {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n}\n/**\r\n * A built-in trackBy function used for situations where users specified collection index as a\r\n * tracking expression. Having this function body in the runtime avoids unnecessary code generation.\r\n *\r\n * @param index\r\n * @returns\r\n */\nfunction ɵɵrepeaterTrackByIndex(index) {\n  return index;\n}\n/**\r\n * A built-in trackBy function used for situations where users specified collection item reference\r\n * as a tracking expression. Having this function body in the runtime avoids unnecessary code\r\n * generation.\r\n *\r\n * @param index\r\n * @returns\r\n */\nfunction ɵɵrepeaterTrackByIdentity(_, value) {\n  return value;\n}\nclass RepeaterMetadata {\n  hasEmptyBlock;\n  trackByFn;\n  liveCollection;\n  constructor(hasEmptyBlock, trackByFn, liveCollection) {\n    this.hasEmptyBlock = hasEmptyBlock;\n    this.trackByFn = trackByFn;\n    this.liveCollection = liveCollection;\n  }\n}\n/**\r\n * The repeaterCreate instruction runs in the creation part of the template pass and initializes\r\n * internal data structures required by the update pass of the built-in repeater logic. Repeater\r\n * metadata are allocated in the data part of LView with the following layout:\r\n * - LView[HEADER_OFFSET + index] - metadata\r\n * - LView[HEADER_OFFSET + index + 1] - reference to a template function rendering an item\r\n * - LView[HEADER_OFFSET + index + 2] - optional reference to a template function rendering an empty\r\n * block\r\n *\r\n * @param index Index at which to store the metadata of the repeater.\r\n * @param templateFn Reference to the template of the main repeater block.\r\n * @param decls The number of nodes, local refs, and pipes for the main block.\r\n * @param vars The number of bindings for the main block.\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param trackByFn Reference to the tracking function.\r\n * @param trackByUsesComponentInstance Whether the tracking function has any references to the\r\n *  component instance. If it doesn't, we can avoid rebinding it.\r\n * @param emptyTemplateFn Reference to the template function of the empty block.\r\n * @param emptyDecls The number of nodes, local refs, and pipes for the empty block.\r\n * @param emptyVars The number of bindings for the empty block.\r\n * @param emptyTagName The name of the empty block container element, if applicable\r\n * @param emptyAttrsIndex Index of the empty block template attributes in the `consts` array.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵrepeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {\n  performanceMarkFeature('NgControlFlow');\n  ngDevMode && assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);\n  const lView = getLView();\n  const tView = getTView();\n  const hasEmptyBlock = emptyTemplateFn !== undefined;\n  const hostLView = getLView();\n  const boundTrackBy = trackByUsesComponentInstance ?\n  // We only want to bind when necessary, because it produces a\n  // new function. For pure functions it's not necessary.\n  trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT]) : trackByFn;\n  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);\n  hostLView[HEADER_OFFSET + index] = metadata;\n  declareTemplate(lView, tView, index + 1, templateFn, decls, vars, tagName, getConstant(tView.consts, attrsIndex), 256 /* TNodeFlags.isControlFlowStart */);\n  if (hasEmptyBlock) {\n    ngDevMode && assertDefined(emptyDecls, 'Missing number of declarations for the empty repeater block.');\n    ngDevMode && assertDefined(emptyVars, 'Missing number of bindings for the empty repeater block.');\n    declareTemplate(lView, tView, index + 2, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, getConstant(tView.consts, emptyAttrsIndex), 512 /* TNodeFlags.isInControlFlow */);\n  }\n}\nfunction isViewExpensiveToRecreate(lView) {\n  // assumption: anything more than a text node with a binding is considered \"expensive\"\n  return lView.length - HEADER_OFFSET > 2;\n}\nclass OperationsCounter {\n  created = 0;\n  destroyed = 0;\n  reset() {\n    this.created = 0;\n    this.destroyed = 0;\n  }\n  recordCreate() {\n    this.created++;\n  }\n  recordDestroy() {\n    this.destroyed++;\n  }\n  /**\r\n   * A method indicating if the entire collection was re-created as part of the reconciliation pass.\r\n   * Used to warn developers about the usage of a tracking function that might result in excessive\r\n   * amount of view creation / destroy operations.\r\n   *\r\n   * @returns boolean value indicating if a live collection was re-created\r\n   */\n  wasReCreated(collectionLen) {\n    return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;\n  }\n}\nclass LiveCollectionLContainerImpl extends LiveCollection {\n  lContainer;\n  hostLView;\n  templateTNode;\n  operationsCounter = ngDevMode ? new OperationsCounter() : undefined;\n  /**\r\n   Property indicating if indexes in the repeater context need to be updated following the live\r\n   collection changes. Index updates are necessary if and only if views are inserted / removed in\r\n   the middle of LContainer. Adds and removals at the end don't require index updates.\r\n  */\n  needsIndexUpdate = false;\n  constructor(lContainer, hostLView, templateTNode) {\n    super();\n    this.lContainer = lContainer;\n    this.hostLView = hostLView;\n    this.templateTNode = templateTNode;\n  }\n  get length() {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  at(index) {\n    return this.getLView(index)[CONTEXT].$implicit;\n  }\n  attach(index, lView) {\n    const dehydratedView = lView[HYDRATION];\n    this.needsIndexUpdate ||= index !== this.length;\n    addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));\n  }\n  detach(index) {\n    this.needsIndexUpdate ||= index !== this.length - 1;\n    return detachExistingView(this.lContainer, index);\n  }\n  create(index, value) {\n    const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);\n    const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), {\n      dehydratedView\n    });\n    this.operationsCounter?.recordCreate();\n    return embeddedLView;\n  }\n  destroy(lView) {\n    destroyLView(lView[TVIEW], lView);\n    this.operationsCounter?.recordDestroy();\n  }\n  updateValue(index, value) {\n    this.getLView(index)[CONTEXT].$implicit = value;\n  }\n  reset() {\n    this.needsIndexUpdate = false;\n    this.operationsCounter?.reset();\n  }\n  updateIndexes() {\n    if (this.needsIndexUpdate) {\n      for (let i = 0; i < this.length; i++) {\n        this.getLView(i)[CONTEXT].$index = i;\n      }\n    }\n  }\n  getLView(index) {\n    return getExistingLViewFromLContainer(this.lContainer, index);\n  }\n}\n/**\r\n * The repeater instruction does update-time diffing of a provided collection (against the\r\n * collection seen previously) and maps changes in the collection to views structure (by adding,\r\n * removing or moving views as needed).\r\n * @param collection - the collection instance to be checked for changes\r\n * @codeGenApi\r\n */\nfunction ɵɵrepeater(collection) {\n  const prevConsumer = setActiveConsumer(null);\n  const metadataSlotIdx = getSelectedIndex();\n  try {\n    const hostLView = getLView();\n    const hostTView = hostLView[TVIEW];\n    const metadata = hostLView[metadataSlotIdx];\n    const containerIndex = metadataSlotIdx + 1;\n    const lContainer = getLContainer(hostLView, containerIndex);\n    if (metadata.liveCollection === undefined) {\n      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);\n      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);\n    } else {\n      metadata.liveCollection.reset();\n    }\n    const liveCollection = metadata.liveCollection;\n    reconcile(liveCollection, collection, metadata.trackByFn);\n    // Warn developers about situations where the entire collection was re-created as part of the\n    // reconciliation pass. Note that this warning might be \"overreacting\" and report cases where\n    // the collection re-creation is the intended behavior. Still, the assumption is that most of\n    // the time it is undesired.\n    if (ngDevMode && metadata.trackByFn === ɵɵrepeaterTrackByIdentity && liveCollection.operationsCounter?.wasReCreated(liveCollection.length) && isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))) {\n      const message = formatRuntimeError(-956 /* RuntimeErrorCode.LOOP_TRACK_RECREATE */, `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. ` + 'This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. ' + 'Please review the \"track expression\" and make sure that it uniquely identifies items in a collection.');\n      console.warn(message);\n    }\n    // moves in the container might caused context's index to get out of order, re-adjust if needed\n    liveCollection.updateIndexes();\n    // handle empty blocks\n    if (metadata.hasEmptyBlock) {\n      const bindingIndex = nextBindingIndex();\n      const isCollectionEmpty = liveCollection.length === 0;\n      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {\n        const emptyTemplateIndex = metadataSlotIdx + 2;\n        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);\n        if (isCollectionEmpty) {\n          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);\n          const dehydratedView = findAndReconcileMatchingDehydratedViews(lContainerForEmpty, emptyTemplateTNode, hostLView);\n          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, undefined, {\n            dehydratedView\n          });\n          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));\n        } else {\n          // we know that an ssrId was generated for the empty template, but\n          // we were unable to match it to a dehydrated view earlier, which\n          // means that we may have changed branches between server and client.\n          // We'll need to find and remove the stale empty template view.\n          if (hostTView.firstUpdatePass) {\n            removeDehydratedViews(lContainerForEmpty);\n          }\n          removeLViewFromLContainer(lContainerForEmpty, 0);\n        }\n      }\n    }\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\nfunction getLContainer(lView, index) {\n  const lContainer = lView[index];\n  ngDevMode && assertLContainer(lContainer);\n  return lContainer;\n}\nfunction detachExistingView(lContainer, index) {\n  const existingLView = detachView(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n  return existingLView;\n}\nfunction getExistingLViewFromLContainer(lContainer, index) {\n  const existingLView = getLViewFromLContainer(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n  return existingLView;\n}\nfunction getExistingTNode(tView, index) {\n  const tNode = getTNode(tView, index);\n  ngDevMode && assertTNode(tNode);\n  return tNode;\n}\n\n/**\r\n * Update a property on a selected element.\r\n *\r\n * Operates on the element selected by index via the {@link select} instruction.\r\n *\r\n * If the property name also exists as an input property on one of the element's directives,\r\n * the component property will be set instead of the element property. This check must\r\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\r\n *\r\n * @param propName Name of property. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @returns This function returns itself so that it may be chained\r\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n/**\r\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\r\n * directive input.\r\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n  // We support both 'class' and `className` hence the fallback.\n  setAllInputsForProperty(tNode, tView, lView, isClassBased ? 'class' : 'style', value);\n}\n\n/**\r\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\r\n *\r\n * @param index Index of the element in the LView array\r\n * @param name Name of the DOM Node\r\n * @param attrsIndex Index of the element's attributes in the `consts` array.\r\n * @param localRefsIndex Index of the element's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * Attributes and localRefs are passed as an array of strings where elements with an even index\r\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\r\n * ['id', 'warning5', 'class', 'alert']\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const renderer = lView[RENDERER];\n  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);\n  lView[adjustedIndex] = native;\n  const hasDirectives = isDirectiveHost(tNode);\n  if (ngDevMode && tView.firstCreatePass) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n  setCurrentTNode(tNode, true);\n  setupStaticAttributes(renderer, native, tNode);\n  if (!isDetachedByI18n(tNode) && wasLastNodeCreated()) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0 || hasDirectives) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n  if (hasDirectives) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n/**\r\n * Mark the end of the element.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵelementEnd() {\n  let currentTNode = getCurrentTNode();\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n  if (isSkipHydrationRootTNode(tNode)) {\n    leaveSkipHydrationBlock();\n  }\n  decreaseElementDepthCount();\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    elementEndFirstCreatePass(tView, tNode);\n  }\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n/**\r\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\r\n *\r\n * @param index Index of the element in the data array\r\n * @param name Name of the DOM Node\r\n * @param attrsIndex Index of the element's attributes in the `consts` array.\r\n * @param localRefsIndex Index of the element's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\nlet _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {\n  lastNodeWasCreated(true);\n  return createElementNode(renderer, name, getNamespace());\n};\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode of element nodes.\r\n */\nfunction locateOrCreateElementNodeImpl(tView, lView, tNode, renderer, name, index) {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode) || isDisconnectedNode$1(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createElementNode(renderer, name, getNamespace());\n  }\n  // Hydration mode, looking up an existing element in DOM.\n  const native = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n  // This element might also be an anchor of a view container.\n  if (getSerializedContainerViews(hydrationInfo, index)) {\n    // Important note: this element acts as an anchor, but it's **not** a part\n    // of the embedded view, so we start the segment **after** this element, taking\n    // a reference to the next sibling. For example, the following template:\n    // `<div #vcrTarget>` is represented in the DOM as `<div></div>...<!--container-->`,\n    // so while processing a `<div>` instruction, point to the next sibling as a\n    // start of a segment.\n    ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);\n    setSegmentHead(hydrationInfo, index, native.nextSibling);\n  }\n  // Checks if the skip hydration attribute is present during hydration so we know to\n  // skip attempting to hydrate this block. We check both TNode and RElement for an\n  // attribute: the RElement case is needed for i18n cases, when we add it to host\n  // elements during the annotation phase (after all internal data structures are setup).\n  if (hydrationInfo && (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {\n    if (isComponentHost(tNode)) {\n      enterSkipHydrationBlock(tNode);\n      // Since this isn't hydratable, we need to empty the node\n      // so there's no duplicate content after render\n      clearElementContents(native);\n      ngDevMode && markRNodeAsSkippedByHydration(native);\n    } else if (ngDevMode) {\n      // If this is not a component host, throw an error.\n      // Hydration can be skipped on per-component basis only.\n      throw invalidSkipHydrationHost(native);\n    }\n  }\n  return native;\n}\nfunction enableLocateOrCreateElementNodeImpl() {\n  _locateOrCreateElementNode = locateOrCreateElementNodeImpl;\n}\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n  const localRefs = getConstant(tViewConsts, localRefsIndex);\n  if (getBindingsEnabled()) {\n    resolveDirectives(tView, lView, tNode, localRefs, findDirectiveDefMatches);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\r\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\r\n * The instruction must later be followed by `elementContainerEnd()` call.\r\n *\r\n * @param index Index of the element in the LView array\r\n * @param attrsIndex Index of the container attributes in the `consts` array.\r\n * @param localRefsIndex Index of the container's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\r\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\r\n * matching purposes and setting initial inputs of directives.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, true);\n  const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);\n  lView[adjustedIndex] = comment;\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, comment, tNode);\n  }\n  attachPatchData(comment, lView);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementContainerStart;\n}\n/**\r\n * Mark the end of the <ng-container>.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵelementContainerEnd() {\n  let currentTNode = getCurrentTNode();\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  return ɵɵelementContainerEnd;\n}\n/**\r\n * Creates an empty logical container using {@link elementContainerStart}\r\n * and {@link elementContainerEnd}\r\n *\r\n * @param index Index of the element in the LView array\r\n * @param attrsIndex Index of the container attributes in the `consts` array.\r\n * @param localRefsIndex Index of the container's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\nlet _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {\n  lastNodeWasCreated(true);\n  return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n};\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode of comment nodes that\r\n * represent <ng-container>'s anchor.\r\n */\nfunction locateOrCreateElementContainerNode(tView, lView, tNode, index) {\n  let comment;\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index) || isDetachedByI18n(tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n  }\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n  const ngContainerSize = getNgContainerSize(hydrationInfo, index);\n  ngDevMode && assertNumber(ngContainerSize, 'Unexpected state: hydrating an <ng-container>, ' + 'but no hydration info is available.');\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  comment = siblingAfter(ngContainerSize, currentRNode);\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n  return comment;\n}\nfunction enableLocateOrCreateElementContainerNodeImpl() {\n  _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;\n}\n\n/**\r\n * Returns the current OpaqueViewState instance.\r\n *\r\n * Used in conjunction with the restoreView() instruction to save a snapshot\r\n * of the current view and restore it when listeners are invoked. This allows\r\n * walking the declaration view tree in listeners to get vars from parent views.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵgetCurrentView() {\n  return getLView();\n}\n\n/**\r\n * Update a DOM property on an element.\r\n *\r\n * @param propName Name of property..\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @returns This function returns itself so that it may be chained\r\n *  (e.g. `domProperty('name', ctx.name)('title', ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdomProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setDomProperty(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵdomProperty;\n}\n// TODO(crisbeto): try to fold this into `domProperty`. Main difference is the renderer.\n/**\r\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\r\n *\r\n * This instruction is for compatibility purposes and is designed to ensure that a\r\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\r\n * the component's renderer. Normally all host bindings are evaluated with the parent\r\n * component's renderer, but, in the case of animation @triggers, they need to be\r\n * evaluated with the sub component's renderer (because that's where the animation\r\n * triggers are defined).\r\n *\r\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\r\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\r\n *\r\n * @param index The index of the element to update in the data array\r\n * @param propName Name of property. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    setDomProperty(tNode, lView, propName, value, renderer, sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n  const i = Math.floor(Math.abs(val)),\n    v = val.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\r\n * This const is used to store the locale data registered with `registerLocaleData`\r\n */\nlet LOCALE_DATA = {};\n/**\r\n * Register locale data to be used internally by Angular. See the\r\n * [\"I18n guide\"](guide/i18n/format-data-locale) to know how to import additional locale\r\n * data.\r\n *\r\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\r\n */\nfunction registerLocaleData(data, localeId, extraData) {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n/**\r\n * Finds the locale data for a given locale.\r\n *\r\n * @param locale The locale code.\r\n * @returns The locale data.\r\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\r\n */\nfunction findLocaleData(locale) {\n  const normalizedLocale = normalizeLocale(locale);\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n  throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\r\n * Retrieves the default currency code for the given locale.\r\n *\r\n * The default is defined as the first currency which is still in use.\r\n *\r\n * @param locale The code of the locale whose currency code we want.\r\n * @returns The code of the default currency for the given locale.\r\n *\r\n */\nfunction getLocaleCurrencyCode(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\r\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\r\n * for a given locale.\r\n * @param locale A locale code for the locale format rules to use.\r\n * @returns The plural function for the locale.\r\n * @see {@link NgPlural}\r\n * @see [Internationalization (i18n) Guide](guide/i18n)\r\n */\nfunction getLocalePluralCase(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\r\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\r\n * or from the global `ng.common.locale`.\r\n */\nfunction getLocaleData(normalizedLocale) {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n/**\r\n * Helper function to remove all the locale data from `LOCALE_DATA`.\r\n */\nfunction unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n/**\r\n * Index of each type of locale data from the locale data array\r\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n  LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n  LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n  LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n  LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n  LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n  LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n  LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n  LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\r\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\r\n */\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\r\n * Returns the plural case based on the locale\r\n */\nfunction getPluralCase(value, locale) {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n/**\r\n * The locale id that the application is using by default (for translations and ICU expressions).\r\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\r\n * USD currency code that the application uses by default for CurrencyPipe when no\r\n * DEFAULT_CURRENCY_CODE is provided.\r\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\r\n * Marks that the next string is an element name.\r\n *\r\n * See `I18nMutateOpCodes` documentation.\r\n */\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n/**\r\n * Marks that the next string is comment text need for ICU.\r\n *\r\n * See `I18nMutateOpCodes` documentation.\r\n */\nconst ICU_MARKER = {\n  marker: 'ICU'\n};\n/**\r\n * See `I18nCreateOpCodes`\r\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n  /**\r\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\r\n   * `COMMENT`.\r\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n  /**\r\n   * Should the node be appended to parent immediately after creation.\r\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n  /**\r\n   * If set the node should be comment (rather than a text) node.\r\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n\n/**\r\n * The locale id that the application is currently using (for translations and ICU expressions).\r\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\r\n * but is now defined as a global value.\r\n */\nlet LOCALE_ID$1 = DEFAULT_LOCALE_ID;\n/**\r\n * Sets the locale id that will be used for translations and ICU expressions.\r\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\r\n * but is now defined as a global value.\r\n *\r\n * @param localeId\r\n */\nfunction setLocaleId(localeId) {\n  ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n/**\r\n * Gets the locale id that will be used for translations and ICU expressions.\r\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\r\n * but is now defined as a global value.\r\n */\nfunction getLocaleId() {\n  return LOCALE_ID$1;\n}\n\n/**\r\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\r\n *\r\n * This is used to efficiently update expressions in i18n only when the corresponding input has\r\n * changed.\r\n *\r\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\r\n * 2) There are 32 bits allowed in JS.\r\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\r\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\r\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\r\n * so in practice it should not be an issue.)\r\n */\nlet changeMask = 0b0;\n/**\r\n * Keeps track of which bit needs to be updated in `changeMask`\r\n *\r\n * This value gets incremented on every call to `ɵɵi18nExp`\r\n */\nlet changeMaskCounter = 0;\n/**\r\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\r\n *\r\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\r\n *\r\n * @param hasChange did `ɵɵi18nExp` detect a change.\r\n */\nfunction setMaskBit(hasChange) {\n  if (hasChange) {\n    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);\n  }\n  changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index];\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\nfunction createNodeWithoutHydration(lView, textOrName, nodeType) {\n  const renderer = lView[RENDERER];\n  switch (nodeType) {\n    case Node.COMMENT_NODE:\n      return createCommentNode(renderer, textOrName);\n    case Node.TEXT_NODE:\n      return createTextNode(renderer, textOrName);\n    case Node.ELEMENT_NODE:\n      return createElementNode(renderer, textOrName, null);\n  }\n}\nlet _locateOrCreateNode = (lView, index, textOrName, nodeType) => {\n  lastNodeWasCreated(true);\n  return createNodeWithoutHydration(lView, textOrName, nodeType);\n};\nfunction locateOrCreateNodeImpl(lView, index, textOrName, nodeType) {\n  const hydrationInfo = lView[HYDRATION];\n  const noOffsetIndex = index - HEADER_OFFSET;\n  const isNodeCreationMode = !isI18nHydrationSupportEnabled() || !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\n  lastNodeWasCreated(isNodeCreationMode);\n  if (isNodeCreationMode) {\n    return createNodeWithoutHydration(lView, textOrName, nodeType);\n  }\n  const native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);\n  // TODO: Improve error handling\n  //\n  // Other hydration paths use validateMatchingNode() in order to provide\n  // detailed information in development mode about the expected DOM.\n  // However, not every node in an i18n block has a TNode. Instead, we\n  // need to be able to use the AST to generate a similar message.\n  ngDevMode && assertDefined(native, 'expected native element');\n  ngDevMode && assertEqual(native.nodeType, nodeType, 'expected matching nodeType');\n  ngDevMode && nodeType === Node.ELEMENT_NODE && assertEqual(native.tagName.toLowerCase(), textOrName.toLowerCase(), 'expecting matching tagName');\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n  return native;\n}\nfunction enableLocateOrCreateI18nNodeImpl() {\n  _locateOrCreateNode = locateOrCreateNodeImpl;\n}\n/**\r\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\r\n *\r\n * Creates text (and comment) nodes which are internationalized.\r\n *\r\n * @param lView Current lView\r\n * @param createOpCodes Set of op-codes to apply\r\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\r\n *     a root node.\r\n * @param insertInFrontOf DOM node that should be used as an anchor.\r\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    let lastNodeWasCreated = false;\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = _locateOrCreateNode(lView, index, text, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);\n      lastNodeWasCreated = wasLastNodeCreated();\n    }\n    if (appendNow && parentRNode !== null && lastNodeWasCreated) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n/**\r\n * Apply `I18nMutateOpCodes` OpCodes.\r\n *\r\n * @param tView Current `TView`\r\n * @param mutableOpCodes Mutable OpCodes to process\r\n * @param lView Current `LView`\r\n * @param anchorRNode place where the i18n node should be inserted.\r\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i];\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n        case 0 /* IcuCreateOpCode.AppendChild */:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = renderer.parentNode(anchorRNode);\n          }\n          let insertInFrontOf;\n          let parentRNode;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]);\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx];\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case 1 /* IcuCreateOpCode.Attr */:\n          const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n          const attrName = mutableOpCodes[++i];\n          const attrValue = mutableOpCodes[++i];\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i];\n          const commentNodeIndex = mutableOpCodes[++i];\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i];\n          const elementNodeIndex = mutableOpCodes[++i];\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode && throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n/**\r\n * Apply `I18nUpdateOpCodes` OpCodes\r\n *\r\n * @param tView Current `TView`\r\n * @param lView Current `LView`\r\n * @param updateOpCodes OpCodes to process\r\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\r\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\r\n *     `bindingsStartIndex`)\r\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i];\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i];\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n            switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n              case 1 /* I18nUpdateOpCode.Attr */:\n                const propName = updateOpCodes[++j];\n                const sanitizeFn = updateOpCodes[++j];\n                const tNodeOrTagName = tView.data[nodeIndex];\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                } else {\n                  setPropertyAndInputs(tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn);\n                }\n                break;\n              case 0 /* I18nUpdateOpCode.Text */:\n                const rText = lView[nodeIndex];\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                break;\n              case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1];\n      if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const tIcu = getTIcu(tView, nodeIndex);\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n/**\r\n * Apply OpCodes associated with updating an existing ICU.\r\n *\r\n * @param tView Current `TView`\r\n * @param tIcu Current `TIcu`\r\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\r\n * @param lView Current `LView`\r\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n/**\r\n * Apply OpCodes associated with switching a case on ICU.\r\n *\r\n * This involves tearing down existing case and than building up a new case.\r\n *\r\n * @param tView Current `TView`\r\n * @param tIcu Current `TIcu`\r\n * @param lView Current `LView`\r\n * @param value Value of the case to update to.\r\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n      claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);\n    }\n  }\n}\n/**\r\n * Apply OpCodes associated with tearing ICU case.\r\n *\r\n * This involves tearing down existing case and than building up a new case.\r\n *\r\n * @param tView Current `TView`\r\n * @param tIcu Current `TIcu`\r\n * @param lView Current `LView`\r\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i];\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n      }\n    }\n  }\n}\n/**\r\n * Returns the index of the current case of an ICU expression depending on the main binding value\r\n *\r\n * @param icuExpression\r\n * @param bindingValue The value of the main binding used by this ICU expression\r\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1 /* IcuType.plural */:\n        {\n          const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n          index = icuExpression.cases.indexOf(resolvedCase);\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n          break;\n        }\n      case 0 /* IcuType.select */:\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n  return index === -1 ? null : index;\n}\n\n/**\r\n * Converts `I18nCreateOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\r\n * This function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nCreateOpCodes` if attached as a method.\r\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\r\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n/**\r\n * Converts `I18nUpdateOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\r\n * This function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nUpdateOpCodes` if attached as a method.\r\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\r\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(value) {\n    const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n    const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n    switch (opCode) {\n      case 0 /* I18nUpdateOpCode.Text */:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case 1 /* I18nUpdateOpCode.Attr */:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case 2 /* I18nUpdateOpCode.IcuSwitch */:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case 3 /* I18nUpdateOpCode.IcuUpdate */:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n/**\r\n * Converts `I18nCreateOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\r\n * function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nCreateOpCodes` if attached as a method.\r\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\r\n */\nfunction icuCreateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(opCode) {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case 0 /* IcuCreateOpCode.AppendChild */:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case 1 /* IcuCreateOpCode.Attr */:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n  return lines;\n}\n/**\r\n * Converts `I18nRemoveOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\r\n * function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nRemoveOpCodes` if attached as a method.\r\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\r\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i];\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n  return lines;\n}\nclass OpCodeParser {\n  i = 0;\n  codes;\n  constructor(codes) {\n    this.codes = codes;\n  }\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n  consumeNumber() {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n  consumeString() {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n  consumeFunction() {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n  consumeNumberOrString() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n  consumeNumberStringOrMarker() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\r\n * Angular uses the special entity &ngsp; as a placeholder for non-removable space.\r\n * It's replaced by the 0xE500 PUA (Private Use Areas) unicode character and later on replaced by a\r\n * space.\r\n * We are re-implementing the same idea since translations might contain this special character.\r\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\r\n * Patch a `debug` property getter on top of the existing object.\r\n *\r\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\r\n *\r\n * @param obj Object to patch\r\n * @param debugGetter Getter returning a value to patch\r\n */\nfunction attachDebugGetter(obj, debugGetter) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      get: debugGetter,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\r\n * Create dynamic nodes from i18n translation block.\r\n *\r\n * - Text nodes are created synchronously\r\n * - TNodes are linked into tree lazily\r\n *\r\n * @param tView Current `TView`\r\n * @parentTNodeIndex index to the parent TNode of this i18n block\r\n * @param lView Current `LView`\r\n * @param index Index of `ɵɵi18nStart` instruction.\r\n * @param message Message to translate.\r\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\r\n *     `ngIf`) (-1 otherwise)\r\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes = [];\n  const updateOpCodes = [];\n  const existingTNodeStack = [[]];\n  const astStack = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression = part;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        astStack.shift();\n        setCurrentTNode(getCurrentParentTNode(), false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n        const placeholderNode = {\n          kind: 2 /* I18nNodeKind.PLACEHOLDER */,\n          index,\n          children: [],\n          type: type === 35 /* CharCode.HASH */ ? 0 /* I18nPlaceholderType.ELEMENT */ : 1 /* I18nPlaceholderType.SUBTEMPLATE */\n        };\n        astStack[0].push(placeholderNode);\n        astStack.unshift(placeholderNode.children);\n      }\n    }\n  }\n  tView.data[index] = {\n    create: createOpCodes,\n    update: updateOpCodes,\n    ast: astStack[0],\n    parentTNodeIndex\n  };\n}\n/**\r\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\r\n *\r\n * @param tView Current `TView` needed to allocate space in i18n range.\r\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\r\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\r\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\r\n * @param lView Current `LView` needed to allocate space in i18n range.\r\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\r\n * @param text Text to be added when the `Text` or `Comment` node will be created.\r\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\r\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? ngDevMode ? '{{?}}' : '' : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n/**\r\n * Processes text node in i18n block.\r\n *\r\n * Text nodes can have:\r\n * - Create instruction in `createOpCodes` for creating the text node.\r\n * - Allocate spec for text node in i18n range of `LView`\r\n * - If contains binding:\r\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\r\n *    - populate `updateOpCodes` with update instructions.\r\n *\r\n * @param tView Current `TView`\r\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\r\n *     be added as part of the `i18nStart` instruction or as part of the\r\n *     `TNode.insertBeforeIndex`.\r\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\r\n * @param createOpCodes Location where the creation OpCodes will be stored.\r\n * @param lView Current `LView`\r\n * @param text The translated text (which may contain binding)\r\n */\nfunction i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  const index = tNode.index;\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, index, null, 0, null);\n  }\n  ast.push({\n    kind: 0 /* I18nNodeKind.TEXT */,\n    index\n  });\n}\n/**\r\n * See `i18nAttributes` above.\r\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n  const previousElement = getCurrentTNode();\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes = [];\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n/**\r\n * Generate the OpCodes to update the bindings of a string.\r\n *\r\n * @param updateOpCodes Place where the update opcodes will be stored.\r\n * @param str The string containing the bindings.\r\n * @param destinationNode Index of the destination node which will receive the binding.\r\n * @param attrName Name of the attribute, if the string belongs to an attribute.\r\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\r\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\r\n * @returns The mask value for these bindings\r\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length; // Location of mask\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n  const startIndex = maskIndex + 2; // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n  updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ | (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n/**\r\n * Count the number of bindings in the given `opCodes`.\r\n *\r\n * It could be possible to speed this up, by passing the number of bindings found back from\r\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\r\n * complexity in the code and/or transient objects to be created.\r\n *\r\n * Since this function is only called once when the template is instantiated, is trivial in the\r\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\r\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\r\n */\nfunction countBindings(opCodes) {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n/**\r\n * Convert binding index to mask bit.\r\n *\r\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\r\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\r\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\r\n * case is that we will execute binding code more often than necessary. (penalty of performance)\r\n */\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\n/**\r\n * Removes everything inside the sub-templates of a message.\r\n */\nfunction removeInnerTemplateTranslation(message) {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.slice(index);\n  return res;\n}\n/**\r\n * Extracts a part of a message and removes the rest.\r\n *\r\n * This method is used for extracting a part of the message associated with a template. A\r\n * translated message can span multiple templates.\r\n *\r\n * Example:\r\n * ```html\r\n * <div i18n>Translate <span *ngIf>me</span>!</div>\r\n * ```\r\n *\r\n * @param message The message to crop\r\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\r\n * external template and removes all sub-templates.\r\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\r\n * Generate the OpCodes for ICU expressions.\r\n *\r\n * @param icuExpression\r\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\r\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\r\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\r\n */\nfunction icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  const cases = [];\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    const caseAst = [];\n    cases.push(caseAst);\n    bindingMask = parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n  ast.push({\n    kind: 3 /* I18nNodeKind.ICU */,\n    index: anchorIdx,\n    cases,\n    currentCaseLViewIndex: tIcu.currentCaseLViewIndex\n  });\n}\n/**\r\n * Parses text containing an ICU expression and produces a JSON object for it.\r\n * Original code from closure library, modified for Angular.\r\n *\r\n * @param pattern Text containing an ICU expression that needs to be parsed.\r\n *\r\n */\nfunction parseICUBlock(pattern) {\n  const cases = [];\n  const values = [];\n  let icuType = 1 /* IcuType.plural */;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0 /* IcuType.select */;\n    } else {\n      icuType = 1 /* IcuType.plural */;\n    }\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n  const parts = i18nParseTextIntoPartsAndICU(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === 1 /* IcuType.plural */) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\r\n * Breaks pattern into strings and top level {...} blocks.\r\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\r\n * into keys and cases. Original code from closure library, modified for Angular.\r\n *\r\n * @param pattern (sub)Pattern to be broken.\r\n * @returns An `Array<string|IcuExpression>` where:\r\n *   - odd positions: `string` => text between ICU expressions\r\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\r\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n  if (!pattern) {\n    return [];\n  }\n  let prevPos = 0;\n  const braceStack = [];\n  const results = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n/**\r\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\r\n *\r\n */\nfunction parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n  const create = [];\n  const remove = [];\n  const update = [];\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\nfunction walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i);\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see ${XSS_SECURITY_URL})`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          const elementNode = {\n            kind: 1 /* I18nNodeKind.ELEMENT */,\n            index: newIndex,\n            children: []\n          };\n          ast.push(elementNode);\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        ast.push({\n          kind: 0 /* I18nNodeKind.TEXT */,\n          index: newIndex\n        });\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n          icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n  update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n  create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\r\n * Handles message string post-processing for internationalization.\r\n *\r\n * Handles message string post-processing by transforming it from intermediate\r\n * format (that might contain some markers that we need to replace) to the final\r\n * form, consumable by i18nStart instruction. Post processing steps include:\r\n *\r\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\r\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\r\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\r\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\r\n *    in case multiple ICUs have the same placeholder name\r\n *\r\n * @param message Raw translation string for post processing\r\n * @param replacements Set of replacements that should be applied\r\n *\r\n * @returns Transformed string that can be consumed by i18nStart instruction\r\n *\r\n * @codeGenApi\r\n */\nfunction i18nPostprocess(message, replacements = {}) {\n  /**\r\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\r\n   *\r\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\r\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\r\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\r\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\r\n   * front of �#6�. The post processing step restores the right order by keeping track of the\r\n   * template id stack and looks for placeholders that belong to the currently active template.\r\n   */\n  let result = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches = {};\n    const templateIdsStack = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n      const content = phs || tmpl;\n      const placeholders = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach(placeholder => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  /**\r\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\r\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  /**\r\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\r\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n    return replacements.hasOwnProperty(key) ? replacements[key] : match;\n  });\n  /**\r\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\r\n   * multiple ICUs have the same placeholder name\r\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift();\n    }\n    return match;\n  });\n  return result;\n}\n\n/**\r\n * Marks a block of text as translatable.\r\n *\r\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\r\n * The translation `message` is the value which is locale specific. The translation string may\r\n * contain placeholders which associate inner elements and sub-templates within the translation.\r\n *\r\n * The translation `message` placeholders are:\r\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\r\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\r\n *   `block` that matches the sub-template in which it was declared.\r\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\r\n *   and end of DOM element that were embedded in the original translation block. The placeholder\r\n *   `index` points to the element index in the template instructions set. An optional `block` that\r\n *   matches the sub-template in which it was declared.\r\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\r\n *   split up and translated separately in each angular template function. The `index` points to the\r\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\r\n *\r\n * @param index A unique index of the translation in the static block.\r\n * @param messageIndex An index of the translation message from the `def.consts` array.\r\n * @param subTemplateIndex Optional sub-template index in the `message`.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant(tView.consts, messageIndex);\n  const parentTNode = getCurrentParentTNode();\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n  }\n  // Set a flag that this LView has i18n blocks.\n  // The flag is later used to determine whether this component should\n  // be hydrated (currently hydration is not supported for i18n blocks).\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    // Annotate host component's LView (not embedded view's LView),\n    // since hydration can be skipped on per-component basis only.\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    componentLView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n  } else {\n    lView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n  }\n  const tI18n = tView.data[adjustedIndex];\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && parentTNode.type & 8 /* TNodeType.ElementContainer */ ? lView[parentTNode.index] : null;\n  prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n/**\r\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\r\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18nEnd() {\n  setInI18nBlock(false);\n}\n/**\r\n *\r\n * Use this instruction to create a translation block that doesn't contain any placeholder.\r\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\r\n *\r\n * The translation `message` is the value which is locale specific. The translation string may\r\n * contain placeholders which associate inner elements and sub-templates within the translation.\r\n *\r\n * The translation `message` placeholders are:\r\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\r\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\r\n *   `block` that matches the sub-template in which it was declared.\r\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\r\n *   and end of DOM element that were embedded in the original translation block. The placeholder\r\n *   `index` points to the element index in the template instructions set. An optional `block` that\r\n *   matches the sub-template in which it was declared.\r\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\r\n *   split up and translated separately in each angular template function. The `index` points to the\r\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\r\n *\r\n * @param index A unique index of the translation in the static block.\r\n * @param messageIndex An index of the translation message from the `def.consts` array.\r\n * @param subTemplateIndex Optional sub-template index in the `message`.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n/**\r\n * Marks a list of attributes as translatable.\r\n *\r\n * @param index A unique index in the static block\r\n * @param values\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant(tView.consts, attrsIndex);\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\r\n * Stores the values of the bindings during each update cycle in order to determine if we need to\r\n * update the translated nodes.\r\n *\r\n * @param value The binding's value\r\n * @returns This function returns itself so that it may be chained\r\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18nExp(value) {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n/**\r\n * Updates a translation block or an i18n attribute when the bindings have changed.\r\n *\r\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\r\n * (i18n attribute) on which it should update the content.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18nApply(index) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\r\n * Handles message string post-processing for internationalization.\r\n *\r\n * Handles message string post-processing by transforming it from intermediate\r\n * format (that might contain some markers that we need to replace) to the final\r\n * form, consumable by i18nStart instruction. Post processing steps include:\r\n *\r\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\r\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\r\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\r\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\r\n *    in case multiple ICUs have the same placeholder name\r\n *\r\n * @param message Raw translation string for post processing\r\n * @param replacements Set of replacements that should be applied\r\n *\r\n * @returns Transformed string that can be consumed by i18nStart instruction\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n  return i18nPostprocess(message, replacements);\n}\n\n/**\r\n * Adds an event listener to the current node.\r\n *\r\n * If an output exists on one of the node's directives, it also subscribes to the output\r\n * and saves the subscription for later cleanup.\r\n *\r\n * @param eventName Name of the event\r\n * @param listenerFn The function to be called when event emits\r\n * @param eventTargetResolver Function that returns global target information in case this listener\r\n * should be attached to a global object like window, document or body\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵlistener(eventName, listenerFn, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n  return ɵɵlistener;\n}\n/**\r\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\r\n *\r\n * This instruction is for compatibility purposes and is designed to ensure that a\r\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\r\n * in the component's renderer. Normally all host listeners are evaluated with the\r\n * parent component's renderer, but, in the case of animation @triggers, they need\r\n * to be evaluated with the sub component's renderer (because that's where the\r\n * animation triggers are defined).\r\n *\r\n * Do not use this instruction as a replacement for `listener`. This instruction\r\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\r\n *\r\n * @param eventName Name of the event\r\n * @param listenerFn The function to be called when event emits\r\n * @param useCapture Whether or not to use capture in event listener\r\n * @param eventTargetResolver Function that returns global target information in case this listener\r\n * should be attached to a global object like window, document or body\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n  const tNode = getCurrentTNode();\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  let processOutputs = true;\n  let wrappedListener = null;\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\n    wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n    const hasCoalescedDomEvent = listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, listenerFn, wrappedListener);\n    // Context: https://github.com/angular/angular/pull/30144\n    if (hasCoalescedDomEvent) {\n      processOutputs = false;\n    }\n  }\n  if (processOutputs) {\n    const outputConfig = tNode.outputs?.[eventName];\n    const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];\n    if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {\n      for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {\n        const index = hostDirectiveOutputConfig[i];\n        const lookupName = hostDirectiveOutputConfig[i + 1];\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n        listenToOutput(tNode, lView, index, lookupName, eventName, wrappedListener);\n      }\n    }\n    if (outputConfig && outputConfig.length) {\n      for (const index of outputConfig) {\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n        listenToOutput(tNode, lView, index, eventName, eventName, wrappedListener);\n      }\n    }\n  }\n}\n\n/**\r\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\r\n * Will get the next level up if level is not specified.\r\n *\r\n * This is used to save contexts of parent views so they can be bound in embedded views, or\r\n * in conjunction with reference() to bind a ref from a parent view.\r\n *\r\n * @param level The relative level of the view from which to grab context compared to contextVewData\r\n * @returns context\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵnextContext(level = 1) {\n  return nextContextImpl(level);\n}\n\n/**\r\n * Checks a given node against matching projection slots and returns the\r\n * determined slot index. Returns \"null\" if no slot matched the given node.\r\n *\r\n * This function takes into account the parsed ngProjectAs selector from the\r\n * node's attributes. If present, it will check whether the ngProjectAs selector\r\n * matches any of the projection slot selectors.\r\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n  return wildcardNgContentIndex;\n}\n/**\r\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\r\n * It takes all the selectors from the entire component's template and decides where\r\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\r\n * backed by a selector).\r\n *\r\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\r\n * un-parsed form.\r\n *\r\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\r\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\r\n *\r\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\r\n * drawbacks:\r\n * - having only a textual form would require runtime parsing of CSS selectors;\r\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\r\n * template author).\r\n *\r\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\r\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\r\n *        all nodes which do not match any selector. If not specified, a single wildcard\r\n *        selector projection slot will be defined.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);\n    const tails = projectionHeads.slice();\n    let componentChild = componentNode.child;\n    while (componentChild !== null) {\n      // Do not project let declarations so they don't occupy a slot.\n      if (componentChild.type !== 128 /* TNodeType.LetDeclaration */) {\n        const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n        if (slotIndex !== null) {\n          if (tails[slotIndex]) {\n            tails[slotIndex].projectionNext = componentChild;\n          } else {\n            projectionHeads[slotIndex] = componentChild;\n          }\n          tails[slotIndex] = componentChild;\n        }\n      }\n      componentChild = componentChild.next;\n    }\n  }\n}\n/**\r\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\r\n * to the projectionDef instruction.\r\n *\r\n * @param nodeIndex Index of the projection node.\r\n * @param selectorIndex Index of the slot selector.\r\n *  - 0 when the selector is `*` (or unspecified as this is the default value),\r\n *  - 1 based index of the selector from the {@link projectionDef}\r\n * @param attrs Static attributes set on the `ng-content` node.\r\n * @param fallbackTemplateFn Template function with fallback content.\r\n *   Will be rendered if the slot is empty at runtime.\r\n * @param fallbackDecls Number of declarations in the fallback template.\r\n * @param fallbackVars Number of variables in the fallback template.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs, fallbackTemplateFn, fallbackDecls, fallbackVars) {\n  const lView = getLView();\n  const tView = getTView();\n  const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;\n  // Fallback content needs to be declared no matter whether the slot is empty since different\n  // instances of the component may or may not insert it. Also it needs to be declare *before*\n  // the projection node in order to work correctly with hydration.\n  if (fallbackIndex !== null) {\n    declareTemplate(lView, tView, fallbackIndex, fallbackTemplateFn, fallbackDecls, fallbackVars, null, attrs);\n  }\n  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) {\n    tProjectionNode.projection = selectorIndex;\n  }\n  // `<ng-content>` has no content. Even if there's fallback\n  // content, the fallback is shown next to it.\n  setCurrentTNodeAsNotParent();\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\n  const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST];\n  const isEmpty = componentHostNode.projection[tProjectionNode.projection] === null;\n  if (isEmpty && fallbackIndex !== null) {\n    insertFallbackContent(lView, tView, fallbackIndex);\n  } else if (isNodeCreationMode && !isDetachedByI18n(tProjectionNode)) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n/** Inserts the fallback content of a projection slot. Assumes there's no projected content. */\nfunction insertFallbackContent(lView, tView, fallbackIndex) {\n  const adjustedIndex = HEADER_OFFSET + fallbackIndex;\n  const fallbackTNode = tView.data[adjustedIndex];\n  const fallbackLContainer = lView[adjustedIndex];\n  ngDevMode && assertTNode(fallbackTNode);\n  ngDevMode && assertLContainer(fallbackLContainer);\n  const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView.ssrId);\n  const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, undefined, {\n    dehydratedView\n  });\n  addLViewToLContainer(fallbackLContainer, fallbackLView, 0, shouldAddViewToDom(fallbackTNode, dehydratedView));\n}\n\n/**\r\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\r\n * refresh).\r\n *\r\n * @param directiveIndex Current directive index\r\n * @param predicate The type for which the query will search\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n * @returns QueryList<T>\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n  createContentQuery(directiveIndex, predicate, flags, read);\n}\n/**\r\n * Creates a new view query by initializing internal data structures.\r\n *\r\n * @param predicate The type for which the query will search\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n  createViewQuery(predicate, flags, read);\n}\n/**\r\n * Refreshes a query by combining matches from all active views and removing matches from deleted\r\n * views.\r\n *\r\n * @returns `true` if a query got dirty during change detection or if this is a static query\r\n * resolving in creation mode, `false` otherwise.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵqueryRefresh(queryList) {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n  setCurrentQueryIndex(queryIndex + 1);\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */)) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = getQueryResults(lView, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n  return false;\n}\n/**\r\n * Loads a QueryList corresponding to the current view or content query.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵloadQuery() {\n  return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\n\n/**\r\n * Creates a new content query and binds it to a signal created by an authoring function.\r\n *\r\n * @param directiveIndex Current directive index\r\n * @param target The target signal to which the query should be bound\r\n * @param predicate The type for which the query will search\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵcontentQuerySignal(directiveIndex, target, predicate, flags, read) {\n  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));\n}\n/**\r\n * Creates a new view query by initializing internal data structures and binding a new query to the\r\n * target signal.\r\n *\r\n * @param target The target signal to assign the query results to.\r\n * @param predicate The type or label that should match a given query\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵviewQuerySignal(target, predicate, flags, read) {\n  bindQueryToSignal(target, createViewQuery(predicate, flags, read));\n}\n/**\r\n * Advances the current query index by a specified offset.\r\n *\r\n * Adjusting the current query index is necessary in cases where a given directive has a mix of\r\n * zone-based and signal-based queries. The signal-based queries don't require tracking of the\r\n * current index (those are refreshed on demand and not during change detection) so this instruction\r\n * is only necessary for backward-compatibility.\r\n *\r\n * @param index offset to apply to the current query index (defaults to 1)\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵqueryAdvance(indexOffset = 1) {\n  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);\n}\n\n/**\r\n * Retrieves a local reference from the current contextViewData.\r\n *\r\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\r\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\r\n *\r\n * @param index The index of the local ref in contextViewData.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵreference(index) {\n  const contextLView = getContextLView();\n  return load(contextLView, HEADER_OFFSET + index);\n}\nfunction toTStylingRange(prev, next) {\n  ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction getTStylingRangePrev(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange >> 17 /* StylingRange.PREV_SHIFT */ & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction setTStylingRangePrev(tStylingRange, previous) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */ | previous << 17 /* StylingRange.PREV_SHIFT */;\n}\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction getTStylingRangeNext(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction setTStylingRangeNext(tStylingRange, next) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~131068 /* StylingRange.NEXT_MASK */ |\n  //\n  next << 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\n}\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\n/**\r\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\r\n * list of styles and compute the duplicate flag.\r\n *\r\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\r\n *\r\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\r\n * the head/tail of the template portion of the styles.\r\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\r\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\r\n *\r\n * @param tData The `TData` to insert into.\r\n * @param tNode `TNode` associated with the styling element.\r\n * @param tStylingKey See `TStylingKey`.\r\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\r\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\r\n *               template.)\r\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\r\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\r\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n    }\n    tmplTail = index;\n  }\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n  }\n  markDuplicates(tData, tStylingKey, index, true);\n  markDuplicates(tData, tStylingKey, index, false);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n/**\r\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\r\n *\r\n * @param tNode `TNode` where the residual is stored.\r\n * @param tStylingKey `TStylingKey` to store.\r\n * @param tData `TData` associated with the current `LView`.\r\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\r\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\r\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\r\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n  }\n}\n/**\r\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\r\n * `TStyleValue`.\r\n *\r\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\r\n * with it set to `false` to search both the previous as well as next items in the list.\r\n *\r\n * No duplicate case\r\n * ```\r\n *   [style.color]\r\n *   [style.width.px] <<- index\r\n *   [style.height.px]\r\n * ```\r\n *\r\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\r\n * duplicates because `width` is not found in any other part of the linked list.\r\n *\r\n * Duplicate case\r\n * ```\r\n *   [style.color]\r\n *   [style.width.em]\r\n *   [style.width.px] <<- index\r\n * ```\r\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\r\n * because `width` is found in the chain.\r\n *\r\n * Map case 1\r\n * ```\r\n *   [style.width.px]\r\n *   [style.color]\r\n *   [style]  <<- index\r\n * ```\r\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\r\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\r\n *\r\n * Map case 2\r\n * ```\r\n *   [style]\r\n *   [style.width.px]\r\n *   [style.color]  <<- index\r\n * ```\r\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\r\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\r\n * `width`.\r\n *\r\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\r\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\r\n *        the linked list.\r\n * @param index Starting location in the linked list to search from\r\n * @param isPrevDir Direction.\r\n *        - `true` for previous (lower priority);\r\n *        - `false` for next (higher priority).\r\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir) {\n  const tStylingAtIndex = tData[index + 1];\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor];\n    const tStyleRangeAtCursor = tData[cursor + 1];\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n/**\r\n * Determines if two `TStylingKey`s are a match.\r\n *\r\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\r\n * `TStylingKey` has a match.\r\n *\r\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\r\n * - `color`\r\n *    - `color`    // Match another color\r\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\r\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\r\n *    - `['', null, 'other', true]`       // wrapped `null` so match\r\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\r\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\r\n *\r\n * @param tStylingKeyCursor\r\n * @param tStylingKey\r\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, \"Expected that 'tStylingKey' has been unwrapped\");\n  if (tStylingKeyCursor === null ||\n  // If the cursor is `null` it means that we have map at that\n  // location so we must assume that we have a match.\n  tStylingKey == null ||\n  // If `tStylingKey` is `null` then it is a map therefor assume that it\n  // contains a match.\n  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n  return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0\n};\n/**\r\n * Retrieves the last parsed `key` of style.\r\n * @param text the text to substring the key from.\r\n */\nfunction getLastParsedKey(text) {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\r\n * Retrieves the last parsed `value` of style.\r\n * @param text the text to substring the key from.\r\n */\nfunction getLastParsedValue(text) {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\r\n * Initializes `className` string for parsing and parses the first token.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\r\n *   const key = getLastParsedKey();\r\n *   ...\r\n * }\r\n * ```\r\n * @param text `className` to parse\r\n * @returns index where the next invocation of `parseClassNameNext` should resume.\r\n */\nfunction parseClassName(text) {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\r\n * Parses next `className` token.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\r\n *   const key = getLastParsedKey();\r\n *   ...\r\n * }\r\n * ```\r\n *\r\n * @param text `className` to parse\r\n * @param index where the parsing should resume.\r\n * @returns index where the next invocation of `parseClassNameNext` should resume.\r\n */\nfunction parseClassNameNext(text, index) {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n/**\r\n * Initializes `cssText` string for parsing and parses the first key/values.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\r\n *   const key = getLastParsedKey();\r\n *   const value = getLastParsedValue();\r\n *   ...\r\n * }\r\n * ```\r\n * @param text `cssText` to parse\r\n * @returns index where the next invocation of `parseStyleNext` should resume.\r\n */\nfunction parseStyle(text) {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\r\n * Parses the next `cssText` key/values.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\r\n *   const key = getLastParsedKey();\r\n *   const value = getLastParsedValue();\r\n *   ...\r\n * }\r\n *\r\n * @param text `cssText` to parse\r\n * @param index where the parsing should resume.\r\n * @returns index where the next invocation of `parseStyleNext` should resume.\r\n */\nfunction parseStyleNext(text, startIndex) {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\r\n * Reset the global state of the styling parser.\r\n * @param text The styling text to parse.\r\n */\nfunction resetParserState(text) {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n/**\r\n * Returns index of next non-whitespace character.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\r\n *          that location.)\r\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\r\n * Returns index of last char in class token.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after last char in class token.\r\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\r\n * Consumes all of the characters belonging to style key and token.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after last style key character.\r\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n  let ch;\n  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ || (ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */ || ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */)) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\r\n * Consumes all whitespace and the separator `:` after the style key.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after separator and surrounding whitespace.\r\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\r\n * Consumes style value honoring `url()` and `\"\"` text.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after last style value character.\r\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let ch2 = -1; // 2nd previous character\n  let ch3 = -1; // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch = text.charCodeAt(i++);\n    if (ch === 59 /* CharCode.SEMI_COLON */) {\n      return lastChIndex;\n    } else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (startIndex === i - 4 &&\n    // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n    ch3 === 85 /* CharCode.U */ && ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n      lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n    } else if (ch > 32 /* CharCode.SPACE */) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n  }\n  return lastChIndex;\n}\n/**\r\n * Consumes all of the quoted characters.\r\n *\r\n * @param text Text to scan\r\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after quoted characters.\r\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n      return index;\n    }\n    if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.slice(index + 1) + `'. Expecting '${expecting}'.`);\n}\n\n/**\r\n * Update a style binding on an element with the provided value.\r\n *\r\n * If the style value is falsy then it will be removed from the element\r\n * (or assigned a different value depending if there are any styles placed\r\n * on the element with `styleMap` or any static styles that are\r\n * present from when the element was created with `styling`).\r\n *\r\n * Note that the styling element is updated as part of `stylingApply`.\r\n *\r\n * @param prop A valid CSS property.\r\n * @param value New value to write (`null` or an empty string to remove).\r\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\r\n *\r\n * Note that this will apply the provided style value to the host element if this function is called\r\n * within a host binding function.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n/**\r\n * Update a class binding on an element with the provided value.\r\n *\r\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\r\n * therefore, the class binding itself must already be allocated using\r\n * `styling` within the creation block.\r\n *\r\n * @param prop A valid CSS class (only one).\r\n * @param value A true/false value which will turn the class on or off.\r\n *\r\n * Note that this will apply the provided class value to the host element if this function\r\n * is called within a host binding function.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵclassProp(className, value) {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n/**\r\n * Update style bindings using an object literal on an element.\r\n *\r\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\r\n * When styles are applied to the element they will then be updated with respect to\r\n * any styles/classes set via `styleProp`. If any styles are set to falsy\r\n * then they will be removed from the element.\r\n *\r\n * Note that the styling instruction will not be applied until `stylingApply` is called.\r\n *\r\n * @param styles A key/value style map of the styles that will be applied to the given element.\r\n *        Any missing styles (that have already been applied to the element beforehand) will be\r\n *        removed (unset) from the element's styling.\r\n *\r\n * Note that this will apply the provided styleMap value to the host element if this function\r\n * is called within a host binding.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵstyleMap(styles) {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\r\n * Parse text as style and add values to KeyValueArray.\r\n *\r\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\r\n * needed. It is only referenced from `ɵɵstyleMap`.\r\n *\r\n * @param keyValueArray KeyValueArray to add parsed values to.\r\n * @param text text to parse.\r\n */\nfunction styleStringParser(keyValueArray, text) {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n/**\r\n * Update class bindings using an object literal or class-string on an element.\r\n *\r\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\r\n * When classes are applied to the element they will then be updated with\r\n * respect to any styles/classes set via `classProp`. If any\r\n * classes are set to falsy then they will be removed from the element.\r\n *\r\n * Note that the styling instruction will not be applied until `stylingApply` is called.\r\n * Note that this will the provided classMap value to the host element if this function is called\r\n * within a host binding.\r\n *\r\n * @param classes A key/value map or string of CSS classes that will be added to the\r\n *        given element. Any missing classes (that have already been applied to the element\r\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵclassMap(classes) {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\r\n * Parse text as class and add values to KeyValueArray.\r\n *\r\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\r\n * needed. It is only referenced from `ɵɵclassMap`.\r\n *\r\n * @param keyValueArray KeyValueArray to add parsed values to.\r\n * @param text text to parse.\r\n */\nfunction classStringParser(keyValueArray, text) {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n/**\r\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\r\n *\r\n * @param prop property name.\r\n * @param value binding value.\r\n * @param suffix suffix for the property (e.g. `em` or `px`)\r\n * @param isClassBased `true` if `class` change (`false` if `style`)\r\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()];\n    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n/**\r\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\r\n *\r\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\r\n *        function so that `style` can be processed. This is done for tree shaking purposes.\r\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\r\n *        have different parsers.)\r\n * @param value bound value from application\r\n * @param isClassBased `true` if `class` change (`false` if `style`)\r\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()];\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, \"Styling linked list shadow input should be marked as 'false'\");\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, \"Expecting static portion to end with ';'\");\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n    }\n  }\n}\n/**\r\n * Determines when the binding is in `hostBindings` section\r\n *\r\n * @param tView Current `TView`\r\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\r\n */\nfunction isInHostBindings(tView, bindingIndex) {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n/**\r\n * Collects the necessary information to insert the binding into a linked list of style bindings\r\n * using `insertTStylingBinding`.\r\n *\r\n * @param tView `TView` where the binding linked list will be stored.\r\n * @param tStylingKey Property/key of the binding.\r\n * @param bindingIndex Index of binding associated with the `prop`\r\n * @param isClassBased `true` if `class` change (`false` if `style`)\r\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()];\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n/**\r\n * Adds static styling information to the binding if applicable.\r\n *\r\n * The linked list of styles not only stores the list and keys, but also stores static styling\r\n * information on some of the keys. This function determines if the key should contain the styling\r\n * information and computes it.\r\n *\r\n * See `TStylingStatic` for more details.\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;\n  }\n  return stylingKey;\n}\n/**\r\n * Retrieve the `TStylingKey` for the template styling instruction.\r\n *\r\n * This is needed since `hostBinding` styling instructions are inserted after the template\r\n * instruction. While the template instruction needs to update the residual in `TNode` the\r\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\r\n * the template instruction is downstream from the `hostBindings` instructions.\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @return `TStylingKey` if found or `undefined` if not found.\r\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)];\n}\n/**\r\n * Update the `TStylingKey` of the first template instruction in `TNode`.\r\n *\r\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\r\n * However, they execute after the template styling instructions. This means that they get inserted\r\n * in front of the template styling instructions.\r\n *\r\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\r\n * executed it means that it may need to steal static fields from the template instruction. This\r\n * method allows us to update the first template instruction `TStylingKey` with a new value.\r\n *\r\n * Assume:\r\n * ```angular-ts\r\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\r\n *\r\n * @Directive({\r\n *   host: {\r\n *     'style': 'width: 100px',\r\n *     '[style.color]': 'dirExp',\r\n *   }\r\n * })\r\n * class MyDir {}\r\n * ```\r\n *\r\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\r\n * ```ts\r\n *  ['', 'color', 'color', 'red', 'width', '100px'],\r\n * ```\r\n *\r\n * The reason for this is that the template instruction does not know if there are styling\r\n * instructions and must assume that there are none and must collect all of the static styling.\r\n * (both\r\n * `color' and 'width`)\r\n *\r\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\r\n * ```ts\r\n *  ['', 'color', 'width', '100px'],  // newly inserted\r\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\r\n * ```\r\n *\r\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\r\n * update it like so:\r\n * ```ts\r\n *  ['', 'color', 'width', '100px'],\r\n *  ['', 'color', 'color', 'red'],    // UPDATE\r\n * ```\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\r\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\r\n * Collect all static values after the current `TNode.directiveStylingLast` index.\r\n *\r\n * Collect the remaining styling information which has not yet been collected by an existing\r\n * styling instruction.\r\n *\r\n * @param tData `TData` where the `DirectiveDefs` are stored.\r\n * @param tNode `TNode` which contains the directive range.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n  let residual = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = tData[i].hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\r\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\r\n *\r\n * (This is opposite of residual styling.)\r\n *\r\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\r\n *        styling. (Or `null` if template styling)\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param stylingKey Existing `TStylingKey` to update or wrap.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast];\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n/**\r\n * Convert `TAttrs` into `TStylingStatic`.\r\n *\r\n * @param stylingKey existing `TStylingKey` to update or wrap.\r\n * @param attrs `TAttributes` to process.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n  const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n  let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i];\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n          }\n          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n/**\r\n * Convert user input to `KeyValueArray`.\r\n *\r\n * This function takes user input which could be `string`, Object literal, or iterable and converts\r\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\r\n * where\r\n * even indexes contain keys and odd indexes contain values for those keys).\r\n *\r\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\r\n * independent\r\n * way.\r\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\r\n * applied)\r\n *\r\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\r\n * difference in linear fashion without the need to allocate any additional data.\r\n *\r\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\r\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\r\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\r\n *\r\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\r\n *        function so that `style` can be processed. This is done\r\n *        for tree shaking purposes.\r\n * @param stringParser The parser is passed in so that it will be tree shakable. See\r\n *        `styleStringParser` and `classStringParser`\r\n * @param value The value to parse/convert to `KeyValueArray`\r\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY;\n  const styleKeyValueArray = [];\n  const unwrappedValue = unwrapSafeValue(value);\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode && throwError('Unsupported styling type: ' + typeof unwrappedValue + ' (' + unwrappedValue + ')');\n  }\n  return styleKeyValueArray;\n}\n/**\r\n * Set a `value` for a `key`.\r\n *\r\n * See: `keyValueArraySet` for details\r\n *\r\n * @param keyValueArray KeyValueArray to add to.\r\n * @param key Style key to add.\r\n * @param value The value to set.\r\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\r\n * Class-binding-specific function for setting the `value` for a `key`.\r\n *\r\n * See: `keyValueArraySet` for details\r\n *\r\n * @param keyValueArray KeyValueArray to add to.\r\n * @param key Style key to add.\r\n * @param value The value to set.\r\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n/**\r\n * Update map based styling.\r\n *\r\n * Map based styling could be anything which contains more than one binding. For example `string`,\r\n * or object literal. Dealing with all of these types would complicate the logic so\r\n * instead this function expects that the complex input is first converted into normalized\r\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\r\n * very cheap to compute deltas between the previous and current value.\r\n *\r\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\r\n * @param tNode `TNode` where the binding is located.\r\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\r\n * @param renderer Renderer to use if any updates.\r\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\r\n * @param newKeyValueArray Current value represented as `KeyValueArray`\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @param bindingIndex Binding index of the binding.\r\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n  if (oldKeyValueArray === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey = null;\n    let setValue = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n/**\r\n * Update a simple (property name) styling.\r\n *\r\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\r\n * value as well as binding priority into consideration to determine which value should be written\r\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\r\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\r\n *\r\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\r\n * @param tNode `TNode` where the binding is located.\r\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\r\n * @param renderer Renderer to use if any updates.\r\n * @param prop Either style property name or a class name.\r\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @param bindingIndex Binding index of the binding.\r\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n  if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1];\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView);\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n/**\r\n * Search for styling value with higher priority which is overwriting current value, or a\r\n * value of lower priority to which we should fall back if the value is `undefined`.\r\n *\r\n * When value is being applied at a location, related values need to be consulted.\r\n * - If there is a higher priority binding, we should be using that one instead.\r\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\r\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\r\n * - If there is a lower priority binding and we are changing to `undefined`\r\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\r\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\r\n *\r\n * NOTE: The styling stores two values.\r\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\r\n *    is used for dirty checking).\r\n * 2. The normalized value is stored at `index + 1`.\r\n *\r\n * @param tData `TData` used for traversing the priority.\r\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\r\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\r\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\r\n *   - `null` search prev and go all the way to end. Return last value where\r\n *     `isStylingValuePresent(value)` is true.\r\n * @param lView `LView` used for retrieving the actual values.\r\n * @param prop Property which we are interested in.\r\n * @param index Starting index in the linked list of styling bindings where the search should start.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value = undefined;\n  while (index > 0) {\n    const rawKey = tData[index];\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? rawKey[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1];\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual, prop);\n    }\n  }\n  return value;\n}\n/**\r\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\r\n * resolution should be used.)\r\n *\r\n * @param value Binding style value.\r\n */\nfunction isStylingValuePresent(value) {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n/**\r\n * Normalizes and/or adds a suffix to the value.\r\n *\r\n * If value is `null`/`undefined` no suffix is added\r\n * @param value\r\n * @param suffix\r\n */\nfunction normalizeSuffix(value, suffix) {\n  if (value == null || value === '') ;else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n/**\r\n * Tests if the `TNode` has input shadow.\r\n *\r\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\r\n * `@Input('class')` as input.\r\n *\r\n * @param tNode `TNode` which we would like to see if it has shadow.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n  return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\r\n * Create static text node\r\n *\r\n * @param index Index of the node in the data array\r\n * @param value Static string value to write.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtext(index, value = '') {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) : tView.data[adjustedIndex];\n  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\n  lView[adjustedIndex] = textNative;\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, textNative, tNode);\n  }\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\nlet _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {\n  lastNodeWasCreated(true);\n  return createTextNode(lView[RENDERER], value);\n};\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode of text nodes.\r\n */\nfunction locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode) || isDisconnectedNode$1(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createTextNode(lView[RENDERER], value);\n  }\n  // Hydration mode, looking up an existing element in DOM.\n  const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(textNative);\n  return textNative;\n}\nfunction enableLocateOrCreateTextNodeImpl() {\n  _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\n}\n\n/**\r\n * Create interpolation bindings with a variable number of expressions.\r\n *\r\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\r\n * Those are faster because there is no need to create an array of expressions and iterate over it.\r\n *\r\n * `values`:\r\n * - has static text at even indexes,\r\n * - has evaluated expressions at odd indexes.\r\n *\r\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\r\n */\nfunction interpolationV(lView, values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    // The condition is to prevent an out-of-bound read\n    content += renderStringify(values[i]) + (i + 1 !== values.length ? values[i + 1] : '');\n  }\n  return content;\n}\n/**\r\n * Creates an interpolation binding with 1 expression.\r\n *\r\n * @param prefix static value used for concatenation only.\r\n * @param v0 value checked for change.\r\n * @param suffix static value used for concatenation only.\r\n */\nfunction interpolation1(lView, prefix, v0, suffix = '') {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\r\n * Creates an interpolation binding with 2 expressions.\r\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\r\n * Creates an interpolation binding with 3 expressions.\r\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;\n}\n/**\r\n * Create an interpolation binding with 4 expressions.\r\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;\n}\n/**\r\n * Creates an interpolation binding with 5 expressions.\r\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;\n}\n/**\r\n * Creates an interpolation binding with 6 expressions.\r\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;\n}\n/**\r\n * Creates an interpolation binding with 7 expressions.\r\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;\n}\n/**\r\n * Creates an interpolation binding with 8 expressions.\r\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;\n}\n\n/**\r\n *\r\n * Update text content with a lone bound value\r\n *\r\n * Used when a text node has 1 interpolated value in it, an no additional text\r\n * surrounds that interpolated value:\r\n *\r\n * ```html\r\n * <div>{{v0}}</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate(v0);\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate(v0) {\n  ɵɵtextInterpolate1('', v0);\n  return ɵɵtextInterpolate;\n}\n/**\r\n *\r\n * Update text content with single bound value surrounded by other text.\r\n *\r\n * Used when a text node has 1 interpolated value in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate1;\n}\n/**\r\n *\r\n * Update text content with 2 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 2 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate2;\n}\n/**\r\n *\r\n * Update text content with 3 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 3 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate3(\r\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate3;\n}\n/**\r\n *\r\n * Update text content with 4 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 4 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate4(\r\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see ɵɵtextInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate4;\n}\n/**\r\n *\r\n * Update text content with 5 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 5 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate5(\r\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate5;\n}\n/**\r\n *\r\n * Update text content with 6 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 6 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate6(\r\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\r\n * ```\r\n *\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate6;\n}\n/**\r\n *\r\n * Update text content with 7 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 7 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate7(\r\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate7;\n}\n/**\r\n *\r\n * Update text content with 8 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 8 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate8(\r\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate8;\n}\n/**\r\n * Update text content with 9 or more bound values other surrounded by text.\r\n *\r\n * Used when the number of interpolated values exceeds 8.\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolateV(\r\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\r\n *  'suffix']);\r\n * ```\r\n *.\r\n * @param values The collection of values and the strings in between those values, beginning with\r\n * a string prefix and ending with a string suffix.\r\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\r\n *\r\n * @returns itself, so that it may be chained.\r\n * @codeGenApi\r\n */\nfunction ɵɵtextInterpolateV(values) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolateV;\n}\n/**\r\n * Updates a text binding at a given index in a given LView.\r\n */\nfunction textBindingInternal(lView, index, value) {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView);\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Update a two-way bound property on a selected element.\r\n *\r\n * Operates on the element selected by index via the {@link select} instruction.\r\n *\r\n * @param propName Name of property.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @returns This function returns itself so that it may be chained\r\n * (e.g. `twoWayProperty('name', ctx.name)('title', ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtwoWayProperty(propName, value, sanitizer) {\n  // TODO(crisbeto): perf impact of re-evaluating this on each change detection?\n  if (isWritableSignal(value)) {\n    value = value();\n  }\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵtwoWayProperty;\n}\n/**\r\n * Function used inside two-way listeners to conditionally set the value of the bound expression.\r\n *\r\n * @param target Field on which to set the value.\r\n * @param value Value to be set to the field.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtwoWayBindingSet(target, value) {\n  const canWrite = isWritableSignal(target);\n  canWrite && target.set(value);\n  return canWrite;\n}\n/**\r\n * Adds an event listener that updates a two-way binding to the current node.\r\n *\r\n * @param eventName Name of the event.\r\n * @param listenerFn The function to be called when event emits.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtwoWayListener(eventName, listenerFn) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);\n  return ɵɵtwoWayListener;\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/** Object that indicates the value of a `@let` declaration that hasn't been initialized yet. */\nconst UNINITIALIZED_LET = {};\n/**\r\n * Declares an `@let` at a specific data slot. Returns itself to allow chaining.\r\n *\r\n * @param index Index at which to declare the `@let`.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵdeclareLet(index) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = getOrCreateTNode(tView, adjustedIndex, 128 /* TNodeType.LetDeclaration */, null, null);\n  setCurrentTNode(tNode, false);\n  store(tView, lView, adjustedIndex, UNINITIALIZED_LET);\n  return ɵɵdeclareLet;\n}\n/**\r\n * Instruction that stores the value of a `@let` declaration on the current view.\r\n * Returns the value to allow usage inside variable initializers.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵstoreLet(value) {\n  performanceMarkFeature('NgLet');\n  const tView = getTView();\n  const lView = getLView();\n  const index = getSelectedIndex();\n  store(tView, lView, index, value);\n  return value;\n}\n/**\r\n * Retrieves the value of a `@let` declaration defined in a parent view.\r\n *\r\n * @param index Index of the declaration within the view.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵreadContextLet(index) {\n  const contextLView = getContextLView();\n  const value = load(contextLView, HEADER_OFFSET + index);\n  if (value === UNINITIALIZED_LET) {\n    throw new RuntimeError(314 /* RuntimeErrorCode.UNINITIALIZED_LET_ACCESS */, ngDevMode && 'Attempting to access a @let declaration whose value is not available yet');\n  }\n  return value;\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Sets the location within the source template at which\r\n * each element in the current view was defined.\r\n *\r\n * @param index Index at which the DOM node was created.\r\n * @param templatePath Path to the template at which the node was defined.\r\n * @param locations Element locations to which to attach the source location.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵattachSourceLocations(templatePath, locations) {\n  const tView = getTView();\n  const lView = getLView();\n  const renderer = lView[RENDERER];\n  const attributeName = 'data-ng-source-location';\n  for (const [index, offset, line, column] of locations) {\n    const tNode = getTNode(tView, index + HEADER_OFFSET);\n    // The compiler shouldn't generate the instruction for non-element nodes, but assert just in case.\n    ngDevMode && assertTNodeType(tNode, 2 /* TNodeType.Element */);\n    const node = getNativeByIndex(index + HEADER_OFFSET, lView);\n    // Set the attribute directly in the DOM so it doesn't participate in directive matching.\n    if (!node.hasAttribute(attributeName)) {\n      const attributeValue = `${templatePath}@o:${offset},l:${line},c:${column}`;\n      renderer.setAttribute(node, attributeName, attributeValue);\n    }\n  }\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Interpolate a value with a single bound value and no prefixes or suffixes.\r\n *\r\n * @param v0 Value checked for change.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate(v0) {\n  // Avoid calling into the `interpolate` functions since\n  // we know that we don't have a prefix or suffix.\n  return bindingUpdated(getLView(), nextBindingIndex(), v0) ? renderStringify(v0) : NO_CHANGE;\n}\n/**\r\n * Interpolate a value with a single bound value.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate1(prefix, v0, suffix = '') {\n  return interpolation1(getLView(), prefix, v0, suffix);\n}\n/**\r\n * Interpolate a value with two bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate2(prefix, v0, i0, v1, suffix = '') {\n  return interpolation2(getLView(), prefix, v0, i0, v1, suffix);\n}\n/**\r\n * Interpolate a value with three bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate3(prefix, v0, i0, v1, i1, v2, suffix = '') {\n  return interpolation3(getLView(), prefix, v0, i0, v1, i1, v2, suffix);\n}\n/**\r\n * Interpolate a value with four bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix = '') {\n  return interpolation4(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n}\n/**\r\n * Interpolate a value with five bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = '') {\n  return interpolation5(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n}\n/**\r\n * Interpolate a value with six bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = '') {\n  return interpolation6(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n}\n/**\r\n * Interpolate a value with seven bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change.\r\n * @param i5 Static value used for concatenation only.\r\n * @param v6 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = '') {\n  return interpolation7(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n}\n/**\r\n * Interpolate a value with eight bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change.\r\n * @param i5 Static value used for concatenation only.\r\n * @param v6 Value checked for change.\r\n * @param i6 Static value used for concatenation only.\r\n * @param v7 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = '') {\n  return interpolation8(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n}\n/**\r\n * Interpolate a value with nine or more bound values.\r\n *\r\n * @param values The collection of values and the strings in-between those values, beginning with\r\n * a string prefix and ending with a string suffix.\r\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\nfunction ɵɵinterpolateV(values) {\n  return interpolationV(getLView(), values);\n}\n\n/**\r\n * Resolves the providers which are defined in the DirectiveDef.\r\n *\r\n * When inserting the tokens and the factories in their respective arrays, we can assume that\r\n * this method is called first for the component (if any), and then for other directives on the same\r\n * node.\r\n * As a consequence,the providers are always processed in that order:\r\n * 1) The view providers of the component\r\n * 2) The providers of the component\r\n * 3) The providers of the other directives\r\n * This matches the structure of the injectables arrays of a view (for each node).\r\n * So the tokens and the factories can be pushed at the end of the arrays, except\r\n * in one case for multi providers.\r\n *\r\n * @param def the directive definition\r\n * @param providers: Array of `providers`.\r\n * @param viewProviders: Array of `viewProviders`.\r\n */\nfunction providersResolver(def, providers, viewProviders) {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n/**\r\n * Resolves a provider and publishes it to the DI system.\r\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    const providerFactory = providerToFactory(provider);\n    if (ngDevMode) {\n      const injector = new NodeInjector(tNode, lView);\n      runInInjectorProfilerContext(injector, token, () => {\n        emitProviderConfiguredEvent(provider, isViewProvider);\n      });\n    }\n    const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\r\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\r\n * @param tView `TView` in which to register the hook.\r\n * @param provider Provider whose hook should be registered.\r\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\r\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\r\n * provider factory.\r\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n      if (!providerIsTypeProvider && provider.multi) {\n        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n/**\r\n * Add a factory in a multi factory.\r\n * @returns Index at which the factory was inserted.\r\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  if (isComponentProvider) {\n    multiFactory.componentProviders++;\n  }\n  return multiFactory.multi.push(factory) - 1;\n}\n/**\r\n * Returns the index of item in the array, but only in the begin to end range.\r\n */\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n/**\r\n * Use this with `multi` `providers`.\r\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n  return multiResolve(this.multi, []);\n}\n/**\r\n * Use this with `multi` `viewProviders`.\r\n *\r\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\r\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n  const factories = this.multi;\n  let result;\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders;\n    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n/**\r\n * Maps an array of factories into an array of values.\r\n */\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i];\n    result.push(factory());\n  }\n  return result;\n}\n/**\r\n * Creates a multi factory.\r\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n\n/**\r\n * This feature resolves the providers of a directive (or component),\r\n * and publish them into the DI system, making it visible to others for injection.\r\n *\r\n * For example:\r\n * ```ts\r\n * class ComponentWithProviders {\r\n *   constructor(private greeter: GreeterDE) {}\r\n *\r\n *   static ɵcmp = defineComponent({\r\n *     type: ComponentWithProviders,\r\n *     selectors: [['component-with-providers']],\r\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\r\n *    decls: 1,\r\n *    vars: 1,\r\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\r\n *      if (fs & RenderFlags.Create) {\r\n *        ɵɵtext(0);\r\n *      }\r\n *      if (fs & RenderFlags.Update) {\r\n *        ɵɵtextInterpolate(ctx.greeter.greet());\r\n *      }\r\n *    },\r\n *    features: [ɵɵProvidersFeature([GreeterDE])]\r\n *  });\r\n * }\r\n * ```\r\n *\r\n * @param definition\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = (def, processProvidersFn) => {\n      return providersResolver(def,\n      //\n      processProvidersFn ? processProvidersFn(providers) : providers,\n      //\n      viewProviders);\n    };\n  };\n}\n\n/**\r\n * A feature that adds support for external runtime styles for a component.\r\n * An external runtime style is a URL to a CSS stylesheet that contains the styles\r\n * for a given component. For browsers, this URL will be used in an appended `link` element\r\n * when the component is rendered. This feature is typically used for Hot Module Replacement\r\n * (HMR) of component stylesheets by leveraging preexisting global stylesheet HMR available\r\n * in most development servers.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵExternalStylesFeature(styleUrls) {\n  return definition => {\n    if (styleUrls.length < 1) {\n      return;\n    }\n    definition.getExternalStyles = encapsulationId => {\n      // Add encapsulation ID search parameter `ngcomp` to support external style encapsulation as well as the encapsulation mode\n      // for usage tracking.\n      const urls = styleUrls.map(value => value + '?ngcomp' + (encapsulationId ? '=' + encodeURIComponent(encapsulationId) : '') + '&e=' + definition.encapsulation);\n      return urls;\n    };\n  };\n}\n\n/**\r\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\r\n * definition, when generating a direct reference in the component file would otherwise create an\r\n * import cycle.\r\n *\r\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n  const def = type.ɵcmp;\n  def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */false);\n  def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */true);\n}\n/**\r\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\r\n * existing module definition.\r\n *\r\n * Scope metadata of modules is not used in production builds, so calls to this function can be\r\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\r\n * to become eligible for tree-shaking as well.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDefOrThrow(type);\n    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);\n    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);\n    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);\n    if (scope.bootstrap) {\n      // This only happens in local compilation mode.\n      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);\n    }\n    depsTracker.registerNgModule(type, scope);\n  });\n}\nfunction convertToTypeArray(values) {\n  if (typeof values === 'function') {\n    return values;\n  }\n  const flattenValues = flatten(values);\n  if (flattenValues.some(isForwardRef)) {\n    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);\n  } else {\n    return flattenValues.map(maybeUnwrapModuleWithProviders);\n  }\n}\nfunction maybeUnwrapModuleWithProviders(value) {\n  return isModuleWithProviders(value) ? value.ngModule : value;\n}\n\n/**\r\n * Bindings for pure functions are stored after regular bindings.\r\n *\r\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\r\n * ------------------------------------------------------------------------------------------\r\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\r\n * ------------------------------------------------------------------------------------------\r\n *                    ^                      ^\r\n *      TView.bindingStartIndex      TView.expandoStartIndex\r\n *\r\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\r\n * binding root gives the first index where the bindings are stored. In component views, the binding\r\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\r\n * any directive instances + any hostVars in directives evaluated before it.\r\n *\r\n * See VIEW_DATA.md for more information about host binding resolution.\r\n */\n/**\r\n * If the value hasn't been saved, calls the pure function to store and return the\r\n * value. If it has been saved, returns the saved value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn Function that returns a value\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\r\n * If the value of the provided exp has changed, calls the pure function to return\r\n * an updated value. Or if the value has not changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn Function that returns an updated value\r\n * @param exp Updated expression value\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param exp7\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param exp7\r\n * @param exp8\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\r\n * pureFunction instruction that can support any number of bindings.\r\n *\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn A pure function that takes binding values and builds an object or array\r\n * containing those values.\r\n * @param exps An array of binding values\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\r\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\r\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\r\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\r\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\r\n * it to `undefined`.\r\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\r\n * If the value of the provided exp has changed, calls the pure function to return\r\n * an updated value. Or if the value has not changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn Function that returns an updated value\r\n * @param exp Updated expression value\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\r\n * pureFunction instruction that can support any number of bindings.\r\n *\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn A pure function that takes binding values and builds an object or array\r\n * containing those values.\r\n * @param exps An array of binding values\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\r\n * Create a pipe.\r\n *\r\n * @param index Pipe index where the pipe will be stored.\r\n * @param pipeName The name of the pipe\r\n * @returns T the instance of the pipe.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpipe(index, pipeName) {\n  const tView = getTView();\n  let pipeDef;\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex];\n  }\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  let previousInjectorProfilerContext;\n  if (ngDevMode) {\n    previousInjectorProfilerContext = setInjectorProfilerContext({\n      injector: new NodeInjector(getCurrentTNode(), getLView()),\n      token: pipeDef.type\n    });\n  }\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);\n  }\n}\n/**\r\n * Searches the pipe registry for a pipe with the given name. If one is found,\r\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\r\n *\r\n * @param name Name of pipe to resolve\r\n * @param registry Full list of available pipes\r\n * @returns Matching PipeDef\r\n */\nfunction getPipeDef(name, registry) {\n  if (registry) {\n    if (ngDevMode) {\n      const pipes = registry.filter(pipe => pipe.name === name);\n      // TODO: Throw an error in the next major\n      if (pipes.length > 1) {\n        console.warn(formatRuntimeError(313 /* RuntimeErrorCode.MULTIPLE_MATCHING_PIPES */, getMultipleMatchingPipesMessage(name)));\n      }\n    }\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n  }\n  return;\n}\n/**\r\n * Generates a helpful error message for the user when multiple pipes match the name.\r\n *\r\n * @param name Name of the pipe\r\n * @returns The error message\r\n */\nfunction getMultipleMatchingPipesMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `check ${hostIsStandalone ? \"'@Component.imports' of this component\" : 'the imports of this module'}`;\n  const errorMessage = `Multiple pipes match the name \\`${name}\\`${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\r\n * Generates a helpful error message for the user when a pipe is not found.\r\n *\r\n * @param name Name of the missing pipe\r\n * @returns The error message\r\n */\nfunction getPipeNotFoundErrorMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${hostIsStandalone ? \"included in the '@Component.imports' of this component\" : 'declared or imported in this module'}`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\r\n * Invokes a pipe with 1 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param offset the binding offset\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpipeBind1(index, offset, v1) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);\n}\n/**\r\n * Invokes a pipe with 2 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);\n}\n/**\r\n * Invokes a pipe with 3 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n * @param v3 4rd argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);\n}\n/**\r\n * Invokes a pipe with 4 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n * @param v3 3rd argument to {@link PipeTransform#transform}.\r\n * @param v4 4th argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\r\n * Invokes a pipe with variable number of arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n  return lView[TVIEW].data[index].pure;\n}\n\n/**\r\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\r\n * `<ng-template>` element.\r\n *\r\n * @codeGenApi\r\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n  return createTemplateRef(tNode, lView);\n}\nfunction ɵɵgetComponentDepsFactory(type, rawImports) {\n  return () => {\n    try {\n      return depsTracker.getComponentDependencies(type, rawImports).dependencies;\n    } catch (e) {\n      console.error(`Computing dependencies in local compilation mode for the component \"${type.name}\" failed with the exception:`, e);\n      throw e;\n    }\n  };\n}\n\n/**\r\n * Sets the debug info for an Angular class.\r\n *\r\n * This runtime is guarded by ngDevMode flag.\r\n */\nfunction ɵsetClassDebugInfo(type, debugInfo) {\n  const def = getComponentDef(type);\n  if (def !== null) {\n    def.debugInfo = debugInfo;\n  }\n}\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\n/**\r\n * Gets the URL from which the client will fetch a new version of a component's metadata so it\r\n * can be replaced during hot module reloading.\r\n * @param id Unique ID for the component, generated during compile time.\r\n * @param timestamp Time at which the request happened.\r\n * @param base Base URL against which to resolve relative paths.\r\n * @codeGenApi\r\n */\nfunction ɵɵgetReplaceMetadataURL(id, timestamp, base) {\n  const url = `./@ng/component?c=${id}&t=${encodeURIComponent(timestamp)}`;\n  return new URL(url, base).href;\n}\n/**\r\n * Replaces the metadata of a component type and re-renders all live instances of the component.\r\n * @param type Class whose metadata will be replaced.\r\n * @param applyMetadata Callback that will apply a new set of metadata on the `type` when invoked.\r\n * @param environment Syntehtic namespace imports that need to be passed along to the callback.\r\n * @param locals Local symbols from the source location that have to be exposed to the callback.\r\n * @param importMeta `import.meta` from the call site of the replacement function. Optional since\r\n *   it isn't used internally.\r\n * @param id ID to the class being replaced. **Not** the same as the component definition ID.\r\n *   Optional since the ID might not be available internally.\r\n * @codeGenApi\r\n */\nfunction ɵɵreplaceMetadata(type, applyMetadata, namespaces, locals, importMeta = null, id = null) {\n  ngDevMode && assertComponentDef(type);\n  const currentDef = getComponentDef(type);\n  // The reason `applyMetadata` is a callback that is invoked (almost) immediately is because\n  // the compiler usually produces more code than just the component definition, e.g. there\n  // can be functions for embedded views, the variables for the constant pool and `setClassMetadata`\n  // calls. The callback allows us to keep them isolate from the rest of the app and to invoke\n  // them at the right time.\n  applyMetadata.apply(null, [type, namespaces, ...locals]);\n  const {\n    newDef,\n    oldDef\n  } = mergeWithExistingDefinition(currentDef, getComponentDef(type));\n  // TODO(crisbeto): the `applyMetadata` call above will replace the definition on the type.\n  // Ideally we should adjust the compiler output so the metadata is returned, however that'll\n  // require some internal changes. We re-add the metadata here manually.\n  type[NG_COMP_DEF] = newDef;\n  // If a `tView` hasn't been created yet, it means that this component hasn't been instantianted\n  // before. In this case there's nothing left for us to do aside from patching it in.\n  if (oldDef.tView) {\n    const trackedViews = getTrackedLViews().values();\n    for (const root of trackedViews) {\n      // Note: we have the additional check, because `IsRoot` can also indicate\n      // a component created through something like `createComponent`.\n      if (isRootView(root) && root[PARENT] === null) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, root);\n      }\n    }\n  }\n}\n/**\r\n * Merges two component definitions while preseving the original one in place.\r\n * @param currentDef Definition that should receive the new metadata.\r\n * @param newDef Source of the new metadata.\r\n */\nfunction mergeWithExistingDefinition(currentDef, newDef) {\n  // Clone the current definition since we reference its original data further\n  // down in the replacement process (e.g. when destroying the renderer).\n  const clone = {\n    ...currentDef\n  };\n  // Assign the new metadata in place while preserving the object literal. It's important to\n  // Keep the object in place, because there can be references to it, for example in the\n  // `directiveDefs` of another definition.\n  const replacement = Object.assign(currentDef, newDef, {\n    // We need to keep the existing directive and pipe defs, because they can get patched on\n    // by a call to `setComponentScope` from a module file. That call won't make it into the\n    // HMR replacement function, because it lives in an entirely different file.\n    directiveDefs: clone.directiveDefs,\n    pipeDefs: clone.pipeDefs,\n    // Preserve the old `setInput` function, because it has some state.\n    // This is fine, because the component instance is preserved as well.\n    setInput: clone.setInput,\n    // Externally this is redundant since we redeclare the definition using the original type.\n    // Internally we may receive a definition with an alternate, but identical, type so we have\n    // to ensure that the original one is preserved.\n    type: clone.type\n  });\n  ngDevMode && assertEqual(replacement, currentDef, 'Expected definition to be merged in place');\n  return {\n    newDef: replacement,\n    oldDef: clone\n  };\n}\n/**\r\n * Finds all LViews matching a specific component definition and recreates them.\r\n * @param importMeta `import.meta` information.\r\n * @param id HMR ID of the component.\r\n * @param oldDef Component definition to search for.\r\n * @param rootLView View from which to start the search.\r\n */\nfunction recreateMatchingLViews(importMeta, id, newDef, oldDef, rootLView) {\n  ngDevMode && assertDefined(oldDef.tView, 'Expected a component definition that has been instantiated at least once');\n  const tView = rootLView[TVIEW];\n  // Use `tView` to match the LView since `instanceof` can\n  // produce false positives when using inheritance.\n  if (tView === oldDef.tView) {\n    ngDevMode && assertComponentDef(oldDef.type);\n    recreateLView(importMeta, id, newDef, oldDef, rootLView);\n    return;\n  }\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const current = rootLView[i];\n    if (isLContainer(current)) {\n      // The host can be an LView if a component is injecting `ViewContainerRef`.\n      if (isLView(current[HOST])) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[HOST]);\n      }\n      for (let j = CONTAINER_HEADER_OFFSET; j < current.length; j++) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[j]);\n      }\n    } else if (isLView(current)) {\n      recreateMatchingLViews(importMeta, id, newDef, oldDef, current);\n    }\n  }\n}\n/**\r\n * Removes any cached renderers from the factory for the provided type.\r\n * This is currently used by the HMR logic to ensure Renderers are kept\r\n * synchronized with any definition metadata updates.\r\n * @param factory A RendererFactory2 instance.\r\n * @param def A ComponentDef instance.\r\n */\nfunction clearRendererCache(factory, def) {\n  // Cast to read a private field.\n  // NOTE: This must be kept synchronized with the renderer factory implementation in\n  // platform-browser and platform-browser/animations.\n  factory.componentReplaced?.(def.id);\n}\n/**\r\n * Recreates an LView in-place from a new component definition.\r\n * @param importMeta `import.meta` information.\r\n * @param id HMR ID for the component.\r\n * @param newDef Definition from which to recreate the view.\r\n * @param oldDef Previous component definition being swapped out.\r\n * @param lView View to be recreated.\r\n */\nfunction recreateLView(importMeta, id, newDef, oldDef, lView) {\n  const instance = lView[CONTEXT];\n  let host = lView[HOST];\n  // In theory the parent can also be an LContainer, but it appears like that's\n  // only the case for embedded views which we won't be replacing here.\n  const parentLView = lView[PARENT];\n  ngDevMode && assertLView(parentLView);\n  const tNode = lView[T_HOST];\n  ngDevMode && assertTNodeType(tNode, 2 /* TNodeType.Element */);\n  ngDevMode && assertNotEqual(newDef, oldDef, 'Expected different component definition');\n  const zone = lView[INJECTOR].get(NgZone, null);\n  const recreate = () => {\n    // If we're recreating a component with shadow DOM encapsulation, it will have attached a\n    // shadow root. The browser will throw if we attempt to attach another one and there's no way\n    // to detach it. Our only option is to make a clone only of the root node, replace the node\n    // with the clone and use it for the newly-created LView.\n    if (oldDef.encapsulation === ViewEncapsulation.ShadowDom) {\n      const newHost = host.cloneNode(false);\n      host.replaceWith(newHost);\n      host = newHost;\n    }\n    // Recreate the TView since the template might've changed.\n    const newTView = getOrCreateComponentTView(newDef);\n    // Create a new LView from the new TView, but reusing the existing TNode and DOM node.\n    const newLView = createLView(parentLView, newTView, instance, getInitialLViewFlagsFromDef(newDef), host, tNode, null, null,\n    // The renderer will be created a bit further down once the old one is destroyed.\n    null, null, null);\n    // Detach the LView from its current place in the tree so we don't\n    // start traversing any siblings and modifying their structure.\n    replaceLViewInTree(parentLView, lView, newLView, tNode.index);\n    // Destroy the detached LView.\n    destroyLView(lView[TVIEW], lView);\n    // Always force the creation of a new renderer to ensure state captured during construction\n    // stays consistent with the new component definition by clearing any old ached factories.\n    const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n    clearRendererCache(rendererFactory, oldDef);\n    // Patch a brand-new renderer onto the new view only after the old\n    // view is destroyed so that the runtime doesn't try to reuse it.\n    newLView[RENDERER] = rendererFactory.createRenderer(host, newDef);\n    // Remove the nodes associated with the destroyed LView. This removes the\n    // descendants, but not the host which we want to stay in place.\n    removeViewFromDOM(lView[TVIEW], lView);\n    // Reset the content projection state of the TNode before the first render.\n    // Note that this has to happen after the LView has been destroyed or we\n    // risk some projected nodes not being removed correctly.\n    resetProjectionState(tNode);\n    // Creation pass for the new view.\n    renderView(newTView, newLView, instance);\n    // Update pass for the new view.\n    refreshView(newTView, newLView, newTView.template, instance);\n  };\n  // The callback isn't guaranteed to be inside the Zone so we need to bring it in ourselves.\n  if (zone === null) {\n    executeWithInvalidateFallback(importMeta, id, recreate);\n  } else {\n    zone.run(() => executeWithInvalidateFallback(importMeta, id, recreate));\n  }\n}\n/**\r\n * Runs an HMR-related function and falls back to\r\n * invalidating the HMR data if it throws an error.\r\n */\nfunction executeWithInvalidateFallback(importMeta, id, callback) {\n  try {\n    callback();\n  } catch (e) {\n    const error = e;\n    // If we have all the necessary information and APIs to send off the invalidation\n    // request, send it before rethrowing so the dev server can decide what to do.\n    if (id !== null && error.message) {\n      const toLog = error.message + (error.stack ? '\\n' + error.stack : '');\n      importMeta?.hot?.send?.('angular:invalidate', {\n        id,\n        message: toLog,\n        error: true\n      });\n    }\n    // Throw the error in case the page doesn't get refreshed.\n    throw e;\n  }\n}\n/**\r\n * Replaces one LView in the tree with another one.\r\n * @param parentLView Parent of the LView being replaced.\r\n * @param oldLView LView being replaced.\r\n * @param newLView Replacement LView to be inserted.\r\n * @param index Index at which the LView should be inserted.\r\n */\nfunction replaceLViewInTree(parentLView, oldLView, newLView, index) {\n  // Update the sibling whose `NEXT` pointer refers to the old view.\n  for (let i = HEADER_OFFSET; i < parentLView[TVIEW].bindingStartIndex; i++) {\n    const current = parentLView[i];\n    if ((isLView(current) || isLContainer(current)) && current[NEXT] === oldLView) {\n      current[NEXT] = newLView;\n      break;\n    }\n  }\n  // Set the new view as the head, if the old view was first.\n  if (parentLView[CHILD_HEAD] === oldLView) {\n    parentLView[CHILD_HEAD] = newLView;\n  }\n  // Set the new view as the tail, if the old view was last.\n  if (parentLView[CHILD_TAIL] === oldLView) {\n    parentLView[CHILD_TAIL] = newLView;\n  }\n  // Update the `NEXT` pointer to the same as the old view.\n  newLView[NEXT] = oldLView[NEXT];\n  // Clear out the `NEXT` of the old view.\n  oldLView[NEXT] = null;\n  // Insert the new LView at the correct index.\n  parentLView[index] = newLView;\n}\n/**\r\n * Child nodes mutate the `projection` state of their parent node as they're being projected.\r\n * This function resets the `project` back to its initial state.\r\n * @param tNode\r\n */\nfunction resetProjectionState(tNode) {\n  // The `projection` is mutated by child nodes as they're being projected. We need to\n  // reset it to the initial state so projection works after the template is swapped out.\n  if (tNode.projection !== null) {\n    for (const current of tNode.projection) {\n      if (isTNodeShape(current)) {\n        // Reset `projectionNext` since it can affect the traversal order during projection.\n        current.projectionNext = null;\n        current.flags &= ~2 /* TNodeFlags.isProjected */;\n      }\n    }\n    tNode.projection = null;\n  }\n}\n\n/**\r\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\r\n *\r\n * This should be kept up to date with the public exports of @angular/core.\r\n */\nconst angularCoreEnv = (() => ({\n  'ɵɵattribute': ɵɵattribute,\n  'ɵɵdefineComponent': ɵɵdefineComponent,\n  'ɵɵdefineDirective': ɵɵdefineDirective,\n  'ɵɵdefineInjectable': __defineInjectable,\n  'ɵɵdefineInjector': __defineInjector,\n  'ɵɵdefineNgModule': ɵɵdefineNgModule,\n  'ɵɵdefinePipe': ɵɵdefinePipe,\n  'ɵɵdirectiveInject': ɵɵdirectiveInject,\n  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n  'ɵɵinject': __inject,\n  'ɵɵinjectAttribute': ɵɵinjectAttribute,\n  'ɵɵinvalidFactory': ɵɵinvalidFactory,\n  'ɵɵinvalidFactoryDep': __invalidFactoryDep,\n  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n  'ɵɵresetView': __resetView,\n  'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n  'ɵɵProvidersFeature': ɵɵProvidersFeature,\n  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n  'ɵɵExternalStylesFeature': ɵɵExternalStylesFeature,\n  'ɵɵnextContext': ɵɵnextContext,\n  'ɵɵnamespaceHTML': __namespaceHTML,\n  'ɵɵnamespaceMathML': __namespaceMathML,\n  'ɵɵnamespaceSVG': __namespaceSVG,\n  'ɵɵenableBindings': __enableBindings,\n  'ɵɵdisableBindings': __disableBindings,\n  'ɵɵelementStart': ɵɵelementStart,\n  'ɵɵelementEnd': ɵɵelementEnd,\n  'ɵɵelement': ɵɵelement,\n  'ɵɵelementContainerStart': ɵɵelementContainerStart,\n  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n  'ɵɵelementContainer': ɵɵelementContainer,\n  'ɵɵpureFunction0': ɵɵpureFunction0,\n  'ɵɵpureFunction1': ɵɵpureFunction1,\n  'ɵɵpureFunction2': ɵɵpureFunction2,\n  'ɵɵpureFunction3': ɵɵpureFunction3,\n  'ɵɵpureFunction4': ɵɵpureFunction4,\n  'ɵɵpureFunction5': ɵɵpureFunction5,\n  'ɵɵpureFunction6': ɵɵpureFunction6,\n  'ɵɵpureFunction7': ɵɵpureFunction7,\n  'ɵɵpureFunction8': ɵɵpureFunction8,\n  'ɵɵpureFunctionV': ɵɵpureFunctionV,\n  'ɵɵgetCurrentView': ɵɵgetCurrentView,\n  'ɵɵrestoreView': __restoreView,\n  'ɵɵlistener': ɵɵlistener,\n  'ɵɵprojection': ɵɵprojection,\n  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n  'ɵɵpipeBind1': ɵɵpipeBind1,\n  'ɵɵpipeBind2': ɵɵpipeBind2,\n  'ɵɵpipeBind3': ɵɵpipeBind3,\n  'ɵɵpipeBind4': ɵɵpipeBind4,\n  'ɵɵpipeBindV': ɵɵpipeBindV,\n  'ɵɵprojectionDef': ɵɵprojectionDef,\n  'ɵɵdomProperty': ɵɵdomProperty,\n  'ɵɵproperty': ɵɵproperty,\n  'ɵɵpipe': ɵɵpipe,\n  'ɵɵqueryRefresh': ɵɵqueryRefresh,\n  'ɵɵqueryAdvance': ɵɵqueryAdvance,\n  'ɵɵviewQuery': ɵɵviewQuery,\n  'ɵɵviewQuerySignal': ɵɵviewQuerySignal,\n  'ɵɵloadQuery': ɵɵloadQuery,\n  'ɵɵcontentQuery': ɵɵcontentQuery,\n  'ɵɵcontentQuerySignal': ɵɵcontentQuerySignal,\n  'ɵɵreference': ɵɵreference,\n  'ɵɵclassMap': ɵɵclassMap,\n  'ɵɵstyleMap': ɵɵstyleMap,\n  'ɵɵstyleProp': ɵɵstyleProp,\n  'ɵɵclassProp': ɵɵclassProp,\n  'ɵɵadvance': ɵɵadvance,\n  'ɵɵtemplate': ɵɵtemplate,\n  'ɵɵconditional': ɵɵconditional,\n  'ɵɵconditionalCreate': ɵɵconditionalCreate,\n  'ɵɵconditionalBranchCreate': ɵɵconditionalBranchCreate,\n  'ɵɵdefer': ɵɵdefer,\n  'ɵɵdeferWhen': ɵɵdeferWhen,\n  'ɵɵdeferOnIdle': ɵɵdeferOnIdle,\n  'ɵɵdeferOnImmediate': ɵɵdeferOnImmediate,\n  'ɵɵdeferOnTimer': ɵɵdeferOnTimer,\n  'ɵɵdeferOnHover': ɵɵdeferOnHover,\n  'ɵɵdeferOnInteraction': ɵɵdeferOnInteraction,\n  'ɵɵdeferOnViewport': ɵɵdeferOnViewport,\n  'ɵɵdeferPrefetchWhen': ɵɵdeferPrefetchWhen,\n  'ɵɵdeferPrefetchOnIdle': ɵɵdeferPrefetchOnIdle,\n  'ɵɵdeferPrefetchOnImmediate': ɵɵdeferPrefetchOnImmediate,\n  'ɵɵdeferPrefetchOnTimer': ɵɵdeferPrefetchOnTimer,\n  'ɵɵdeferPrefetchOnHover': ɵɵdeferPrefetchOnHover,\n  'ɵɵdeferPrefetchOnInteraction': ɵɵdeferPrefetchOnInteraction,\n  'ɵɵdeferPrefetchOnViewport': ɵɵdeferPrefetchOnViewport,\n  'ɵɵdeferHydrateWhen': ɵɵdeferHydrateWhen,\n  'ɵɵdeferHydrateNever': ɵɵdeferHydrateNever,\n  'ɵɵdeferHydrateOnIdle': ɵɵdeferHydrateOnIdle,\n  'ɵɵdeferHydrateOnImmediate': ɵɵdeferHydrateOnImmediate,\n  'ɵɵdeferHydrateOnTimer': ɵɵdeferHydrateOnTimer,\n  'ɵɵdeferHydrateOnHover': ɵɵdeferHydrateOnHover,\n  'ɵɵdeferHydrateOnInteraction': ɵɵdeferHydrateOnInteraction,\n  'ɵɵdeferHydrateOnViewport': ɵɵdeferHydrateOnViewport,\n  'ɵɵdeferEnableTimerScheduling': ɵɵdeferEnableTimerScheduling,\n  'ɵɵrepeater': ɵɵrepeater,\n  'ɵɵrepeaterCreate': ɵɵrepeaterCreate,\n  'ɵɵrepeaterTrackByIndex': ɵɵrepeaterTrackByIndex,\n  'ɵɵrepeaterTrackByIdentity': ɵɵrepeaterTrackByIdentity,\n  'ɵɵcomponentInstance': ɵɵcomponentInstance,\n  'ɵɵtext': ɵɵtext,\n  'ɵɵtextInterpolate': ɵɵtextInterpolate,\n  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n  'ɵɵi18n': ɵɵi18n,\n  'ɵɵi18nAttributes': ɵɵi18nAttributes,\n  'ɵɵi18nExp': ɵɵi18nExp,\n  'ɵɵi18nStart': ɵɵi18nStart,\n  'ɵɵi18nEnd': ɵɵi18nEnd,\n  'ɵɵi18nApply': ɵɵi18nApply,\n  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n  'ɵɵresolveWindow': ɵɵresolveWindow,\n  'ɵɵresolveDocument': ɵɵresolveDocument,\n  'ɵɵresolveBody': ɵɵresolveBody,\n  'ɵɵsetComponentScope': ɵɵsetComponentScope,\n  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n  'ɵɵregisterNgModuleType': registerNgModuleType,\n  'ɵɵgetComponentDepsFactory': ɵɵgetComponentDepsFactory,\n  'ɵsetClassDebugInfo': ɵsetClassDebugInfo,\n  'ɵɵdeclareLet': ɵɵdeclareLet,\n  'ɵɵstoreLet': ɵɵstoreLet,\n  'ɵɵreadContextLet': ɵɵreadContextLet,\n  'ɵɵattachSourceLocations': ɵɵattachSourceLocations,\n  'ɵɵinterpolate': ɵɵinterpolate,\n  'ɵɵinterpolate1': ɵɵinterpolate1,\n  'ɵɵinterpolate2': ɵɵinterpolate2,\n  'ɵɵinterpolate3': ɵɵinterpolate3,\n  'ɵɵinterpolate4': ɵɵinterpolate4,\n  'ɵɵinterpolate5': ɵɵinterpolate5,\n  'ɵɵinterpolate6': ɵɵinterpolate6,\n  'ɵɵinterpolate7': ɵɵinterpolate7,\n  'ɵɵinterpolate8': ɵɵinterpolate8,\n  'ɵɵinterpolateV': ɵɵinterpolateV,\n  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n  'ɵɵsanitizeScript': ɵɵsanitizeScript,\n  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n  'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n  'forwardRef': forwardRef,\n  'resolveForwardRef': resolveForwardRef,\n  'ɵɵtwoWayProperty': ɵɵtwoWayProperty,\n  'ɵɵtwoWayBindingSet': ɵɵtwoWayBindingSet,\n  'ɵɵtwoWayListener': ɵɵtwoWayListener,\n  'ɵɵreplaceMetadata': ɵɵreplaceMetadata,\n  'ɵɵgetReplaceMetadataURL': ɵɵgetReplaceMetadataURL\n}))();\nlet jitOptions = null;\nfunction setJitOptions(options) {\n  if (jitOptions !== null) {\n    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\n      ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');\n      return;\n    }\n    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\n      ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');\n      return;\n    }\n  }\n  jitOptions = options;\n}\nfunction getJitOptions() {\n  return jitOptions;\n}\nfunction resetJitOptions() {\n  jitOptions = null;\n}\nconst moduleQueue = [];\n/**\r\n * Enqueues moduleDef to be checked later to see if scope can be set on its\r\n * component declarations.\r\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\nlet flushingModuleQueue = false;\n/**\r\n * Loops over queued module definitions, if a given module definition has all of its\r\n * declarations resolved, it dequeues that module definition and sets the scope on\r\n * its declarations.\r\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\r\n * Returns truthy if a declaration has resolved. If the declaration happens to be\r\n * an array of declarations, it will recurse to check each declaration in that array\r\n * (which may also be arrays).\r\n */\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n/**\r\n * Compiles a module in JIT mode.\r\n *\r\n * This function automatically gets called when a class has a `@NgModule` decorator.\r\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n  compileNgModuleDefs(moduleType, ngModule);\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType, ngModule.id);\n  }\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\r\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\r\n *\r\n * It's possible to compile a module via this API which will allow duplicate declarations in its\r\n * root.\r\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n          id: ngModule.id || null\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n  let ngFactoryDef = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]\n        };\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` + 'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n  if (verifiedNgModule.get(moduleType)) return;\n  // skip verifications of standalone components, directives, and pipes\n  if (isStandalone(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType);\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDefOrThrow(moduleType);\n  }\n  const errors = [];\n  const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn(ngModuleDef.imports);\n  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach(declarationType => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n      verifySemanticsOfNgModuleImport(mod, moduleType);\n      verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n  }\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n  function verifyDirectivesHaveSelector(type) {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n  function verifyNotStandalone(type, moduleType) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (def?.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n  function verifyDeclarationIsUnique(type, suppressErrors) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n  function verifyCorrectBootstrapType(type) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` + `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` + `function for bootstrap instead.`);\n    }\n  }\n  function verifySemanticsOfNgModuleImport(type, importingModule) {\n    type = resolveForwardRef(type);\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\r\n * Keep track of compiled components. This is needed because in tests we often want to compile the\r\n * same component with more than one NgModule. This would cause an error unless we reset which\r\n * NgModule the component belongs to. We keep the list of compiled components here so that the\r\n * TestBed can reset it later.\r\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n  ownerNgModule = new WeakMap();\n  verifiedNgModule = new WeakMap();\n  moduleQueue.length = 0;\n  GENERATED_COMP_IDS.clear();\n}\n/**\r\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\r\n * traversing the exports of imported modules.\r\n * @param type\r\n */\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type);\n  // a standalone component, directive or pipe\n  if (ngModuleDef === null) {\n    return [type];\n  }\n  return flatten(maybeUnwrapFn(ngModuleDef.exports).map(type => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }));\n}\n/**\r\n * Some declared components may be compiled asynchronously, and thus may not have their\r\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\r\n * the `ngSelectorScope` property of the declared type.\r\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration;\n      const componentDef = getComponentDef(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\r\n * Patch the definition of a component with directives and pipes from the compilation scope of\r\n * a given module.\r\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter(def => !!def);\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n  componentDef.schemas = transitiveScopes.schemas;\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n/**\r\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\r\n * (either a NgModule or a standalone component / directive / pipe).\r\n */\nfunction transitiveScopesFor(type) {\n  if (isNgModule(type)) {\n    const scope = depsTracker.getNgModuleScope(type);\n    const def = getNgModuleDefOrThrow(type);\n    return {\n      schemas: def.schemas || null,\n      ...scope\n    };\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set([type]),\n          pipes: new Set()\n        }\n      };\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set(),\n          pipes: new Set([type])\n        }\n      };\n    }\n  }\n  // TODO: change the error message to be more user-facing and take standalone into account\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n\n/**\r\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\r\n * matters in the following scenario:\r\n *\r\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\r\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\r\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\r\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\r\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\r\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\r\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\r\n * all compilations have finished.\r\n */\nlet compilationDepth = 0;\n/**\r\n * Compile an Angular component according to its decorator metadata, and patch the resulting\r\n * component def (ɵcmp) onto the component type.\r\n *\r\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\r\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\r\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\r\n * until the global queue has been resolved with a call to `resolveComponentResources`.\r\n */\nfunction compileComponent(type, metadata) {\n  // Initialize ngDevMode. This must be the first statement in compileComponent.\n  // See the `initNgDevMode` docstring for more information.\n  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n  let ngComponentDef = null;\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(type, metadata);\n  // Note that we're using the same function as `Directive`, because that's only subset of metadata\n  // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n  // because we'd have to resolve the asynchronous templates.\n  addDirectiveFactoryDef(type, metadata);\n  Object.defineProperty(type, NG_COMP_DEF, {\n    get: () => {\n      if (ngComponentDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'component',\n          type: type\n        });\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${type.name}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${metadata.templateUrl}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          if (metadata.styleUrl) {\n            error.push(` - styleUrl: ${metadata.styleUrl}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n        // This const was called `jitOptions` previously but had to be renamed to `options` because\n        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n        const options = getJitOptions();\n        let preserveWhitespaces = metadata.preserveWhitespaces;\n        if (preserveWhitespaces === undefined) {\n          if (options !== null && options.preserveWhitespaces !== undefined) {\n            preserveWhitespaces = options.preserveWhitespaces;\n          } else {\n            preserveWhitespaces = false;\n          }\n        }\n        let encapsulation = metadata.encapsulation;\n        if (encapsulation === undefined) {\n          if (options !== null && options.defaultEncapsulation !== undefined) {\n            encapsulation = options.defaultEncapsulation;\n          } else {\n            encapsulation = ViewEncapsulation.Emulated;\n          }\n        }\n        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n        const meta = {\n          ...directiveMetadata(type, metadata),\n          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n          template: metadata.template || '',\n          preserveWhitespaces,\n          styles: typeof metadata.styles === 'string' ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          // JIT components are always compiled against an empty set of `declarations`. Instead, the\n          // `directiveDefs` and `pipeDefs` are updated at a later point:\n          //  * for NgModule-based components, they're set when the NgModule which declares the\n          //    component resolves in the module scoping queue\n          //  * for standalone components, they're set just below, after `compileComponent`.\n          declarations: [],\n          changeDetection: metadata.changeDetection,\n          encapsulation,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null\n        };\n        compilationDepth++;\n        try {\n          if (meta.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n          }\n          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n          if (meta.isStandalone) {\n            // Patch the component definition for standalone components with `directiveDefs` and\n            // `pipeDefs` functions which lazily compute the directives/pipes available in the\n            // standalone component. Also set `dependencies` to the lazily resolved list of imports.\n            const imports = flatten(metadata.imports || EMPTY_ARRAY);\n            const {\n              directiveDefs,\n              pipeDefs\n            } = getStandaloneDefFunctions(type, imports);\n            ngComponentDef.directiveDefs = directiveDefs;\n            ngComponentDef.pipeDefs = pipeDefs;\n            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\n          }\n        } finally {\n          // Ensure that the compilation depth is decremented even when the compilation failed.\n          compilationDepth--;\n        }\n        if (compilationDepth === 0) {\n          // When NgModule decorator executed, we enqueued the module definition such that\n          // it would only dequeue and add itself as module scope to all of its declarations,\n          // but only if  if all of its declarations had resolved. This call runs the check\n          // to see if any modules that are in the queue can be dequeued and add scope to\n          // their declarations.\n          flushModuleScopingQueueAsMuchAsPossible();\n        }\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n        if (metadata.schemas) {\n          if (meta.isStandalone) {\n            ngComponentDef.schemas = metadata.schemas;\n          } else {\n            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);\n          }\n        } else if (meta.isStandalone) {\n          ngComponentDef.schemas = [];\n        }\n      }\n      return ngComponentDef;\n    },\n    set: def => {\n      ngComponentDef = def;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n/**\r\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\r\n * standalone component, which process `imports` and filter out directives and pipes. The use of\r\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\r\n * component's `imports`.\r\n */\nfunction getStandaloneDefFunctions(type, imports) {\n  const directiveDefs = () => {\n    if (ngDevMode) {\n      for (const rawDep of imports) {\n        verifyStandaloneImport(rawDep, type);\n      }\n    }\n    if (!isComponent(type)) {\n      return [];\n    }\n    const scope = depsTracker.getStandaloneComponentScope(type, imports);\n    return [...scope.compilation.directives].map(p => getComponentDef(p) || getDirectiveDef(p)).filter(d => d !== null);\n  };\n  const pipeDefs = () => {\n    if (ngDevMode) {\n      for (const rawDep of imports) {\n        verifyStandaloneImport(rawDep, type);\n      }\n    }\n    if (!isComponent(type)) {\n      return [];\n    }\n    const scope = depsTracker.getStandaloneComponentScope(type, imports);\n    return [...scope.compilation.pipes].map(p => getPipeDef$1(p)).filter(d => d !== null);\n  };\n  return {\n    directiveDefs,\n    pipeDefs\n  };\n}\nfunction hasSelectorScope(component) {\n  return component.ngSelectorScope !== undefined;\n}\n/**\r\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\r\n * directive def onto the component type.\r\n *\r\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\r\n * will resolve when compilation completes and the directive becomes usable.\r\n */\nfunction compileDirective(type, directive) {\n  let ngDirectiveDef = null;\n  addDirectiveFactoryDef(type, directive || {});\n  Object.defineProperty(type, NG_DIR_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        // `directive` can be null in the case of abstract directives as a base class\n        // that use `@Directive()` with no selector. In that case, pass empty object to the\n        // `directiveMetadata` function instead of null.\n        const meta = getDirectiveMetadata(type, directive || {});\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getDirectiveMetadata(type, metadata) {\n  const name = type && type.name;\n  const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'directive',\n    type\n  });\n  const facade = directiveMetadata(type, metadata);\n  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n  if (facade.usesInheritance) {\n    addDirectiveDefToUndecoratedParents(type);\n  }\n  return {\n    metadata: facade,\n    sourceMapUrl\n  };\n}\nfunction addDirectiveFactoryDef(type, metadata) {\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const meta = getDirectiveMetadata(type, metadata);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n          name: meta.metadata.name,\n          type: meta.metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Directive\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction extendsDirectlyFromObject(type) {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\r\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\r\n * `Component`).\r\n */\nfunction directiveMetadata(type, metadata) {\n  // Reflect inputs and outputs.\n  const reflect = getReflect();\n  const propMetadata = reflect.ownPropMetadata(type);\n  return {\n    name: type.name,\n    type: type,\n    selector: metadata.selector !== undefined ? metadata.selector : null,\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {\n      usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')\n    },\n    typeSourceSpan: null,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: extractExportAs(metadata.exportAs),\n    providers: metadata.providers || null,\n    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    isStandalone: metadata.standalone === undefined ? true : !!metadata.standalone,\n    isSignal: !!metadata.signals,\n    hostDirectives: metadata.hostDirectives?.map(directive => typeof directive === 'function' ? {\n      directive\n    } : directive) || null\n  };\n}\n/**\r\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\r\n */\nfunction addDirectiveDefToUndecoratedParents(type) {\n  const objPrototype = Object.prototype;\n  let parent = Object.getPrototypeOf(type.prototype).constructor;\n  // Go up the prototype until we hit `Object`.\n  while (parent && parent !== objPrototype) {\n    // Since inheritance works if the class was annotated already, we only need to add\n    // the def if there are no annotations and the def hasn't been created already.\n    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {\n      compileDirective(parent, null);\n    }\n    parent = Object.getPrototypeOf(parent);\n  }\n}\nfunction convertToR3QueryPredicate(selector) {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\nfunction convertToR3QueryMetadata(propertyName, ann) {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null,\n    static: !!ann.static,\n    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,\n    isSignal: !!ann.isSignal\n  };\n}\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n  const queriesMeta = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      const annotations = propMetadata[field];\n      annotations.forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(`Can't construct a query for the property \"${field}\" of ` + `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n          }\n          if (annotations.some(isInputAnnotation)) {\n            throw new Error(`Cannot combine @Input decorators with query decorators`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\nfunction extractExportAs(exportAs) {\n  return exportAs === undefined ? null : splitByComma(exportAs);\n}\nfunction isContentQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\nfunction isViewQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\nfunction isInputAnnotation(value) {\n  return value.ngMetadataName === 'Input';\n}\nfunction splitByComma(value) {\n  return value.split(',').map(piece => piece.trim());\n}\nconst LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];\nfunction shouldAddAbstractDirective(type) {\n  const reflect = getReflect();\n  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n    return true;\n  }\n  const propMetadata = reflect.propMetadata(type);\n  for (const field in propMetadata) {\n    const annotations = propMetadata[field];\n    for (let i = 0; i < annotations.length; i++) {\n      const current = annotations[i];\n      const metadataName = current.ngMetadataName;\n      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction compilePipe(type, meta) {\n  let ngPipeDef = null;\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n          name: metadata.name,\n          type: metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Pipe\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getPipeMetadata(type, meta) {\n  return {\n    type: type,\n    name: type.name,\n    pipeName: meta.name,\n    pure: meta.pure !== undefined ? meta.pure : true,\n    isStandalone: meta.standalone === undefined ? true : !!meta.standalone\n  };\n}\n\n/**\r\n * Type of the Directive metadata.\r\n *\r\n * @publicApi\r\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));\n/**\r\n * Component decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Component = makeDecorator('Component', (c = {}) => ({\n  changeDetection: ChangeDetectionStrategy.Default,\n  ...c\n}), Directive, undefined, (type, meta) => compileComponent(type, meta));\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Pipe = makeDecorator('Pipe', p => ({\n  pure: true,\n  ...p\n}), undefined, undefined, (type, meta) => compilePipe(type, meta));\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Input = makePropDecorator('Input', arg => {\n  if (!arg) {\n    return {};\n  }\n  return typeof arg === 'string' ? {\n    alias: arg\n  } : arg;\n});\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\nconst Output = makePropDecorator('Output', alias => ({\n  alias\n}));\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\nconst HostBinding = makePropDecorator('HostBinding', hostPropertyName => ({\n  hostPropertyName\n}));\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({\n  eventName,\n  args\n}));\n\n/**\r\n * @Annotation\r\n */\nconst NgModule = makeDecorator('NgModule', ngModule => ngModule, undefined, undefined,\n/**\r\n * Decorator that marks the following class as an NgModule, and supplies\r\n * configuration metadata for it.\r\n *\r\n * * The `declarations` option configures the compiler\r\n * with information about what belongs to the NgModule.\r\n * * The `providers` options configures the NgModule's injector to provide\r\n * dependencies the NgModule members.\r\n * * The `imports` and `exports` options bring in members from other modules, and make\r\n * this module's members available to others.\r\n */\n(type, meta) => compileNgModule(type, meta));\n\n/**\r\n * Combination of NgModuleFactory and ComponentFactories.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * Ivy JIT mode doesn't require accessing this symbol.\r\n */\nclass ModuleWithComponentFactories {\n  ngModuleFactory;\n  componentFactories;\n  constructor(ngModuleFactory, componentFactories) {\n    this.ngModuleFactory = ngModuleFactory;\n    this.componentFactories = componentFactories;\n  }\n}\n/**\r\n * Low-level service for running the angular compiler during runtime\r\n * to create {@link ComponentFactory}s, which\r\n * can later be used to create and render a Component instance.\r\n *\r\n * Each `@NgModule` provides an own `Compiler` to its injector,\r\n * that will use the directives/pipes of the ng module for compilation\r\n * of components.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * Ivy JIT mode doesn't require accessing this symbol.\r\n */\nclass Compiler {\n  /**\r\n   * Compiles the given NgModule and all of its components. All templates of the components\r\n   * have to be inlined.\r\n   */\n  compileModuleSync(moduleType) {\n    return new NgModuleFactory(moduleType);\n  }\n  /**\r\n   * Compiles the given NgModule and all of its components\r\n   */\n  compileModuleAsync(moduleType) {\n    return Promise.resolve(this.compileModuleSync(moduleType));\n  }\n  /**\r\n   * Same as {@link Compiler#compileModuleSync compileModuleSync} but also creates ComponentFactories for all components.\r\n   */\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const moduleDef = getNgModuleDef(moduleType);\n    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {\n      const componentDef = getComponentDef(declaration);\n      componentDef && factories.push(new ComponentFactory(componentDef));\n      return factories;\n    }, []);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n  /**\r\n   * Same as {@link Compiler#compileModuleAsync compileModuleAsync} but also creates ComponentFactories for all components.\r\n   */\n  compileModuleAndAllComponentsAsync(moduleType) {\n    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n  }\n  /**\r\n   * Clears all caches.\r\n   */\n  clearCache() {}\n  /**\r\n   * Clears the cache for the given component/ngModule.\r\n   */\n  clearCacheFor(type) {}\n  /**\r\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\r\n   */\n  getModuleId(moduleType) {\n    return undefined;\n  }\n  static ɵfac = function Compiler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Compiler)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: Compiler,\n    factory: Compiler.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\r\n * Token to provide CompilerOptions in the platform injector.\r\n *\r\n * @publicApi\r\n */\nconst COMPILER_OPTIONS = new InjectionToken(ngDevMode ? 'compilerOptions' : '');\n/**\r\n * A factory for creating a Compiler\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * Ivy JIT mode doesn't require accessing this symbol.\r\n */\nclass CompilerFactory {}\nclass NgZoneChangeDetectionScheduler {\n  zone = inject(NgZone);\n  changeDetectionScheduler = inject(ChangeDetectionScheduler);\n  applicationRef = inject(ApplicationRef);\n  applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n  _onMicrotaskEmptySubscription;\n  initialize() {\n    if (this._onMicrotaskEmptySubscription) {\n      return;\n    }\n    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        // `onMicroTaskEmpty` can happen _during_ the zoneless scheduler change detection because\n        // zone.run(() => {}) will result in `checkStable` at the end of the `zone.run` closure\n        // and emit `onMicrotaskEmpty` synchronously if run coalsecing is false.\n        if (this.changeDetectionScheduler.runningTick) {\n          return;\n        }\n        this.zone.run(() => {\n          try {\n            this.applicationRef.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\n            this.applicationRef._tick();\n          } catch (e) {\n            this.applicationErrorHandler(e);\n          }\n        });\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._onMicrotaskEmptySubscription?.unsubscribe();\n  }\n  static ɵfac = function NgZoneChangeDetectionScheduler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgZoneChangeDetectionScheduler)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: NgZoneChangeDetectionScheduler,\n    factory: NgZoneChangeDetectionScheduler.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\r\n * Internal token used to verify that `provideZoneChangeDetection` is not used\r\n * with the bootstrapModule API.\r\n */\nconst PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'provideZoneChangeDetection token' : '', {\n  factory: () => false\n});\nfunction internalProvideZoneChangeDetection({\n  ngZoneFactory,\n  ignoreChangesOutsideZone,\n  scheduleInRootZone\n}) {\n  ngZoneFactory ??= () => new NgZone({\n    ...getNgZoneOptions(),\n    scheduleInRootZone\n  });\n  return [{\n    provide: NgZone,\n    useFactory: ngZoneFactory\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {\n        optional: true\n      });\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ngZoneChangeDetectionScheduler === null) {\n        throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, `A required Injectable was not found in the dependency injection tree. ` + 'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.');\n      }\n      return () => ngZoneChangeDetectionScheduler.initialize();\n    }\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const service = inject(ZoneStablePendingTask);\n      return () => {\n        service.initialize();\n      };\n    }\n  },\n  // Always disable scheduler whenever explicitly disabled, even if another place called\n  // `provideZoneChangeDetection` without the 'ignore' option.\n  ignoreChangesOutsideZone === true ? {\n    provide: ZONELESS_SCHEDULER_DISABLED,\n    useValue: true\n  } : [], {\n    provide: SCHEDULE_IN_ROOT_ZONE,\n    useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT\n  }, {\n    provide: INTERNAL_APPLICATION_ERROR_HANDLER,\n    useFactory: () => {\n      const zone = inject(NgZone);\n      const injector = inject(EnvironmentInjector);\n      let userErrorHandler;\n      return e => {\n        zone.runOutsideAngular(() => {\n          if (injector.destroyed && !userErrorHandler) {\n            setTimeout(() => {\n              throw e;\n            });\n          } else {\n            userErrorHandler ??= injector.get(ErrorHandler);\n            userErrorHandler.handleError(e);\n          }\n        });\n      };\n    }\n  }];\n}\n/**\r\n * Provides `NgZone`-based change detection for the application bootstrapped using\r\n * `bootstrapApplication`.\r\n *\r\n * `NgZone` is already provided in applications by default. This provider allows you to configure\r\n * options like `eventCoalescing` in the `NgZone`.\r\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\r\n * `BootstrapOptions` instead.\r\n *\r\n * @usageNotes\r\n * ```ts\r\n * bootstrapApplication(MyApp, {providers: [\r\n *   provideZoneChangeDetection({eventCoalescing: true}),\r\n * ]});\r\n * ```\r\n *\r\n * @publicApi\r\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\r\n * @see {@link NgZoneOptions}\r\n */\nfunction provideZoneChangeDetection(options) {\n  const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;\n  const scheduleInRootZone = options?.scheduleInRootZone;\n  const zoneProviders = internalProvideZoneChangeDetection({\n    ngZoneFactory: () => {\n      const ngZoneOptions = getNgZoneOptions(options);\n      ngZoneOptions.scheduleInRootZone = scheduleInRootZone;\n      if (ngZoneOptions.shouldCoalesceEventChangeDetection) {\n        performanceMarkFeature('NgZone_CoalesceEvent');\n      }\n      return new NgZone(ngZoneOptions);\n    },\n    ignoreChangesOutsideZone,\n    scheduleInRootZone\n  });\n  return makeEnvironmentProviders([{\n    provide: PROVIDED_NG_ZONE,\n    useValue: true\n  }, {\n    provide: ZONELESS_ENABLED,\n    useValue: false\n  }, zoneProviders]);\n}\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nfunction getNgZoneOptions(options) {\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,\n    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false\n  };\n}\nclass ZoneStablePendingTask {\n  subscription = new Subscription();\n  initialized = false;\n  zone = inject(NgZone);\n  pendingTasks = inject(PendingTasksInternal);\n  initialize() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n    let task = null;\n    if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n      task = this.pendingTasks.add();\n    }\n    this.zone.runOutsideAngular(() => {\n      this.subscription.add(this.zone.onStable.subscribe(() => {\n        NgZone.assertNotInAngularZone();\n        // Check whether there are no pending macro/micro tasks in the next tick\n        // to allow for NgZone to update the state.\n        queueMicrotask(() => {\n          if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n            this.pendingTasks.remove(task);\n            task = null;\n          }\n        });\n      }));\n    });\n    this.subscription.add(this.zone.onUnstable.subscribe(() => {\n      NgZone.assertInAngularZone();\n      task ??= this.pendingTasks.add();\n    }));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  static ɵfac = function ZoneStablePendingTask_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ZoneStablePendingTask)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: ZoneStablePendingTask,\n    factory: ZoneStablePendingTask.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;\nlet consecutiveMicrotaskNotifications = 0;\nlet stackFromLastFewNotifications = [];\nfunction trackMicrotaskNotificationForDebugging() {\n  consecutiveMicrotaskNotifications++;\n  if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {\n    const stack = new Error().stack;\n    if (stack) {\n      stackFromLastFewNotifications.push(stack);\n    }\n  }\n  if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {\n    throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, 'Angular could not stabilize because there were endless change notifications within the browser event loop. ' + 'The stack from the last several notifications: \\n' + stackFromLastFewNotifications.join('\\n'));\n  }\n}\nclass ChangeDetectionSchedulerImpl {\n  applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n  appRef = inject(ApplicationRef);\n  taskService = inject(PendingTasksInternal);\n  ngZone = inject(NgZone);\n  zonelessEnabled = inject(ZONELESS_ENABLED);\n  tracing = inject(TracingService, {\n    optional: true\n  });\n  disableScheduling = inject(ZONELESS_SCHEDULER_DISABLED, {\n    optional: true\n  }) ?? false;\n  zoneIsDefined = typeof Zone !== 'undefined' && !!Zone.root.run;\n  schedulerTickApplyArgs = [{\n    data: {\n      '__scheduler_tick__': true\n    }\n  }];\n  subscriptions = new Subscription();\n  angularZoneId = this.zoneIsDefined ? this.ngZone._inner?.get(angularZoneInstanceIdProperty) : null;\n  scheduleInRootZone = !this.zonelessEnabled && this.zoneIsDefined && (inject(SCHEDULE_IN_ROOT_ZONE, {\n    optional: true\n  }) ?? false);\n  cancelScheduledCallback = null;\n  useMicrotaskScheduler = false;\n  runningTick = false;\n  pendingRenderTaskId = null;\n  constructor() {\n    this.subscriptions.add(this.appRef.afterTick.subscribe(() => {\n      // If the scheduler isn't running a tick but the application ticked, that means\n      // someone called ApplicationRef.tick manually. In this case, we should cancel\n      // any change detections that had been scheduled so we don't run an extra one.\n      if (!this.runningTick) {\n        this.cleanup();\n      }\n    }));\n    this.subscriptions.add(this.ngZone.onUnstable.subscribe(() => {\n      // If the zone becomes unstable when we're not running tick (this happens from the zone.run),\n      // we should cancel any scheduled change detection here because at this point we\n      // know that the zone will stabilize at some point and run change detection itself.\n      if (!this.runningTick) {\n        this.cleanup();\n      }\n    }));\n    // TODO(atscott): These conditions will need to change when zoneless is the default\n    // Instead, they should flip to checking if ZoneJS scheduling is provided\n    this.disableScheduling ||= !this.zonelessEnabled && (\n    // NoopNgZone without enabling zoneless means no scheduling whatsoever\n    this.ngZone instanceof NoopNgZone ||\n    // The same goes for the lack of Zone without enabling zoneless scheduling\n    !this.zoneIsDefined);\n  }\n  notify(source) {\n    if (!this.zonelessEnabled && source === 5 /* NotificationSource.Listener */) {\n      // When the notification comes from a listener, we skip the notification unless the\n      // application has enabled zoneless. Ideally, listeners wouldn't notify the scheduler at all\n      // automatically. We do not know that a developer made a change in the listener callback that\n      // requires an `ApplicationRef.tick` (synchronize templates / run render hooks). We do this\n      // only for an easier migration from OnPush components to zoneless. Because listeners are\n      // usually executed inside the Angular zone and listeners automatically call `markViewDirty`,\n      // developers never needed to manually use `ChangeDetectorRef.markForCheck` or some other API\n      // to make listener callbacks work correctly with `OnPush` components.\n      return;\n    }\n    let force = false;\n    switch (source) {\n      case 0 /* NotificationSource.MarkAncestorsForTraversal */:\n        {\n          this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n          break;\n        }\n      case 3 /* NotificationSource.DebugApplyChanges */:\n      case 2 /* NotificationSource.DeferBlockStateUpdate */:\n      case 4 /* NotificationSource.MarkForCheck */:\n      case 5 /* NotificationSource.Listener */:\n      case 1 /* NotificationSource.SetInput */:\n        {\n          this.appRef.dirtyFlags |= 4 /* ApplicationRefDirtyFlags.ViewTreeCheck */;\n          break;\n        }\n      case 6 /* NotificationSource.CustomElement */:\n        {\n          // We use `ViewTreeTraversal` to ensure we refresh the element even if this is triggered\n          // during CD. In practice this is a no-op since the elements code also calls via a\n          // `markForRefresh()` API which sends `NotificationSource.MarkAncestorsForTraversal` anyway.\n          this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n          force = true;\n          break;\n        }\n      case 12 /* NotificationSource.RootEffect */:\n        {\n          this.appRef.dirtyFlags |= 16 /* ApplicationRefDirtyFlags.RootEffects */;\n          // Root effects still force a CD, even if the scheduler is disabled. This ensures that\n          // effects always run, even when triggered from outside the zone when the scheduler is\n          // otherwise disabled.\n          force = true;\n          break;\n        }\n      case 13 /* NotificationSource.ViewEffect */:\n        {\n          // This is technically a no-op, since view effects will also send a\n          // `MarkAncestorsForTraversal` notification. Still, we set this for logical consistency.\n          this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n          // View effects still force a CD, even if the scheduler is disabled. This ensures that\n          // effects always run, even when triggered from outside the zone when the scheduler is\n          // otherwise disabled.\n          force = true;\n          break;\n        }\n      case 11 /* NotificationSource.PendingTaskRemoved */:\n        {\n          // Removing a pending task via the public API forces a scheduled tick, ensuring that\n          // stability is async and delayed until there was at least an opportunity to run\n          // application synchronization. This prevents some footguns when working with the\n          // public API for pending tasks where developers attempt to update application state\n          // immediately after removing the last task.\n          force = true;\n          break;\n        }\n      case 9 /* NotificationSource.ViewDetachedFromDOM */:\n      case 8 /* NotificationSource.ViewAttached */:\n      case 7 /* NotificationSource.RenderHook */:\n      case 10 /* NotificationSource.AsyncAnimationsLoaded */:\n      default:\n        {\n          // These notifications only schedule a tick but do not change whether we should refresh\n          // views. Instead, we only need to run render hooks unless another notification from the\n          // other set is also received before `tick` happens.\n          this.appRef.dirtyFlags |= 8 /* ApplicationRefDirtyFlags.AfterRender */;\n        }\n    }\n    // If not already defined, attempt to capture a tracing snapshot of this\n    // notification so that the resulting CD run can be attributed to the\n    // context which produced the notification.\n    this.appRef.tracingSnapshot = this.tracing?.snapshot(this.appRef.tracingSnapshot) ?? null;\n    if (!this.shouldScheduleTick(force)) {\n      return;\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (this.useMicrotaskScheduler) {\n        trackMicrotaskNotificationForDebugging();\n      } else {\n        consecutiveMicrotaskNotifications = 0;\n        stackFromLastFewNotifications.length = 0;\n      }\n    }\n    const scheduleCallback = this.useMicrotaskScheduler ? scheduleCallbackWithMicrotask : scheduleCallbackWithRafRace;\n    this.pendingRenderTaskId = this.taskService.add();\n    if (this.scheduleInRootZone) {\n      this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));\n    } else {\n      this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() => scheduleCallback(() => this.tick()));\n    }\n  }\n  shouldScheduleTick(force) {\n    if (this.disableScheduling && !force || this.appRef.destroyed) {\n      return false;\n    }\n    // already scheduled or running\n    if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {\n      return false;\n    }\n    // If we're inside the zone don't bother with scheduler. Zone will stabilize\n    // eventually and run change detection.\n    if (!this.zonelessEnabled && this.zoneIsDefined && Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)) {\n      return false;\n    }\n    return true;\n  }\n  /**\r\n   * Calls ApplicationRef._tick inside the `NgZone`.\r\n   *\r\n   * Calling `tick` directly runs change detection and cancels any change detection that had been\r\n   * scheduled previously.\r\n   *\r\n   * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to\r\n   *     render hooks when `false`.\r\n   */\n  tick() {\n    // When ngZone.run below exits, onMicrotaskEmpty may emit if the zone is\n    // stable. We want to prevent double ticking so we track whether the tick is\n    // already running and skip it if so.\n    if (this.runningTick || this.appRef.destroyed) {\n      return;\n    }\n    // If we reach the tick and there is no work to be done in ApplicationRef.tick,\n    // skip it altogether and clean up. There may be no work if, for example, the only\n    // event that notified the scheduler was the removal of a pending task.\n    if (this.appRef.dirtyFlags === 0 /* ApplicationRefDirtyFlags.None */) {\n      this.cleanup();\n      return;\n    }\n    // The scheduler used to pass \"whether to check views\" as a boolean flag instead of setting\n    // fine-grained dirtiness flags, and global checking was always used on the first pass. This\n    // created an interesting edge case: if a notification made a view dirty and then ticked via the\n    // scheduler (and not the zone) a global check was still performed.\n    //\n    // Ideally, this would not be the case, and only zone-based ticks would do global passes.\n    // However this is a breaking change and requires fixes in g3. Until this cleanup can be done,\n    // we add the `ViewTreeGlobal` flag to request a global check if any views are dirty in a\n    // scheduled tick (unless zoneless is enabled, in which case global checks aren't really a\n    // thing).\n    //\n    // TODO(alxhub): clean up and remove this workaround as a breaking change.\n    if (!this.zonelessEnabled && this.appRef.dirtyFlags & 7 /* ApplicationRefDirtyFlags.ViewTreeAny */) {\n      this.appRef.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\n    }\n    const task = this.taskService.add();\n    try {\n      this.ngZone.run(() => {\n        this.runningTick = true;\n        this.appRef._tick();\n      }, undefined, this.schedulerTickApplyArgs);\n    } catch (e) {\n      this.taskService.remove(task);\n      this.applicationErrorHandler(e);\n    } finally {\n      this.cleanup();\n    }\n    // If we're notified of a change within 1 microtask of running change\n    // detection, run another round in the same event loop. This allows code\n    // which uses Promise.resolve (see NgModel) to avoid\n    // ExpressionChanged...Error to still be reflected in a single browser\n    // paint, even if that spans multiple rounds of change detection.\n    this.useMicrotaskScheduler = true;\n    scheduleCallbackWithMicrotask(() => {\n      this.useMicrotaskScheduler = false;\n      this.taskService.remove(task);\n    });\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n    this.cleanup();\n  }\n  cleanup() {\n    this.runningTick = false;\n    this.cancelScheduledCallback?.();\n    this.cancelScheduledCallback = null;\n    // If this is the last task, the service will synchronously emit a stable\n    // notification. If there is a subscriber that then acts in a way that\n    // tries to notify the scheduler again, we need to be able to respond to\n    // schedule a new change detection. Therefore, we should clear the task ID\n    // before removing it from the pending tasks (or the tasks service should\n    // not synchronously emit stable, similar to how Zone stableness only\n    // happens if it's still stable after a microtask).\n    if (this.pendingRenderTaskId !== null) {\n      const taskId = this.pendingRenderTaskId;\n      this.pendingRenderTaskId = null;\n      this.taskService.remove(taskId);\n    }\n  }\n  static ɵfac = function ChangeDetectionSchedulerImpl_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ChangeDetectionSchedulerImpl)();\n  };\n  static ɵprov = /*@__PURE__*/__defineInjectable({\n    token: ChangeDetectionSchedulerImpl,\n    factory: ChangeDetectionSchedulerImpl.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/**\r\n * Provides change detection without ZoneJS for the application bootstrapped using\r\n * `bootstrapApplication`.\r\n *\r\n * This function allows you to configure the application to not use the state/state changes of\r\n * ZoneJS to schedule change detection in the application. This will work when ZoneJS is not present\r\n * on the page at all or if it exists because something else is using it (either another Angular\r\n * application which uses ZoneJS for scheduling or some other library that relies on ZoneJS).\r\n *\r\n * This can also be added to the `TestBed` providers to configure the test environment to more\r\n * closely match production behavior. This will help give higher confidence that components are\r\n * compatible with zoneless change detection.\r\n *\r\n * ZoneJS uses browser events to trigger change detection. When using this provider, Angular will\r\n * instead use Angular APIs to schedule change detection. These APIs include:\r\n *\r\n * - `ChangeDetectorRef.markForCheck`\r\n * - `ComponentRef.setInput`\r\n * - updating a signal that is read in a template\r\n * - when bound host or template listeners are triggered\r\n * - attaching a view that was marked dirty by one of the above\r\n * - removing a view\r\n * - registering a render hook (templates are only refreshed if render hooks do one of the above)\r\n *\r\n * @usageNotes\r\n * ```ts\r\n * bootstrapApplication(MyApp, {providers: [\r\n *   provideZonelessChangeDetection(),\r\n * ]});\r\n * ```\r\n *\r\n * This API is experimental. Neither the shape, nor the underlying behavior is stable and can change\r\n * in patch versions. There are known feature gaps and API ergonomic considerations. We will iterate\r\n * on the exact API based on the feedback and our understanding of the problem and solution space.\r\n *\r\n * @developerPreview 20.0\r\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\r\n */\nfunction provideZonelessChangeDetection() {\n  performanceMarkFeature('NgZoneless');\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof Zone !== 'undefined' && Zone) {\n    const message = formatRuntimeError(914 /* RuntimeErrorCode.UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE */, `The application is using zoneless change detection, but is still loading Zone.js. ` + `Consider removing Zone.js to get the full benefits of zoneless. ` + `In applications using the Angular CLI, Zone.js is typically included in the \"polyfills\" section of the angular.json file.`);\n    console.warn(message);\n  }\n  return makeEnvironmentProviders([{\n    provide: ChangeDetectionScheduler,\n    useExisting: ChangeDetectionSchedulerImpl\n  }, {\n    provide: NgZone,\n    useClass: NoopNgZone\n  }, {\n    provide: ZONELESS_ENABLED,\n    useValue: true\n  }, {\n    provide: SCHEDULE_IN_ROOT_ZONE,\n    useValue: false\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? [{\n    provide: PROVIDED_ZONELESS,\n    useValue: true\n  }] : []]);\n}\n\n/// <reference path=\"../../../goog.d.ts\" />\n/**\r\n * Work out the locale from the potential global properties.\r\n *\r\n * * Closure Compiler: use `goog.LOCALE`.\r\n * * Ivy enabled: use `$localize.locale`\r\n */\nfunction getGlobalLocale() {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;\n  }\n}\n/**\r\n * Provide this token to set the locale of your application.\r\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\r\n * DecimalPipe and PercentPipe) and by ICU expressions.\r\n *\r\n * See the [i18n guide](guide/i18n/locale-id) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps:\r\n * ```ts\r\n * import { LOCALE_ID } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nconst LOCALE_ID = new InjectionToken(ngDevMode ? 'LocaleId' : '', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID, {\n    optional: true,\n    skipSelf: true\n  }) || getGlobalLocale()\n});\n/**\r\n * Provide this token to set the default currency code your application uses for\r\n * CurrencyPipe when there is no currency code passed into it. This is only used by\r\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\r\n *\r\n * See the [i18n guide](guide/i18n/locale-id) for more information.\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n * The default currency code is currently always `USD`.\r\n *\r\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\r\n * your application `NgModule`:\r\n *\r\n * ```ts\r\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\r\n * ```\r\n *\r\n * </div>\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps:\r\n * ```ts\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nconst DEFAULT_CURRENCY_CODE = new InjectionToken(ngDevMode ? 'DefaultCurrencyCode' : '', {\n  providedIn: 'root',\n  factory: () => USD_CURRENCY_CODE\n});\n/**\r\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\r\n * `xlf` or `xlf2`) when you want to translate your application in another language.\r\n *\r\n * See the [i18n guide](guide/i18n/merge) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps:\r\n * ```ts\r\n * import { TRANSLATIONS } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * // content of your translation file\r\n * const translations = '....';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nconst TRANSLATIONS = new InjectionToken(ngDevMode ? 'Translations' : '');\n/**\r\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\r\n * `xlf` or `xlf2`.\r\n *\r\n * See the [i18n guide](guide/i18n/merge) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps: *\r\n * ```ts\r\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken(ngDevMode ? 'TranslationsFormat' : '');\n/**\r\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\r\n * that the compiler should use in case of missing translations:\r\n * - Error: throw if you have missing translations.\r\n * - Warning (default): show a warning in the console and/or shell.\r\n * - Ignore: do nothing.\r\n *\r\n * See the [i18n guide](guide/i18n/merge#report-missing-translations) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * ```ts\r\n * import { MissingTranslationStrategy } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   missingTranslation: MissingTranslationStrategy.Error\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n\n/**\r\n * @publicApi\r\n */\nclass DebugEventListener {\n  name;\n  callback;\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n/**\r\n * @publicApi\r\n */\nfunction asNativeElements(debugEls) {\n  return debugEls.map(el => el.nativeElement);\n}\n/**\r\n * @publicApi\r\n */\nclass DebugNode {\n  /**\r\n   * The underlying DOM node.\r\n   */\n  nativeNode;\n  constructor(nativeNode) {\n    this.nativeNode = nativeNode;\n  }\n  /**\r\n   * The `DebugElement` parent. Will be `null` if this is the root element.\r\n   */\n  get parent() {\n    const parent = this.nativeNode.parentNode;\n    return parent ? new DebugElement(parent) : null;\n  }\n  /**\r\n   * The host dependency injector. For example, the root element's component instance injector.\r\n   */\n  get injector() {\n    return getInjector(this.nativeNode);\n  }\n  /**\r\n   * The element's own component instance, if it has one.\r\n   */\n  get componentInstance() {\n    const nativeElement = this.nativeNode;\n    return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));\n  }\n  /**\r\n   * An object that provides parent context for this element. Often an ancestor component instance\r\n   * that governs this element.\r\n   *\r\n   * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\r\n   * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\r\n   * of heroes\"`.\r\n   */\n  get context() {\n    return getComponent(this.nativeNode) || getContext(this.nativeNode);\n  }\n  /**\r\n   * The callbacks attached to the component's @Output properties and/or the element's event\r\n   * properties.\r\n   */\n  get listeners() {\n    return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');\n  }\n  /**\r\n   * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\r\n   * variable name.\r\n   */\n  get references() {\n    return getLocalRefs(this.nativeNode);\n  }\n  /**\r\n   * This component's injector lookup tokens. Includes the component itself plus the tokens that the\r\n   * component lists in its providers metadata.\r\n   */\n  get providerTokens() {\n    return getInjectionTokens(this.nativeNode);\n  }\n}\n/**\r\n * @publicApi\r\n *\r\n * @see [Component testing scenarios](guide/testing/components-scenarios)\r\n * @see [Basics of testing components](guide/testing/components-basics)\r\n * @see [Testing utility APIs](guide/testing/utility-apis)\r\n */\nclass DebugElement extends DebugNode {\n  constructor(nativeNode) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n  /**\r\n   * The underlying DOM element at the root of the component.\r\n   */\n  get nativeElement() {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n  }\n  /**\r\n   * The element tag name, if it is an element.\r\n   */\n  get name() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView !== null) {\n      const tData = lView[TVIEW].data;\n      const tNode = tData[context.nodeIndex];\n      return tNode.value;\n    } else {\n      return this.nativeNode.nodeName;\n    }\n  }\n  /**\r\n   *  Gets a map of property names to property values for an element.\r\n   *\r\n   *  This map includes:\r\n   *  - Regular property bindings (e.g. `[id]=\"id\"`)\r\n   *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\r\n   *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\r\n   *\r\n   *  It does not include:\r\n   *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\r\n   *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\r\n   */\n  get properties() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tData = lView[TVIEW].data;\n    const tNode = tData[context.nodeIndex];\n    const properties = {};\n    // Collect properties from the DOM.\n    copyDomProperties(this.nativeElement, properties);\n    // Collect properties from the bindings. This is needed for animation renderer which has\n    // synthetic properties which don't get reflected into the DOM.\n    collectPropertyBindings(properties, tNode, lView, tData);\n    return properties;\n  }\n  /**\r\n   *  A map of attribute names to attribute values for an element.\r\n   */\n  // TODO: replace null by undefined in the return type\n  get attributes() {\n    const attributes = {};\n    const element = this.nativeElement;\n    if (!element) {\n      return attributes;\n    }\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n    const lowercaseTNodeAttrs = [];\n    // For debug nodes we take the element's attribute directly from the DOM since it allows us\n    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n    // however since we have the attributes already on the TNode, we can preserve the case by going\n    // through them once, adding them to the `attributes` map and putting their lower-cased name\n    // into an array. Afterwards when we're going through the native DOM attributes, we can check\n    // whether we haven't run into an attribute already through the TNode.\n    if (tNodeAttrs) {\n      let i = 0;\n      while (i < tNodeAttrs.length) {\n        const attrName = tNodeAttrs[i];\n        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n        // else will be handled below when we read the final attributes off the DOM.\n        if (typeof attrName !== 'string') break;\n        const attrValue = tNodeAttrs[i + 1];\n        attributes[attrName] = attrValue;\n        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n        i += 2;\n      }\n    }\n    for (const attr of element.attributes) {\n      // Make sure that we don't assign the same attribute both in its\n      // case-sensitive form and the lower-cased one from the browser.\n      if (!lowercaseTNodeAttrs.includes(attr.name)) {\n        attributes[attr.name] = attr.value;\n      }\n    }\n    return attributes;\n  }\n  /**\r\n   * The inline styles of the DOM element.\r\n   */\n  // TODO: replace null by undefined in the return type\n  get styles() {\n    const element = this.nativeElement;\n    return element?.style ?? {};\n  }\n  /**\r\n   * A map containing the class names on the element as keys.\r\n   *\r\n   * This map is derived from the `className` property of the DOM element.\r\n   *\r\n   * Note: The values of this object will always be `true`. The class key will not appear in the KV\r\n   * object if it does not exist on the element.\r\n   *\r\n   * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\r\n   */\n  get classes() {\n    const result = {};\n    const element = this.nativeElement;\n    // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n    const className = element.className;\n    const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\n    classes.forEach(value => result[value] = true);\n    return result;\n  }\n  /**\r\n   * The `childNodes` of the DOM element as a `DebugNode` array.\r\n   *\r\n   * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\r\n   */\n  get childNodes() {\n    const childNodes = this.nativeNode.childNodes;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\r\n   * The immediate `DebugElement` children. Walk the tree by descending through `children`.\r\n   */\n  get children() {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\r\n   * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\r\n   */\n  query(predicate) {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n  /**\r\n   * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\r\n   */\n  queryAll(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, true);\n    return matches;\n  }\n  /**\r\n   * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\r\n   */\n  queryAllNodes(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, false);\n    return matches;\n  }\n  /**\r\n   * Triggers the event by its name if there is a corresponding listener in the element's\r\n   * `listeners` collection.\r\n   *\r\n   * If the event lacks a listener or there's some other problem, consider\r\n   * calling `nativeElement.dispatchEvent(eventObject)`.\r\n   *\r\n   * @param eventName The name of the event to trigger\r\n   * @param eventObj The _event object_ expected by the handler\r\n   *\r\n   * @see [Testing components scenarios](guide/testing/components-scenarios#trigger-event-handler)\r\n   */\n  triggerEventHandler(eventName, eventObj) {\n    const node = this.nativeNode;\n    const invokedListeners = [];\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        const callback = listener.callback;\n        callback.call(node, eventObj);\n        invokedListeners.push(callback);\n      }\n    });\n    // We need to check whether `eventListeners` exists, because it's something\n    // that Zone.js only adds to `EventTarget` in browser environments.\n    if (typeof node.eventListeners === 'function') {\n      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n      // listener.\n      node.eventListeners(eventName).forEach(listener => {\n        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n        // use `toString` on the listener and see if it contains the token. We use this approach to\n        // ensure that it still worked with compiled code since it cannot remove or rename string\n        // literals. We also considered using a special function name (i.e. if(listener.name ===\n        // special)) but that was more cumbersome and we were also concerned the compiled code could\n        // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n          const unwrappedListener = listener('__ngUnwrap__');\n          return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);\n        }\n      });\n    }\n  }\n}\nfunction copyDomProperties(element, properties) {\n  if (element) {\n    // Skip own properties (as those are patched)\n    let obj = Object.getPrototypeOf(element);\n    const NodePrototype = Node.prototype;\n    while (obj !== null && obj !== NodePrototype) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let key in descriptors) {\n        if (!key.startsWith('__') && !key.startsWith('on')) {\n          // don't include properties starting with `__` and `on`.\n          // `__` are patched values which should not be included.\n          // `on` are listeners which also should not be included.\n          const value = element[key];\n          if (isPrimitiveValue(value)) {\n            properties[key] = value;\n          }\n        }\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n  }\n}\nfunction isPrimitiveValue(value) {\n  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;\n}\nfunction _queryAll(parentElement, predicate, matches, elementsOnly) {\n  const context = getLContext(parentElement.nativeNode);\n  const lView = context ? context.lView : null;\n  if (lView !== null) {\n    const parentTNode = lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n  } else {\n    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n    // APIs.\n    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n  }\n}\n/**\r\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\r\n *\r\n * @param tNode the current TNode\r\n * @param lView the LView of this TNode\r\n * @param predicate the predicate to match\r\n * @param matches the list of positive matches\r\n * @param elementsOnly whether only elements should be searched\r\n * @param rootNativeNode the root native node on which predicate should not be matched\r\n */\nfunction _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n  // For each type of TNode, specific logic is executed.\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    // Case 1: the TNode is an element\n    // The native node has to be checked.\n    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n    if (isComponentHost(tNode)) {\n      // If the element is the host of a component, then all nodes in its view have to be processed.\n      // Note: the component's content (tNode.child) will be processed from the insertion points.\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      if (componentView && componentView[TVIEW].firstChild) {\n        _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else {\n      if (tNode.child) {\n        // Otherwise, its children have to be processed.\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n      // We also have to query the DOM directly in order to catch elements inserted through\n      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n      // times. ViewEngine could do it more efficiently, because all the insertions go through\n      // Renderer2, however that's not the case in Ivy. This approach is being used because:\n      // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\n      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n      // 2. It allows us to capture nodes that were inserted directly via the DOM.\n      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n    }\n    // In all cases, if a dynamic container exists for this node, each view inside it has to be\n    // processed.\n    const nodeOrContainer = lView[tNode.index];\n    if (isLContainer(nodeOrContainer)) {\n      _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    // Case 2: the TNode is a container\n    // The native node has to be checked.\n    const lContainer = lView[tNode.index];\n    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n    // Each view inside the container has to be processed.\n    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n  } else if (tNode.type & 16 /* TNodeType.Projection */) {\n    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n    // The nodes projected at this location all need to be processed.\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const head = componentHost.projection[tNode.projection];\n    if (Array.isArray(head)) {\n      for (let nativeNode of head) {\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else if (head) {\n      const nextLView = componentView[PARENT];\n      const nextTNode = nextLView[TVIEW].data[head.index];\n      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.child) {\n    // Case 4: the TNode is a view.\n    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n  }\n  // We don't want to go to the next sibling of the root node.\n  if (rootNativeNode !== nativeNode) {\n    // To determine the next node to be processed, we need to use the next or the projectionNext\n    // link, depending on whether the current node has been projected.\n    const nextTNode = tNode.flags & 2 /* TNodeFlags.isProjected */ ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\r\n * Process all TNodes in a given container.\r\n *\r\n * @param lContainer the container to be processed\r\n * @param predicate the predicate to match\r\n * @param matches the list of positive matches\r\n * @param elementsOnly whether only elements should be searched\r\n * @param rootNativeNode the root native node on which predicate should not be matched\r\n */\nfunction _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const childView = lContainer[i];\n    const firstChild = childView[TVIEW].firstChild;\n    if (firstChild) {\n      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\r\n * Match the current native node against the predicate.\r\n *\r\n * @param nativeNode the current native node\r\n * @param predicate the predicate to match\r\n * @param matches the list of positive matches\r\n * @param elementsOnly whether only elements should be searched\r\n * @param rootNativeNode the root native node on which predicate should not be matched\r\n */\nfunction _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n  if (rootNativeNode !== nativeNode) {\n    const debugNode = getDebugNode(nativeNode);\n    if (!debugNode) {\n      return;\n    }\n    // Type of the \"predicate and \"matches\" array are set based on the value of\n    // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n    // types with generics, so we manually cast the parameters accordingly.\n    if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    }\n  }\n}\n/**\r\n * Match all the descendants of a DOM node against a predicate.\r\n *\r\n * @param nativeNode the current native node\r\n * @param predicate the predicate to match\r\n * @param matches the list where matches are stored\r\n * @param elementsOnly whether only elements should be searched\r\n */\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n  const nodes = parentNode.childNodes;\n  const length = nodes.length;\n  for (let i = 0; i < length; i++) {\n    const node = nodes[i];\n    const debugNode = getDebugNode(node);\n    if (debugNode) {\n      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      }\n      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n    }\n  }\n}\n/**\r\n * Iterates through the property bindings for a given node and generates\r\n * a map of property names to values. This map only contains property bindings\r\n * defined in templates, not in host bindings.\r\n */\nfunction collectPropertyBindings(properties, tNode, lView, tData) {\n  let bindingIndexes = tNode.propertyBindings;\n  if (bindingIndexes !== null) {\n    for (let i = 0; i < bindingIndexes.length; i++) {\n      const bindingIndex = bindingIndexes[i];\n      const propMetadata = tData[bindingIndex];\n      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n      const propertyName = metadataParts[0];\n      if (metadataParts.length > 1) {\n        let value = metadataParts[1];\n        for (let j = 1; j < metadataParts.length - 1; j++) {\n          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n        }\n        properties[propertyName] = value;\n      } else {\n        properties[propertyName] = lView[bindingIndex];\n      }\n    }\n  }\n}\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n/**\r\n * @publicApi\r\n */\nfunction getDebugNode(nativeNode) {\n  if (nativeNode instanceof Node) {\n    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {\n      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);\n    }\n    return nativeNode[NG_DEBUG_PROPERTY];\n  }\n  return null;\n}\nexport { AFTER_RENDER_PHASES, ANIMATION_MODULE_TYPE, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, AcxChangeDetectionStrategy, AcxViewEncapsulation, AfterRenderImpl, AfterRenderManager, AfterRenderSequence, ApplicationInitStatus, ApplicationRef, Attribute, COMPILER_OPTIONS, CONTAINERS, CSP_NONCE, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionSchedulerImpl, ChangeDetectionStrategy, Compiler, CompilerFactory, Component, ComponentFactory, ComponentFactory$1, ComponentFactoryResolver$1 as ComponentFactoryResolver, ComponentRef$1 as ComponentRef, ComponentRef as ComponentRef$1, Console, DEFAULT_CURRENCY_CODE, DEFAULT_LOCALE_ID, DEFER_BLOCK_CONFIG, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DEFER_BLOCK_ID, DEFER_BLOCK_SSR_ID_ATTRIBUTE, DEFER_BLOCK_STATE$1 as DEFER_BLOCK_STATE, DEFER_BLOCK_STATE as DEFER_BLOCK_STATE$1, DEFER_HYDRATE_TRIGGERS, DEFER_PARENT_BLOCK_ID, DEHYDRATED_BLOCK_REGISTRY, DISCONNECTED_NODES, DebugElement, DebugEventListener, DebugNode, DeferBlockBehavior, DeferBlockState, DehydratedBlockRegistry, Directive, ELEMENT_CONTAINERS, EVENT_REPLAY_ENABLED_DEFAULT, ElementRef, EnvironmentNgModuleRefAdapter, EventEmitter, Framework, Host, HostBinding, HostListener, HydrationStatus, I18N_DATA, IMAGE_CONFIG, IMAGE_CONFIG_DEFAULTS, IS_EVENT_REPLAY_ENABLED, IS_HYDRATION_DOM_REUSE_ENABLED, IS_I18N_HYDRATION_ENABLED, IS_INCREMENTAL_HYDRATION_ENABLED, Inject, Injectable, Input, JSACTION_BLOCK_ELEMENT_MAP, JSACTION_EVENT_CONTRACT, LContext, LOCALE_ID, LocaleDataIndex, MULTIPLIER, MissingTranslationStrategy, ModuleWithComponentFactories, NGH_ATTR_NAME, NGH_DATA_KEY, NGH_DEFER_BLOCKS_KEY, NODES, NOOP_AFTER_RENDER_REF, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE, NO_ERRORS_SCHEMA, NUM_ROOT_NODES, NgModule, NgModuleFactory, NgModuleFactory$1, NgModuleRef, NgModuleRef$1, NgProbeToken, NgZone, NoopNgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, PRESERVE_HOST_CONTENT, PROVIDED_NG_ZONE, Pipe, QueryList, ReflectionCapabilities, Renderer2, RendererFactory2, RendererStyleFlags2, SKIP_HYDRATION_ATTR_NAME, SSR_CONTENT_INTEGRITY_MARKER, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, TEMPLATES, TEMPLATE_ID, TESTABILITY, TESTABILITY_GETTER, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, TimerScheduler, TracingAction, TracingService, TransferState, Type, UseExhaustiveCheckNoChanges, ViewContainerRef, ViewEncapsulation, ViewRef, _sanitizeHtml, _sanitizeUrl, afterEveryRender, afterNextRender, allowSanitizationBypassAndThrow, angularCoreEnv, appendDeferBlocksToJSActionMap, asNativeElements, assertComponentDef, assertStandaloneComponentType, bypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript, bypassSanitizationTrustStyle, bypassSanitizationTrustUrl, calcPathForNode, checkNoChangesInternal, cleanupDehydratedViews, clearResolutionOfComponentResourcesQueue, collectNativeNodes, collectNativeNodesInLContainer, compileComponent, compileDirective, compileNgModule, compileNgModuleDefs, compilePipe, convertHydrateTriggersToJsAction, countBlocksSkippedByHydration, createEnvironmentInjector, createMultiResultQuerySignalFn, createNgModule, createNgModuleRef, createNgModuleRefWithProviders, createSingleResultOptionalQuerySignalFn, createSingleResultRequiredQuerySignalFn, depsTracker, devModeEqual, enableApplyRootElementTransformImpl, enableClaimDehydratedIcuCaseImpl, enableFindMatchingDehydratedViewImpl, enableLocateOrCreateContainerAnchorImpl, enableLocateOrCreateContainerRefImpl, enableLocateOrCreateElementContainerNodeImpl, enableLocateOrCreateElementNodeImpl, enableLocateOrCreateI18nNodeImpl, enableLocateOrCreateTextNodeImpl, enablePrepareI18nBlockForHydrationImpl, enableProfiling, enableRetrieveDeferBlockDataImpl, enableRetrieveHydrationInfoImpl, enableStashEventListenerImpl, findLocaleData, flushModuleScopingQueueAsMuchAsPossible, gatherDeferBlocksCommentNodes, generateStandaloneInDeclarationsError, getAsyncClassMetadataFn, getCompilerFacade, getDebugNode, getDeferBlocks$1 as getDeferBlocks, getDirectives, getDocument, getHostElement, getLContext, getLDeferBlockDetails, getLNodeForHydration, getLocaleCurrencyCode, getLocalePluralCase, getNgZone, getNgZoneOptions, getOrComputeI18nChildren, getRegisteredNgModuleType, getSanitizationBypassType, getTDeferBlockDetails, inputBinding, internalProvideZoneChangeDetection, invokeListeners, isBoundToModule, isComponentDefPendingResolution, isComponentResourceResolutionQueueEmpty, isDeferBlock, isDetachedByI18n, isDisconnectedNode, isI18nHydrationEnabled, isI18nHydrationSupportEnabled, isInSkipHydrationBlock, isIncrementalHydrationEnabled, isJsObject, isLetDeclaration, isListLikeIterable, isNgModule, isPromise, isSubscribable, isTNodeShape, isViewDirty, iterateListLike, makePropDecorator, makeStateKey, markForRefresh, noSideEffects, optionsReducer, outputBinding, patchComponentDefWithScope, performanceMarkFeature, processAndInitTriggers, processBlockData, processTextNodeBeforeSerialization, profiler, provideAppInitializer, provideNgReflectAttributes, provideZoneChangeDetection, provideZonelessChangeDetection, publishDefaultGlobalUtils, publishExternalGlobalUtil, publishSignalConfiguration, readHydrationInfo, readPatchedLView, registerLocaleData, registerNgModuleType, remove, removeListeners, renderDeferBlockState, resetCompiledComponents, resetJitOptions, resolveComponentResources, restoreComponentResolutionQueue, setAllowDuplicateNgModuleIdsForTest, setClassMetadata, setClassMetadataAsync, setDocument, setIsI18nHydrationSupportEnabled, setJSActionAttributes, setJitOptions, setLocaleId, setStashFn, setTestabilityGetter, sharedMapFunction, sharedStashFunction, transitiveScopesFor, triggerHydrationFromBlockName, triggerResourceLoading, trySerializeI18nBlock, twoWayBinding, unregisterAllLocaleData, unsupportedProjectionOfDomNodes, unwrapSafeValue, validateMatchingNode, validateNodeExists, verifySsrContentsIntegrity, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, ɵsetClassDebugInfo, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, ɵɵCopyDefinitionFeature, ɵɵExternalStylesFeature, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattachSourceLocations, ɵɵattribute, ɵɵclassMap, ɵɵclassProp, ɵɵcomponentInstance, ɵɵconditional, ɵɵconditionalBranchCreate, ɵɵconditionalCreate, ɵɵcontentQuery, ɵɵcontentQuerySignal, ɵɵdeclareLet, ɵɵdefer, ɵɵdeferEnableTimerScheduling, ɵɵdeferHydrateNever, ɵɵdeferHydrateOnHover, ɵɵdeferHydrateOnIdle, ɵɵdeferHydrateOnImmediate, ɵɵdeferHydrateOnInteraction, ɵɵdeferHydrateOnTimer, ɵɵdeferHydrateOnViewport, ɵɵdeferHydrateWhen, ɵɵdeferOnHover, ɵɵdeferOnIdle, ɵɵdeferOnImmediate, ɵɵdeferOnInteraction, ɵɵdeferOnTimer, ɵɵdeferOnViewport, ɵɵdeferPrefetchOnHover, ɵɵdeferPrefetchOnIdle, ɵɵdeferPrefetchOnImmediate, ɵɵdeferPrefetchOnInteraction, ɵɵdeferPrefetchOnTimer, ɵɵdeferPrefetchOnViewport, ɵɵdeferPrefetchWhen, ɵɵdeferWhen, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdomProperty, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵgetComponentDepsFactory, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵgetReplaceMetadataURL, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinjectAttribute, ɵɵinterpolate, ɵɵinterpolate1, ɵɵinterpolate2, ɵɵinterpolate3, ɵɵinterpolate4, ɵɵinterpolate5, ɵɵinterpolate6, ɵɵinterpolate7, ɵɵinterpolate8, ɵɵinterpolateV, ɵɵinvalidFactory, ɵɵlistener, ɵɵloadQuery, ɵɵnextContext, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryAdvance, ɵɵqueryRefresh, ɵɵreadContextLet, ɵɵreference, ɵɵrepeater, ɵɵrepeaterCreate, ɵɵrepeaterTrackByIdentity, ɵɵrepeaterTrackByIndex, ɵɵreplaceMetadata, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstoreLet, ɵɵstyleMap, ɵɵstyleProp, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵtwoWayBindingSet, ɵɵtwoWayListener, ɵɵtwoWayProperty, ɵɵvalidateIframeAttribute, ɵɵviewQuery, ɵɵviewQuerySignal };","map":{"version":3,"names":["attachInjectFlag","_global","ɵɵdefineInjectable","__defineInjectable","ɵɵdefineInjector","__defineInjector","ɵɵinject","__inject","ɵɵinvalidFactoryDep","__invalidFactoryDep","resolveForwardRef","newArray","EMPTY_OBJ","assertString","assertFirstCreatePass","assertDefined","assertNotEqual","FLAGS","assertEqual","isInCheckNoChangesMode","PREORDER_HOOK_FLAGS","throwError","assertNumber","assertGreaterThan","HEADER_OFFSET","DECLARATION_VIEW","NG_FACTORY_DEF","isForwardRef","getFactoryDef","assertIndexInRange","assertTNodeForLView","enterDI","runInInjectorProfilerContext","getCurrentTNode","getLView","emitInjectorToCreateInstanceEvent","emitInstanceCreatedByInjectorEvent","throwProviderNotFoundError","leaveDI","assertNodeInjector","throwCyclicDependencyError","stringifyForError","setInjectorProfilerContext","setInjectImplementation","assertDirectiveDef","NG_ELEMENT_ID","convertToBitFlags","isRootView","T_HOST","TVIEW","injectRootLimpMode","isComponentDef","EMBEDDED_VIEW_INJECTOR","INJECTOR$1","INJECTOR","DECLARATION_COMPONENT_VIEW","isComponentHost","RuntimeError","NG_PROV_DEF","getClosureSafeProperty","getNativeByTNode","flatten","arrayEquals","ID","isLView","assertDomNode","unwrapRNode","getComponentLViewByIndex","CONTEXT","EMPTY_ARRAY","assertLView","HOST","CHILD_HEAD","NEXT","isLContainer","getLViewParent","Injector","CLEANUP","getComponentDef","getDirectiveDef","InjectionToken","inject","isContentQueryHost","setCurrentQueryIndex","XSS_SECURITY_URL","renderStringify","ENVIRONMENT","makeEnvironmentProviders","formatRuntimeError","resetPreOrderHookFlags","PARENT","RENDERER","HYDRATION","CHILD_TAIL","assertSame","assertFirstUpdatePass","getSelectedIndex","getTView","assertIndexInDeclRange","setSelectedIndex","assertNotSame","setCurrentDirectiveIndex","INTERNAL_APPLICATION_ERROR_HANDLER","stringify","getCurrentDirectiveIndex","unwrapLView","isCreationMode","assertNotReactive","enterView","QUERIES","leaveView","assertLContainer","DECLARATION_LCONTAINER","MOVED_VIEWS","isDestroyed","REACTIVE_TEMPLATE_CONSUMER","ON_DESTROY_HOOKS","assertFunction","EFFECTS","assertProjectionSlots","NATIVE","assertParentView","CONTAINER_HEADER_OFFSET","AFTER_RENDER_SEQUENCES_TO_ADD","markAncestorsForTraversal","markViewForRefresh","setIsRefreshingViews","isExhaustiveCheckNoChanges","requiresRefreshOrTraversal","setIsInCheckNoChangesMode","CheckNoChangesMode","setBindingIndex","EFFECTS_TO_SCHEDULE","viewAttachedToChangeDetector","setBindingRootForHostBindings","isRefreshingViews","removeFromArray","addToArray","updateAncestorTraversalFlagsOnAttach","storeLViewOnDestroy","VIEW_REFS","assertGreaterThanOrEqual","isInI18nBlock","assertTNodeForTView","setCurrentTNode","getCurrentParentTNode","getCurrentTNodePlaceholderOk","isCurrentTNodeParent","isInSkipHydrationBlock","isInSkipHydrationBlock$1","assertTNode","assertTIcu","assertNumberInRange","DEHYDRATED_VIEWS","getNgModuleDef","getPipeDef","getPipeDef$1","getNgModuleDefOrThrow","isStandalone","concatStringsWithSpace","assertInjectImplementationNotEqual","emitInjectEvent","getConstant","assertLessThan","getOrCreateTViewCleanup","getOrCreateLViewCleanup","isDirectiveHost","assertNotDefined","nextBindingIndex","getSelectedTNode","getDirectiveDefOrThrow","getTNode","assertComponentType","debugStringifyTypeForError","ChangeDetectionScheduler","EnvironmentInjector","SVG_NAMESPACE","MATH_ML_NAMESPACE","viewAttachedToContainer","storeCleanupWithContext","signal","createInjectorWithoutInjectorInstances","R3Injector","getNullInjector","internalImportProvidersFrom","initNgDevMode","fillProperties","wasLastNodeCreated","lastNodeWasCreated","getBindingsEnabled","isInInjectionContext","DestroyRef","PendingTasksInternal","noop","ErrorHandler","assertNotInReactiveContext","assertInInjectionContext","ViewContext","removeLViewOnDestroy","walkUpViews","getNativeByIndex","assertElement","arrayInsert2","arraySplice","setInjectorProfiler","NullInjector","ENVIRONMENT_INITIALIZER","INJECTOR_DEF_TYPES","walkProviderTree","getInjectorDef","deepForEach","isTypeProvider","isSignal","runInInjectionContext","ZONELESS_ENABLED","EffectScheduler","PendingTasks","getBindingIndex","getElementDepthCount","increaseElementDepthCount","setCurrentTNodeAsNotParent","assertHasParent","isSkipHydrationRootTNode","leaveSkipHydrationBlock","decreaseElementDepthCount","getNamespace","enterSkipHydrationBlock","getCurrentDirectiveDef","assertIndexInExpandoRange","assertOneOf","setInI18nBlock","nextContextImpl","getCurrentQueryIndex","getContextLView","load","keyValueArrayIndexOf","keyValueArraySet","keyValueArrayGet","incrementBindingIndex","isWritableSignal","store","providerToFactory","emitProviderConfiguredEvent","isClassProvider","getBindingRoot","NG_COMP_DEF","ɵɵresetView","__resetView","ɵɵnamespaceHTML","__namespaceHTML","ɵɵnamespaceMathML","__namespaceMathML","ɵɵnamespaceSVG","__namespaceSVG","ɵɵenableBindings","__enableBindings","ɵɵdisableBindings","__disableBindings","ɵɵrestoreView","__restoreView","forwardRef","NG_MOD_DEF","NG_INJ_DEF","NG_DIR_DEF","NG_PIPE_DEF","ZONELESS_SCHEDULER_DISABLED","SCHEDULE_IN_ROOT_ZONE","PROVIDED_ZONELESS","getNativeByTNodeOrNull","setActiveConsumer","SIGNAL","consumerDestroy","REACTIVE_NODE","consumerPollProducersForChange","consumerBeforeComputation","getActiveConsumer","consumerAfterComputation","createComputed","setThrowInvalidWriteToSignalError","Subject","Subscription","setActiveConsumer$1","map","Attribute","Attribute$1","noSideEffects","fn","toString","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","call","annotationInstance","TypeDecorator","cls","annotations","hasOwnProperty","Object","defineProperty","value","push","prototype","create","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","index","parameters","length","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","target","undefined","Error","constructor","meta","unshift","Inject","token","Optional","Self","SkipSelf","Host","getCompilerFacade","request","globalNg","ɵcompilerFacade","ngDevMode","console","error","kind","type","message","usage","angularCoreDiEnv","Type","Function","isType","v","ES5_DELEGATE_CTOR","ES2015_INHERITED_CLASS","ES2015_INHERITED_CLASS_WITH_CTOR","ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR","isDelegateCtor","typeStr","test","ReflectionCapabilities","_reflect","reflect","factory","t","_zipTypesAndAnnotations","paramTypes","paramAnnotations","result","i","concat","_ownParameters","parentCtor","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","keys","forEach","prop","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","getPrototypeOf","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","applyValueToInputField","instance","inputSignalNode","privateName","applyValueToInputSignal","ɵɵNgOnChangesFeature","ɵɵNgOnChangesFeatureImpl","NgOnChangesFeatureImpl","ngInherit","definition","ngOnChanges","setInput","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","simpleChangesStore","getSimpleChangesStore","current","previous","key","publicName","declaredName","declaredInputs","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","profilerCallbacks","NOOP_PROFILER_REMOVAL","removeProfiler","profiler","profilerIdx","indexOf","splice","setProfiler","includes","event","eventFn","profilerCallback","registerPreOrderHooks","directiveIndex","directiveDef","tView","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","tNode","directiveStart","end","directiveEnd","data","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnDestroy","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","lView","hooks","nodeIndex","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","flags","currentView","arr","currentNodeIndex","startIndex","nodeIndexLimit","max","lastNodeIndexFound","hook","isInitHook","callHook","callHookInternal","directive","prevConsumer","indexWithintInitPhase","NO_PARENT_INJECTOR","NodeInjectorFactory","injectImpl","resolving","canSeeViewProviders","multi","componentProviders","providerFactory","isViewProvider","injectImplementation","toTNodeTypeAsString","tNodeType","text","substring","isTNodeShape","insertBeforeIndex","Array","isArray","isLetDeclaration","hasClassInput","hasStyleInput","assertTNodeType","expectedTypes","assertPureTNodeType","setUpAttributes","renderer","native","attrs","namespaceURI","attrName","attrVal","setAttribute","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","mergeHostAttrs","dst","src","slice","srcMarker","item","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","hasParentInjector","parentLocation","getParentInjectorIndex","parentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","NOT_FOUND","bloomAdd","injectorIndex","firstCreatePass","id","bloomHash","mask","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","parent","declarationViewOffset","parentTNode","lViewCursor","getTNodeFromLView","diPublicInInjector","injectAttributeImpl","attrNameToInject","classes","styles","attrsLength","notFoundValueOrThrow","notFoundValue","lookupTokenUsingModuleInjector","moduleInjector","previousInjectImplementation","get","getOrCreateInjectable","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","tData","previousIncludeViewProviders","prevInjectContext","injector","success","tokenId","createNodeInjector","injectorView","isFirstHostTNode","getNodeInjectorLView","nodeInjector","_lView","getNodeInjectorTNode","_tNode","ɵɵgetInheritedFactory","ownConstructor","ownFactory","getFactoryOf","objectPrototype","currentTNode","currentLView","nodeInjectorValue","embeddedViewInjector","embeddedViewInjectorValue","tViewType","declTNode","ɵɵinjectAttribute","attributeName","__NG_ELEMENT_ID__","getReflect","reflectDependencies","convertDependencies","deps","dep","reflectDependency","attribute","host","optional","self","skipSelf","j","param","proto","compileInjectable","ngInjectableDef","ngFactoryDef","compiler","getInjectableMetadata","compileFactory","typeArgumentCount","FactoryTarget","Injectable","configurable","USE_VALUE","provide","String","useValue","isUseClassProvider","useClass","isUseValueProvider","isUseFactoryProvider","useFactory","isUseExistingProvider","useExisting","srcMeta","providedIn","compilerMeta","injectElementRef","createElementRef","ElementRef","nativeElement","unwrapElementRef","symbolIterator","_results","Symbol","iterator","QueryList","_emitDistinctChangesOnly","dirty","_onDirty","_changesDetected","_changes","first","last","changes","filter","find","reduce","init","some","toArray","reset","resultsTree","identityAccessor","newResultFlat","notifyOnChanges","next","onDirty","cb","setDirty","destroy","complete","unsubscribe","SKIP_HYDRATION_ATTR_NAME","SKIP_HYDRATION_ATTR_NAME_LOWER_CASE","hasSkipHydrationAttrOnTNode","mergedAttrs","toLowerCase","hasSkipHydrationAttrOnRElement","rNode","hasAttribute","hasInSkipHydrationBlockFlag","isI18nInSkipHydrationBlock","ChangeDetectionStrategy","TRACKED_LVIEWS","Map","uniqueIdCounter","getUniqueLViewId","registerLView","set","getLViewById","unregisterLView","delete","getTrackedLViews","LContext","lViewId","component","directives","localRefs","getLContext","mpValue","readPatchedData","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","context","createLContext","attachPatchData","rElement","parentNode","parentContext","getComponentViewByInstance","componentInstance","patchedData","contextLView","MONKEY_PATCH_KEY_NAME","readPatchedLView","ɵcmp","ɵdir","bindingStartIndex","traverseNextElement","child","componentIndices","components","elementComponentIndex","componentView","rootComponentView","rootComponent","directiveInstance","firstChild","directiveIndexStart","directiveIndexEnd","results","getComponentAtNodeIndex","componentOffset","discoverLocalRefs","localNames","localIndex","getRootView","componentOrLView","getRootContext","viewOrComponent","rootView","getFirstLContainer","getNearestLContainer","getNextLContainer","container","viewOrContainer","getComponent","element","assertDomElement","getContext","getOwningComponent","elementOrDir","getRootComponents","getInjector","NULL","getInjectionTokens","providerTokens","isDirectiveDefHack","getDirectives","node","Text","Framework","AcxChangeDetectionStrategy","AcxViewEncapsulation","getDirectiveMetadata$1","directiveOrComponentInstance","componentDef","inputs","extractInputDebugMetadata","outputs","encapsulation","changeDetection","onPush","OnPush","Default","getLocalRefs","getHostElement","componentOrDirective","getListeners","lContext","lCleanup","tCleanup","cleanup","listeners","firstParam","secondParam","listenerElement","callback","useCaptureOrIndx","useCapture","sort","sortListeners","a","b","obj","resolveHostDirectives","Element","res","DOCUMENT","setDocument","document","getDocument","APP_ID","DEFAULT_APP_ID","PLATFORM_INITIALIZER","PLATFORM_ID","PACKAGE_ROOT_URL","ANIMATION_MODULE_TYPE","CSP_NONCE","body","querySelector","getAttribute","IMAGE_CONFIG_DEFAULTS","breakpoints","placeholderResolution","disableImageSizeWarning","disableImageLazyLoadWarning","IMAGE_CONFIG","makeStateKey","initTransferState","transferState","TransferState","ngServerMode","retrieveTransferredState","ɵprov","onSerializeCallbacks","defaultValue","remove","hasKey","isEmpty","onSerialize","toJson","e","warn","JSON","replace","doc","appId","script","getElementById","textContent","parse","REFERENCE_NODE_HOST","REFERENCE_NODE_BODY","NODE_NAVIGATION_STEP_FIRST_CHILD","NODE_NAVIGATION_STEP_NEXT_SIBLING","ELEMENT_CONTAINERS","TEMPLATES","CONTAINERS","MULTIPLIER","NUM_ROOT_NODES","TEMPLATE_ID","NODES","DISCONNECTED_NODES","I18N_DATA","DEFER_BLOCK_ID","DEFER_BLOCK_STATE$1","DEFER_PARENT_BLOCK_ID","DEFER_HYDRATE_TRIGGERS","IS_HYDRATION_DOM_REUSE_ENABLED","PRESERVE_HOST_CONTENT_DEFAULT","PRESERVE_HOST_CONTENT","IS_I18N_HYDRATION_ENABLED","IS_EVENT_REPLAY_ENABLED","EVENT_REPLAY_ENABLED_DEFAULT","IS_INCREMENTAL_HYDRATION_ENABLED","JSACTION_BLOCK_ELEMENT_MAP","eventListenerOptions","passive","capture","hoverTriggers","WeakMap","interactionTriggers","viewportTriggers","interactionEventNames","hoverEventNames","intersectionObserver","observedViewportElements","DeferEventEntry","callbacks","Set","listener","onInteraction","trigger","entry","addEventListener","add","size","removeEventListener","onHover","createIntersectionObserver","IntersectionObserver","entries","isIntersecting","has","onViewport","observerFactoryFn","observe","unobserve","disconnect","DEFER_BLOCK_SSR_ID_ATTRIBUTE","setJSActionAttributes","eventTypes","parentDeferBlockId","nodeType","Node","ELEMENT_NODE","existingAttr","JSACTION","parts","prev","curr","blockName","sharedStashFunction","rEl","eventType","listenerFn","el","eventListenerMap","__jsaction_fns","eventListeners","sharedMapFunction","jsActionMap","blockSet","removeListenersFromBlocks","blockNames","blockList","replayList","removeListeners","removeAttribute","JSACTION_EVENT_CONTRACT","invokeListeners","currentTarget","handlerFns","isConnected","handler","stashEventListeners","setStashFn","isStashEventListenerImplEnabled","_stashEventListenerImpl","eventName","wrappedListener","stashEventListenerImpl","enableStashEventListenerImpl","stashEventListener","DEHYDRATED_BLOCK_REGISTRY","DehydratedBlockRegistry","registry","cleanupFns","contract","blockId","info","awaitingCallbacks","hydratedBlocks","invokeTriggerCleanupFns","hydrating","cleanUp","addCleanupFn","cleanupFunctions","fns","awaitParentBlock","topmostParentBlock","parentBlockAwaitCallbacks","TRANSFER_STATE_TOKEN_ID","NGH_DATA_KEY","TRANSFER_STATE_DEFER_BLOCKS_INFO","NGH_DEFER_BLOCKS_KEY","NGH_ATTR_NAME","SSR_CONTENT_INTEGRITY_MARKER","_retrieveHydrationInfoImpl","retrieveHydrationInfoImpl","nghAttrValue","componentViewNgh","rootViewNgh","split","rootNgh","remainingNgh","nghData","Number","dehydratedView","setSegmentHead","nextSibling","markRNodeAsClaimedByHydration","hydratedComponents","enableRetrieveHydrationInfoImpl","retrieveHydrationInfo","getLNodeForHydration","viewRef","getTextNodeContent","processTextNodeMarkersBeforeHydration","commentNodesIterator","createNodeIterator","NodeFilter","SHOW_COMMENT","acceptNode","content","isTextNodeMarker","FILTER_ACCEPT","FILTER_REJECT","currentNode","nodes","nextNode","replaceWith","createTextNode","HydrationStatus","HYDRATION_INFO_KEY","patchHydrationInfo","readHydrationInfo","checkIfAlreadyClaimed","isRNodeClaimedForHydration","status","Hydrated","hydratedNodes","markRNodeAsSkippedByHydration","Skipped","componentsSkippedHydration","countBlocksSkippedByHydration","nghDeferData","deferBlocksWithIncrementalHydration","markRNodeAsHavingHydrationMismatch","expectedNodeDetails","actualNodeDetails","Mismatched","hydrationInfo","segmentHeads","getSegmentHead","isIncrementalHydrationEnabled","assertIncrementalHydrationIsConfigured","assertSsrIdDefined","ssrUniqueId","getNgContainerSize","calcSerializedContainerSize","isSerializedElementContainer","getSerializedContainerViews","views","numNodes","view","initDisconnectedNodes","disconnectedNodes","nodeIds","isDisconnectedNode$1","processTextNodeBeforeSerialization","corruptedTextNodes","TEXT_NODE","convertHydrateTriggersToJsAction","triggers","actionList","getParentBlockHydrationQueue","deferBlockId","dehydratedBlockRegistry","deferBlockParents","isTopMostDeferBlock","currentBlockId","parentBlockPromise","hydrationQueue","hydratingParentBlock","promise","gatherDeferBlocksByJSActionAttribute","jsactionNodes","querySelectorAll","blockMap","join","attr","match","appendDeferBlocksToJSActionMap","_retrieveDeferBlockDataImpl","retrieveDeferBlockDataImpl","enableRetrieveDeferBlockDataImpl","retrieveDeferBlockData","isTimerTrigger","triggerInfo","getHydrateTimerTrigger","blockData","delay","hasHydrateTrigger","createBlockSummary","blockInfo","hydrate","idle","immediate","timer","viewport","processBlockData","blockDetails","isSsrContentsIntegrity","COMMENT_NODE","trim","skipTextNodes","previousSibling","verifySsrContentsIntegrity","childNodes","beforeBody","endOfHead","head","lastChild","refreshContentQueries","contentQueries","queryStartIdx","directiveDefIdx","executeViewQueryFn","viewQueryFn","executeContentQueries","start","def","ViewEncapsulation","policy$1","getPolicy$1","trustedTypes","createPolicy","createHTML","s","createScript","createScriptURL","trustedHTMLFromString","html","trustedScriptURLFromString","url","policy","getPolicy","trustedHTMLFromStringBypass","trustedScriptFromStringBypass","trustedScriptURLFromStringBypass","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","getTypeName","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","getInertBodyHelper","defaultDoc","inertDocumentHelper","InertDocumentHelper","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","window","DOMParser","parseFromString","inertDocument","implementation","createHTMLDocument","templateEl","createElement","innerHTML","SAFE_URL_PATTERN","_sanitizeUrl","tagSet","tags","merge","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","traverseContent","parentNodes","startElement","chars","nodeValue","getFirstChild","endElement","getNextSibling","pop","tagName","getNodeName","elAttrs","attributes","elAttr","lower","encodeEntities","isClobberedElement","childNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","clobberedElementError","nodeName","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","_sanitizeHtml","unsafeHtmlInput","inertBodyElement","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","isTemplateElement","SecurityContext","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵtrustConstantHtml","raw","ɵɵtrustConstantResourceUrl","getUrlSanitizer","tag","ɵɵsanitizeUrlOrResourceUrl","validateAgainstEventProperties","startsWith","errorMessage","validateAgainstEventAttributes","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","NG_REFLECT_ATTRS_FLAG_DEFAULT","NG_REFLECT_ATTRS_FLAG","provideNgReflectAttributes","providers","normalizeDebugBindingName","camelCaseToDashCase","CAMEL_CASE_REGEXP","input","m","normalizeDebugBindingValue","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","shouldThrowErrorOnUnknownElement","ɵsetUnknownElementStrictMode","shouldThrow","ɵgetUnknownElementStrictMode","shouldThrowErrorOnUnknownProperty","ɵsetUnknownPropertyStrictMode","ɵgetUnknownPropertyStrictMode","validateElementIsKnown","schemas","hasDirectives","isUnknown","HTMLUnknownElement","customElements","matchingSchemas","isHostStandalone","isHostComponentStandalone","templateLocation","getTemplateLocationDetails","isPropertyValid","handleUnknownPropertyError","importLocation","KNOWN_CONTROL_FLOW_DIRECTIVES","correspondingImport","reportUnknownPropertyError","getDeclarationComponentDef","declarationLView","standalone","hostComponentDef","componentClassName","schema","ɵɵresolveWindow","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","INTERPOLATION_DELIMITER","maybeUnwrapFn","VALUE_STRING_LENGTH_LIMIT","assertStandaloneComponentType","assertComponentDef","throwMultipleComponentError","second","throwErrorIfNoChangesMode","creationMode","currValue","field","msg","formatValue","strValue","constructDetailsForInterpolation","rootIndex","expressionIndex","changedValue","prefix","chunks","newValue","slotIdx","getExpressionChangedErrorDetails","bindingIndex","metadata","idx","matches","RegExp","classIndexOf","className","classToSearch","foundIndex","NG_TEMPLATE_SELECTOR","isCssClassMatching","cssClassToMatch","isProjectionMode","isInlineTemplate","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","selector","mode","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","nodeAttr","isSelectorInSelectorList","list","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","currentChunk","valueOrMarker","attrValue","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","NO_CHANGE","__brand__","createText","updateTextNode","setValue","createCommentNode","createComment","createElementNode","namespace","nativeInsertBefore","beforeNode","isMove","insertBefore","nativeAppendChild","appendChild","nativeAppendOrInsertBefore","nativeRemoveNode","isHostElement","removeChild","clearElementContents","writeDirectStyle","writeDirectClass","setupStaticAttributes","createTView","templateFn","decls","vars","pipes","viewQuery","constsOrFactory","ssrId","initialViewLength","createViewBlueprint","consts","template","queries","fill","expandoStartIndex","hostBindingOpCodes","firstUpdatePass","staticViewQueries","staticContentQueries","directiveRegistry","pipeRegistry","incompleteFirstPass","seal","getOrCreateComponentTView","directiveDefs","pipeDefs","createLView","tHostNode","environment","createComponentLView","hostTNode","rendererFactory","addToEndOfViewTree","getInitialLViewFlagsFromDef","createRenderer","signals","allocExpando","numSlotsToAlloc","initialValue","allocIdx","lViewOrLContainer","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","hooksInitPhaseCompleted","InputFlags","writeToDirectiveInput","transform","SignalBased","transformFn","executeTemplate","rf","prevSelectedIndex","isUpdatePhase","preHookType","postHookType","createDirectivesInstances","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","locateHostElement","elementOrSelector","preserveHostContent","preserveContent","ShadowDom","rootElement","selectRootElement","applyRootElementTransform","_applyRootElementTransformImpl","applyRootElementTransformImpl","enableApplyRootElementTransformImpl","mapPropName","setPropertyAndInputs","hasSetInput","setAllInputsForProperty","markDirtyIfOnPush","setNgReflectProperties","setDomProperty","viewIndex","childComponentLView","setNgReflectProperty","ngReflect","debugValue","inputConfig","hostInputConfig","hostDirectiveInputs","initialInputs","setInputsFromAttrs","elementIndex","currentDirectiveIndex","dirIndex","hostBindings","hostVars","hostAttrs","invokeHostBindingsInCreationMode","findDirectiveDefMatches","selectors","elementAttributeInternal","setElementAttribute","initialInputData","lookupName","storePropertyBindingMetadata","propertyName","interpolationParts","propBindingIdxs","propertyBindings","bindingMetadata","loadComponentRenderer","currentDef","handleUncaughtError","errorHandler","hasMatch","setDirectiveInput","hostIndex","hostDirectivesStart","hostDirectivesEnd","hasSet","directiveToIndex","hostDirectivePublicName","renderComponent","hostLView","componentHostIdx","componentTView","syncViewWithBlueprint","hostRNode","renderView","finishViewCreation","renderChildComponents","createAndRenderEmbeddedLView","templateTNode","options","embeddedTView","isSignalView","viewFlags","embeddedLView","declarationLContainer","declarationViewLQueries","createEmbeddedView","shouldAddViewToDom","USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT","UseExhaustiveCheckNoChanges","_icuContainerIterate","icuContainerIterate","tIcuContainerNode","ensureIcuContainerVisitorLoaded","loader","RendererStyleFlags2","isDetachedByI18n","applyToElementOrContainer","action","lNodeToHandle","lContainer","isComponent","destroyNode","applyContainer","removeViewFromDOM","detachViewFromDOM","addViewToDOM","parentNativeNode","applyView","changeDetectionScheduler","notify","destroyViewTree","cleanUpView","firstView","detachMovedView","declarationContainer","movedViews","declarationViewIndex","destroyLView","executeOnDestroys","processCleanups","lQueries","detachView","targetIdx","destroyHooksFn","effects","effect","toCall","callContext","getParentRElement","getClosestRElement","None","Emulated","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","setI18nHandling","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","nextRNode","projectionNodes","getProjectionNodes","componentHost","projection","viewIndexInContainer","nextViewIndex","firstTNodeOfView","applyNodes","parentRElement","isProjection","rawSlotValue","applyProjectionRecursive","projectionNext","applyProjection","tProjectionNode","componentLView","componentNode","nodeToProjectOrRNodes","nodeToProject","projectedComponentLView","anchor","applyStyling","isClassBased","removeClass","addClass","DashCase","removeStyle","isImportant","endsWith","Important","setStyle","collectNativeNodes","lNode","collectNativeNodesInLContainer","nodesInSlot","lViewInAContainer","lViewFirstChildTNode","addAfterRenderSequencesForView","sequence","impl","addSequence","freeConsumers","getOrBorrowReactiveLViewConsumer","borrowReactiveLViewConsumer","consumer","REACTIVE_LVIEW_CONSUMER_NODE","maybeReturnReactiveLViewConsumer","consumerIsAlwaysLive","consumerMarkedDirty","consumerOnSignalRead","getOrCreateTemporaryConsumer","TEMPORARY_CONSUMER_NODE","viewShouldHaveReactiveConsumer","isReactiveLViewConsumer","runEffectsInView","tryFlushEffects","foundDirtyEffect","zone","Zone","run","MAXIMUM_REFRESH_RERUNS$1","detectChangesInternal","begin","detectChangesInViewWhileDirty","lastIsRefreshingViewsValue","detectChangesInView","retries","checkNoChangesInternal","exhaustive","Exhaustive","OnlyDirtyViews","Off","refreshView","isInCheckNoChangesPass","isInExhaustiveCheckNoChangesPass","returnConsumerToPool","currentConsumer","markTransplantedViewsForRefresh","detectChangesInEmbeddedViews","processHostBindingOpCodes","detectChangesInChildComponents","notifyEffect","detectChangesInViewIfAttached","movedLView","detectChangesInComponent","shouldRefreshView","opCode","directiveIdx","bindingRootIndx","hostBindingFn","markViewDirty","source","dirtyBitsToUse","createLContainer","hostNative","getLViewFromLContainer","adjustedIndex","addLViewToLContainer","addToDOM","insertView","removeLViewFromLContainer","removeIndex","indexInContainer","viewToDetach","removedLView","containerLength","trackMovedView","insertedComponentLView","declaredComponentLView","ViewRef","_cdRefInjectingView","_appRef","_attachedToViewContainer","rootNodes","destroyed","viewRefs","onDestroy","markForCheck","detach","reattach","detectChanges","checkNoChanges","attachToViewContainerRef","detachFromAppRef","isRoot","attachToAppRef","appRef","isViewDirty","markForRefresh","TemplateRef","_declarationLView","_declarationTContainer","elementRef","injectTemplateRef","createEmbeddedViewImpl","createTemplateRef","AT_THIS_LOCATION","getFriendlyStringFromTNodeType","validateMatchingNode","isViewContainerAnchor","expectedNode","shortRNodeDescription","header","expectedDom","describeExpectedDom","expected","actual","componentHostElement","actualNode","actualDom","describeDomFromNode","getHydrationErrorFooter","getHydrationAttributeNote","validateSiblingNodeExists","validateNodeExists","nodeNotFoundError","nodeNotFoundAtPathError","path","describeRNode","unsupportedProjectionOfDomNodes","invalidSkipHydrationHost","stringifyTNodeAttrs","shorten","internalAttrs","stringifyRNodeAttrs","describeTNode","innerContent","typeAsString","spacer","componentInfo","stripNewlines","maxLength","tNodeInsertBeforeIndex","i18nParent","anchorRNode","i18nChild","getOrCreateTNode","createTNodeAtIndex","isParent","createTNode","linkTNodeInTView","tParent","directiveStylingLast","hostDirectiveOutputs","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","addTNodeAndUpdateInsertBeforeIndex","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","getTIcu","tIcu","setTIcu","setTNodeInsertBeforeIndex","createTNodePlaceholder","getCurrentICUCaseIndex","currentCase","currentCaseLViewIndex","getParentFromIcuCreateOpCode","mergedCode","getRefFromIcuCreateOpCode","getInstructionFromIcuCreateOpCode","icuCreateOpCode","parentIdx","refIdx","isRootTemplateMessage","subTemplateIndex","enterIcu","state","cases","removes","icuContainerIteratorNext","removeOpCode","stack","tIcuIndex","loadIcuContainerVisitor","_state","icuContainerIteratorStart","bind","createIcuIterator","REF_EXTRACTOR_REGEXP","compressNodeLocation","referenceNode","segment","lastIdx","decompressNodeLocation","_","refNodeId","refNodeName","rest","ref","parseInt","steps","step","count","matchAll","repeat","isFirstElementInNgContainer","getNoOffsetIndex","isDisconnectedNode","isDisconnectedRNode","locateI18nRNodeByIndex","noOffsetIndex","i18nNodes","tryLocateRNodeByPath","locateRNodeByPath","locateNextRNode","previousTNodeParent","previousTNode","noOffsetParentIndex","previousRElement","noOffsetPrevSiblingIndex","segmentHead","numRootNodesToSkip","nodesToSkip","siblingAfter","skip","from","stringifyNavigationInstructions","instructions","r","navigateToNode","navigationInstructions","parentElementId","navigateBetween","finish","parentElement","navigateBetweenSiblings","parentPath","childPath","nav","calcPathBetween","to","fromNodeName","calcPathForNode","excludedParentNodes","referenceNodeName","firstRNode","gatherDeferBlocksCommentNodes","nodesByBlockId","nghPattern","nghIdx","nghValue","trimStart","_isI18nHydrationSupportEnabled","_prepareI18nBlockForHydrationImpl","setIsI18nHydrationSupportEnabled","enabled","isI18nHydrationSupportEnabled","prepareI18nBlockForHydration","enablePrepareI18nBlockForHydrationImpl","prepareI18nBlockForHydrationImpl","isI18nHydrationEnabled","getOrComputeI18nChildren","i18nChildren","collectI18nChildren","children","collectI18nViews","caseNodes","caseNode","tI18n","ast","trySerializeI18nBlock","parentTNodeIndex","serializedI18nBlock","caseQueue","disjointNodes","serializeI18nBlock","prevRNode","serializeI18nNode","isDisjointNode","prevNode","maybeRNode","caseIdx","getFirstNativeNodeForI18nNode","maybeTNode","icuIterator","setCurrentNode","appendI18nNodeToCollection","astNode","skipSiblingNodes","forkHydrationState","findHydrationRoot","rootNode","dehydratedIcuData","collectI18nNodesFromDom","nodeOrNodes","nextState","targetNode","containerSize","selectedCase","shift","childState","case","_claimDehydratedIcuCaseImpl","claimDehydratedIcuCase","icuIndex","caseIndex","enableClaimDehydratedIcuCaseImpl","claimDehydratedIcuCaseImpl","dehydratedIcuDataMap","cleanupI18nHydrationData","cleanupDehydratedIcuData","removeDehydratedViews","retainedViews","removeDehydratedView","dehydratedViewsRemoved","removeDehydratedViewList","deferBlock","dehydratedViews","nodesRemoved","currentRNode","cleanupLContainer","cleanupLView","cleanupDehydratedViews","_views","dehydratedViewsCleanupRuns","cleanupHydratedDeferBlocks","locateDehydratedViewsInContainer","serializedViews","serializedView","_findMatchingDehydratedViewImpl","_findAndReconcileMatchingDehydratedViewsImpl","enableFindMatchingDehydratedViewImpl","findMatchingDehydratedViewImpl","findAndReconcileMatchingDehydratedViewsImpl","hasMatchingDehydratedView","findMatchingDehydratedView","removeStaleDehydratedBranch","findAndReconcileMatchingDehydratedViews","cleanupMatchingDehydratedViews","ComponentRef$1","ComponentRef","ComponentFactory$1","ComponentFactory","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","ComponentFactoryResolver","RendererFactory2","Renderer2","injectRenderer2","nodeAtIndex","Sanitizer","isModuleWithProviders","ngModule","isNgModule","isPipe","isDirective","getDependencyTypeForError","verifyStandaloneImport","depType","importingType","DepsTracker","ownerNgModule","ngModulesWithSomeUnresolvedDecls","ngModulesScopeCache","standaloneComponentsScopeCache","resolveNgModulesDecls","moduleType","declarations","decl","clear","getComponentDependencies","rawImports","scope","getStandaloneComponentScope","compilation","isPoisoned","dependencies","ngModules","getNgModuleScope","registerNgModule","scopeInfo","clearScopeCacheFor","computeNgModuleScope","exported","imported","imports","importedScope","addSet","exports","exportedScope","ans","computeStandaloneComponentScope","rawImport","isOrphanComponent","cmp","sourceSet","targetSet","depsTracker","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ChainedInjector","parentInjector","computeStaticStyling","writeToHost","style","styleValue","ɵɵdirectiveInject","ɵɵinvalidFactory","resolveDirectives","directiveMatcher","exportsMap","matchedDirectiveDefs","hostDirectiveDefs","hostDirectiveRanges","assertNoDuplicateDirectives","initializeDirectives","cacheMatchingLocalNames","markAsComponentHost","directivesLength","hasSeenComponent","initTNodeFlags","providersResolver","preOrderHooksFound","preOrderCheckHooksFound","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","initializeInputAndOutputAliases","setupSelectorMatchedInputsOrOutputs","setupInitialInputs","hostDirectiveDef","setupHostDirectiveInputsOrOutputs","aliasMap","bindings","setShadowStylingInputFlags","config","initialName","isHostDirective","inputsToStore","directiveFactory","nodeInjectorFactory","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","lastSelectedElementIdx","exportAs","numberOfDirectives","seenDirectives","elementStartFirstCreatePass","bindingsEnabled","attrsIndex","localRefsIndex","tViewConsts","elementStart","elementEndFirstCreatePass","elementEnd","isListLikeIterable","isJsObject","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","o","devModeEqual","isListLikeIterableA","isListLikeIterableB","isAObject","isBObject","is","updateBinding","getBinding","bindingUpdated","oldValueToCompare","details","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","wrapListener","wrapListenerIn_markDirtyAndPreventDefault","executeListenerWithErrorHandling","nextListenerFn","__ngNextListenerFn__","listenToDomEvent","eventTargetResolver","originalListener","isTNodeDirectiveHost","hasCoalesced","existingListener","findExistingListener","lastListenerFn","__ngLastListenerFn__","cleanupFn","listen","idxOrTargetGetter","storeListenerCleanup","tNodeIndex","cleanupEventName","listenerIdxInLCleanup","indexOrTargetGetter","isOutput","createOutputListener","targetDef","hasBound","listenToDirectiveOutput","hasOutput","listenToOutput","output","isOutputSubscribable","subscription","subscribe","BINDING","INPUT_BINDING_METADATA","requiredVars","OUTPUT_BINDING_METADATA","inputBindingUpdate","targetDirectiveIdx","inputBinding","binding","update","outputBinding","twoWayBinding","eventValue","toInputRefArray","inputData","templateName","toOutputRefArray","verifyNotAnOrphanComponent","ngJitMode","debugInfo","forbidOrphanRendering","createRootViewInjector","environmentInjector","realEnvironmentInjector","getStandaloneInjector","rootViewInjector","createRootLViewEnvironment","rootLViewInjector","createHostElement","render","componentType","ngContentSelectors","isBoundToModule","cachedInputs","cachedOutputs","projectableNodes","rootSelectorOrNode","componentBindings","cmpDef","rootTView","createRootTView","hostRenderer","hostElement","hasInputBindings","isInputBinding","d","rootLView","projectNodes","tAttributes","creationBindings","updateBindings","varsToAllocate","directivesToApply","directiveType","getRootTViewTemplate","_rootLView","_hasInputBindings","hostView","changeDetectorRef","previousInputValues","cmpNameForError","nodesforSlot","ViewContainerRef","injectViewContainerRef","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","indexOrOptions","insertImpl","createComponent","componentFactoryOrType","isComponentFactory","ngModuleRef","componentFactory","contextInjector","_injector","componentRef","insert","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","getOrCreateViewRefs","move","newIndex","viewRefsArr","detachedView","wasDetached","slotValue","_locateOrCreateAnchorNode","insertAnchorNode","commentNode","parentOfHostNative","createAnchorNode","_populateDehydratedViewsInLContainer","populateDehydratedViewsInLContainer","populateDehydratedViewsInLContainerImpl","isNodeCreationMode","locateOrCreateAnchorNode","enableLocateOrCreateContainerRefImpl","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","parentLQuery","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","read","predicate","splitQueryMultiSelectors","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","crossesNgTemplate","_declarationNodeIndex","_appliesToNextNode","isApplyingToNode","matchTNode","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","nodeMatchIdx","directiveOrProviderIdx","tNodeIdx","matchIdx","createResultByTNodeType","createResultForNode","matchingIdx","createSpecialToken","materializeViewResults","queryIndex","lQuery","tViewData","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","loadQueryInternal","createLQuery","createViewQuery","createTQuery","createContentQuery","saveContentQueryAndDirectiveIndex","locator","tViewContentQueries","lastSavedDirectiveIndex","getQueryResults","createQuerySignalFn","firstOnly","required","opts","signalFn","_dirtyCounter","refreshSignalQuery","_flatValue","debugName","createSingleResultOptionalQuerySignalFn","createSingleResultRequiredQuerySignalFn","createMultiResultQuerySignalFn","bindQueryToSignal","_queryIndex","_queryList","resultChanged","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","resp","then","unwrapResponse","componentResourceResolutionQueue","promises","templateUrl","styleUrl","styleUrls","styleOffset","fullyResolved","Promise","all","componentDefResolved","clearResolutionOfComponentResourcesQueue","componentDefPendingResolution","maybeQueueResolutionOfComponentResources","componentNeedsResolution","isComponentDefPendingResolution","old","restoreComponentResolutionQueue","queue","isComponentResourceResolutionQueueEmpty","response","modules","checkForDuplicateNgModules","assertSameOrNotExisting","incoming","registerNgModuleType","ngModuleType","existing","getRegisteredNgModuleType","setAllowDuplicateNgModuleIdsForTest","allowDuplicates","ɵɵvalidateIframeAttribute","iframe","srcdoc","markedFeatures","performanceMarkFeature","feature","performance","mark","detail","NgModuleRef$1","NgModuleRef","NgModuleFactory$1","NgModuleFactory","createNgModule","createNgModuleRef","_parent","_bootstrapComponents","_r3Injector","destroyCbs","componentFactoryResolver","additionalProviders","runInjectorInitializers","ngModuleDef","bootstrap","resolveInjectorInitializers","createNgModuleRefWithProviders","EnvironmentNgModuleRefAdapter","runEnvironmentInitializers","createEnvironmentInjector","adapter","StandaloneService","cachedInjectors","getOrCreateStandaloneInjector","standaloneInjector","ɵɵdefineComponent","componentDefinition","baseDef","getNgDirectiveDef","getExternalStyles","initFeatures","extractDefListOrFactory","getComponentId","extractDirectiveDef","nonNull","ɵɵdefineNgModule","transitiveCompileScopes","parseAndConvertInputsForDefinition","newLookup","minifiedKey","inputFlags","parseAndConvertOutputsForDefinition","ɵɵdefineDirective","directiveDefinition","ɵɵdefinePipe","pipeDef","pure","features","hostDirectives","defExtractor","GENERATED_COMP_IDS","hash","componentDefConsts","hashSelectors","getOwnPropertyNames","char","Math","imul","compId","previousCompDefType","getSuperType","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","mergeInputsWithTransforms","animation","defData","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","ɵɵCopyDefinitionFeature","defAny","ɵɵHostDirectivesFeature","rawHostDirectives","isEager","createHostDirectiveDef","allDirectiveDefs","hasComponent","findHostDirectiveDefs","matchedDefs","configOrFn","resolved","trackHostDirectiveDef","validateHostDirective","patchDeclaredInputs","bindingArrayToMap","exposedInputs","remappedPublicName","hostDirectiveConfig","validateMappings","bindingType","hostDirectiveBindings","templateFirstCreatePass","declareTemplate","declarationTView","comment","_locateOrCreateContainerAnchor","ɵɵtemplate","createContainerAnchorImpl","locateOrCreateContainerAnchorImpl","viewContainerSize","enableLocateOrCreateContainerAnchorImpl","DeferDependenciesLoadingState","MINIMUM_SLOT","LOADING_AFTER_SLOT","DeferBlockState","DeferBlockInternalState","NEXT_DEFER_BLOCK_STATE","DEFER_BLOCK_STATE","STATE_IS_FROZEN_UNTIL","LOADING_AFTER_CLEANUP_FN","TRIGGER_CLEANUP_FNS","PREFETCH_TRIGGER_CLEANUP_FNS","SSR_UNIQUE_ID","SSR_BLOCK_STATE","ON_COMPLETE_FNS","HYDRATE_TRIGGER_CLEANUP_FNS","DeferBlockBehavior","storeTriggerCleanupFn","lDetails","getCleanupFnKeyByType","invokeAllTriggerCleanupFns","TracingAction","TracingService","SCHEDULE_IN_ROOT_ZONE_DEFAULT","EventEmitter_","__isAsync","destroyRef","pendingTasks","isAsync","emit","observerOrNext","nextFn","errorFn","completeFn","observer","wrapInTimeout","sink","taskId","setTimeout","EventEmitter","scheduleCallbackWithRafRace","timeoutId","animationFrameId","cancelAnimationFrame","clearTimeout","requestAnimationFrame","scheduleCallbackWithMicrotask","queueMicrotask","AsyncStackTaggingZoneSpec","createTask","namePrefix","consoleAsyncStackTaggingImpl","onScheduleTask","delegate","_current","task","consoleTask","scheduleTask","onInvokeTask","_currentZone","targetZone","applyThis","applyArgs","ret","invokeTask","isAngularZoneProperty","angularZoneInstanceIdProperty","ngZoneInstanceId","NgZone","hasPendingMacrotasks","hasPendingMicrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","scheduleInRootZone","assertZonePatched","_nesting","_outer","_inner","fork","callbackScheduled","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","runTask","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","runOutsideAngular","checkStable","delayChangeDetectionForEvents","isCheckStableRunning","scheduleCheckStable","updateMicroTaskStatus","root","delayChangeDetectionForEventsDelegate","instanceId","properties","shouldBeIgnoredByZone","onEnter","onLeave","onInvoke","invoke","isSchedulerTick","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","macroTask","onHandleError","handleError","NoopNgZone","hasApplyArgsData","getNgZone","ngZoneToUse","AfterRenderManager","execute","AFTER_RENDER_PHASES","AfterRenderImpl","ngZone","scheduler","sequences","deferredRegistrations","executing","hasSequencesToExecute","phase","erroredOrDestroyed","pipelinedValue","maybeTrace","hookFn","snapshot","err","afterRun","once","register","unregister","AFTER_NEXT_RENDER","AfterRenderSequence","unregisterOnDestroy","dispose","scheduled","afterEveryRender","callbackOrSpec","NOOP_AFTER_RENDER_REF","afterEveryRenderImpl","afterNextRender","getHooks","earlyRead","write","mixedReadWrite","manager","tracing","manualCleanup","viewContext","getDeferBlockDataIndex","deferBlockIndex","getLDeferBlockDetails","slotIndex","setLDeferBlockDetails","getTDeferBlockDetails","setTDeferBlockDetails","deferBlockConfig","getTemplateIndexForState","newState","tDetails","Complete","primaryTmplIndex","Loading","loadingTmplIndex","errorTmplIndex","Placeholder","placeholderTmplIndex","getMinimumDurationForState","currentState","placeholderBlockConfig","loadingBlockConfig","getLoadingBlockAfter","addDepsToRegistry","currentDeps","newDeps","currentDepSet","getPrimaryBlockTNode","assertDeferredDependenciesLoaded","loadingState","COMPLETE","isTDeferBlockDetails","isDeferBlock","trackTriggerForDebugging","textRepresentation","debug","onViewportWrapper","getTriggerLView","deferredHostLView","deferredTNode","walkUpTimes","deferredContainer","triggerLView","renderedState","getTriggerElement","triggerIndex","registerDomTrigger","initialLView","registerFn","poll","pollDomTrigger","Initial","onIdle","IdleScheduler","_requestIdleCallback","requestIdleCallback","_cancelIdleCallback","cancelIdleCallback","executingCallbacks","idleId","deferred","requestIdleCallbackFn","globalThis","cancelIdleCallbackFn","scheduleIdleCallback","onTimer","scheduleTimerTrigger","TimerScheduler","invokeTimerAt","addToQueue","Date","now","scheduleTimer","callbackIndex","removeFromQueue","invokeAt","insertAtIndex","invokeQueuedCallbackAt","queuedCallback","lastCallbackIndex","FRAME_DURATION_MS","timeout","CachedInjectorService","getOrCreateInjector","DEFER_BLOCK_DEPENDENCY_INTERCEPTOR","DEFER_BLOCK_CONFIG","getOrCreateEnvironmentInjector","createDeferBlockInjector","origInjector","parentEnvInjector","envInjector","renderDeferBlockState","skipTimerScheduling","hostTView","ssrState","isValidStateChange","needsScheduling","applyDeferBlockStateWithSchedulingImpl","applyStateFn","applyDeferBlockState","findMatchingDehydratedViewForDeferBlock","dehydratedViewIx","findIndex","stateTmplIndex","activeBlockTNode","applyDeferBlockStateWithScheduling","loadingAfter","inLoadingAfterPhase","scheduleDeferBlockUpdate","duration","renderPlaceholder","renderDeferStateAfterResourceLoading","loadingPromise","FAILED","ɵɵdeferEnableTimerScheduling","placeholderConfigIndex","loadingConfigIndex","ASYNC_COMPONENT_METADATA_FN","getAsyncClassMetadataFn","componentClass","setClassMetadataAsync","dependencyLoaderFn","metadataSetterFn","setClassMetadata","clazz","Console","log","ɵfac","Console_Factory","__ngFactoryType__","DIDebugData","resolverToTokenToDependencies","resolverToProviders","resolverToEffects","standaloneInjectorToComponent","frameworkDIDebugData","getFrameworkDIDebugData","setupFrameworkInjectorProfiler","injectorProfilerEventHandler","injectorProfilerEvent","handleInjectEvent","service","handleInstanceCreatedByInjectorEvent","handleProviderConfiguredEvent","providerRecord","handleEffectCreatedEvent","diResolver","getDIResolver","diResolverToInstantiatedToken","canBeHeldWeakly","instantiatedTokenToDependencies","injectedIn","getNodeInjectorContext","standaloneComponent","isStandaloneComponent","applyChanges","getDeferBlocks$1","deferBlocks","isLast","getDeferBlocks","findDeferBlocks","viewInjector","blocks","contains","renderedLView","getRendererLView","hydrationState","inferHydrationState","deferId","deferData","numberOfRootNodes","collectedNodeCount","deferBlockCommentNode","stringifyState","incrementalHydrationState","hasErrorBlock","loadingBlock","exists","minimumTime","afterTime","placeholderBlock","hydrateTriggers","getDependenciesFromInjectable","unformattedDependencies","getDependenciesForTokenInInjector","resolutionPath","getInjectorResolutionPath","formattedDependency","injectorToCheck","firstInjector","lookupFromFirstInjector","tokenDependencyMap","dependency","dependencyNode","instanceNode","getProviderImportsContainer","defTypeRef","getNodeInjectorProviders","getProviderImportPaths","providerImportsContainer","providerToPath","visitedContainers","visitor","walkProviderTreeToDiscoverImportPaths","provider","prov","existingImportPath","containerDef","lastContainerAddedToPath","isNextStepInPath","moduleImport","getEnvironmentInjectorProviders","providerRecordsWithoutImportPaths","isPlatformInjector","providerRecords","importPath","scopes","getInjectorProviders","getInjectorMetadata","getInjectorResolutionPathHelper","getInjectorParent","getModuleInjectorOfNodeInjector","parentTView","chainedInjector","injectorParent","inj","isComputedNode","isTemplateEffectNode","isEffectNode","isSignalNode","getTemplateConsumer","templateLView","getNodesAndEdgesFromSignalMap","signalMap","debugSignalGraphNodes","edges","producers","consumerIndex","label","producer","extractEffectsFromInjector","extractSignalNodesAndEdgesFromRoots","signalDependenciesMap","producerNodes","producerNode","getSignalGraph","templateConsumer","nonTemplateEffectNodes","signalNodes","changeDetectionRuns","changeDetectionSyncRuns","counter","eventsStack","measureStart","startEvent","timeStamp","measureEnd","entryName","color","top","chromeDevToolsInjectorProfiler","getProviderTokenMeasureName","devToolsProfiler","typeName","getComponentMeasureName","enableProfiling","removeInjectorProfiler","GLOBAL_PUBLISH_EXPANDO_KEY","globalUtilsFunctions","_published","publishDefaultGlobalUtils$1","methodName","method","publishGlobalUtil","publishUtil","publishExternalGlobalUtil","COMPILED","w","TESTABILITY","TESTABILITY_GETTER","Testability","_ngZone","_isZoneStable","_callbacks","_taskTrackingZone","_destroyRef","testabilityGetter","_testabilityGetter","setTestabilityGetter","addToWindow","_watchAngularEvents","onUnstableSubscription","onStableSubscription","_runCallbacksIfReady","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","whenStable","registerApplication","unregisterApplication","findProviders","using","exactMatch","Testability_Factory","TestabilityRegistry","_applications","testability","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","TestabilityRegistry_Factory","getter","isPromise","isSubscribable","APP_INITIALIZER","provideAppInitializer","initializerFn","ApplicationInitStatus","resolve","reject","initialized","donePromise","rej","appInits","runInitializers","asyncInitPromises","initResult","observableAsPromise","catch","ApplicationInitStatus_Factory","APP_BOOTSTRAP_LISTENER","publishDefaultGlobalUtils","publishSignalConfiguration","activeConsumer","cf","NgProbeToken","MAXIMUM_REFRESH_RERUNS","optionsReducer","objs","ApplicationRef","_runningTick","_destroyed","_destroyListeners","internalErrorHandler","afterRenderManager","zonelessEnabled","rootEffectScheduler","dirtyFlags","tracingSnapshot","allTestViews","autoDetectTestViews","includeAllTestViews","afterTick","allViews","componentTypes","internalPendingTask","hasPendingTasksObservable","pipe","stable","finally","_rendererFactory","componentOrFactory","bootstrapImpl","warnIfDestroyed","initStatus","resolver","selectorOrNode","compRef","_loadComponent","_console","tick","_tick","CHANGE_DETECTION","tickImpl","synchronize","runs","synchronizeOnce","flush","ranDetectChanges","useGlobalCheck","Boolean","syncDirtyFlagsWithViews","attachView","viewCount","ApplicationRef_Factory","scheduleDelayedTrigger","scheduleFn","shouldTriggerDeferBlock","triggerDeferBlock","scheduleDelayedPrefetching","NOT_STARTED","prefetch","triggerPrefetching","scheduleDelayedHydrating","triggerHydrationFromBlockName","triggerResourceLoading","primaryBlockTNode","IN_PROGRESS","dependenciesFn","dependencyResolverFn","deferDependencyInterceptor","intercept","removeTask","allSettled","failed","primaryBlockTView","directiveTypes","triggerType","behavior","Manual","_x","_x2","_x3","_triggerHydrationFromBlockName","arguments","_asyncToGenerator","replayQueuedEventsFn","blocksBeingHydrated","populateHydratingStateForQueue","triggerHydrationForBlockQueue","_x4","_x5","_x6","_triggerHydrationForBlockQueue","blockQueueIdx","dehydratedBlockId","dehydratedDeferBlock","triggerResourceLoadingForHydration","nextRender","deferBlockHasErrored","cleanupRemainingHydrationQueue","cleanupParentContainer","lastBlockName","currentBlockIdx","parentDeferBlockIdx","parentDeferBlock","withResolvers","resolveFn","_x7","_triggerResourceLoadingForHydration","dehydratedBlock","onDeferBlockCompletion","shouldAttachTrigger","shouldAttachRegularTrigger","hasHydrateTriggers","incrementalHydrationEnabled","_hasHydrateTriggers","wasServerSideRendered","getHydrateTriggers","processAndInitTriggers","idleElements","timerElements","viewportElements","immediateElements","blockSummary","numRootNodes","elementTrigger","setIdleTriggers","setImmediateTriggers","setViewportTriggers","setTimerTriggers","elementTriggers","timerFn","_hmrWarningProduced","logHmrWarning","ɵɵdefer","enableTimerScheduling","ngHmrMode","ssrBlockState","onLViewDestroy","ɵɵdeferWhen","rawValue","ɵɵdeferPrefetchWhen","ɵɵdeferHydrateWhen","ɵɵdeferHydrateNever","ɵɵdeferOnIdle","ɵɵdeferPrefetchOnIdle","ɵɵdeferHydrateOnIdle","ɵɵdeferOnImmediate","ɵɵdeferPrefetchOnImmediate","ɵɵdeferHydrateOnImmediate","ɵɵdeferOnTimer","ɵɵdeferPrefetchOnTimer","ɵɵdeferHydrateOnTimer","ɵɵdeferOnHover","ɵɵdeferPrefetchOnHover","ɵɵdeferHydrateOnHover","ɵɵdeferOnInteraction","ɵɵdeferPrefetchOnInteraction","ɵɵdeferHydrateOnInteraction","ɵɵdeferOnViewport","ɵɵdeferPrefetchOnViewport","ɵɵdeferHydrateOnViewport","ɵɵattribute","ɵɵcomponentInstance","LiveCollection","updateValue","swap","index1","index2","startIdx","min","endIdx","endItem","startItem","attach","prevIndex","newIdx","valuesMatching","liveIdx","liveValue","trackBy","recordDuplicateKeys","keyToIdx","idxSoFar","reconcile","liveCollection","newCollection","trackByFn","detachedItems","liveKeysInTheFuture","liveStartIdx","liveEndIdx","duplicateKeys","newEndIdx","liveStartValue","at","newStartValue","isStartMatching","liveEndValue","newEndValue","isEndMatching","liveStartKey","liveEndKey","newStartKey","newEndKey","UniqueValueMultiKeyMap","initLiveItemsInTheFuture","attachPreviouslyDetached","newItem","createOrAttach","newCollectionIterator","newIterationResult","newKey","liveKey","duplicatedKeysMsg","idxSet","prevCollection","kvMap","_vMap","prevValue","vMap","ɵɵconditionalCreate","ɵɵconditionalBranchCreate","ɵɵconditional","matchingTemplateIndex","contextValue","prevMatchingTemplateIndex","prevContainer","getLContainer","viewInContainerIdx","nextLContainerIndex","nextContainer","getExistingTNode","RepeaterContext","$implicit","$index","$count","ɵɵrepeaterTrackByIndex","ɵɵrepeaterTrackByIdentity","RepeaterMetadata","hasEmptyBlock","ɵɵrepeaterCreate","trackByUsesComponentInstance","emptyTemplateFn","emptyDecls","emptyVars","emptyTagName","emptyAttrsIndex","boundTrackBy","isViewExpensiveToRecreate","OperationsCounter","created","recordCreate","recordDestroy","wasReCreated","collectionLen","LiveCollectionLContainerImpl","operationsCounter","needsIndexUpdate","detachExistingView","updateIndexes","getExistingLViewFromLContainer","ɵɵrepeater","collection","metadataSlotIdx","containerIndex","itemTemplateTNode","isCollectionEmpty","emptyTemplateIndex","lContainerForEmpty","emptyTemplateTNode","existingLView","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","ɵɵelementStart","_locateOrCreateElementNode","ɵɵelementEnd","ɵɵelement","locateOrCreateElementNodeImpl","enableLocateOrCreateElementNodeImpl","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","_locateOrCreateElementContainerNode","ɵɵelementContainerEnd","ɵɵelementContainer","locateOrCreateElementContainerNode","ngContainerSize","enableLocateOrCreateElementContainerNodeImpl","ɵɵgetCurrentView","ɵɵdomProperty","ɵɵsyntheticHostProperty","u","plural","val","floor","abs","localeEn","LOCALE_DATA","registerLocaleData","localeId","extraData","LocaleDataIndex","LocaleId","ExtraData","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","getLocaleCurrencyCode","CurrencyCode","getLocalePluralCase","PluralCase","ng","common","locales","unregisterAllLocaleData","pluralMapping","getPluralCase","DEFAULT_LOCALE_ID","USD_CURRENCY_CODE","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","LOCALE_ID$1","setLocaleId","getLocaleId","changeMask","changeMaskCounter","setMaskBit","hasChange","applyI18n","updateOpCodes","bindingsStartIndex","applyUpdateOpCodes","createNodeWithoutHydration","textOrName","_locateOrCreateNode","locateOrCreateNodeImpl","enableLocateOrCreateI18nNodeImpl","applyCreateOpCodes","createOpCodes","insertInFrontOf","isComment","COMMENT","appendNow","APPEND_EAGERLY","SHIFT","applyMutableOpCodes","mutableOpCodes","rootIdx","rootRNode","textNodeIndex","anchorIdx","elementNodeIndex","commentValue","commentNodeIndex","commentRNode","elementRNode","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","currentIndex","activeCaseIndex","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","nodeOrIcuIndex","icuExpression","bindingValue","resolvedCase","i18nCreateOpCodesToString","opcodes","lines","i18nUpdateOpCodesToString","parser","OpCodeParser","consumeOpCode","consumeString","sanitizationFn","consumeFunction","hasMore","consumeNumber","statements","statement","consumeNumberOrString","opCodeText","icuCreateOpCodesToString","lastRef","consumeNumberStringOrMarker","line","i18nRemoveOpCodesToString","codes","BINDING_REGEXP","ICU_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","MARKER","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","replaceNgsp","attachDebugGetter","debugGetter","enumerable","i18nStartFirstCreatePass","rootTNode","existingTNodeStack","astStack","getTranslationForTemplate","msgParts","i18nParseTextIntoPartsAndICU","part","i18nStartFirstCreatePassProcessTextNode","icuContainerTNode","createTNodeAndAddOpCode","mainBinding","icuNodeIndex","icuStart","isClosing","placeholderNode","existingTNodes","isICU","i18nNodeIdx","hasBinding","generateBindingUpdateOpCodes","i18nAttributesFirstPass","previousElement","previousElementIndex","countBindings","str","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","opCodes","removeInnerTemplateTranslation","inTemplate","tagMatched","exec","search","bindingMask","addUpdateIcuSwitch","valueArr","nestedIcus","caseAst","parseIcuCase","addUpdateIcuUpdate","parseICUBlock","pattern","icuType","pos","prevPos","braceStack","braces","lastIndex","block","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","elementNode","addRemoveNode","isNestedIcu","nestedIcuIndex","addRemoveNestedIcu","appendToParentIdx","createAtIdx","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","i18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nStart","messageIndex","sameViewParentTNode","ɵɵi18nEnd","ɵɵi18n","ɵɵi18nAttributes","ɵɵi18nExp","ɵɵi18nApply","ɵɵi18nPostprocess","ɵɵlistener","listenerInternal","ɵɵsyntheticHostListener","processOutputs","hasCoalescedDomEvent","outputConfig","hostDirectiveOutputConfig","ɵɵnextContext","level","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ɵɵprojectionDef","numProjectionSlots","projectionHeads","tails","componentChild","ɵɵprojection","selectorIndex","fallbackTemplateFn","fallbackDecls","fallbackVars","fallbackIndex","componentHostNode","insertFallbackContent","fallbackTNode","fallbackLContainer","fallbackLView","ɵɵcontentQuery","ɵɵviewQuery","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵcontentQuerySignal","ɵɵviewQuerySignal","ɵɵqueryAdvance","indexOffset","ɵɵreference","toTStylingRange","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrev","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","insertTStylingBinding","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","hasTemplateBindings","previousNode","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","cursor","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","getLastParsedKey","getLastParsedValue","parseClassName","resetParserState","parseClassNameNext","consumeWhitespace","consumeClassToken","parseStyle","parseStyleNext","consumeStyleKey","consumeSeparator","consumeStyleValue","ch","separator","malformedStyleError","fromCharCode","ch1","ch2","ch3","lastChIndex","consumeQuotedText","quoteCharCode","expecting","ɵɵstyleProp","suffix","checkStylingProperty","ɵɵclassProp","ɵɵstyleMap","checkStylingMap","styleKeyValueArraySet","styleStringParser","keyValueArray","ɵɵclassMap","classKeyValueArraySet","classStringParser","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","updateStylingMap","toStylingKeyValueArray","isHostBindings","wrapInStaticStylingKey","stylingKey","isFirstStylingInstructionInTemplate","collectStylingFromDirectives","collectStylingFromTAttrs","isFirstStylingInstructionInHostBinding","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","currentDirective","desiredMarker","currentMarker","styleKeyValueArray","unwrappedValue","stringKey","oldKeyValueArray","newKeyValueArray","oldIndex","oldKey","setKey","tRange","higherPriorityValue","findStylingValue","isStylingValuePresent","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","ɵɵtext","textNative","_locateOrCreateTextNode","locateOrCreateTextNodeImpl","enableLocateOrCreateTextNodeImpl","interpolationV","isBindingUpdated","interpolation1","v0","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","ɵɵtextInterpolate","ɵɵtextInterpolate1","interpolated","textBindingInternal","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵtwoWayProperty","ɵɵtwoWayBindingSet","canWrite","ɵɵtwoWayListener","UNINITIALIZED_LET","ɵɵdeclareLet","ɵɵstoreLet","ɵɵreadContextLet","ɵɵattachSourceLocations","templatePath","locations","offset","column","attributeValue","ɵɵinterpolate","ɵɵinterpolate1","ɵɵinterpolate2","ɵɵinterpolate3","ɵɵinterpolate4","ɵɵinterpolate5","ɵɵinterpolate6","ɵɵinterpolate7","ɵɵinterpolate8","ɵɵinterpolateV","viewProviders","resolveProvider","lInjectablesBlueprint","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","contextIndex","providerIsTypeProvider","providerIsClassProvider","classToken","existingCallbacksIndex","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","factoryFn","f","ɵɵProvidersFeature","processProvidersFn","ɵɵExternalStylesFeature","encapsulationId","urls","encodeURIComponent","ɵɵsetComponentScope","ɵɵsetNgModuleScope","convertToTypeArray","flattenValues","maybeUnwrapModuleWithProviders","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","ɵɵpureFunction3","pureFunction3Internal","ɵɵpureFunction4","pureFunction4Internal","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","pureFunctionVInternal","getPureFunctionReturnValue","returnValueIndex","lastReturnValue","bindingRoot","ɵɵpipe","pipeName","pipeFactory","previousInjectorProfilerContext","pipeInstance","getMultipleMatchingPipesMessage","getPipeNotFoundErrorMessage","hostIsStandalone","componentInfoMessage","verifyMessage","ɵɵpipeBind1","isPure","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","ɵɵtemplateRefExtractor","ɵɵgetComponentDepsFactory","ɵsetClassDebugInfo","ɵɵgetReplaceMetadataURL","timestamp","base","href","ɵɵreplaceMetadata","applyMetadata","namespaces","locals","importMeta","newDef","oldDef","mergeWithExistingDefinition","trackedViews","recreateMatchingLViews","replacement","assign","recreateLView","clearRendererCache","componentReplaced","recreate","newHost","cloneNode","newTView","newLView","replaceLViewInTree","resetProjectionState","executeWithInvalidateFallback","toLog","hot","send","oldLView","angularCoreEnv","jitOptions","setJitOptions","defaultEncapsulation","preserveWhitespaces","getJitOptions","resetJitOptions","moduleQueue","enqueueModuleForDelayedScoping","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","NgModule","ngInjectorDef","verifySemanticsOfNgModuleDef","compileInjector","generateStandaloneInDeclarationsError","importingModule","verifiedNgModule","errors","unwrapModuleWithProvidersImports","modOrStandaloneCmpt","verifySemanticsOfNgModuleImport","verifyDeclarationsHaveDefinitions","verifyDirectivesHaveSelector","declarationType","verifyNotStandalone","combinedDeclarations","computeCombinedExports","verifyExportsAreDeclaredOrReExported","verifyDeclarationIsUnique","getAnnotation","mod","verifyCorrectBootstrapType","verifyComponentIsPartOfNgModule","lastIndexOf","suppressErrors","existingModule","typeOrWithProviders","collect","__annotations__","readAnnotation","decorator","resetCompiledComponents","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","dir","compilationDepth","compileComponent","ngComponentDef","addDirectiveFactoryDef","directiveMetadata","typeSourceSpan","createParseSourceSpan","animations","interpolation","usesInheritance","addDirectiveDefToUndecoratedParents","getStandaloneDefFunctions","hasSelectorScope","rawDep","p","compileDirective","ngDirectiveDef","getDirectiveMetadata","sourceMapUrl","facade","Directive","extendsDirectlyFromObject","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","extractExportAs","viewQueries","isViewQuery","objPrototype","shouldAddAbstractDirective","convertToR3QueryPredicate","splitByComma","convertToR3QueryMetadata","ann","descendants","static","emitDistinctChangesOnly","isQueryAnn","queriesMeta","isInputAnnotation","piece","LIFECYCLE_HOOKS","hookName","metadataName","compilePipe","ngPipeDef","getPipeMetadata","Pipe","Component","c","Input","arg","alias","Output","HostBinding","hostPropertyName","HostListener","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","moduleDef","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Compiler_Factory","COMPILER_OPTIONS","CompilerFactory","NgZoneChangeDetectionScheduler","applicationRef","applicationErrorHandler","_onMicrotaskEmptySubscription","initialize","runningTick","NgZoneChangeDetectionScheduler_Factory","PROVIDED_NG_ZONE","internalProvideZoneChangeDetection","ngZoneFactory","ignoreChangesOutsideZone","getNgZoneOptions","ngZoneChangeDetectionScheduler","ZoneStablePendingTask","userErrorHandler","provideZoneChangeDetection","zoneProviders","ngZoneOptions","eventCoalescing","runCoalescing","ZoneStablePendingTask_Factory","CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT","consecutiveMicrotaskNotifications","stackFromLastFewNotifications","trackMicrotaskNotificationForDebugging","ChangeDetectionSchedulerImpl","taskService","disableScheduling","zoneIsDefined","schedulerTickApplyArgs","subscriptions","angularZoneId","cancelScheduledCallback","useMicrotaskScheduler","pendingRenderTaskId","force","shouldScheduleTick","scheduleCallback","ChangeDetectionSchedulerImpl_Factory","provideZonelessChangeDetection","getGlobalLocale","ngI18nClosureMode","goog","LOCALE","$localize","LOCALE_ID","DEFAULT_CURRENCY_CODE","TRANSLATIONS","TRANSLATIONS_FORMAT","MissingTranslationStrategy","DebugEventListener","asNativeElements","debugEls","DebugNode","nativeNode","DebugElement","references","copyDomProperties","collectPropertyBindings","tNodeAttrs","lowercaseTNodeAttrs","baseVal","getDebugNode","query","queryAll","_queryAll","queryAllNodes","triggerEventHandler","eventObj","invokedListeners","unwrappedListener","NodePrototype","descriptors","getOwnPropertyDescriptors","isPrimitiveValue","elementsOnly","_queryNodeChildren","_queryNativeNodeDescendants","rootNativeNode","_addQueryMatch","nodeOrContainer","_queryNodeChildrenInContainer","nextLView","nextTNode","childView","debugNode","bindingIndexes","metadataParts","NG_DEBUG_PROPERTY"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/core/fesm2022/debug_node.mjs"],"sourcesContent":["/**\r\n * @license Angular v20.0.6\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { attachInjectFlag, _global, ɵɵdefineInjectable as __defineInjectable, ɵɵdefineInjector as __defineInjector, ɵɵinject as __inject, ɵɵinvalidFactoryDep as __invalidFactoryDep, resolveForwardRef, newArray, EMPTY_OBJ, assertString, assertFirstCreatePass, assertDefined, assertNotEqual, FLAGS, assertEqual, isInCheckNoChangesMode, PREORDER_HOOK_FLAGS, throwError, assertNumber, assertGreaterThan, HEADER_OFFSET, DECLARATION_VIEW, NG_FACTORY_DEF, isForwardRef, getFactoryDef, assertIndexInRange, assertTNodeForLView, enterDI, runInInjectorProfilerContext, getCurrentTNode, getLView, emitInjectorToCreateInstanceEvent, emitInstanceCreatedByInjectorEvent, throwProviderNotFoundError, leaveDI, assertNodeInjector, throwCyclicDependencyError, stringifyForError, setInjectorProfilerContext, setInjectImplementation, assertDirectiveDef, NG_ELEMENT_ID, convertToBitFlags, isRootView, T_HOST, TVIEW, injectRootLimpMode, isComponentDef, EMBEDDED_VIEW_INJECTOR, INJECTOR$1 as INJECTOR, DECLARATION_COMPONENT_VIEW, isComponentHost, RuntimeError, NG_PROV_DEF, getClosureSafeProperty, getNativeByTNode, flatten, arrayEquals, ID, isLView, assertDomNode, unwrapRNode, getComponentLViewByIndex, CONTEXT, EMPTY_ARRAY, assertLView, HOST, CHILD_HEAD, NEXT, isLContainer, getLViewParent, Injector, CLEANUP, getComponentDef, getDirectiveDef, InjectionToken, inject, isContentQueryHost, setCurrentQueryIndex, XSS_SECURITY_URL, renderStringify, ENVIRONMENT, makeEnvironmentProviders, formatRuntimeError, resetPreOrderHookFlags, PARENT, RENDERER, HYDRATION, CHILD_TAIL, assertSame, assertFirstUpdatePass, getSelectedIndex, getTView, assertIndexInDeclRange, setSelectedIndex, assertNotSame, setCurrentDirectiveIndex, INTERNAL_APPLICATION_ERROR_HANDLER, stringify, getCurrentDirectiveIndex, unwrapLView, isCreationMode, assertNotReactive, enterView, QUERIES, leaveView, assertLContainer, DECLARATION_LCONTAINER, MOVED_VIEWS, isDestroyed, REACTIVE_TEMPLATE_CONSUMER, ON_DESTROY_HOOKS, assertFunction, EFFECTS, assertProjectionSlots, NATIVE, assertParentView, CONTAINER_HEADER_OFFSET, AFTER_RENDER_SEQUENCES_TO_ADD, markAncestorsForTraversal, markViewForRefresh, setIsRefreshingViews, isExhaustiveCheckNoChanges, requiresRefreshOrTraversal, setIsInCheckNoChangesMode, CheckNoChangesMode, setBindingIndex, EFFECTS_TO_SCHEDULE, viewAttachedToChangeDetector, setBindingRootForHostBindings, isRefreshingViews, removeFromArray, addToArray, updateAncestorTraversalFlagsOnAttach, storeLViewOnDestroy, VIEW_REFS, assertGreaterThanOrEqual, isInI18nBlock, assertTNodeForTView, setCurrentTNode, getCurrentParentTNode, getCurrentTNodePlaceholderOk, isCurrentTNodeParent, isInSkipHydrationBlock as isInSkipHydrationBlock$1, assertTNode, assertTIcu, assertNumberInRange, DEHYDRATED_VIEWS, getNgModuleDef, getPipeDef as getPipeDef$1, getNgModuleDefOrThrow, isStandalone, concatStringsWithSpace, assertInjectImplementationNotEqual, emitInjectEvent, getConstant, assertLessThan, getOrCreateTViewCleanup, getOrCreateLViewCleanup, isDirectiveHost, assertNotDefined, nextBindingIndex, getSelectedTNode, getDirectiveDefOrThrow, getTNode, assertComponentType, debugStringifyTypeForError, ChangeDetectionScheduler, EnvironmentInjector, SVG_NAMESPACE, MATH_ML_NAMESPACE, viewAttachedToContainer, storeCleanupWithContext, signal, createInjectorWithoutInjectorInstances, R3Injector, getNullInjector, internalImportProvidersFrom, initNgDevMode, fillProperties, wasLastNodeCreated, lastNodeWasCreated, getBindingsEnabled, isInInjectionContext, DestroyRef, PendingTasksInternal, noop, ErrorHandler, assertNotInReactiveContext, assertInInjectionContext, ViewContext, removeLViewOnDestroy, walkUpViews, getNativeByIndex, assertElement, arrayInsert2, arraySplice, setInjectorProfiler, NullInjector, ENVIRONMENT_INITIALIZER, INJECTOR_DEF_TYPES, walkProviderTree, getInjectorDef, deepForEach, isTypeProvider, isSignal, runInInjectionContext, ZONELESS_ENABLED, EffectScheduler, PendingTasks, getBindingIndex, getElementDepthCount, increaseElementDepthCount, setCurrentTNodeAsNotParent, assertHasParent, isSkipHydrationRootTNode, leaveSkipHydrationBlock, decreaseElementDepthCount, getNamespace, enterSkipHydrationBlock, getCurrentDirectiveDef, assertIndexInExpandoRange, assertOneOf, setInI18nBlock, nextContextImpl, getCurrentQueryIndex, getContextLView, load, keyValueArrayIndexOf, keyValueArraySet, keyValueArrayGet, incrementBindingIndex, isWritableSignal, store, providerToFactory, emitProviderConfiguredEvent, isClassProvider, getBindingRoot, NG_COMP_DEF, ɵɵresetView as __resetView, ɵɵnamespaceHTML as __namespaceHTML, ɵɵnamespaceMathML as __namespaceMathML, ɵɵnamespaceSVG as __namespaceSVG, ɵɵenableBindings as __enableBindings, ɵɵdisableBindings as __disableBindings, ɵɵrestoreView as __restoreView, forwardRef, NG_MOD_DEF, NG_INJ_DEF, NG_DIR_DEF, NG_PIPE_DEF, ZONELESS_SCHEDULER_DISABLED, SCHEDULE_IN_ROOT_ZONE, PROVIDED_ZONELESS, getNativeByTNodeOrNull } from './root_effect_scheduler.mjs';\r\nimport { setActiveConsumer, SIGNAL, consumerDestroy, REACTIVE_NODE, consumerPollProducersForChange, consumerBeforeComputation, getActiveConsumer, consumerAfterComputation, createComputed, setThrowInvalidWriteToSignalError } from './signal.mjs';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { setActiveConsumer as setActiveConsumer$1 } from '@angular/core/primitives/signals';\r\nimport { map } from 'rxjs/operators';\r\nimport { Attribute as Attribute$1 } from './attribute.mjs';\r\n\r\n/**\r\n * Convince closure compiler that the wrapped function has no side-effects.\r\n *\r\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\r\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\r\n * It is important that the return value for the `noSideEffects` function be assigned\r\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\r\n * compiler.\r\n */\r\nfunction noSideEffects(fn) {\r\n    return { toString: fn }.toString();\r\n}\r\n\r\nconst ANNOTATIONS = '__annotations__';\r\nconst PARAMETERS = '__parameters__';\r\nconst PROP_METADATA = '__prop__metadata__';\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\r\n    return noSideEffects(() => {\r\n        const metaCtor = makeMetadataCtor(props);\r\n        function DecoratorFactory(...args) {\r\n            if (this instanceof DecoratorFactory) {\r\n                metaCtor.call(this, ...args);\r\n                return this;\r\n            }\r\n            const annotationInstance = new DecoratorFactory(...args);\r\n            return function TypeDecorator(cls) {\r\n                if (typeFn)\r\n                    typeFn(cls, ...args);\r\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n                // prevents the property is copied during subclassing.\r\n                const annotations = cls.hasOwnProperty(ANNOTATIONS)\r\n                    ? cls[ANNOTATIONS]\r\n                    : Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n                annotations.push(annotationInstance);\r\n                return cls;\r\n            };\r\n        }\r\n        if (parentClass) {\r\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n        }\r\n        DecoratorFactory.prototype.ngMetadataName = name;\r\n        DecoratorFactory.annotationCls = DecoratorFactory;\r\n        return DecoratorFactory;\r\n    });\r\n}\r\nfunction makeMetadataCtor(props) {\r\n    return function ctor(...args) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction makeParamDecorator(name, props, parentClass) {\r\n    return noSideEffects(() => {\r\n        const metaCtor = makeMetadataCtor(props);\r\n        function ParamDecoratorFactory(...args) {\r\n            if (this instanceof ParamDecoratorFactory) {\r\n                metaCtor.apply(this, args);\r\n                return this;\r\n            }\r\n            const annotationInstance = new ParamDecoratorFactory(...args);\r\n            ParamDecorator.annotation = annotationInstance;\r\n            return ParamDecorator;\r\n            function ParamDecorator(cls, unusedKey, index) {\r\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n                // prevents the property is copied during subclassing.\r\n                const parameters = cls.hasOwnProperty(PARAMETERS)\r\n                    ? cls[PARAMETERS]\r\n                    : Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n                // there might be gaps if some in between parameters do not have annotations.\r\n                // we pad with nulls.\r\n                while (parameters.length <= index) {\r\n                    parameters.push(null);\r\n                }\r\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n                return cls;\r\n            }\r\n        }\r\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\r\n        return ParamDecoratorFactory;\r\n    });\r\n}\r\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\r\n    return noSideEffects(() => {\r\n        const metaCtor = makeMetadataCtor(props);\r\n        function PropDecoratorFactory(...args) {\r\n            if (this instanceof PropDecoratorFactory) {\r\n                metaCtor.apply(this, args);\r\n                return this;\r\n            }\r\n            const decoratorInstance = new PropDecoratorFactory(...args);\r\n            function PropDecorator(target, name) {\r\n                // target is undefined with standard decorators. This case is not supported and will throw\r\n                // if this decorator is used in JIT mode with standard decorators.\r\n                if (target === undefined) {\r\n                    throw new Error('Standard Angular field decorators are not supported in JIT mode.');\r\n                }\r\n                const constructor = target.constructor;\r\n                // Use of Object.defineProperty is important because it creates a non-enumerable property\r\n                // which prevents the property from being copied during subclassing.\r\n                const meta = constructor.hasOwnProperty(PROP_METADATA)\r\n                    ? constructor[PROP_METADATA]\r\n                    : Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n                meta[name] = (meta.hasOwnProperty(name) && meta[name]) || [];\r\n                meta[name].unshift(decoratorInstance);\r\n            }\r\n            return PropDecorator;\r\n        }\r\n        if (parentClass) {\r\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n        }\r\n        PropDecoratorFactory.prototype.ngMetadataName = name;\r\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\r\n        return PropDecoratorFactory;\r\n    });\r\n}\r\n\r\n/**\r\n * Inject decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Inject = attachInjectFlag(\r\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\r\nmakeParamDecorator('Inject', (token) => ({ token })), -1 /* DecoratorFlags.Inject */);\r\n/**\r\n * Optional decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Optional = \r\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\r\n// tslint:disable-next-line: no-toplevel-property-access\r\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\r\n/**\r\n * Self decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Self = \r\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\r\n// tslint:disable-next-line: no-toplevel-property-access\r\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\r\n/**\r\n * `SkipSelf` decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst SkipSelf = \r\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\r\n// tslint:disable-next-line: no-toplevel-property-access\r\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\r\n/**\r\n * Host decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Host = \r\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\r\n// tslint:disable-next-line: no-toplevel-property-access\r\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\r\n\r\nfunction getCompilerFacade(request) {\r\n    const globalNg = _global['ng'];\r\n    if (globalNg && globalNg.ɵcompilerFacade) {\r\n        return globalNg.ɵcompilerFacade;\r\n    }\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        // Log the type as an error so that a developer can easily navigate to the type from the\r\n        // console.\r\n        console.error(`JIT compilation failed for ${request.kind}`, request.type);\r\n        let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\r\n        if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\r\n            message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\r\n            message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\r\n            message += '\\n';\r\n            message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\r\n        }\r\n        else {\r\n            message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\r\n        }\r\n        message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\r\n        message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\r\n        throw new Error(message);\r\n    }\r\n    else {\r\n        throw new Error('JIT compiler unavailable');\r\n    }\r\n}\r\n\r\n/**\r\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\r\n *\r\n * This should be kept up to date with the public exports of @angular/core.\r\n */\r\nconst angularCoreDiEnv = {\r\n    'ɵɵdefineInjectable': __defineInjectable,\r\n    'ɵɵdefineInjector': __defineInjector,\r\n    'ɵɵinject': __inject,\r\n    'ɵɵinvalidFactoryDep': __invalidFactoryDep,\r\n    'resolveForwardRef': resolveForwardRef,\r\n};\r\n\r\n/**\r\n * @description\r\n *\r\n * Represents a type that a Component or other object is instances of.\r\n *\r\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\r\n * the `MyCustomComponent` constructor function.\r\n *\r\n * @publicApi\r\n */\r\nconst Type = Function;\r\nfunction isType(v) {\r\n    return typeof v === 'function';\r\n}\r\n\r\n/*\r\n * #########################\r\n * Attention: These Regular expressions have to hold even if the code is minified!\r\n * ##########################\r\n */\r\n/**\r\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\r\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\r\n * it intends to capture the pattern where existing constructors have been downleveled from\r\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\r\n *\r\n * ```ts\r\n *   function MyClass() {\r\n *     var _this = _super.apply(this, arguments) || this;\r\n * ```\r\n *\r\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\r\n * ```ts\r\n *   function MyClass() {\r\n *     var _this = _super.apply(this, __spread(arguments)) || this;\r\n * ```\r\n *\r\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\r\n * ```ts\r\n *   function MyClass() {\r\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\r\n * ```\r\n *\r\n * More details can be found in: https://github.com/angular/angular/issues/38453.\r\n */\r\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\r\n/** Regular expression that detects ES2015 classes which extend from other classes. */\r\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\r\n/**\r\n * Regular expression that detects ES2015 classes which extend from other classes and\r\n * have an explicit constructor defined.\r\n */\r\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\r\n/**\r\n * Regular expression that detects ES2015 classes which extend from other classes\r\n * and inherit a constructor.\r\n */\r\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\r\n/**\r\n * Determine whether a stringified type is a class which delegates its constructor\r\n * to its parent.\r\n *\r\n * This is not trivial since compiled code can actually contain a constructor function\r\n * even if the original source code did not. For instance, when the child class contains\r\n * an initialized instance property.\r\n */\r\nfunction isDelegateCtor(typeStr) {\r\n    return (ES5_DELEGATE_CTOR.test(typeStr) ||\r\n        ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\r\n        (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr)));\r\n}\r\nclass ReflectionCapabilities {\r\n    _reflect;\r\n    constructor(reflect) {\r\n        this._reflect = reflect || _global['Reflect'];\r\n    }\r\n    factory(t) {\r\n        return (...args) => new t(...args);\r\n    }\r\n    /** @internal */\r\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\r\n        let result;\r\n        if (typeof paramTypes === 'undefined') {\r\n            result = newArray(paramAnnotations.length);\r\n        }\r\n        else {\r\n            result = newArray(paramTypes.length);\r\n        }\r\n        for (let i = 0; i < result.length; i++) {\r\n            // TS outputs Object for parameters without types, while Traceur omits\r\n            // the annotations. For now we preserve the Traceur behavior to aid\r\n            // migration, but this can be revisited.\r\n            if (typeof paramTypes === 'undefined') {\r\n                result[i] = [];\r\n            }\r\n            else if (paramTypes[i] && paramTypes[i] != Object) {\r\n                result[i] = [paramTypes[i]];\r\n            }\r\n            else {\r\n                result[i] = [];\r\n            }\r\n            if (paramAnnotations && paramAnnotations[i] != null) {\r\n                result[i] = result[i].concat(paramAnnotations[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _ownParameters(type, parentCtor) {\r\n        const typeStr = type.toString();\r\n        // If we have no decorators, we only have function.length as metadata.\r\n        // In that case, to detect whether a child class declared an own constructor or not,\r\n        // we need to look inside of that constructor to check whether it is\r\n        // just calling the parent.\r\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\r\n        // that sets 'design:paramtypes' to []\r\n        // if a class inherits from another class but has no ctor declared itself.\r\n        if (isDelegateCtor(typeStr)) {\r\n            return null;\r\n        }\r\n        // Prefer the direct API.\r\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\r\n            return type.parameters;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        const tsickleCtorParams = type.ctorParameters;\r\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\r\n            // Newer tsickle uses a function closure\r\n            // Retain the non-function case for compatibility with older tsickle\r\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\r\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\r\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\r\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\r\n        const paramTypes = this._reflect &&\r\n            this._reflect.getOwnMetadata &&\r\n            this._reflect.getOwnMetadata('design:paramtypes', type);\r\n        if (paramTypes || paramAnnotations) {\r\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\r\n        }\r\n        // If a class has no decorators, at least create metadata\r\n        // based on function.length.\r\n        // Note: We know that this is a real constructor as we checked\r\n        // the content of the constructor above.\r\n        return newArray(type.length);\r\n    }\r\n    parameters(type) {\r\n        // Note: only report metadata if we have at least one class decorator\r\n        // to stay in sync with the static reflector.\r\n        if (!isType(type)) {\r\n            return [];\r\n        }\r\n        const parentCtor = getParentCtor(type);\r\n        let parameters = this._ownParameters(type, parentCtor);\r\n        if (!parameters && parentCtor !== Object) {\r\n            parameters = this.parameters(parentCtor);\r\n        }\r\n        return parameters || [];\r\n    }\r\n    _ownAnnotations(typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\r\n            let annotations = typeOrFunc.annotations;\r\n            if (typeof annotations === 'function' && annotations.annotations) {\r\n                annotations = annotations.annotations;\r\n            }\r\n            return annotations;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\r\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\r\n            return typeOrFunc[ANNOTATIONS];\r\n        }\r\n        return null;\r\n    }\r\n    annotations(typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return [];\r\n        }\r\n        const parentCtor = getParentCtor(typeOrFunc);\r\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\r\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\r\n        return parentAnnotations.concat(ownAnnotations);\r\n    }\r\n    _ownPropMetadata(typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if (typeOrFunc.propMetadata &&\r\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\r\n            let propMetadata = typeOrFunc.propMetadata;\r\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\r\n                propMetadata = propMetadata.propMetadata;\r\n            }\r\n            return propMetadata;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if (typeOrFunc.propDecorators &&\r\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\r\n            const propDecorators = typeOrFunc.propDecorators;\r\n            const propMetadata = {};\r\n            Object.keys(propDecorators).forEach((prop) => {\r\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\r\n            });\r\n            return propMetadata;\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\r\n            return typeOrFunc[PROP_METADATA];\r\n        }\r\n        return null;\r\n    }\r\n    propMetadata(typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return {};\r\n        }\r\n        const parentCtor = getParentCtor(typeOrFunc);\r\n        const propMetadata = {};\r\n        if (parentCtor !== Object) {\r\n            const parentPropMetadata = this.propMetadata(parentCtor);\r\n            Object.keys(parentPropMetadata).forEach((propName) => {\r\n                propMetadata[propName] = parentPropMetadata[propName];\r\n            });\r\n        }\r\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\r\n        if (ownPropMetadata) {\r\n            Object.keys(ownPropMetadata).forEach((propName) => {\r\n                const decorators = [];\r\n                if (propMetadata.hasOwnProperty(propName)) {\r\n                    decorators.push(...propMetadata[propName]);\r\n                }\r\n                decorators.push(...ownPropMetadata[propName]);\r\n                propMetadata[propName] = decorators;\r\n            });\r\n        }\r\n        return propMetadata;\r\n    }\r\n    ownPropMetadata(typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return {};\r\n        }\r\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\r\n    }\r\n    hasLifecycleHook(type, lcProperty) {\r\n        return type instanceof Type && lcProperty in type.prototype;\r\n    }\r\n}\r\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\r\n    if (!decoratorInvocations) {\r\n        return [];\r\n    }\r\n    return decoratorInvocations.map((decoratorInvocation) => {\r\n        const decoratorType = decoratorInvocation.type;\r\n        const annotationCls = decoratorType.annotationCls;\r\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\r\n        return new annotationCls(...annotationArgs);\r\n    });\r\n}\r\nfunction getParentCtor(ctor) {\r\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\r\n    const parentCtor = parentProto ? parentProto.constructor : null;\r\n    // Note: We always use `Object` as the null value\r\n    // to simplify checking later on.\r\n    return parentCtor || Object;\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single\r\n * property on a directive instance. Passed as a value in a\r\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\r\n *\r\n * @see {@link OnChanges}\r\n *\r\n * @publicApi\r\n */\r\nclass SimpleChange {\r\n    previousValue;\r\n    currentValue;\r\n    firstChange;\r\n    constructor(previousValue, currentValue, firstChange) {\r\n        this.previousValue = previousValue;\r\n        this.currentValue = currentValue;\r\n        this.firstChange = firstChange;\r\n    }\r\n    /**\r\n     * Check whether the new value is the first value assigned.\r\n     */\r\n    isFirstChange() {\r\n        return this.firstChange;\r\n    }\r\n}\r\n\r\nfunction applyValueToInputField(instance, inputSignalNode, privateName, value) {\r\n    if (inputSignalNode !== null) {\r\n        inputSignalNode.applyValueToInputSignal(inputSignalNode, value);\r\n    }\r\n    else {\r\n        instance[privateName] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\r\n * lifecycle hook, so it should be included in any component that implements\r\n * that hook.\r\n *\r\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\r\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\r\n * inherited properties will not be propagated to the ngOnChanges lifecycle\r\n * hook.\r\n *\r\n * Example usage:\r\n *\r\n * ```ts\r\n * static ɵcmp = defineComponent({\r\n *   ...\r\n *   inputs: {name: 'publicName'},\r\n *   features: [NgOnChangesFeature]\r\n * });\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\r\nconst ɵɵNgOnChangesFeature = /* @__PURE__ */ (() => {\r\n    const ɵɵNgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;\r\n    // This option ensures that the ngOnChanges lifecycle hook will be inherited\r\n    // from superclasses (in InheritDefinitionFeature).\r\n    /** @nocollapse */\r\n    ɵɵNgOnChangesFeatureImpl.ngInherit = true;\r\n    return ɵɵNgOnChangesFeatureImpl;\r\n})();\r\nfunction NgOnChangesFeatureImpl(definition) {\r\n    if (definition.type.prototype.ngOnChanges) {\r\n        definition.setInput = ngOnChangesSetInput;\r\n    }\r\n    return rememberChangeHistoryAndInvokeOnChangesHook;\r\n}\r\n/**\r\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\r\n * `ngOnChanges`.\r\n *\r\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\r\n * found it invokes `ngOnChanges` on the component instance.\r\n *\r\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\r\n *     it is guaranteed to be called with component instance.\r\n */\r\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\r\n    const simpleChangesStore = getSimpleChangesStore(this);\r\n    const current = simpleChangesStore?.current;\r\n    if (current) {\r\n        const previous = simpleChangesStore.previous;\r\n        if (previous === EMPTY_OBJ) {\r\n            simpleChangesStore.previous = current;\r\n        }\r\n        else {\r\n            // New changes are copied to the previous store, so that we don't lose history for inputs\r\n            // which were not changed this time\r\n            for (let key in current) {\r\n                previous[key] = current[key];\r\n            }\r\n        }\r\n        simpleChangesStore.current = null;\r\n        this.ngOnChanges(current);\r\n    }\r\n}\r\nfunction ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {\r\n    const declaredName = this.declaredInputs[publicName];\r\n    ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\r\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\r\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\r\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\r\n    const previous = simpleChangesStore.previous;\r\n    const previousChange = previous[declaredName];\r\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\r\n    applyValueToInputField(instance, inputSignalNode, privateName, value);\r\n}\r\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\r\nfunction getSimpleChangesStore(instance) {\r\n    return instance[SIMPLE_CHANGES_STORE] || null;\r\n}\r\nfunction setSimpleChangesStore(instance, store) {\r\n    return (instance[SIMPLE_CHANGES_STORE] = store);\r\n}\r\n\r\nconst profilerCallbacks = [];\r\nconst NOOP_PROFILER_REMOVAL = () => { };\r\nfunction removeProfiler(profiler) {\r\n    const profilerIdx = profilerCallbacks.indexOf(profiler);\r\n    if (profilerIdx !== -1) {\r\n        profilerCallbacks.splice(profilerIdx, 1);\r\n    }\r\n}\r\n/**\r\n * Adds a callback function which will be invoked before and after performing certain actions at\r\n * runtime (for example, before and after running change detection). Multiple profiler callbacks can be set:\r\n * in this case profiling events are reported to every registered callback.\r\n *\r\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\r\n * The contract of the function might be changed in any release and/or the function can be removed\r\n * completely.\r\n *\r\n * @param profiler function provided by the caller or null value to disable all profilers.\r\n * @returns a cleanup function that, when invoked, removes a given profiler callback.\r\n */\r\nfunction setProfiler(profiler) {\r\n    if (profiler !== null) {\r\n        if (!profilerCallbacks.includes(profiler)) {\r\n            profilerCallbacks.push(profiler);\r\n        }\r\n        return () => removeProfiler(profiler);\r\n    }\r\n    else {\r\n        profilerCallbacks.length = 0;\r\n        return NOOP_PROFILER_REMOVAL;\r\n    }\r\n}\r\n/**\r\n * Profiler function which wraps user code executed by the runtime.\r\n *\r\n * @param event ProfilerEvent corresponding to the execution context\r\n * @param instance component instance\r\n * @param eventFn function associated with event.\r\n *    For example a template function, lifecycle hook, or output listener.\r\n *    The value depends on the execution context\r\n */\r\nconst profiler = function (event, instance = null, eventFn) {\r\n    for (let i = 0; i < profilerCallbacks.length; i++) {\r\n        const profilerCallback = profilerCallbacks[i];\r\n        profilerCallback(event, instance, eventFn);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\r\n *\r\n * Must be run *only* on the first template pass.\r\n *\r\n * Sets up the pre-order hooks on the provided `tView`,\r\n * see {@link HookData} for details about the data structure.\r\n *\r\n * @param directiveIndex The index of the directive in LView\r\n * @param directiveDef The definition containing the hooks to setup in tView\r\n * @param tView The current TView\r\n */\r\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;\r\n    if (ngOnChanges) {\r\n        const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\r\n        (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);\r\n        (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);\r\n    }\r\n    if (ngOnInit) {\r\n        (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);\r\n    }\r\n    if (ngDoCheck) {\r\n        (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);\r\n        (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);\r\n    }\r\n}\r\n/**\r\n *\r\n * Loops through the directives on the provided `tNode` and queues hooks to be\r\n * run that are not initialization hooks.\r\n *\r\n * Should be executed during `elementEnd()` and similar to\r\n * preserve hook execution order. Content, view, and destroy hooks for projected\r\n * components and directives must be called *before* their hosts.\r\n *\r\n * Sets up the content, view, and destroy hooks on the provided `tView`,\r\n * see {@link HookData} for details about the data structure.\r\n *\r\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\r\n * separately at `elementStart`.\r\n *\r\n * @param tView The current TView\r\n * @param tNode The TNode whose directives are to be searched for hooks to queue\r\n */\r\nfunction registerPostOrderHooks(tView, tNode) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\r\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\r\n    // hooks for projected components and directives must be called *before* their hosts.\r\n    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\r\n        const directiveDef = tView.data[i];\r\n        ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\r\n        const lifecycleHooks = directiveDef.type.prototype;\r\n        const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy, } = lifecycleHooks;\r\n        if (ngAfterContentInit) {\r\n            (tView.contentHooks ??= []).push(-i, ngAfterContentInit);\r\n        }\r\n        if (ngAfterContentChecked) {\r\n            (tView.contentHooks ??= []).push(i, ngAfterContentChecked);\r\n            (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);\r\n        }\r\n        if (ngAfterViewInit) {\r\n            (tView.viewHooks ??= []).push(-i, ngAfterViewInit);\r\n        }\r\n        if (ngAfterViewChecked) {\r\n            (tView.viewHooks ??= []).push(i, ngAfterViewChecked);\r\n            (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);\r\n        }\r\n        if (ngOnDestroy != null) {\r\n            (tView.destroyHooks ??= []).push(i, ngOnDestroy);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\r\n *\r\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\r\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\r\n * some recursively trigger a change detection cycle.\r\n * To solve that, it is required to track the state of the execution of these init hooks.\r\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\r\n * and the index within that phase. They can be seen as a cursor in the following structure:\r\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\r\n * They are stored as flags in LView[FLAGS].\r\n *\r\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\r\n * To be able to pause and resume their execution, we also need some state about the hook's array\r\n * that is being processed:\r\n * - the index of the next hook to be executed\r\n * - the number of init hooks already found in the processed part of the  array\r\n * They are stored as flags in LView[PREORDER_HOOK_FLAGS].\r\n */\r\n/**\r\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\r\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\r\n * / write of the init-hooks related flags.\r\n * @param lView The LView where hooks are defined\r\n * @param hooks Hooks to be run\r\n * @param nodeIndex 3 cases depending on the value:\r\n * - undefined: all hooks from the array should be executed (post-order case)\r\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\r\n * flushing the remaining hooks)\r\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\r\n * case, when executing select(number))\r\n */\r\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\r\n    callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\r\n}\r\n/**\r\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\r\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\r\n * @param lView The LView where hooks are defined\r\n * @param hooks Hooks to be run\r\n * @param initPhase A phase for which hooks should be run\r\n * @param nodeIndex 3 cases depending on the value:\r\n * - undefined: all hooks from the array should be executed (post-order case)\r\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\r\n * flushing the remaining hooks)\r\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\r\n * case, when executing select(number))\r\n */\r\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\r\n    ngDevMode &&\r\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\r\n    if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\r\n        callHooks(lView, hooks, initPhase, nodeIndex);\r\n    }\r\n}\r\nfunction incrementInitPhaseFlags(lView, initPhase) {\r\n    ngDevMode &&\r\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\r\n    let flags = lView[FLAGS];\r\n    if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\r\n        flags &= 16383 /* LViewFlags.IndexWithinInitPhaseReset */;\r\n        flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\r\n        lView[FLAGS] = flags;\r\n    }\r\n}\r\n/**\r\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\r\n * the first LView pass\r\n *\r\n * @param currentView The current view\r\n * @param arr The array in which the hooks are found\r\n * @param initPhaseState the current state of the init phase\r\n * @param currentNodeIndex 3 cases depending on the value:\r\n * - undefined: all hooks from the array should be executed (post-order case)\r\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\r\n * flushing the remaining hooks)\r\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\r\n * case, when executing select(number))\r\n */\r\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\r\n    ngDevMode &&\r\n        assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\r\n    const startIndex = currentNodeIndex !== undefined\r\n        ? currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */\r\n        : 0;\r\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\r\n    const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\r\n    let lastNodeIndexFound = 0;\r\n    for (let i = startIndex; i < max; i++) {\r\n        const hook = arr[i + 1];\r\n        if (typeof hook === 'number') {\r\n            lastNodeIndexFound = arr[i];\r\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            const isInitHook = arr[i] < 0;\r\n            if (isInitHook) {\r\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\r\n            }\r\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\r\n                callHook(currentView, initPhase, arr, i);\r\n                currentView[PREORDER_HOOK_FLAGS] =\r\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) +\r\n                        i +\r\n                        2;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Executes a single lifecycle hook, making sure that:\r\n * - it is called in the non-reactive context;\r\n * - profiling data are registered.\r\n */\r\nfunction callHookInternal(directive, hook) {\r\n    profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\r\n    const prevConsumer = setActiveConsumer(null);\r\n    try {\r\n        hook.call(directive);\r\n    }\r\n    finally {\r\n        setActiveConsumer(prevConsumer);\r\n        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\r\n    }\r\n}\r\n/**\r\n * Execute one hook against the current `LView`.\r\n *\r\n * @param currentView The current view\r\n * @param initPhaseState the current state of the init phase\r\n * @param arr The array in which the hooks are found\r\n * @param i The current index within the hook data array\r\n */\r\nfunction callHook(currentView, initPhase, arr, i) {\r\n    const isInitHook = arr[i] < 0;\r\n    const hook = arr[i + 1];\r\n    const directiveIndex = isInitHook ? -arr[i] : arr[i];\r\n    const directive = currentView[directiveIndex];\r\n    if (isInitHook) {\r\n        const indexWithintInitPhase = currentView[FLAGS] >> 14 /* LViewFlags.IndexWithinInitPhaseShift */;\r\n        // The init phase state must be always checked here as it may have been recursively updated.\r\n        if (indexWithintInitPhase <\r\n            currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */ &&\r\n            (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\r\n            currentView[FLAGS] += 16384 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\r\n            callHookInternal(directive, hook);\r\n        }\r\n    }\r\n    else {\r\n        callHookInternal(directive, hook);\r\n    }\r\n}\r\n\r\nconst NO_PARENT_INJECTOR = -1;\r\n/**\r\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\r\n * `TView.data`. This allows us to store information about the current node's tokens (which\r\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\r\n * shared, so they live in `LView`).\r\n *\r\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\r\n * determines whether a directive is available on the associated node or not. This prevents us\r\n * from searching the directives array at this level unless it's probable the directive is in it.\r\n *\r\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\r\n *\r\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\r\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\r\n * will differ based on where it is flattened into the main array, so it's not possible to know\r\n * the indices ahead of time and save their types here. The interfaces are still included here\r\n * for documentation purposes.\r\n *\r\n * export interface LInjector extends Array<any> {\r\n *\r\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\r\n *    [0]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 32-63\r\n *    [1]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 64-95\r\n *    [2]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 96-127\r\n *    [3]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 128-159\r\n *    [4]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 160 - 191\r\n *    [5]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 192 - 223\r\n *    [6]: number;\r\n *\r\n *    // Cumulative bloom for directive IDs 224 - 255\r\n *    [7]: number;\r\n *\r\n *    // We need to store a reference to the injector's parent so DI can keep looking up\r\n *    // the injector tree until it finds the dependency it's looking for.\r\n *    [PARENT_INJECTOR]: number;\r\n * }\r\n *\r\n * export interface TInjector extends Array<any> {\r\n *\r\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\r\n *    [0]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 32-63\r\n *    [1]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 64-95\r\n *    [2]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 96-127\r\n *    [3]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 128-159\r\n *    [4]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 160 - 191\r\n *    [5]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 192 - 223\r\n *    [6]: number;\r\n *\r\n *    // Shared node bloom for directive IDs 224 - 255\r\n *    [7]: number;\r\n *\r\n *    // Necessary to find directive indices for a particular node.\r\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\r\n *  }\r\n */\r\n/**\r\n * Factory for creating instances of injectors in the NodeInjector.\r\n *\r\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\r\n *\r\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\r\n * - One without `multi` support (most common)\r\n * - One with `multi` values, (rare).\r\n *\r\n * Since VMs can cache up to 4 inline hidden classes this is OK.\r\n *\r\n * - Single factory: Only `resolving` and `factory` is defined.\r\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\r\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\r\n */\r\nclass NodeInjectorFactory {\r\n    factory;\r\n    /**\r\n     * The inject implementation to be activated when using the factory.\r\n     */\r\n    injectImpl;\r\n    /**\r\n     * Marker set to true during factory invocation to see if we get into recursive loop.\r\n     * Recursive loop causes an error to be displayed.\r\n     */\r\n    resolving = false;\r\n    /**\r\n     * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\r\n     */\r\n    canSeeViewProviders;\r\n    /**\r\n     * An array of factories to use in case of `multi` provider.\r\n     */\r\n    multi;\r\n    /**\r\n     * Number of `multi`-providers which belong to the component.\r\n     *\r\n     * This is needed because when multiple components and directives declare the `multi` provider\r\n     * they have to be concatenated in the correct order.\r\n     *\r\n     * Example:\r\n     *\r\n     * If we have a component and directive active an a single element as declared here\r\n     * ```ts\r\n     * component:\r\n     *   providers: [ {provide: String, useValue: 'component', multi: true} ],\r\n     *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],\r\n     *\r\n     * directive:\r\n     *   providers: [ {provide: String, useValue: 'directive', multi: true} ],\r\n     * ```\r\n     *\r\n     * Then the expected results are:\r\n     *\r\n     * ```ts\r\n     * providers: ['component', 'directive']\r\n     * viewProviders: ['component', 'componentView', 'directive']\r\n     * ```\r\n     *\r\n     * The way to think about it is that the `viewProviders` have been inserted after the component\r\n     * but before the directives, which is why we need to know how many `multi`s have been declared by\r\n     * the component.\r\n     */\r\n    componentProviders;\r\n    /**\r\n     * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\r\n     * See `providerFactory`.\r\n     */\r\n    index;\r\n    /**\r\n     * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is\r\n     * possible for `viewProviders` to shadow the `providers`. For this reason we store the\r\n     * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\r\n     *\r\n     * Example:\r\n     *\r\n     * Given:\r\n     * ```ts\r\n     * providers: [ {provide: String, useValue: 'all', multi: true} ],\r\n     * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],\r\n     * ```\r\n     *\r\n     * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\r\n     * of view injection. We further have to make sure that the shared instances (in our case\r\n     * `all`) are the exact same instance in both the content as well as the view injection. (We\r\n     * have to make sure that we don't double instantiate.) For this reason the `viewProviders`\r\n     * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the\r\n     * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\r\n     * ['all', 'viewOnly']`).\r\n     */\r\n    providerFactory;\r\n    constructor(\r\n    /**\r\n     * Factory to invoke in order to create a new instance.\r\n     */\r\n    factory, \r\n    /**\r\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\r\n     */\r\n    isViewProvider, injectImplementation) {\r\n        this.factory = factory;\r\n        ngDevMode && assertDefined(factory, 'Factory not specified');\r\n        ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\r\n        this.canSeeViewProviders = isViewProvider;\r\n        this.injectImpl = injectImplementation;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts `TNodeType` into human readable text.\r\n * Make sure this matches with `TNodeType`\r\n */\r\nfunction toTNodeTypeAsString(tNodeType) {\r\n    let text = '';\r\n    tNodeType & 1 /* TNodeType.Text */ && (text += '|Text');\r\n    tNodeType & 2 /* TNodeType.Element */ && (text += '|Element');\r\n    tNodeType & 4 /* TNodeType.Container */ && (text += '|Container');\r\n    tNodeType & 8 /* TNodeType.ElementContainer */ && (text += '|ElementContainer');\r\n    tNodeType & 16 /* TNodeType.Projection */ && (text += '|Projection');\r\n    tNodeType & 32 /* TNodeType.Icu */ && (text += '|IcuContainer');\r\n    tNodeType & 64 /* TNodeType.Placeholder */ && (text += '|Placeholder');\r\n    tNodeType & 128 /* TNodeType.LetDeclaration */ && (text += '|LetDeclaration');\r\n    return text.length > 0 ? text.substring(1) : text;\r\n}\r\n/**\r\n * Helper function to detect if a given value matches a `TNode` shape.\r\n *\r\n * The logic uses the `insertBeforeIndex` and its possible values as\r\n * a way to differentiate a TNode shape from other types of objects\r\n * within the `TView.data`. This is not a perfect check, but it can\r\n * be a reasonable differentiator, since we control the shapes of objects\r\n * within `TView.data`.\r\n */\r\nfunction isTNodeShape(value) {\r\n    return (value != null &&\r\n        typeof value === 'object' &&\r\n        (value.insertBeforeIndex === null ||\r\n            typeof value.insertBeforeIndex === 'number' ||\r\n            Array.isArray(value.insertBeforeIndex)));\r\n}\r\nfunction isLetDeclaration(tNode) {\r\n    return !!(tNode.type & 128 /* TNodeType.LetDeclaration */);\r\n}\r\n/**\r\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\r\n *\r\n * ```html\r\n * <div my-dir [class]=\"exp\"></div>\r\n * ```\r\n * and\r\n * ```ts\r\n * @Directive({\r\n * })\r\n * class MyDirective {\r\n *   @Input()\r\n *   class: string;\r\n * }\r\n * ```\r\n *\r\n * In the above case it is necessary to write the reconciled styling information into the\r\n * directive's input.\r\n *\r\n * @param tNode\r\n */\r\nfunction hasClassInput(tNode) {\r\n    return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\r\n}\r\n/**\r\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\r\n *\r\n * ```html\r\n * <div my-dir [style]=\"exp\"></div>\r\n * ```\r\n * and\r\n * ```ts\r\n * @Directive({\r\n * })\r\n * class MyDirective {\r\n *   @Input()\r\n *   class: string;\r\n * }\r\n * ```\r\n *\r\n * In the above case it is necessary to write the reconciled styling information into the\r\n * directive's input.\r\n *\r\n * @param tNode\r\n */\r\nfunction hasStyleInput(tNode) {\r\n    return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\r\n}\r\n\r\nfunction assertTNodeType(tNode, expectedTypes, message) {\r\n    assertDefined(tNode, 'should be called with a TNode');\r\n    if ((tNode.type & expectedTypes) === 0) {\r\n        throwError(message ||\r\n            `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\r\n    }\r\n}\r\nfunction assertPureTNodeType(type) {\r\n    if (!(type === 2 /* TNodeType.Element */ ||\r\n        type === 1 /* TNodeType.Text */ ||\r\n        type === 4 /* TNodeType.Container */ ||\r\n        type === 8 /* TNodeType.ElementContainer */ ||\r\n        type === 32 /* TNodeType.Icu */ ||\r\n        type === 16 /* TNodeType.Projection */ ||\r\n        type === 64 /* TNodeType.Placeholder */ ||\r\n        type === 128 /* TNodeType.LetDeclaration */)) {\r\n        throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\r\n    }\r\n}\r\n\r\n/**\r\n * Assigns all attribute values to the provided element via the inferred renderer.\r\n *\r\n * This function accepts two forms of attribute entries:\r\n *\r\n * default: (key, value):\r\n *  attrs = [key1, value1, key2, value2]\r\n *\r\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\r\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\r\n *\r\n * The `attrs` array can contain a mix of both the default and namespaced entries.\r\n * The \"default\" values are set without a marker, but if the function comes across\r\n * a marker value then it will attempt to set a namespaced value. If the marker is\r\n * not of a namespaced value then the function will quit and return the index value\r\n * where it stopped during the iteration of the attrs array.\r\n *\r\n * See [AttributeMarker] to understand what the namespace marker value is.\r\n *\r\n * Note that this instruction does not support assigning style and class values to\r\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\r\n * are applied to an element.\r\n * @param renderer The renderer to be used\r\n * @param native The element that the attributes will be assigned to\r\n * @param attrs The attribute array of values that will be assigned to the element\r\n * @returns the index value that was last accessed in the attributes array\r\n */\r\nfunction setUpAttributes(renderer, native, attrs) {\r\n    let i = 0;\r\n    while (i < attrs.length) {\r\n        const value = attrs[i];\r\n        if (typeof value === 'number') {\r\n            // only namespaces are supported. Other value types (such as style/class\r\n            // entries) are not supported in this function.\r\n            if (value !== 0 /* AttributeMarker.NamespaceURI */) {\r\n                break;\r\n            }\r\n            // we just landed on the marker value ... therefore\r\n            // we should skip to the next entry\r\n            i++;\r\n            const namespaceURI = attrs[i++];\r\n            const attrName = attrs[i++];\r\n            const attrVal = attrs[i++];\r\n            renderer.setAttribute(native, attrName, attrVal, namespaceURI);\r\n        }\r\n        else {\r\n            // attrName is string;\r\n            const attrName = value;\r\n            const attrVal = attrs[++i];\r\n            // Standard attributes\r\n            if (isAnimationProp(attrName)) {\r\n                renderer.setProperty(native, attrName, attrVal);\r\n            }\r\n            else {\r\n                renderer.setAttribute(native, attrName, attrVal);\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    // another piece of code may iterate over the same attributes array. Therefore\r\n    // it may be helpful to return the exact spot where the attributes array exited\r\n    // whether by running into an unsupported marker or if all the static values were\r\n    // iterated over.\r\n    return i;\r\n}\r\n/**\r\n * Test whether the given value is a marker that indicates that the following\r\n * attribute values in a `TAttributes` array are only the names of attributes,\r\n * and not name-value pairs.\r\n * @param marker The attribute marker to test.\r\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\r\n */\r\nfunction isNameOnlyAttributeMarker(marker) {\r\n    return (marker === 3 /* AttributeMarker.Bindings */ ||\r\n        marker === 4 /* AttributeMarker.Template */ ||\r\n        marker === 6 /* AttributeMarker.I18n */);\r\n}\r\nfunction isAnimationProp(name) {\r\n    // Perf note: accessing charCodeAt to check for the first character of a string is faster as\r\n    // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\r\n    // charCodeAt doesn't allocate memory to return a substring.\r\n    return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\r\n}\r\n/**\r\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\r\n *\r\n * This merge function keeps the order of attrs same.\r\n *\r\n * @param dst Location of where the merged `TAttributes` should end up.\r\n * @param src `TAttributes` which should be appended to `dst`\r\n */\r\nfunction mergeHostAttrs(dst, src) {\r\n    if (src === null || src.length === 0) ;\r\n    else if (dst === null || dst.length === 0) {\r\n        // We have source, but dst is empty, just make a copy.\r\n        dst = src.slice();\r\n    }\r\n    else {\r\n        let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\r\n        for (let i = 0; i < src.length; i++) {\r\n            const item = src[i];\r\n            if (typeof item === 'number') {\r\n                srcMarker = item;\r\n            }\r\n            else {\r\n                if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) ;\r\n                else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ ||\r\n                    srcMarker === 2 /* AttributeMarker.Styles */) {\r\n                    // Case where we have to consume `key1` and `value` only.\r\n                    mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\r\n                }\r\n                else {\r\n                    // Case where we have to consume `key1` only.\r\n                    mergeHostAttribute(dst, srcMarker, item, null, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return dst;\r\n}\r\n/**\r\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\r\n *\r\n * @param dst `TAttributes` to append to.\r\n * @param marker Region where the `key`/`value` should be added.\r\n * @param key1 Key to add to `TAttributes`\r\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\r\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\r\n */\r\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\r\n    let i = 0;\r\n    // Assume that new markers will be inserted at the end.\r\n    let markerInsertPosition = dst.length;\r\n    // scan until correct type.\r\n    if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\r\n        markerInsertPosition = -1;\r\n    }\r\n    else {\r\n        while (i < dst.length) {\r\n            const dstValue = dst[i++];\r\n            if (typeof dstValue === 'number') {\r\n                if (dstValue === marker) {\r\n                    markerInsertPosition = -1;\r\n                    break;\r\n                }\r\n                else if (dstValue > marker) {\r\n                    // We need to save this as we want the markers to be inserted in specific order.\r\n                    markerInsertPosition = i - 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // search until you find place of insertion\r\n    while (i < dst.length) {\r\n        const item = dst[i];\r\n        if (typeof item === 'number') {\r\n            // since `i` started as the index after the marker, we did not find it if we are at the next\r\n            // marker\r\n            break;\r\n        }\r\n        else if (item === key1) {\r\n            // We already have same token\r\n            {\r\n                if (value !== null) {\r\n                    dst[i + 1] = value;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        // Increment counter.\r\n        i++;\r\n        if (value !== null)\r\n            i++;\r\n    }\r\n    // insert at location.\r\n    if (markerInsertPosition !== -1) {\r\n        dst.splice(markerInsertPosition, 0, marker);\r\n        i = markerInsertPosition + 1;\r\n    }\r\n    dst.splice(i++, 0, key1);\r\n    if (value !== null) {\r\n        dst.splice(i++, 0, value);\r\n    }\r\n}\r\n\r\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\r\nfunction hasParentInjector(parentLocation) {\r\n    return parentLocation !== NO_PARENT_INJECTOR;\r\n}\r\nfunction getParentInjectorIndex(parentLocation) {\r\n    if (ngDevMode) {\r\n        assertNumber(parentLocation, 'Number expected');\r\n        assertNotEqual(parentLocation, -1, 'Not a valid state.');\r\n        const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\r\n        assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\r\n    }\r\n    return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\r\n}\r\nfunction getParentInjectorViewOffset(parentLocation) {\r\n    return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\r\n}\r\n/**\r\n * Unwraps a parent injector location number to find the view offset from the current injector,\r\n * then walks up the declaration view tree until the view is found that contains the parent\r\n * injector.\r\n *\r\n * @param location The location of the parent injector, which contains the view offset\r\n * @param startView The LView instance from which to start walking up the view tree\r\n * @returns The LView instance that contains the parent injector\r\n */\r\nfunction getParentInjectorView(location, startView) {\r\n    let viewOffset = getParentInjectorViewOffset(location);\r\n    let parentView = startView;\r\n    // For most cases, the parent injector can be found on the host node (e.g. for component\r\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\r\n    // <ng-template> tags or inline views, where the parent injector might live many views\r\n    // above the child injector.\r\n    while (viewOffset > 0) {\r\n        parentView = parentView[DECLARATION_VIEW];\r\n        viewOffset--;\r\n    }\r\n    return parentView;\r\n}\r\n\r\n/**\r\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\r\n *\r\n * This is set to true when we try to instantiate a component. This value is reset in\r\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\r\n * instantiated. This is done so that if we are injecting a token which was declared outside of\r\n * `viewProviders` we don't accidentally pull `viewProviders` in.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * class MyService {\r\n *   constructor(public value: String) {}\r\n * }\r\n *\r\n * @Component({\r\n *   providers: [\r\n *     MyService,\r\n *     {provide: String, value: 'providers' }\r\n *   ]\r\n *   viewProviders: [\r\n *     {provide: String, value: 'viewProviders'}\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   constructor(myService: MyService, value: String) {\r\n *     // We expect that Component can see into `viewProviders`.\r\n *     expect(value).toEqual('viewProviders');\r\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\r\n *     expect(myService.value).toEqual('providers');\r\n *   }\r\n * }\r\n *\r\n * ```\r\n */\r\nlet includeViewProviders = true;\r\nfunction setIncludeViewProviders(v) {\r\n    const oldValue = includeViewProviders;\r\n    includeViewProviders = v;\r\n    return oldValue;\r\n}\r\n/**\r\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\r\n * directives that will share slots, and thus, the fewer false positives when checking for\r\n * the existence of a directive.\r\n */\r\nconst BLOOM_SIZE = 256;\r\nconst BLOOM_MASK = BLOOM_SIZE - 1;\r\n/**\r\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\r\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\r\n * number.\r\n */\r\nconst BLOOM_BUCKET_BITS = 5;\r\n/** Counter used to generate unique IDs for directives. */\r\nlet nextNgElementId = 0;\r\n/** Value used when something wasn't found by an injector. */\r\nconst NOT_FOUND = {};\r\n/**\r\n * Registers this directive as present in its node's injector by flipping the directive's\r\n * corresponding bit in the injector's bloom filter.\r\n *\r\n * @param injectorIndex The index of the node injector where this token should be registered\r\n * @param tView The TView for the injector's bloom filters\r\n * @param type The directive token to register\r\n */\r\nfunction bloomAdd(injectorIndex, tView, type) {\r\n    ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\r\n    let id;\r\n    if (typeof type === 'string') {\r\n        id = type.charCodeAt(0) || 0;\r\n    }\r\n    else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\r\n        id = type[NG_ELEMENT_ID];\r\n    }\r\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\r\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\r\n    if (id == null) {\r\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\r\n    }\r\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\r\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\r\n    const bloomHash = id & BLOOM_MASK;\r\n    // Create a mask that targets the specific bit associated with the directive.\r\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\r\n    // to bit positions 0 - 31 in a 32 bit integer.\r\n    const mask = 1 << bloomHash;\r\n    // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\r\n    // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\r\n    // should be written to.\r\n    tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\r\n}\r\n/**\r\n * Creates (or gets an existing) injector for a given element or container.\r\n *\r\n * @param tNode for which an injector should be retrieved / created.\r\n * @param lView View where the node is stored\r\n * @returns Node injector\r\n */\r\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\r\n    const existingInjectorIndex = getInjectorIndex(tNode, lView);\r\n    if (existingInjectorIndex !== -1) {\r\n        return existingInjectorIndex;\r\n    }\r\n    const tView = lView[TVIEW];\r\n    if (tView.firstCreatePass) {\r\n        tNode.injectorIndex = lView.length;\r\n        insertBloom(tView.data, tNode); // foundation for node bloom\r\n        insertBloom(lView, null); // foundation for cumulative bloom\r\n        insertBloom(tView.blueprint, null);\r\n    }\r\n    const parentLoc = getParentInjectorLocation(tNode, lView);\r\n    const injectorIndex = tNode.injectorIndex;\r\n    // If a parent injector can't be found, its location is set to -1.\r\n    // In that case, we don't need to set up a cumulative bloom\r\n    if (hasParentInjector(parentLoc)) {\r\n        const parentIndex = getParentInjectorIndex(parentLoc);\r\n        const parentLView = getParentInjectorView(parentLoc, lView);\r\n        const parentData = parentLView[TVIEW].data;\r\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\r\n        // and its own cumulative bloom (which contains tokens for all ancestors)\r\n        for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\r\n            lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\r\n        }\r\n    }\r\n    lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\r\n    return injectorIndex;\r\n}\r\nfunction insertBloom(arr, footer) {\r\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\r\n}\r\nfunction getInjectorIndex(tNode, lView) {\r\n    if (tNode.injectorIndex === -1 ||\r\n        // If the injector index is the same as its parent's injector index, then the index has been\r\n        // copied down from the parent node. No injector has been created yet on this node.\r\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\r\n        // After the first template pass, the injector index might exist but the parent values\r\n        // might not have been calculated yet for this instance\r\n        lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\r\n        return -1;\r\n    }\r\n    else {\r\n        ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\r\n        return tNode.injectorIndex;\r\n    }\r\n}\r\n/**\r\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\r\n * parent injector initially.\r\n *\r\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\r\n * to find the LView containing the parent inject AND the index of the injector within that LView.\r\n */\r\nfunction getParentInjectorLocation(tNode, lView) {\r\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\r\n        // If we have a parent `TNode` and there is an injector associated with it we are done, because\r\n        // the parent injector is within the current `LView`.\r\n        return tNode.parent.injectorIndex; // ViewOffset is 0\r\n    }\r\n    // When parent injector location is computed it may be outside of the current view. (ie it could\r\n    // be pointing to a declared parent location). This variable stores number of declaration parents\r\n    // we need to walk up in order to find the parent injector location.\r\n    let declarationViewOffset = 0;\r\n    let parentTNode = null;\r\n    let lViewCursor = lView;\r\n    // The parent injector is not in the current `LView`. We will have to walk the declared parent\r\n    // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\r\n    // `NodeInjector`.\r\n    while (lViewCursor !== null) {\r\n        parentTNode = getTNodeFromLView(lViewCursor);\r\n        if (parentTNode === null) {\r\n            // If we have no parent, than we are done.\r\n            return NO_PARENT_INJECTOR;\r\n        }\r\n        ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\r\n        // Every iteration of the loop requires that we go to the declared parent.\r\n        declarationViewOffset++;\r\n        lViewCursor = lViewCursor[DECLARATION_VIEW];\r\n        if (parentTNode.injectorIndex !== -1) {\r\n            // We found a NodeInjector which points to something.\r\n            return (parentTNode.injectorIndex |\r\n                (declarationViewOffset <<\r\n                    16 /* RelativeInjectorLocationFlags.ViewOffsetShift */));\r\n        }\r\n    }\r\n    return NO_PARENT_INJECTOR;\r\n}\r\n/**\r\n * Makes a type or an injection token public to the DI system by adding it to an\r\n * injector's bloom filter.\r\n *\r\n * @param di The node injector in which a directive will be added\r\n * @param token The type or the injection token to be made public\r\n */\r\nfunction diPublicInInjector(injectorIndex, tView, token) {\r\n    bloomAdd(injectorIndex, tView, token);\r\n}\r\n/**\r\n * Inject static attribute value into directive constructor.\r\n *\r\n * This method is used with `factory` functions which are generated as part of\r\n * `defineDirective` or `defineComponent`. The method retrieves the static value\r\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\r\n *  at the time of injection and can change over time.)\r\n *\r\n * # Example\r\n * Given:\r\n * ```ts\r\n * @Component(...)\r\n * class MyComponent {\r\n *   constructor(@Attribute('title') title: string) { ... }\r\n * }\r\n * ```\r\n * When instantiated with\r\n * ```html\r\n * <my-component title=\"Hello\"></my-component>\r\n * ```\r\n *\r\n * Then factory method generated is:\r\n * ```ts\r\n * MyComponent.ɵcmp = defineComponent({\r\n *   factory: () => new MyComponent(injectAttribute('title'))\r\n *   ...\r\n * })\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction injectAttributeImpl(tNode, attrNameToInject) {\r\n    ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\r\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\r\n    if (attrNameToInject === 'class') {\r\n        return tNode.classes;\r\n    }\r\n    if (attrNameToInject === 'style') {\r\n        return tNode.styles;\r\n    }\r\n    const attrs = tNode.attrs;\r\n    if (attrs) {\r\n        const attrsLength = attrs.length;\r\n        let i = 0;\r\n        while (i < attrsLength) {\r\n            const value = attrs[i];\r\n            // If we hit a `Bindings` or `Template` marker then we are done.\r\n            if (isNameOnlyAttributeMarker(value))\r\n                break;\r\n            // Skip namespaced attributes\r\n            if (value === 0 /* AttributeMarker.NamespaceURI */) {\r\n                // we skip the next two values\r\n                // as namespaced attributes looks like\r\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\r\n                // 'existValue', ...]\r\n                i = i + 2;\r\n            }\r\n            else if (typeof value === 'number') {\r\n                // Skip to the first value of the marked attribute.\r\n                i++;\r\n                while (i < attrsLength && typeof attrs[i] === 'string') {\r\n                    i++;\r\n                }\r\n            }\r\n            else if (value === attrNameToInject) {\r\n                return attrs[i + 1];\r\n            }\r\n            else {\r\n                i = i + 2;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\r\n    if (flags & 8 /* InternalInjectFlags.Optional */ || notFoundValue !== undefined) {\r\n        return notFoundValue;\r\n    }\r\n    else {\r\n        throwProviderNotFoundError(token, 'NodeInjector');\r\n    }\r\n}\r\n/**\r\n * Returns the value associated to the given token from the ModuleInjector or throws exception\r\n *\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector or throws an exception\r\n */\r\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\r\n    if (flags & 8 /* InternalInjectFlags.Optional */ && notFoundValue === undefined) {\r\n        // This must be set or the NullInjector will throw for optional deps\r\n        notFoundValue = null;\r\n    }\r\n    if ((flags & (2 /* InternalInjectFlags.Self */ | 1 /* InternalInjectFlags.Host */)) === 0) {\r\n        const moduleInjector = lView[INJECTOR];\r\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\r\n        // should not have access to Component/Directive DI scope (that may happen through\r\n        // `directiveInject` implementation)\r\n        const previousInjectImplementation = setInjectImplementation(undefined);\r\n        try {\r\n            if (moduleInjector) {\r\n                return moduleInjector.get(token, notFoundValue, flags & 8 /* InternalInjectFlags.Optional */);\r\n            }\r\n            else {\r\n                return injectRootLimpMode(token, notFoundValue, flags & 8 /* InternalInjectFlags.Optional */);\r\n            }\r\n        }\r\n        finally {\r\n            setInjectImplementation(previousInjectImplementation);\r\n        }\r\n    }\r\n    return notFoundValueOrThrow(notFoundValue, token, flags);\r\n}\r\n/**\r\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\r\n *\r\n * Look for the injector providing the token by walking up the node injector tree and then\r\n * the module injector tree.\r\n *\r\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\r\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\r\n *\r\n * @param tNode The Node where the search for the injector should start\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\r\n */\r\nfunction getOrCreateInjectable(tNode, lView, token, flags = 0 /* InternalInjectFlags.Default */, notFoundValue) {\r\n    if (tNode !== null) {\r\n        // If the view or any of its ancestors have an embedded\r\n        // view injector, we have to look it up there first.\r\n        if (lView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ &&\r\n            // The token must be present on the current node injector when the `Self`\r\n            // flag is set, so the lookup on embedded view injector(s) can be skipped.\r\n            !(flags & 2 /* InternalInjectFlags.Self */)) {\r\n            const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\r\n            if (embeddedInjectorValue !== NOT_FOUND) {\r\n                return embeddedInjectorValue;\r\n            }\r\n        }\r\n        // Otherwise try the node injector.\r\n        const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\r\n        if (value !== NOT_FOUND) {\r\n            return value;\r\n        }\r\n    }\r\n    // Finally, fall back to the module injector.\r\n    return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\r\n}\r\n/**\r\n * Returns the value associated to the given token from the node injector.\r\n *\r\n * @param tNode The Node where the search for the injector should start\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\r\n */\r\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\r\n    const bloomHash = bloomHashBitOrFactory(token);\r\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\r\n    // so just call the factory function to create it.\r\n    if (typeof bloomHash === 'function') {\r\n        if (!enterDI(lView, tNode, flags)) {\r\n            // Failed to enter DI, try module injector instead. If a token is injected with the @Host\r\n            // flag, the module injector is not searched for that token in Ivy.\r\n            return flags & 1 /* InternalInjectFlags.Host */\r\n                ? notFoundValueOrThrow(notFoundValue, token, flags)\r\n                : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\r\n        }\r\n        try {\r\n            let value;\r\n            if (ngDevMode) {\r\n                runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {\r\n                    emitInjectorToCreateInstanceEvent(token);\r\n                    value = bloomHash(flags);\r\n                    emitInstanceCreatedByInjectorEvent(value);\r\n                });\r\n            }\r\n            else {\r\n                value = bloomHash(flags);\r\n            }\r\n            if (value == null && !(flags & 8 /* InternalInjectFlags.Optional */)) {\r\n                throwProviderNotFoundError(token);\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n        finally {\r\n            leaveDI();\r\n        }\r\n    }\r\n    else if (typeof bloomHash === 'number') {\r\n        // A reference to the previous injector TView that was found while climbing the element\r\n        // injector tree. This is used to know if viewProviders can be accessed on the current\r\n        // injector.\r\n        let previousTView = null;\r\n        let injectorIndex = getInjectorIndex(tNode, lView);\r\n        let parentLocation = NO_PARENT_INJECTOR;\r\n        let hostTElementNode = flags & 1 /* InternalInjectFlags.Host */ ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\r\n        // If we should skip this injector, or if there is no injector on this node, start by\r\n        // searching the parent injector.\r\n        if (injectorIndex === -1 || flags & 4 /* InternalInjectFlags.SkipSelf */) {\r\n            parentLocation =\r\n                injectorIndex === -1\r\n                    ? getParentInjectorLocation(tNode, lView)\r\n                    : lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\r\n            if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\r\n                injectorIndex = -1;\r\n            }\r\n            else {\r\n                previousTView = lView[TVIEW];\r\n                injectorIndex = getParentInjectorIndex(parentLocation);\r\n                lView = getParentInjectorView(parentLocation, lView);\r\n            }\r\n        }\r\n        // Traverse up the injector tree until we find a potential match or until we know there\r\n        // *isn't* a match.\r\n        while (injectorIndex !== -1) {\r\n            ngDevMode && assertNodeInjector(lView, injectorIndex);\r\n            // Check the current injector. If it matches, see if it contains token.\r\n            const tView = lView[TVIEW];\r\n            ngDevMode &&\r\n                assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\r\n            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\r\n                // At this point, we have an injector which *may* contain the token, so we step through\r\n                // the providers and directives associated with the injector's corresponding node to get\r\n                // the instance.\r\n                const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\r\n                if (instance !== NOT_FOUND) {\r\n                    return instance;\r\n                }\r\n            }\r\n            parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\r\n            if (parentLocation !== NO_PARENT_INJECTOR &&\r\n                shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) &&\r\n                bloomHasToken(bloomHash, injectorIndex, lView)) {\r\n                // The def wasn't found anywhere on this node, so it was a false positive.\r\n                // Traverse up the tree and continue searching.\r\n                previousTView = tView;\r\n                injectorIndex = getParentInjectorIndex(parentLocation);\r\n                lView = getParentInjectorView(parentLocation, lView);\r\n            }\r\n            else {\r\n                // If we should not search parent OR If the ancestor bloom filter value does not have the\r\n                // bit corresponding to the directive we can give up on traversing up to find the specific\r\n                // injector.\r\n                injectorIndex = -1;\r\n            }\r\n        }\r\n    }\r\n    return notFoundValue;\r\n}\r\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\r\n    const currentTView = lView[TVIEW];\r\n    const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\r\n    // First, we need to determine if view providers can be accessed by the starting element.\r\n    // There are two possibilities\r\n    const canAccessViewProviders = previousTView == null\r\n        ? // 1) This is the first invocation `previousTView == null` which means that we are at the\r\n            // `TNode` of where injector is starting to look. In such a case the only time we are allowed\r\n            // to look into the ViewProviders is if:\r\n            // - we are on a component\r\n            // - AND the injector set `includeViewProviders` to true (implying that the token can see\r\n            // ViewProviders because it is the Component or a Service which itself was declared in\r\n            // ViewProviders)\r\n            isComponentHost(tNode) && includeViewProviders\r\n        : // 2) `previousTView != null` which means that we are now walking across the parent nodes.\r\n            // In such a case we are only allowed to look into the ViewProviders if:\r\n            // - We just crossed from child View to Parent View `previousTView != currentTView`\r\n            // - AND the parent TNode is an Element.\r\n            // This means that we just came from the Component's View and therefore are allowed to see\r\n            // into the ViewProviders.\r\n            previousTView != currentTView && (tNode.type & 3 /* TNodeType.AnyRNode */) !== 0;\r\n    // This special case happens when there is a @host on the inject and when we are searching\r\n    // on the host element node.\r\n    const isHostSpecialCase = flags & 1 /* InternalInjectFlags.Host */ && hostTElementNode === tNode;\r\n    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\r\n    if (injectableIdx !== null) {\r\n        return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\r\n    }\r\n    else {\r\n        return NOT_FOUND;\r\n    }\r\n}\r\n/**\r\n * Searches for the given token among the node's directives and providers.\r\n *\r\n * @param tNode TNode on which directives are present.\r\n * @param tView The tView we are currently processing\r\n * @param token Provider token or type of a directive to look for.\r\n * @param canAccessViewProviders Whether view providers should be considered.\r\n * @param isHostSpecialCase Whether the host special case applies.\r\n * @returns Index of a found directive or provider, or null when none found.\r\n */\r\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\r\n    const nodeProviderIndexes = tNode.providerIndexes;\r\n    const tInjectables = tView.data;\r\n    const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\r\n    const directivesStart = tNode.directiveStart;\r\n    const directiveEnd = tNode.directiveEnd;\r\n    const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\r\n    const startingIndex = canAccessViewProviders\r\n        ? injectablesStart\r\n        : injectablesStart + cptViewProvidersCount;\r\n    // When the host special case applies, only the viewProviders and the component are visible\r\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\r\n    for (let i = startingIndex; i < endIndex; i++) {\r\n        const providerTokenOrDef = tInjectables[i];\r\n        if ((i < directivesStart && token === providerTokenOrDef) ||\r\n            (i >= directivesStart && providerTokenOrDef.type === token)) {\r\n            return i;\r\n        }\r\n    }\r\n    if (isHostSpecialCase) {\r\n        const dirDef = tInjectables[directivesStart];\r\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\r\n            return directivesStart;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\r\n *\r\n * This function checks to see if the value has already been instantiated and if so returns the\r\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\r\n * instantiates the `injectable` and caches the value.\r\n */\r\nfunction getNodeInjectable(lView, tView, index, tNode) {\r\n    let value = lView[index];\r\n    const tData = tView.data;\r\n    if (value instanceof NodeInjectorFactory) {\r\n        const factory = value;\r\n        if (factory.resolving) {\r\n            throwCyclicDependencyError(stringifyForError(tData[index]));\r\n        }\r\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\r\n        factory.resolving = true;\r\n        // tData indexes mirror the concrete instances in its corresponding LView.\r\n        // lView[index] here is either the injectable instance itself or a factory,\r\n        // therefore tData[index] is the constructor of that injectable or a\r\n        // definition object that contains the constructor in a `.type` field.\r\n        const token = tData[index].type || tData[index];\r\n        let prevInjectContext;\r\n        if (ngDevMode) {\r\n            const injector = new NodeInjector(tNode, lView);\r\n            prevInjectContext = setInjectorProfilerContext({ injector, token });\r\n        }\r\n        const previousInjectImplementation = factory.injectImpl\r\n            ? setInjectImplementation(factory.injectImpl)\r\n            : null;\r\n        const success = enterDI(lView, tNode, 0 /* InternalInjectFlags.Default */);\r\n        ngDevMode &&\r\n            assertEqual(success, true, \"Because flags do not contain `SkipSelf' we expect this to always succeed.\");\r\n        try {\r\n            ngDevMode && emitInjectorToCreateInstanceEvent(token);\r\n            value = lView[index] = factory.factory(undefined, tData, lView, tNode);\r\n            ngDevMode && emitInstanceCreatedByInjectorEvent(value);\r\n            // This code path is hit for both directives and providers.\r\n            // For perf reasons, we want to avoid searching for hooks on providers.\r\n            // It does no harm to try (the hooks just won't exist), but the extra\r\n            // checks are unnecessary and this is a hot path. So we check to see\r\n            // if the index of the dependency is in the directive range for this\r\n            // tNode. If it's not, we know it's a provider and skip hook registration.\r\n            if (tView.firstCreatePass && index >= tNode.directiveStart) {\r\n                ngDevMode && assertDirectiveDef(tData[index]);\r\n                registerPreOrderHooks(index, tData[index], tView);\r\n            }\r\n        }\r\n        finally {\r\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\r\n            previousInjectImplementation !== null &&\r\n                setInjectImplementation(previousInjectImplementation);\r\n            setIncludeViewProviders(previousIncludeViewProviders);\r\n            factory.resolving = false;\r\n            leaveDI();\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\r\n * the directive might be provided by the injector.\r\n *\r\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\r\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\r\n * is returned as the node injector can not possibly provide that token.\r\n *\r\n * @param token the injection token\r\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\r\n *   When the returned value is negative then it represents special values such as `Injector`.\r\n */\r\nfunction bloomHashBitOrFactory(token) {\r\n    ngDevMode && assertDefined(token, 'token must be defined');\r\n    if (typeof token === 'string') {\r\n        return token.charCodeAt(0) || 0;\r\n    }\r\n    const tokenId = \r\n    // First check with `hasOwnProperty` so we don't get an inherited ID.\r\n    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\r\n    // Negative token IDs are used for special objects such as `Injector`\r\n    if (typeof tokenId === 'number') {\r\n        if (tokenId >= 0) {\r\n            return tokenId & BLOOM_MASK;\r\n        }\r\n        else {\r\n            ngDevMode &&\r\n                assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\r\n            return createNodeInjector;\r\n        }\r\n    }\r\n    else {\r\n        return tokenId;\r\n    }\r\n}\r\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\r\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\r\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\r\n    // to bit positions 0 - 31 in a 32 bit integer.\r\n    const mask = 1 << bloomHash;\r\n    // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\r\n    // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\r\n    // that should be used.\r\n    const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\r\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\r\n    // this injector is a potential match.\r\n    return !!(value & mask);\r\n}\r\n/** Returns true if flags prevent parent injector from being searched for tokens */\r\nfunction shouldSearchParent(flags, isFirstHostTNode) {\r\n    return (!(flags & 2 /* InternalInjectFlags.Self */) && !(flags & 1 /* InternalInjectFlags.Host */ && isFirstHostTNode));\r\n}\r\nfunction getNodeInjectorLView(nodeInjector) {\r\n    return nodeInjector._lView;\r\n}\r\nfunction getNodeInjectorTNode(nodeInjector) {\r\n    return nodeInjector._tNode;\r\n}\r\nclass NodeInjector {\r\n    _tNode;\r\n    _lView;\r\n    constructor(_tNode, _lView) {\r\n        this._tNode = _tNode;\r\n        this._lView = _lView;\r\n    }\r\n    get(token, notFoundValue, flags) {\r\n        return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\r\n    }\r\n}\r\n/** Creates a `NodeInjector` for the current node. */\r\nfunction createNodeInjector() {\r\n    return new NodeInjector(getCurrentTNode(), getLView());\r\n}\r\n/**\r\n * @codeGenApi\r\n */\r\nfunction ɵɵgetInheritedFactory(type) {\r\n    return noSideEffects(() => {\r\n        const ownConstructor = type.prototype.constructor;\r\n        const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\r\n        const objectPrototype = Object.prototype;\r\n        let parent = Object.getPrototypeOf(type.prototype).constructor;\r\n        // Go up the prototype until we hit `Object`.\r\n        while (parent && parent !== objectPrototype) {\r\n            const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\r\n            // If we hit something that has a factory and the factory isn't the same as the type,\r\n            // we've found the inherited factory. Note the check that the factory isn't the type's\r\n            // own factory is redundant in most cases, but if the user has custom decorators on the\r\n            // class, this lookup will start one level down in the prototype chain, causing us to\r\n            // find the own factory first and potentially triggering an infinite loop downstream.\r\n            if (factory && factory !== ownFactory) {\r\n                return factory;\r\n            }\r\n            parent = Object.getPrototypeOf(parent);\r\n        }\r\n        // There is no factory defined. Either this was improper usage of inheritance\r\n        // (no Angular decorator on the superclass) or there is no constructor at all\r\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\r\n        // latter has to be assumed.\r\n        return (t) => new t();\r\n    });\r\n}\r\nfunction getFactoryOf(type) {\r\n    if (isForwardRef(type)) {\r\n        return () => {\r\n            const factory = getFactoryOf(resolveForwardRef(type));\r\n            return factory && factory();\r\n        };\r\n    }\r\n    return getFactoryDef(type);\r\n}\r\n/**\r\n * Returns a value from the closest embedded or node injector.\r\n *\r\n * @param tNode The Node where the search for the injector should start\r\n * @param lView The `LView` that contains the `tNode`\r\n * @param token The token to look for\r\n * @param flags Injection flags\r\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\r\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\r\n */\r\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\r\n    let currentTNode = tNode;\r\n    let currentLView = lView;\r\n    // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\r\n    // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\r\n    // Since the bloom filters for the node injectors have already been constructed and we don't\r\n    // have a way of extracting the records from an injector, the only way to maintain the correct\r\n    // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\r\n    // the token at each level.\r\n    while (currentTNode !== null &&\r\n        currentLView !== null &&\r\n        currentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ &&\r\n        !isRootView(currentLView)) {\r\n        ngDevMode && assertTNodeForLView(currentTNode, currentLView);\r\n        // Note that this lookup on the node injector is using the `Self` flag, because\r\n        // we don't want the node injector to look at any parent injectors since we\r\n        // may hit the embedded view injector first.\r\n        const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | 2 /* InternalInjectFlags.Self */, NOT_FOUND);\r\n        if (nodeInjectorValue !== NOT_FOUND) {\r\n            return nodeInjectorValue;\r\n        }\r\n        // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\r\n        let parentTNode = currentTNode.parent;\r\n        // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\r\n        // it means that we've hit the view boundary and we need to go up to the next view.\r\n        if (!parentTNode) {\r\n            // Before we go to the next LView, check if the token exists on the current embedded injector.\r\n            const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\r\n            if (embeddedViewInjector) {\r\n                const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\r\n                if (embeddedViewInjectorValue !== NOT_FOUND) {\r\n                    return embeddedViewInjectorValue;\r\n                }\r\n            }\r\n            // Otherwise keep going up the tree.\r\n            parentTNode = getTNodeFromLView(currentLView);\r\n            currentLView = currentLView[DECLARATION_VIEW];\r\n        }\r\n        currentTNode = parentTNode;\r\n    }\r\n    return notFoundValue;\r\n}\r\n/** Gets the TNode associated with an LView inside of the declaration view. */\r\nfunction getTNodeFromLView(lView) {\r\n    const tView = lView[TVIEW];\r\n    const tViewType = tView.type;\r\n    // The parent pointer differs based on `TView.type`.\r\n    if (tViewType === 2 /* TViewType.Embedded */) {\r\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\r\n        return tView.declTNode;\r\n    }\r\n    else if (tViewType === 1 /* TViewType.Component */) {\r\n        // Components don't have `TView.declTNode` because each instance of component could be\r\n        // inserted in different location, hence `TView.declTNode` is meaningless.\r\n        return lView[T_HOST];\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Facade for the attribute injection from DI.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinjectAttribute(attrNameToInject) {\r\n    return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\r\n}\r\n\r\n/**\r\n * Attribute decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({\r\n    attributeName,\r\n    __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName),\r\n}));\r\n\r\nlet _reflect = null;\r\nfunction getReflect() {\r\n    return (_reflect = _reflect || new ReflectionCapabilities());\r\n}\r\nfunction reflectDependencies(type) {\r\n    return convertDependencies(getReflect().parameters(type));\r\n}\r\nfunction convertDependencies(deps) {\r\n    return deps.map((dep) => reflectDependency(dep));\r\n}\r\nfunction reflectDependency(dep) {\r\n    const meta = {\r\n        token: null,\r\n        attribute: null,\r\n        host: false,\r\n        optional: false,\r\n        self: false,\r\n        skipSelf: false,\r\n    };\r\n    if (Array.isArray(dep) && dep.length > 0) {\r\n        for (let j = 0; j < dep.length; j++) {\r\n            const param = dep[j];\r\n            if (param === undefined) {\r\n                // param may be undefined if type of dep is not set by ngtsc\r\n                continue;\r\n            }\r\n            const proto = Object.getPrototypeOf(param);\r\n            if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\r\n                meta.optional = true;\r\n            }\r\n            else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\r\n                meta.skipSelf = true;\r\n            }\r\n            else if (param instanceof Self || proto.ngMetadataName === 'Self') {\r\n                meta.self = true;\r\n            }\r\n            else if (param instanceof Host || proto.ngMetadataName === 'Host') {\r\n                meta.host = true;\r\n            }\r\n            else if (param instanceof Inject) {\r\n                meta.token = param.token;\r\n            }\r\n            else if (param instanceof Attribute) {\r\n                if (param.attributeName === undefined) {\r\n                    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\r\n                }\r\n                meta.attribute = param.attributeName;\r\n            }\r\n            else {\r\n                meta.token = param;\r\n            }\r\n        }\r\n    }\r\n    else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\r\n        meta.token = null;\r\n    }\r\n    else {\r\n        meta.token = dep;\r\n    }\r\n    return meta;\r\n}\r\n\r\n/**\r\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\r\n * injectable def (`ɵprov`) onto the injectable type.\r\n */\r\nfunction compileInjectable(type, meta) {\r\n    let ngInjectableDef = null;\r\n    let ngFactoryDef = null;\r\n    // if NG_PROV_DEF is already defined on this class then don't overwrite it\r\n    if (!type.hasOwnProperty(NG_PROV_DEF)) {\r\n        Object.defineProperty(type, NG_PROV_DEF, {\r\n            get: () => {\r\n                if (ngInjectableDef === null) {\r\n                    const compiler = getCompilerFacade({\r\n                        usage: 0 /* JitCompilerUsage.Decorator */,\r\n                        kind: 'injectable',\r\n                        type,\r\n                    });\r\n                    ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\r\n                }\r\n                return ngInjectableDef;\r\n            },\r\n        });\r\n    }\r\n    // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\r\n    if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\r\n        Object.defineProperty(type, NG_FACTORY_DEF, {\r\n            get: () => {\r\n                if (ngFactoryDef === null) {\r\n                    const compiler = getCompilerFacade({\r\n                        usage: 0 /* JitCompilerUsage.Decorator */,\r\n                        kind: 'injectable',\r\n                        type,\r\n                    });\r\n                    ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\r\n                        name: type.name,\r\n                        type,\r\n                        typeArgumentCount: 0, // In JIT mode types are not available nor used.\r\n                        deps: reflectDependencies(type),\r\n                        target: compiler.FactoryTarget.Injectable,\r\n                    });\r\n                }\r\n                return ngFactoryDef;\r\n            },\r\n            // Leave this configurable so that the factories from directives or pipes can take precedence.\r\n            configurable: true,\r\n        });\r\n    }\r\n}\r\nconst USE_VALUE = getClosureSafeProperty({\r\n    provide: String,\r\n    useValue: getClosureSafeProperty,\r\n});\r\nfunction isUseClassProvider(meta) {\r\n    return meta.useClass !== undefined;\r\n}\r\nfunction isUseValueProvider(meta) {\r\n    return USE_VALUE in meta;\r\n}\r\nfunction isUseFactoryProvider(meta) {\r\n    return meta.useFactory !== undefined;\r\n}\r\nfunction isUseExistingProvider(meta) {\r\n    return meta.useExisting !== undefined;\r\n}\r\nfunction getInjectableMetadata(type, srcMeta) {\r\n    // Allow the compilation of a class with a `@Injectable()` decorator without parameters\r\n    const meta = srcMeta || { providedIn: null };\r\n    const compilerMeta = {\r\n        name: type.name,\r\n        type: type,\r\n        typeArgumentCount: 0,\r\n        providedIn: meta.providedIn,\r\n    };\r\n    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\r\n        compilerMeta.deps = convertDependencies(meta.deps);\r\n    }\r\n    // Check to see if the user explicitly provided a `useXxxx` property.\r\n    if (isUseClassProvider(meta)) {\r\n        compilerMeta.useClass = meta.useClass;\r\n    }\r\n    else if (isUseValueProvider(meta)) {\r\n        compilerMeta.useValue = meta.useValue;\r\n    }\r\n    else if (isUseFactoryProvider(meta)) {\r\n        compilerMeta.useFactory = meta.useFactory;\r\n    }\r\n    else if (isUseExistingProvider(meta)) {\r\n        compilerMeta.useExisting = meta.useExisting;\r\n    }\r\n    return compilerMeta;\r\n}\r\n\r\n/**\r\n * Injectable decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\r\n\r\n/**\r\n * Creates an ElementRef from the most recent node.\r\n *\r\n * @returns The ElementRef instance to use\r\n */\r\nfunction injectElementRef() {\r\n    return createElementRef(getCurrentTNode(), getLView());\r\n}\r\n/**\r\n * Creates an ElementRef given a node.\r\n *\r\n * @param tNode The node for which you'd like an ElementRef\r\n * @param lView The view to which the node belongs\r\n * @returns The ElementRef instance to use\r\n */\r\nfunction createElementRef(tNode, lView) {\r\n    return new ElementRef(getNativeByTNode(tNode, lView));\r\n}\r\n/**\r\n * A wrapper around a native element inside of a View.\r\n *\r\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\r\n * element.\r\n *\r\n * @security Permitting direct access to the DOM can make your application more vulnerable to\r\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\r\n * [Security Guide](https://g.co/ng/security).\r\n *\r\n * @publicApi\r\n */\r\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\r\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\r\n// and could do better codegen in the future.\r\nclass ElementRef {\r\n    /**\r\n     * <div class=\"docs-alert docs-alert-important\">\r\n     *   <header>Use with caution</header>\r\n     *   <p>\r\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\r\n     *    data-binding provided by Angular instead. If used, it is recommended in combination with\r\n     *    {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls DomSanitizer}\r\n     *    for maxiumum security;\r\n     *   </p>\r\n     * </div>\r\n     */\r\n    nativeElement;\r\n    constructor(nativeElement) {\r\n        this.nativeElement = nativeElement;\r\n    }\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = injectElementRef;\r\n}\r\n/**\r\n * Unwraps `ElementRef` and return the `nativeElement`.\r\n *\r\n * @param value value to unwrap\r\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\r\n */\r\nfunction unwrapElementRef(value) {\r\n    return value instanceof ElementRef ? value.nativeElement : value;\r\n}\r\n\r\nfunction symbolIterator() {\r\n    // @ts-expect-error accessing a private member\r\n    return this._results[Symbol.iterator]();\r\n}\r\n/**\r\n * An unmodifiable list of items that Angular keeps up to date when the state\r\n * of the application changes.\r\n *\r\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\r\n * provide.\r\n *\r\n * Implements an iterable interface, therefore it can be used in both ES6\r\n * javascript `for (var i of items)` loops as well as in Angular templates with\r\n * `@for(i of myList; track $index)`.\r\n *\r\n * Changes can be observed by subscribing to the `changes` `Observable`.\r\n * *\r\n * @usageNotes\r\n * ### Example\r\n * ```ts\r\n * @Component({...})\r\n * class Container {\r\n *   @ViewChildren(Item) items:QueryList<Item>;\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass QueryList {\r\n    _emitDistinctChangesOnly;\r\n    dirty = true;\r\n    _onDirty = undefined;\r\n    _results = [];\r\n    _changesDetected = false;\r\n    _changes = undefined;\r\n    length = 0;\r\n    first = undefined;\r\n    last = undefined;\r\n    /**\r\n     * Returns `Observable` of `QueryList` notifying the subscriber of changes.\r\n     */\r\n    get changes() {\r\n        return (this._changes ??= new Subject());\r\n    }\r\n    /**\r\n     * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\r\n     *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\r\n     *     the same result)\r\n     */\r\n    constructor(_emitDistinctChangesOnly = false) {\r\n        this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\r\n    }\r\n    /**\r\n     * Returns the QueryList entry at `index`.\r\n     */\r\n    get(index) {\r\n        return this._results[index];\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     */\r\n    map(fn) {\r\n        return this._results.map(fn);\r\n    }\r\n    filter(fn) {\r\n        return this._results.filter(fn);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     */\r\n    find(fn) {\r\n        return this._results.find(fn);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     */\r\n    reduce(fn, init) {\r\n        return this._results.reduce(fn, init);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     */\r\n    forEach(fn) {\r\n        this._results.forEach(fn);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     */\r\n    some(fn) {\r\n        return this._results.some(fn);\r\n    }\r\n    /**\r\n     * Returns a copy of the internal results list as an Array.\r\n     */\r\n    toArray() {\r\n        return this._results.slice();\r\n    }\r\n    toString() {\r\n        return this._results.toString();\r\n    }\r\n    /**\r\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\r\n     * on change detection, it will not notify of changes to the queries, unless a new change\r\n     * occurs.\r\n     *\r\n     * @param resultsTree The query results to store\r\n     * @param identityAccessor Optional function for extracting stable object identity from a value\r\n     *    in the array. This function is executed for each element of the query result list while\r\n     *    comparing current query list with the new one (provided as a first argument of the `reset`\r\n     *    function) to detect if the lists are different. If the function is not provided, elements\r\n     *    are compared as is (without any pre-processing).\r\n     */\r\n    reset(resultsTree, identityAccessor) {\r\n        this.dirty = false;\r\n        const newResultFlat = flatten(resultsTree);\r\n        if ((this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor))) {\r\n            this._results = newResultFlat;\r\n            this.length = newResultFlat.length;\r\n            this.last = newResultFlat[this.length - 1];\r\n            this.first = newResultFlat[0];\r\n        }\r\n    }\r\n    /**\r\n     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\r\n     */\r\n    notifyOnChanges() {\r\n        if (this._changes !== undefined && (this._changesDetected || !this._emitDistinctChangesOnly))\r\n            this._changes.next(this);\r\n    }\r\n    /** @internal */\r\n    onDirty(cb) {\r\n        this._onDirty = cb;\r\n    }\r\n    /** internal */\r\n    setDirty() {\r\n        this.dirty = true;\r\n        this._onDirty?.();\r\n    }\r\n    /** internal */\r\n    destroy() {\r\n        if (this._changes !== undefined) {\r\n            this._changes.complete();\r\n            this._changes.unsubscribe();\r\n        }\r\n    }\r\n    [Symbol.iterator] = (() => symbolIterator)();\r\n}\r\n\r\n/**\r\n * The name of an attribute that can be added to the hydration boundary node\r\n * (component host node) to disable hydration for the content within that boundary.\r\n */\r\nconst SKIP_HYDRATION_ATTR_NAME = 'ngSkipHydration';\r\n/** Lowercase name of the `ngSkipHydration` attribute used for case-insensitive comparisons. */\r\nconst SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = 'ngskiphydration';\r\n/**\r\n * Helper function to check if a given TNode has the 'ngSkipHydration' attribute.\r\n */\r\nfunction hasSkipHydrationAttrOnTNode(tNode) {\r\n    const attrs = tNode.mergedAttrs;\r\n    if (attrs === null)\r\n        return false;\r\n    // only ever look at the attribute name and skip the values\r\n    for (let i = 0; i < attrs.length; i += 2) {\r\n        const value = attrs[i];\r\n        // This is a marker, which means that the static attributes section is over,\r\n        // so we can exit early.\r\n        if (typeof value === 'number')\r\n            return false;\r\n        if (typeof value === 'string' && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Helper function to check if a given RElement has the 'ngSkipHydration' attribute.\r\n */\r\nfunction hasSkipHydrationAttrOnRElement(rNode) {\r\n    return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);\r\n}\r\n/**\r\n * Checks whether a TNode has a flag to indicate that it's a part of\r\n * a skip hydration block.\r\n */\r\nfunction hasInSkipHydrationBlockFlag(tNode) {\r\n    return (tNode.flags & 128 /* TNodeFlags.inSkipHydrationBlock */) === 128 /* TNodeFlags.inSkipHydrationBlock */;\r\n}\r\n/**\r\n * Helper function that determines if a given node is within a skip hydration block\r\n * by navigating up the TNode tree to see if any parent nodes have skip hydration\r\n * attribute.\r\n */\r\nfunction isInSkipHydrationBlock(tNode) {\r\n    if (hasInSkipHydrationBlockFlag(tNode)) {\r\n        return true;\r\n    }\r\n    let currentTNode = tNode.parent;\r\n    while (currentTNode) {\r\n        if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {\r\n            return true;\r\n        }\r\n        currentTNode = currentTNode.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Check if an i18n block is in a skip hydration section by looking at a parent TNode\r\n * to determine if this TNode is in a skip hydration section or the TNode has\r\n * the `ngSkipHydration` attribute.\r\n */\r\nfunction isI18nInSkipHydrationBlock(parentTNode) {\r\n    return (hasInSkipHydrationBlockFlag(parentTNode) ||\r\n        hasSkipHydrationAttrOnTNode(parentTNode) ||\r\n        isInSkipHydrationBlock(parentTNode));\r\n}\r\n\r\n/**\r\n * The strategy that the default change detector uses to detect changes.\r\n * When set, takes effect the next time change detection is triggered.\r\n *\r\n * @see {@link /api/core/ChangeDetectorRef?tab=usage-notes Change detection usage}\r\n * @see {@link /best-practices/skipping-subtrees Skipping component subtrees}\r\n *\r\n * @publicApi\r\n */\r\nvar ChangeDetectionStrategy;\r\n(function (ChangeDetectionStrategy) {\r\n    /**\r\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\r\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\r\n     * Change detection can still be explicitly invoked.\r\n     * This strategy applies to all child directives and cannot be overridden.\r\n     */\r\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\r\n    /**\r\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\r\n     * explicitly deactivated.\r\n     */\r\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\r\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\r\n\r\n// Keeps track of the currently-active LViews.\r\nconst TRACKED_LVIEWS = new Map();\r\n// Used for generating unique IDs for LViews.\r\nlet uniqueIdCounter = 0;\r\n/** Gets a unique ID that can be assigned to an LView. */\r\nfunction getUniqueLViewId() {\r\n    return uniqueIdCounter++;\r\n}\r\n/** Starts tracking an LView. */\r\nfunction registerLView(lView) {\r\n    ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\r\n    TRACKED_LVIEWS.set(lView[ID], lView);\r\n}\r\n/** Gets an LView by its unique ID. */\r\nfunction getLViewById(id) {\r\n    ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\r\n    return TRACKED_LVIEWS.get(id) || null;\r\n}\r\n/** Stops tracking an LView. */\r\nfunction unregisterLView(lView) {\r\n    ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\r\n    TRACKED_LVIEWS.delete(lView[ID]);\r\n}\r\n/** Gets the currently-tracked views. */\r\nfunction getTrackedLViews() {\r\n    return TRACKED_LVIEWS;\r\n}\r\n\r\n/**\r\n * The internal view context which is specific to a given DOM element, directive or\r\n * component instance. Each value in here (besides the LView and element node details)\r\n * can be present, null or undefined. If undefined then it implies the value has not been\r\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\r\n *\r\n * Each value will get filled when the respective value is examined within the getContext\r\n * function. The component, element and each directive instance will share the same instance\r\n * of the context.\r\n */\r\nclass LContext {\r\n    lViewId;\r\n    nodeIndex;\r\n    native;\r\n    /**\r\n     * The instance of the Component node.\r\n     */\r\n    component;\r\n    /**\r\n     * The list of active directives that exist on this element.\r\n     */\r\n    directives;\r\n    /**\r\n     * The map of local references (local reference name => element or directive instance) that\r\n     * exist on this element.\r\n     */\r\n    localRefs;\r\n    /** Component's parent view data. */\r\n    get lView() {\r\n        return getLViewById(this.lViewId);\r\n    }\r\n    constructor(\r\n    /**\r\n     * ID of the component's parent view data.\r\n     */\r\n    lViewId, \r\n    /**\r\n     * The index instance of the node.\r\n     */\r\n    nodeIndex, \r\n    /**\r\n     * The instance of the DOM node that is attached to the lNode.\r\n     */\r\n    native) {\r\n        this.lViewId = lViewId;\r\n        this.nodeIndex = nodeIndex;\r\n        this.native = native;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\r\n *\r\n * This function will examine the provided DOM element, component, or directive instance\\'s\r\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\r\n * value will be that of the newly created `LContext`.\r\n *\r\n * If the monkey-patched value is the `LView` instance then the context value for that\r\n * target will be created and the monkey-patch reference will be updated. Therefore when this\r\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\r\n * directive\\'s monkey-patch values.\r\n *\r\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\r\n * is found which contains a monkey-patch reference. When that occurs then the provided element\r\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\r\n * detected for a component/directive instance then it will throw an error (all components and\r\n * directives should be automatically monkey-patched by ivy).\r\n *\r\n * @param target Component, Directive or DOM Node.\r\n */\r\nfunction getLContext(target) {\r\n    let mpValue = readPatchedData(target);\r\n    if (mpValue) {\r\n        // only when it's an array is it considered an LView instance\r\n        // ... otherwise it's an already constructed LContext instance\r\n        if (isLView(mpValue)) {\r\n            const lView = mpValue;\r\n            let nodeIndex;\r\n            let component = undefined;\r\n            let directives = undefined;\r\n            if (isComponentInstance(target)) {\r\n                nodeIndex = findViaComponent(lView, target);\r\n                if (nodeIndex == -1) {\r\n                    throw new Error('The provided component was not found in the application');\r\n                }\r\n                component = target;\r\n            }\r\n            else if (isDirectiveInstance(target)) {\r\n                nodeIndex = findViaDirective(lView, target);\r\n                if (nodeIndex == -1) {\r\n                    throw new Error('The provided directive was not found in the application');\r\n                }\r\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView);\r\n            }\r\n            else {\r\n                nodeIndex = findViaNativeElement(lView, target);\r\n                if (nodeIndex == -1) {\r\n                    return null;\r\n                }\r\n            }\r\n            // the goal is not to fill the entire context full of data because the lookups\r\n            // are expensive. Instead, only the target data (the element, component, container, ICU\r\n            // expression or directive details) are filled into the context. If called multiple times\r\n            // with different target values then the missing target data will be filled in.\r\n            const native = unwrapRNode(lView[nodeIndex]);\r\n            const existingCtx = readPatchedData(native);\r\n            const context = existingCtx && !Array.isArray(existingCtx)\r\n                ? existingCtx\r\n                : createLContext(lView, nodeIndex, native);\r\n            // only when the component has been discovered then update the monkey-patch\r\n            if (component && context.component === undefined) {\r\n                context.component = component;\r\n                attachPatchData(context.component, context);\r\n            }\r\n            // only when the directives have been discovered then update the monkey-patch\r\n            if (directives && context.directives === undefined) {\r\n                context.directives = directives;\r\n                for (let i = 0; i < directives.length; i++) {\r\n                    attachPatchData(directives[i], context);\r\n                }\r\n            }\r\n            attachPatchData(context.native, context);\r\n            mpValue = context;\r\n        }\r\n    }\r\n    else {\r\n        const rElement = target;\r\n        ngDevMode && assertDomNode(rElement);\r\n        // if the context is not found then we need to traverse upwards up the DOM\r\n        // to find the nearest element that has already been monkey patched with data\r\n        let parent = rElement;\r\n        while ((parent = parent.parentNode)) {\r\n            const parentContext = readPatchedData(parent);\r\n            if (parentContext) {\r\n                const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\r\n                // the edge of the app was also reached here through another means\r\n                // (maybe because the DOM was changed manually).\r\n                if (!lView) {\r\n                    return null;\r\n                }\r\n                const index = findViaNativeElement(lView, rElement);\r\n                if (index >= 0) {\r\n                    const native = unwrapRNode(lView[index]);\r\n                    const context = createLContext(lView, index, native);\r\n                    attachPatchData(native, context);\r\n                    mpValue = context;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return mpValue || null;\r\n}\r\n/**\r\n * Creates an empty instance of a `LContext` context\r\n */\r\nfunction createLContext(lView, nodeIndex, native) {\r\n    return new LContext(lView[ID], nodeIndex, native);\r\n}\r\n/**\r\n * Takes a component instance and returns the view for that component.\r\n *\r\n * @param componentInstance\r\n * @returns The component's view\r\n */\r\nfunction getComponentViewByInstance(componentInstance) {\r\n    let patchedData = readPatchedData(componentInstance);\r\n    let lView;\r\n    if (isLView(patchedData)) {\r\n        const contextLView = patchedData;\r\n        const nodeIndex = findViaComponent(contextLView, componentInstance);\r\n        lView = getComponentLViewByIndex(nodeIndex, contextLView);\r\n        const context = createLContext(contextLView, nodeIndex, lView[HOST]);\r\n        context.component = componentInstance;\r\n        attachPatchData(componentInstance, context);\r\n        attachPatchData(context.native, context);\r\n    }\r\n    else {\r\n        const context = patchedData;\r\n        const contextLView = context.lView;\r\n        ngDevMode && assertLView(contextLView);\r\n        lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\r\n    }\r\n    return lView;\r\n}\r\n/**\r\n * This property will be monkey-patched on elements, components and directives.\r\n */\r\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\r\n/**\r\n * Assigns the given data to the given target (which could be a component,\r\n * directive or DOM node instance) using monkey-patching.\r\n */\r\nfunction attachPatchData(target, data) {\r\n    ngDevMode && assertDefined(target, 'Target expected');\r\n    // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\r\n    // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\r\n    // we can't know when to remove an `LContext`.\r\n    if (isLView(data)) {\r\n        target[MONKEY_PATCH_KEY_NAME] = data[ID];\r\n        registerLView(data);\r\n    }\r\n    else {\r\n        target[MONKEY_PATCH_KEY_NAME] = data;\r\n    }\r\n}\r\n/**\r\n * Returns the monkey-patch value data present on the target (which could be\r\n * a component, directive or a DOM node).\r\n */\r\nfunction readPatchedData(target) {\r\n    ngDevMode && assertDefined(target, 'Target expected');\r\n    const data = target[MONKEY_PATCH_KEY_NAME];\r\n    return typeof data === 'number' ? getLViewById(data) : data || null;\r\n}\r\nfunction readPatchedLView(target) {\r\n    const value = readPatchedData(target);\r\n    if (value) {\r\n        return (isLView(value) ? value : value.lView);\r\n    }\r\n    return null;\r\n}\r\nfunction isComponentInstance(instance) {\r\n    return instance && instance.constructor && instance.constructor.ɵcmp;\r\n}\r\nfunction isDirectiveInstance(instance) {\r\n    return instance && instance.constructor && instance.constructor.ɵdir;\r\n}\r\n/**\r\n * Locates the element within the given LView and returns the matching index\r\n */\r\nfunction findViaNativeElement(lView, target) {\r\n    const tView = lView[TVIEW];\r\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\r\n        if (unwrapRNode(lView[i]) === target) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Locates the next tNode (child, sibling or parent).\r\n */\r\nfunction traverseNextElement(tNode) {\r\n    if (tNode.child) {\r\n        return tNode.child;\r\n    }\r\n    else if (tNode.next) {\r\n        return tNode.next;\r\n    }\r\n    else {\r\n        // Let's take the following template: <div><span>text</span></div><component/>\r\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\r\n        // in this case the parent `div`, so that we can find the component.\r\n        while (tNode.parent && !tNode.parent.next) {\r\n            tNode = tNode.parent;\r\n        }\r\n        return tNode.parent && tNode.parent.next;\r\n    }\r\n}\r\n/**\r\n * Locates the component within the given LView and returns the matching index\r\n */\r\nfunction findViaComponent(lView, componentInstance) {\r\n    const componentIndices = lView[TVIEW].components;\r\n    if (componentIndices) {\r\n        for (let i = 0; i < componentIndices.length; i++) {\r\n            const elementComponentIndex = componentIndices[i];\r\n            const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\r\n            if (componentView[CONTEXT] === componentInstance) {\r\n                return elementComponentIndex;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\r\n        const rootComponent = rootComponentView[CONTEXT];\r\n        if (rootComponent === componentInstance) {\r\n            // we are dealing with the root element here therefore we know that the\r\n            // element is the very first element after the HEADER data in the lView\r\n            return HEADER_OFFSET;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Locates the directive within the given LView and returns the matching index\r\n */\r\nfunction findViaDirective(lView, directiveInstance) {\r\n    // if a directive is monkey patched then it will (by default)\r\n    // have a reference to the LView of the current view. The\r\n    // element bound to the directive being search lives somewhere\r\n    // in the view data. We loop through the nodes and check their\r\n    // list of directives for the instance.\r\n    let tNode = lView[TVIEW].firstChild;\r\n    while (tNode) {\r\n        const directiveIndexStart = tNode.directiveStart;\r\n        const directiveIndexEnd = tNode.directiveEnd;\r\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\r\n            if (lView[i] === directiveInstance) {\r\n                return tNode.index;\r\n            }\r\n        }\r\n        tNode = traverseNextElement(tNode);\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Returns a list of directives applied to a node at a specific index. The list includes\r\n * directives matched by selector and any host directives, but it excludes components.\r\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\r\n *\r\n * @param nodeIndex The node index\r\n * @param lView The target view data\r\n */\r\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\r\n    const tNode = lView[TVIEW].data[nodeIndex];\r\n    if (tNode.directiveStart === 0)\r\n        return EMPTY_ARRAY;\r\n    const results = [];\r\n    for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\r\n        const directiveInstance = lView[i];\r\n        if (!isComponentInstance(directiveInstance)) {\r\n            results.push(directiveInstance);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\r\n    const tNode = lView[TVIEW].data[nodeIndex];\r\n    return isComponentHost(tNode) ? lView[tNode.directiveStart + tNode.componentOffset] : null;\r\n}\r\n/**\r\n * Returns a map of local references (local reference name => element or directive instance) that\r\n * exist on a given element.\r\n */\r\nfunction discoverLocalRefs(lView, nodeIndex) {\r\n    const tNode = lView[TVIEW].data[nodeIndex];\r\n    if (tNode && tNode.localNames) {\r\n        const result = {};\r\n        let localIndex = tNode.index + 1;\r\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\r\n            result[tNode.localNames[i]] = lView[localIndex];\r\n            localIndex++;\r\n        }\r\n        return result;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\r\n * reaching the root `LView`.\r\n *\r\n * @param componentOrLView any component or `LView`\r\n */\r\nfunction getRootView(componentOrLView) {\r\n    ngDevMode && assertDefined(componentOrLView, 'component');\r\n    let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\r\n    while (lView && !isRootView(lView)) {\r\n        lView = getLViewParent(lView);\r\n    }\r\n    ngDevMode && assertLView(lView);\r\n    return lView;\r\n}\r\n/**\r\n * Returns the context information associated with the application where the target is situated. It\r\n * does this by walking the parent views until it gets to the root view, then getting the context\r\n * off of that.\r\n *\r\n * @param viewOrComponent the `LView` or component to get the root context for.\r\n */\r\nfunction getRootContext(viewOrComponent) {\r\n    const rootView = getRootView(viewOrComponent);\r\n    ngDevMode &&\r\n        assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\r\n    return rootView[CONTEXT];\r\n}\r\n/**\r\n * Gets the first `LContainer` in the LView or `null` if none exists.\r\n */\r\nfunction getFirstLContainer(lView) {\r\n    return getNearestLContainer(lView[CHILD_HEAD]);\r\n}\r\n/**\r\n * Gets the next `LContainer` that is a sibling of the given container.\r\n */\r\nfunction getNextLContainer(container) {\r\n    return getNearestLContainer(container[NEXT]);\r\n}\r\nfunction getNearestLContainer(viewOrContainer) {\r\n    while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\r\n        viewOrContainer = viewOrContainer[NEXT];\r\n    }\r\n    return viewOrContainer;\r\n}\r\n\r\n/**\r\n * Retrieves the component instance associated with a given DOM element.\r\n *\r\n * @usageNotes\r\n * Given the following DOM structure:\r\n *\r\n * ```html\r\n * <app-root>\r\n *   <div>\r\n *     <child-comp></child-comp>\r\n *   </div>\r\n * </app-root>\r\n * ```\r\n *\r\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\r\n * associated with this DOM element.\r\n *\r\n * Calling the function on `<app-root>` will return the `MyApp` instance.\r\n *\r\n *\r\n * @param element DOM element from which the component should be retrieved.\r\n * @returns Component instance associated with the element or `null` if there\r\n *    is no component associated with it.\r\n *\r\n * @publicApi\r\n */\r\nfunction getComponent(element) {\r\n    ngDevMode && assertDomElement(element);\r\n    const context = getLContext(element);\r\n    if (context === null)\r\n        return null;\r\n    if (context.component === undefined) {\r\n        const lView = context.lView;\r\n        if (lView === null) {\r\n            return null;\r\n        }\r\n        context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\r\n    }\r\n    return context.component;\r\n}\r\n/**\r\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\r\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\r\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\r\n *\r\n * @param element Element for which to get the surrounding component instance.\r\n * @returns Instance of the component that is around the element or null if the element isn't\r\n *    inside any component.\r\n *\r\n * @publicApi\r\n */\r\nfunction getContext(element) {\r\n    assertDomElement(element);\r\n    const context = getLContext(element);\r\n    const lView = context ? context.lView : null;\r\n    return lView === null ? null : lView[CONTEXT];\r\n}\r\n/**\r\n * Retrieves the component instance whose view contains the DOM element.\r\n *\r\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\r\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\r\n * would return `<app-comp>`.\r\n *\r\n * @param elementOrDir DOM element, component or directive instance\r\n *    for which to retrieve the root components.\r\n * @returns Component instance whose view owns the DOM element or null if the element is not\r\n *    part of a component view.\r\n *\r\n * @publicApi\r\n */\r\nfunction getOwningComponent(elementOrDir) {\r\n    const context = getLContext(elementOrDir);\r\n    let lView = context ? context.lView : null;\r\n    if (lView === null)\r\n        return null;\r\n    let parent;\r\n    while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\r\n        lView = parent;\r\n    }\r\n    return isRootView(lView) ? null : lView[CONTEXT];\r\n}\r\n/**\r\n * Retrieves all root components associated with a DOM element, directive or component instance.\r\n * Root components are those which have been bootstrapped by Angular.\r\n *\r\n * @param elementOrDir DOM element, component or directive instance\r\n *    for which to retrieve the root components.\r\n * @returns Root components associated with the target object.\r\n *\r\n * @publicApi\r\n */\r\nfunction getRootComponents(elementOrDir) {\r\n    const lView = readPatchedLView(elementOrDir);\r\n    return lView !== null ? [getRootContext(lView)] : [];\r\n}\r\n/**\r\n * Retrieves an `Injector` associated with an element, component or directive instance.\r\n *\r\n * @param elementOrDir DOM element, component or directive instance for which to\r\n *    retrieve the injector.\r\n * @returns Injector associated with the element, component or directive instance.\r\n *\r\n * @publicApi\r\n */\r\nfunction getInjector(elementOrDir) {\r\n    const context = getLContext(elementOrDir);\r\n    const lView = context ? context.lView : null;\r\n    if (lView === null)\r\n        return Injector.NULL;\r\n    const tNode = lView[TVIEW].data[context.nodeIndex];\r\n    return new NodeInjector(tNode, lView);\r\n}\r\n/**\r\n * Retrieve a set of injection tokens at a given DOM node.\r\n *\r\n * @param element Element for which the injection tokens should be retrieved.\r\n */\r\nfunction getInjectionTokens(element) {\r\n    const context = getLContext(element);\r\n    const lView = context ? context.lView : null;\r\n    if (lView === null)\r\n        return [];\r\n    const tView = lView[TVIEW];\r\n    const tNode = tView.data[context.nodeIndex];\r\n    const providerTokens = [];\r\n    const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\r\n    const endIndex = tNode.directiveEnd;\r\n    for (let i = startIndex; i < endIndex; i++) {\r\n        let value = tView.data[i];\r\n        if (isDirectiveDefHack(value)) {\r\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\r\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\r\n            // is that for Components/Directives we store the def instead the type. The correct behavior\r\n            // is that we should always be storing injectable type in this location.\r\n            value = value.type;\r\n        }\r\n        providerTokens.push(value);\r\n    }\r\n    return providerTokens;\r\n}\r\n/**\r\n * Retrieves directive instances associated with a given DOM node. Does not include\r\n * component instances.\r\n *\r\n * @usageNotes\r\n * Given the following DOM structure:\r\n *\r\n * ```html\r\n * <app-root>\r\n *   <button my-button></button>\r\n *   <my-comp></my-comp>\r\n * </app-root>\r\n * ```\r\n *\r\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\r\n * directive that is associated with the DOM node.\r\n *\r\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\r\n *\r\n * @param node DOM node for which to get the directives.\r\n * @returns Array of directives associated with the node.\r\n *\r\n * @publicApi\r\n */\r\nfunction getDirectives(node) {\r\n    // Skip text nodes because we can't have directives associated with them.\r\n    if (node instanceof Text) {\r\n        return [];\r\n    }\r\n    const context = getLContext(node);\r\n    const lView = context ? context.lView : null;\r\n    if (lView === null) {\r\n        return [];\r\n    }\r\n    const tView = lView[TVIEW];\r\n    const nodeIndex = context.nodeIndex;\r\n    if (!tView?.data[nodeIndex]) {\r\n        return [];\r\n    }\r\n    if (context.directives === undefined) {\r\n        context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\r\n    }\r\n    // The `directives` in this case are a named array called `LComponentView`. Clone the\r\n    // result so we don't expose an internal data structure in the user's console.\r\n    return context.directives === null ? [] : [...context.directives];\r\n}\r\n/** The framework used to author a particular application or component. */\r\nvar Framework;\r\n(function (Framework) {\r\n    Framework[\"Angular\"] = \"angular\";\r\n    Framework[\"ACX\"] = \"acx\";\r\n    Framework[\"Wiz\"] = \"wiz\";\r\n})(Framework || (Framework = {}));\r\n/** ACX change detection strategies. */\r\nvar AcxChangeDetectionStrategy;\r\n(function (AcxChangeDetectionStrategy) {\r\n    AcxChangeDetectionStrategy[AcxChangeDetectionStrategy[\"Default\"] = 0] = \"Default\";\r\n    AcxChangeDetectionStrategy[AcxChangeDetectionStrategy[\"OnPush\"] = 1] = \"OnPush\";\r\n})(AcxChangeDetectionStrategy || (AcxChangeDetectionStrategy = {}));\r\n/** ACX view encapsulation modes. */\r\nvar AcxViewEncapsulation;\r\n(function (AcxViewEncapsulation) {\r\n    AcxViewEncapsulation[AcxViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\r\n    AcxViewEncapsulation[AcxViewEncapsulation[\"None\"] = 1] = \"None\";\r\n})(AcxViewEncapsulation || (AcxViewEncapsulation = {}));\r\n/**\r\n * Returns the debug (partial) metadata for a particular directive or component instance.\r\n * The function accepts an instance of a directive or component and returns the corresponding\r\n * metadata.\r\n *\r\n * @param directiveOrComponentInstance Instance of a directive or component\r\n * @returns metadata of the passed directive or component\r\n *\r\n * @publicApi\r\n */\r\nfunction getDirectiveMetadata$1(directiveOrComponentInstance) {\r\n    const { constructor } = directiveOrComponentInstance;\r\n    if (!constructor) {\r\n        throw new Error('Unable to find the instance constructor');\r\n    }\r\n    // In case a component inherits from a directive, we may have component and directive metadata\r\n    // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\r\n    const componentDef = getComponentDef(constructor);\r\n    if (componentDef) {\r\n        const inputs = extractInputDebugMetadata(componentDef.inputs);\r\n        return {\r\n            inputs,\r\n            outputs: componentDef.outputs,\r\n            encapsulation: componentDef.encapsulation,\r\n            changeDetection: componentDef.onPush\r\n                ? ChangeDetectionStrategy.OnPush\r\n                : ChangeDetectionStrategy.Default,\r\n        };\r\n    }\r\n    const directiveDef = getDirectiveDef(constructor);\r\n    if (directiveDef) {\r\n        const inputs = extractInputDebugMetadata(directiveDef.inputs);\r\n        return { inputs, outputs: directiveDef.outputs };\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Retrieve map of local references.\r\n *\r\n * The references are retrieved as a map of local reference name to element or directive instance.\r\n *\r\n * @param target DOM element, component or directive instance for which to retrieve\r\n *    the local references.\r\n */\r\nfunction getLocalRefs(target) {\r\n    const context = getLContext(target);\r\n    if (context === null)\r\n        return {};\r\n    if (context.localRefs === undefined) {\r\n        const lView = context.lView;\r\n        if (lView === null) {\r\n            return {};\r\n        }\r\n        context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\r\n    }\r\n    return context.localRefs || {};\r\n}\r\n/**\r\n * Retrieves the host element of a component or directive instance.\r\n * The host element is the DOM element that matched the selector of the directive.\r\n *\r\n * @param componentOrDirective Component or directive instance for which the host\r\n *     element should be retrieved.\r\n * @returns Host element of the target.\r\n *\r\n * @publicApi\r\n */\r\nfunction getHostElement(componentOrDirective) {\r\n    return getLContext(componentOrDirective).native;\r\n}\r\n/**\r\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\r\n * listeners, but it does not include event listeners defined outside of the Angular context\r\n * (e.g. through `addEventListener`).\r\n *\r\n * @usageNotes\r\n * Given the following DOM structure:\r\n *\r\n * ```html\r\n * <app-root>\r\n *   <div (click)=\"doSomething()\"></div>\r\n * </app-root>\r\n * ```\r\n *\r\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\r\n *\r\n * ```ts\r\n * {\r\n *   name: 'click',\r\n *   element: <div>,\r\n *   callback: () => doSomething(),\r\n *   useCapture: false\r\n * }\r\n * ```\r\n *\r\n * @param element Element for which the DOM listeners should be retrieved.\r\n * @returns Array of event listeners on the DOM element.\r\n *\r\n * @publicApi\r\n */\r\nfunction getListeners(element) {\r\n    ngDevMode && assertDomElement(element);\r\n    const lContext = getLContext(element);\r\n    const lView = lContext === null ? null : lContext.lView;\r\n    if (lView === null)\r\n        return [];\r\n    const tView = lView[TVIEW];\r\n    const lCleanup = lView[CLEANUP];\r\n    const tCleanup = tView.cleanup;\r\n    const listeners = [];\r\n    if (tCleanup && lCleanup) {\r\n        for (let i = 0; i < tCleanup.length;) {\r\n            const firstParam = tCleanup[i++];\r\n            const secondParam = tCleanup[i++];\r\n            if (typeof firstParam === 'string') {\r\n                const name = firstParam;\r\n                const listenerElement = unwrapRNode(lView[secondParam]);\r\n                const callback = lCleanup[tCleanup[i++]];\r\n                const useCaptureOrIndx = tCleanup[i++];\r\n                // if useCaptureOrIndx is boolean then report it as is.\r\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\r\n                // if useCaptureOrIndx is negative number then it is a Subscription\r\n                const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\r\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\r\n                if (element == listenerElement) {\r\n                    listeners.push({ element, name, callback, useCapture, type });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    listeners.sort(sortListeners);\r\n    return listeners;\r\n}\r\nfunction sortListeners(a, b) {\r\n    if (a.name == b.name)\r\n        return 0;\r\n    return a.name < b.name ? -1 : 1;\r\n}\r\n/**\r\n * This function should not exist because it is megamorphic and only mostly correct.\r\n *\r\n * See call site for more info.\r\n */\r\nfunction isDirectiveDefHack(obj) {\r\n    return (obj.type !== undefined &&\r\n        obj.declaredInputs !== undefined &&\r\n        obj.resolveHostDirectives !== undefined);\r\n}\r\n/** Asserts that a value is a DOM Element. */\r\nfunction assertDomElement(value) {\r\n    if (typeof Element !== 'undefined' && !(value instanceof Element)) {\r\n        throw new Error('Expecting instance of DOM Element');\r\n    }\r\n}\r\n/**\r\n * A directive definition holds additional metadata using bitwise flags to indicate\r\n * for example whether it is signal based.\r\n *\r\n * This information needs to be separate from the `publicName -> minifiedName`\r\n * mappings for backwards compatibility.\r\n */\r\nfunction extractInputDebugMetadata(inputs) {\r\n    const res = {};\r\n    for (const key in inputs) {\r\n        if (inputs.hasOwnProperty(key)) {\r\n            const value = inputs[key];\r\n            if (value !== undefined) {\r\n                res[key] = value[0];\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\r\n * inject the `DOCUMENT` token and are done.\r\n *\r\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\r\n * way.\r\n *\r\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\r\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\r\n *\r\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\r\n * tell ivy what the global `document` is.\r\n *\r\n * Angular does this for us in each of the standard platforms (`Browser` and `Server`)\r\n * by calling `setDocument()` when providing the `DOCUMENT` token.\r\n */\r\nlet DOCUMENT = undefined;\r\n/**\r\n * Tell ivy what the `document` is for this platform.\r\n *\r\n * It is only necessary to call this if the current platform is not a browser.\r\n *\r\n * @param document The object representing the global `document` in this environment.\r\n */\r\nfunction setDocument(document) {\r\n    DOCUMENT = document;\r\n}\r\n/**\r\n * Access the object that represents the `document` for this platform.\r\n *\r\n * Ivy calls this whenever it needs to access the `document` object.\r\n * For example to create the renderer or to do sanitization.\r\n */\r\nfunction getDocument() {\r\n    if (DOCUMENT !== undefined) {\r\n        return DOCUMENT;\r\n    }\r\n    else if (typeof document !== 'undefined') {\r\n        return document;\r\n    }\r\n    throw new RuntimeError(210 /* RuntimeErrorCode.MISSING_DOCUMENT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n        `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);\r\n    // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\r\n    // the current platform is not a browser. Since this is not a supported scenario at the moment\r\n    // this should not happen in Angular apps.\r\n    // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\r\n    // public API.\r\n}\r\n\r\n/**\r\n * A DI token representing a string ID, used\r\n * primarily for prefixing application attributes and CSS styles when\r\n * {@link ViewEncapsulation#Emulated} is being used.\r\n *\r\n * The token is needed in cases when multiple applications are bootstrapped on a page\r\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\r\n * have different `APP_ID` value setup. For example:\r\n *\r\n * ```ts\r\n * bootstrapApplication(ComponentA, {\r\n *   providers: [\r\n *     { provide: APP_ID, useValue: 'app-a' },\r\n *     // ... other providers ...\r\n *   ]\r\n * });\r\n *\r\n * bootstrapApplication(ComponentB, {\r\n *   providers: [\r\n *     { provide: APP_ID, useValue: 'app-b' },\r\n *     // ... other providers ...\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * By default, when there is only one application bootstrapped, you don't need to provide the\r\n * `APP_ID` token (the `ng` will be used as an app ID).\r\n *\r\n * @publicApi\r\n */\r\nconst APP_ID = new InjectionToken(ngDevMode ? 'AppId' : '', {\r\n    providedIn: 'root',\r\n    factory: () => DEFAULT_APP_ID,\r\n});\r\n/** Default value of the `APP_ID` token. */\r\nconst DEFAULT_APP_ID = 'ng';\r\n/**\r\n * A function that is executed when a platform is initialized.\r\n *\r\n * @deprecated from v19.0.0, use providePlatformInitializer instead\r\n *\r\n * @see {@link providePlatformInitializer}\r\n *\r\n * @publicApi\r\n */\r\nconst PLATFORM_INITIALIZER = new InjectionToken(ngDevMode ? 'Platform Initializer' : '');\r\n/**\r\n * A token that indicates an opaque platform ID.\r\n * @publicApi\r\n */\r\nconst PLATFORM_ID = new InjectionToken(ngDevMode ? 'Platform ID' : '', {\r\n    providedIn: 'platform',\r\n    factory: () => 'unknown', // set a default platform name, when none set explicitly\r\n});\r\n/**\r\n * A DI token that indicates the root directory of\r\n * the application\r\n * @publicApi\r\n * @deprecated\r\n */\r\nconst PACKAGE_ROOT_URL = new InjectionToken(ngDevMode ? 'Application Packages Root URL' : '');\r\n// We keep this token here, rather than the animations package, so that modules that only care\r\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\r\n// include extra dependencies. See #44970 for more context.\r\n/**\r\n * A [DI token](api/core/InjectionToken) that indicates which animations\r\n * module has been loaded.\r\n * @publicApi\r\n */\r\nconst ANIMATION_MODULE_TYPE = new InjectionToken(ngDevMode ? 'AnimationModuleType' : '');\r\n// TODO(crisbeto): link to CSP guide here.\r\n/**\r\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\r\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\r\n * from the `ngCspNonce` attribute of the application root node.\r\n *\r\n * @publicApi\r\n */\r\nconst CSP_NONCE = new InjectionToken(ngDevMode ? 'CSP nonce' : '', {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n        // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\r\n        // the root node, but because the token value is used in renderers, it has to be available\r\n        // *very* early in the bootstrapping process. This should be a fairly shallow search, because\r\n        // the app won't have been added to the DOM yet. Some approaches that were considered:\r\n        // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\r\n        // be enough for our purposes, but the token is injected very early so the `components` array\r\n        // isn't populated yet.\r\n        // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\r\n        // creating the `LView`. This means that no `LView` will have been entered when this factory is\r\n        // invoked for the root component.\r\n        // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\r\n        // the slightly later execution does allow us to get an `LView` reference, but the fact that\r\n        // it is a function means that it could be executed at *any* time (including immediately) which\r\n        // may lead to weird bugs.\r\n        // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\r\n        // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\r\n        // node and the nonce value needs to be available when the renderer is created.\r\n        return getDocument().body?.querySelector('[ngCspNonce]')?.getAttribute('ngCspNonce') || null;\r\n    },\r\n});\r\nconst IMAGE_CONFIG_DEFAULTS = {\r\n    breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\r\n    placeholderResolution: 30,\r\n    disableImageSizeWarning: false,\r\n    disableImageLazyLoadWarning: false,\r\n};\r\n/**\r\n * Injection token that configures the image optimized image functionality.\r\n * See {@link ImageConfig} for additional information about parameters that\r\n * can be used.\r\n *\r\n * @see {@link NgOptimizedImage}\r\n * @see {@link ImageConfig}\r\n * @publicApi\r\n */\r\nconst IMAGE_CONFIG = new InjectionToken(ngDevMode ? 'ImageConfig' : '', {\r\n    providedIn: 'root',\r\n    factory: () => IMAGE_CONFIG_DEFAULTS,\r\n});\r\n\r\n/**\r\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction makeStateKey(key) {\r\n    return key;\r\n}\r\nfunction initTransferState() {\r\n    const transferState = new TransferState();\r\n    if (typeof ngServerMode === 'undefined' || !ngServerMode) {\r\n        transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));\r\n    }\r\n    return transferState;\r\n}\r\n/**\r\n * A key value store that is transferred from the application on the server side to the application\r\n * on the client side.\r\n *\r\n * The `TransferState` is available as an injectable token.\r\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\r\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\r\n * the `ServerTransferStateModule` module to make the `TransferState` available.\r\n *\r\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\r\n * non-lossy manner.\r\n *\r\n * @publicApi\r\n */\r\nclass TransferState {\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: TransferState,\r\n        providedIn: 'root',\r\n        factory: initTransferState,\r\n    });\r\n    /** @internal */\r\n    store = {};\r\n    onSerializeCallbacks = {};\r\n    /**\r\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n     */\r\n    get(key, defaultValue) {\r\n        return this.store[key] !== undefined ? this.store[key] : defaultValue;\r\n    }\r\n    /**\r\n     * Set the value corresponding to a key.\r\n     */\r\n    set(key, value) {\r\n        this.store[key] = value;\r\n    }\r\n    /**\r\n     * Remove a key from the store.\r\n     */\r\n    remove(key) {\r\n        delete this.store[key];\r\n    }\r\n    /**\r\n     * Test whether a key exists in the store.\r\n     */\r\n    hasKey(key) {\r\n        return this.store.hasOwnProperty(key);\r\n    }\r\n    /**\r\n     * Indicates whether the state is empty.\r\n     */\r\n    get isEmpty() {\r\n        return Object.keys(this.store).length === 0;\r\n    }\r\n    /**\r\n     * Register a callback to provide the value for a key when `toJson` is called.\r\n     */\r\n    onSerialize(key, callback) {\r\n        this.onSerializeCallbacks[key] = callback;\r\n    }\r\n    /**\r\n     * Serialize the current state of the store to JSON.\r\n     */\r\n    toJson() {\r\n        // Call the onSerialize callbacks and put those values into the store.\r\n        for (const key in this.onSerializeCallbacks) {\r\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\r\n                try {\r\n                    this.store[key] = this.onSerializeCallbacks[key]();\r\n                }\r\n                catch (e) {\r\n                    console.warn('Exception in onSerialize callback: ', e);\r\n                }\r\n            }\r\n        }\r\n        // Escape script tag to avoid break out of <script> tag in serialized output.\r\n        // Encoding of `<` is the same behaviour as G3 script_builders.\r\n        return JSON.stringify(this.store).replace(/</g, '\\\\u003C');\r\n    }\r\n}\r\nfunction retrieveTransferredState(doc, appId) {\r\n    // Locate the script tag with the JSON data transferred from the server.\r\n    // The id of the script tag is set to the Angular appId + 'state'.\r\n    const script = doc.getElementById(appId + '-state');\r\n    if (script?.textContent) {\r\n        try {\r\n            // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\r\n            // Decoding of `<` is done of the box by browsers and node.js, same behaviour as G3\r\n            // script_builders.\r\n            return JSON.parse(script.textContent);\r\n        }\r\n        catch (e) {\r\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\r\n        }\r\n    }\r\n    return {};\r\n}\r\n\r\n/** Encodes that the node lookup should start from the host node of this component. */\r\nconst REFERENCE_NODE_HOST = 'h';\r\n/** Encodes that the node lookup should start from the document body node. */\r\nconst REFERENCE_NODE_BODY = 'b';\r\nconst NODE_NAVIGATION_STEP_FIRST_CHILD = 'f';\r\nconst NODE_NAVIGATION_STEP_NEXT_SIBLING = 'n';\r\n/**\r\n * Keys within serialized view data structure to represent various\r\n * parts. See the `SerializedView` interface below for additional information.\r\n */\r\nconst ELEMENT_CONTAINERS = 'e';\r\nconst TEMPLATES = 't';\r\nconst CONTAINERS = 'c';\r\nconst MULTIPLIER = 'x';\r\nconst NUM_ROOT_NODES = 'r';\r\nconst TEMPLATE_ID = 'i'; // as it's also an \"id\"\r\nconst NODES = 'n';\r\nconst DISCONNECTED_NODES = 'd';\r\nconst I18N_DATA = 'l';\r\nconst DEFER_BLOCK_ID = 'di';\r\nconst DEFER_BLOCK_STATE$1 = 's';\r\nconst DEFER_PARENT_BLOCK_ID = 'p';\r\nconst DEFER_HYDRATE_TRIGGERS = 't';\r\n\r\n/**\r\n * Internal token that specifies whether DOM reuse logic\r\n * during hydration is enabled.\r\n */\r\nconst IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_HYDRATION_DOM_REUSE_ENABLED' : '');\r\n// By default (in client rendering mode), we remove all the contents\r\n// of the host element and render an application after that.\r\nconst PRESERVE_HOST_CONTENT_DEFAULT = false;\r\n/**\r\n * Internal token that indicates whether host element content should be\r\n * retained during the bootstrap.\r\n */\r\nconst PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'PRESERVE_HOST_CONTENT' : '', {\r\n    providedIn: 'root',\r\n    factory: () => PRESERVE_HOST_CONTENT_DEFAULT,\r\n});\r\n/**\r\n * Internal token that indicates whether hydration support for i18n\r\n * is enabled.\r\n */\r\nconst IS_I18N_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_I18N_HYDRATION_ENABLED' : '');\r\n/**\r\n * Internal token that indicates whether event replay support for SSR\r\n * is enabled.\r\n */\r\nconst IS_EVENT_REPLAY_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_EVENT_REPLAY_ENABLED' : '');\r\nconst EVENT_REPLAY_ENABLED_DEFAULT = false;\r\n/**\r\n * Internal token that indicates whether incremental hydration support\r\n * is enabled.\r\n */\r\nconst IS_INCREMENTAL_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_INCREMENTAL_HYDRATION_ENABLED' : '');\r\n/**\r\n * A map of DOM elements with `jsaction` attributes grouped by action names.\r\n */\r\nconst JSACTION_BLOCK_ELEMENT_MAP = new InjectionToken(ngDevMode ? 'JSACTION_BLOCK_ELEMENT_MAP' : '', {\r\n    providedIn: 'root',\r\n    factory: () => new Map(),\r\n});\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/** Configuration object used to register passive and capturing events. */\r\nconst eventListenerOptions = {\r\n    passive: true,\r\n    capture: true,\r\n};\r\n/** Keeps track of the currently-registered `on hover` triggers. */\r\nconst hoverTriggers = new WeakMap();\r\n/** Keeps track of the currently-registered `on interaction` triggers. */\r\nconst interactionTriggers = new WeakMap();\r\n/** Currently-registered `viewport` triggers. */\r\nconst viewportTriggers = new WeakMap();\r\n/** Names of the events considered as interaction events. */\r\nconst interactionEventNames = ['click', 'keydown'];\r\n/** Names of the events considered as hover events. */\r\nconst hoverEventNames = ['mouseenter', 'mouseover', 'focusin'];\r\n/** `IntersectionObserver` used to observe `viewport` triggers. */\r\nlet intersectionObserver = null;\r\n/** Number of elements currently observed with `viewport` triggers. */\r\nlet observedViewportElements = 0;\r\n/** Object keeping track of registered callbacks for a deferred block trigger. */\r\nclass DeferEventEntry {\r\n    callbacks = new Set();\r\n    listener = () => {\r\n        for (const callback of this.callbacks) {\r\n            callback();\r\n        }\r\n    };\r\n}\r\n/**\r\n * Registers an interaction trigger.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger is interacted with.\r\n * @return cleanup function which removes trigger Element from interactionTriggers map\r\n * and interaction event listeners from the trigger Element\r\n */\r\nfunction onInteraction(trigger, callback) {\r\n    let entry = interactionTriggers.get(trigger);\r\n    // If this is the first entry for this element, add the listeners.\r\n    if (!entry) {\r\n        // Note that managing events centrally like this lends itself well to using global\r\n        // event delegation. It currently does delegation at the element level, rather than the\r\n        // document level, because:\r\n        // 1. Global delegation is the most effective when there are a lot of events being registered\r\n        // at the same time. Deferred blocks are unlikely to be used in such a way.\r\n        // 2. Matching events to their target isn't free. For each `click` and `keydown` event we\r\n        // would have look through all the triggers and check if the target either is the element\r\n        // itself or it's contained within the element. Given that `click` and `keydown` are some\r\n        // of the most common events, this may end up introducing a lot of runtime overhead.\r\n        // 3. We're still registering only two events per element, no matter how many deferred blocks\r\n        // are referencing it.\r\n        entry = new DeferEventEntry();\r\n        interactionTriggers.set(trigger, entry);\r\n        for (const name of interactionEventNames) {\r\n            trigger.addEventListener(name, entry.listener, eventListenerOptions);\r\n        }\r\n    }\r\n    entry.callbacks.add(callback);\r\n    return () => {\r\n        const { callbacks, listener } = entry;\r\n        callbacks.delete(callback);\r\n        if (callbacks.size === 0) {\r\n            interactionTriggers.delete(trigger);\r\n            for (const name of interactionEventNames) {\r\n                trigger.removeEventListener(name, listener, eventListenerOptions);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Registers a hover trigger.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger is hovered over.\r\n * @return cleanup function which removes trigger element from hoverTriggers map\r\n * and removes hover interaction event listeners from the trigger element\r\n */\r\nfunction onHover(trigger, callback) {\r\n    let entry = hoverTriggers.get(trigger);\r\n    // If this is the first entry for this element, add the listener.\r\n    if (!entry) {\r\n        entry = new DeferEventEntry();\r\n        hoverTriggers.set(trigger, entry);\r\n        for (const name of hoverEventNames) {\r\n            trigger.addEventListener(name, entry.listener, eventListenerOptions);\r\n        }\r\n    }\r\n    entry.callbacks.add(callback);\r\n    return () => {\r\n        const { callbacks, listener } = entry;\r\n        callbacks.delete(callback);\r\n        if (callbacks.size === 0) {\r\n            for (const name of hoverEventNames) {\r\n                trigger.removeEventListener(name, listener, eventListenerOptions);\r\n            }\r\n            hoverTriggers.delete(trigger);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Used to create an IntersectionObserver instance.\r\n * @return IntersectionObserver that is used by onViewport\r\n */\r\nfunction createIntersectionObserver() {\r\n    return new IntersectionObserver((entries) => {\r\n        for (const current of entries) {\r\n            if (current.isIntersecting && viewportTriggers.has(current.target)) {\r\n                viewportTriggers.get(current.target).listener();\r\n            }\r\n        }\r\n    });\r\n}\r\n/**\r\n * Registers a viewport trigger.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger comes into the viewport.\r\n * @param observerFactoryFn Factory function which returns an IntersectionObserver\r\n * @return cleanup function which removes trigger Element from viewportTriggers map\r\n * and tells the intersection observer to stop observing trigger Element and set\r\n * intersectionObserver to null if there are no more Elements to observe\r\n */\r\nfunction onViewport(trigger, callback, observerFactoryFn) {\r\n    let entry = viewportTriggers.get(trigger);\r\n    intersectionObserver = intersectionObserver || observerFactoryFn();\r\n    if (!entry) {\r\n        entry = new DeferEventEntry();\r\n        intersectionObserver.observe(trigger);\r\n        viewportTriggers.set(trigger, entry);\r\n        observedViewportElements++;\r\n    }\r\n    entry.callbacks.add(callback);\r\n    return () => {\r\n        if (!viewportTriggers.has(trigger)) {\r\n            return;\r\n        }\r\n        entry.callbacks.delete(callback);\r\n        if (entry.callbacks.size === 0) {\r\n            intersectionObserver?.unobserve(trigger);\r\n            viewportTriggers.delete(trigger);\r\n            observedViewportElements--;\r\n        }\r\n        if (observedViewportElements === 0) {\r\n            intersectionObserver?.disconnect();\r\n            intersectionObserver = null;\r\n        }\r\n    };\r\n}\r\n\r\nconst DEFER_BLOCK_SSR_ID_ATTRIBUTE = 'ngb';\r\nfunction setJSActionAttributes(nativeElement, eventTypes, parentDeferBlockId = null) {\r\n    // jsaction attributes specifically should be applied to elements and not comment nodes.\r\n    // Comment nodes also have no setAttribute function. So this avoids errors.\r\n    if (eventTypes.length === 0 || nativeElement.nodeType !== Node.ELEMENT_NODE) {\r\n        return;\r\n    }\r\n    const existingAttr = nativeElement.getAttribute(Attribute$1.JSACTION);\r\n    // we dedupe cases where hydrate triggers are used as it's possible that\r\n    // someone may have added an event binding to the root node that matches what the\r\n    // hydrate trigger adds.\r\n    const parts = eventTypes.reduce((prev, curr) => {\r\n        // if there is no existing attribute OR it's not in the existing one, we need to add it\r\n        return (existingAttr?.indexOf(curr) ?? -1) === -1 ? prev + curr + ':;' : prev;\r\n    }, '');\r\n    //  This is required to be a module accessor to appease security tests on setAttribute.\r\n    nativeElement.setAttribute(Attribute$1.JSACTION, `${existingAttr ?? ''}${parts}`);\r\n    const blockName = parentDeferBlockId ?? '';\r\n    if (blockName !== '' && parts.length > 0) {\r\n        nativeElement.setAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE, blockName);\r\n    }\r\n}\r\nconst sharedStashFunction = (rEl, eventType, listenerFn) => {\r\n    const el = rEl;\r\n    const eventListenerMap = el.__jsaction_fns ?? new Map();\r\n    const eventListeners = eventListenerMap.get(eventType) ?? [];\r\n    eventListeners.push(listenerFn);\r\n    eventListenerMap.set(eventType, eventListeners);\r\n    el.__jsaction_fns = eventListenerMap;\r\n};\r\nconst sharedMapFunction = (rEl, jsActionMap) => {\r\n    const el = rEl;\r\n    let blockName = el.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE) ?? '';\r\n    const blockSet = jsActionMap.get(blockName) ?? new Set();\r\n    if (!blockSet.has(el)) {\r\n        blockSet.add(el);\r\n    }\r\n    jsActionMap.set(blockName, blockSet);\r\n};\r\nfunction removeListenersFromBlocks(blockNames, jsActionMap) {\r\n    if (blockNames.length > 0) {\r\n        let blockList = [];\r\n        for (let blockName of blockNames) {\r\n            if (jsActionMap.has(blockName)) {\r\n                blockList = [...blockList, ...jsActionMap.get(blockName)];\r\n            }\r\n        }\r\n        const replayList = new Set(blockList);\r\n        replayList.forEach(removeListeners);\r\n    }\r\n}\r\nconst removeListeners = (el) => {\r\n    el.removeAttribute(Attribute$1.JSACTION);\r\n    el.removeAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE);\r\n    el.__jsaction_fns = undefined;\r\n};\r\nconst JSACTION_EVENT_CONTRACT = new InjectionToken(ngDevMode ? 'EVENT_CONTRACT_DETAILS' : '', {\r\n    providedIn: 'root',\r\n    factory: () => ({}),\r\n});\r\nfunction invokeListeners(event, currentTarget) {\r\n    const handlerFns = currentTarget?.__jsaction_fns?.get(event.type);\r\n    if (!handlerFns || !currentTarget?.isConnected) {\r\n        return;\r\n    }\r\n    for (const handler of handlerFns) {\r\n        handler(event);\r\n    }\r\n}\r\nconst stashEventListeners = new Map();\r\n/**\r\n * Registers a stashing function for a specific application ID.\r\n *\r\n * @param appId The unique identifier for the application instance.\r\n * @param fn The stashing function to associate with this app ID.\r\n * @returns A cleanup function that removes the stashing function when called.\r\n */\r\nfunction setStashFn(appId, fn) {\r\n    stashEventListeners.set(appId, fn);\r\n    return () => stashEventListeners.delete(appId);\r\n}\r\n/**\r\n * Indicates whether the stashing code was added, prevents adding it multiple times.\r\n */\r\nlet isStashEventListenerImplEnabled = false;\r\nlet _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => { };\r\n/**\r\n * Optionally stashes an event listener for later replay during hydration.\r\n *\r\n * This function delegates to an internal `_stashEventListenerImpl`, which may\r\n * be a no-op unless the event replay feature is enabled. When active, this\r\n * allows capturing event listener metadata before hydration completes, so that\r\n * user interactions during SSR can be replayed.\r\n *\r\n * @param lView The logical view (LView) where the listener is being registered.\r\n * @param target The DOM element or event target the listener is attached to.\r\n * @param eventName The name of the event being listened for (e.g., 'click').\r\n * @param wrappedListener The event handler that was registered.\r\n */\r\nfunction stashEventListenerImpl(lView, target, eventName, wrappedListener) {\r\n    _stashEventListenerImpl(lView, target, eventName, wrappedListener);\r\n}\r\n/**\r\n * Enables the event listener stashing logic in a tree-shakable way.\r\n *\r\n * This function lazily sets the implementation of `_stashEventListenerImpl`\r\n * so that it becomes active only when `withEventReplay` is invoked. This ensures\r\n * that the stashing logic is excluded from production builds unless needed.\r\n */\r\nfunction enableStashEventListenerImpl() {\r\n    if (!isStashEventListenerImplEnabled) {\r\n        _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {\r\n            const appId = lView[INJECTOR].get(APP_ID);\r\n            const stashEventListener = stashEventListeners.get(appId);\r\n            stashEventListener?.(target, eventName, wrappedListener);\r\n        };\r\n        isStashEventListenerImplEnabled = true;\r\n    }\r\n}\r\n\r\n/**\r\n * An internal injection token to reference `DehydratedBlockRegistry` implementation\r\n * in a tree-shakable way.\r\n */\r\nconst DEHYDRATED_BLOCK_REGISTRY = new InjectionToken(ngDevMode ? 'DEHYDRATED_BLOCK_REGISTRY' : '');\r\n/**\r\n * The DehydratedBlockRegistry is used for incremental hydration purposes. It keeps\r\n * track of the Defer Blocks that need hydration so we can effectively\r\n * navigate up to the top dehydrated defer block and fire appropriate cleanup\r\n * functions post hydration.\r\n */\r\nclass DehydratedBlockRegistry {\r\n    registry = new Map();\r\n    cleanupFns = new Map();\r\n    jsActionMap = inject(JSACTION_BLOCK_ELEMENT_MAP);\r\n    contract = inject(JSACTION_EVENT_CONTRACT);\r\n    add(blockId, info) {\r\n        this.registry.set(blockId, info);\r\n        // It's possible that hydration is queued that's waiting for the\r\n        // resolution of a lazy loaded route. In this case, we ensure\r\n        // the callback function is called to continue the hydration process\r\n        // for the queued block set.\r\n        if (this.awaitingCallbacks.has(blockId)) {\r\n            const awaitingCallbacks = this.awaitingCallbacks.get(blockId);\r\n            for (const cb of awaitingCallbacks) {\r\n                cb();\r\n            }\r\n        }\r\n    }\r\n    get(blockId) {\r\n        return this.registry.get(blockId) ?? null;\r\n    }\r\n    has(blockId) {\r\n        return this.registry.has(blockId);\r\n    }\r\n    cleanup(hydratedBlocks) {\r\n        removeListenersFromBlocks(hydratedBlocks, this.jsActionMap);\r\n        for (let blockId of hydratedBlocks) {\r\n            this.registry.delete(blockId);\r\n            this.jsActionMap.delete(blockId);\r\n            this.invokeTriggerCleanupFns(blockId);\r\n            this.hydrating.delete(blockId);\r\n            this.awaitingCallbacks.delete(blockId);\r\n        }\r\n        if (this.size === 0) {\r\n            this.contract.instance?.cleanUp();\r\n        }\r\n    }\r\n    get size() {\r\n        return this.registry.size;\r\n    }\r\n    // we have to leave the lowest block Id in the registry\r\n    // unless that block has no children\r\n    addCleanupFn(blockId, fn) {\r\n        let cleanupFunctions = [];\r\n        if (this.cleanupFns.has(blockId)) {\r\n            cleanupFunctions = this.cleanupFns.get(blockId);\r\n        }\r\n        cleanupFunctions.push(fn);\r\n        this.cleanupFns.set(blockId, cleanupFunctions);\r\n    }\r\n    invokeTriggerCleanupFns(blockId) {\r\n        const fns = this.cleanupFns.get(blockId) ?? [];\r\n        for (let fn of fns) {\r\n            fn();\r\n        }\r\n        this.cleanupFns.delete(blockId);\r\n    }\r\n    // Blocks that are being hydrated.\r\n    hydrating = new Map();\r\n    // Blocks that are awaiting a defer instruction finish.\r\n    awaitingCallbacks = new Map();\r\n    awaitParentBlock(topmostParentBlock, callback) {\r\n        const parentBlockAwaitCallbacks = this.awaitingCallbacks.get(topmostParentBlock) ?? [];\r\n        parentBlockAwaitCallbacks.push(callback);\r\n        this.awaitingCallbacks.set(topmostParentBlock, parentBlockAwaitCallbacks);\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: DehydratedBlockRegistry,\r\n        providedIn: null,\r\n        factory: () => new DehydratedBlockRegistry(),\r\n    });\r\n}\r\n\r\n/**\r\n * The name of the key used in the TransferState collection,\r\n * where hydration information is located.\r\n */\r\nconst TRANSFER_STATE_TOKEN_ID = '__nghData__';\r\n/**\r\n * Lookup key used to reference DOM hydration data (ngh) in `TransferState`.\r\n */\r\nconst NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);\r\n/**\r\n * The name of the key used in the TransferState collection,\r\n * where serialized defer block information is located.\r\n */\r\nconst TRANSFER_STATE_DEFER_BLOCKS_INFO = '__nghDeferData__';\r\n/**\r\n * Lookup key used to retrieve defer block datain `TransferState`.\r\n */\r\nconst NGH_DEFER_BLOCKS_KEY = makeStateKey(TRANSFER_STATE_DEFER_BLOCKS_INFO);\r\n/**\r\n * The name of the attribute that would be added to host component\r\n * nodes and contain a reference to a particular slot in transferred\r\n * state that contains the necessary hydration info for this component.\r\n */\r\nconst NGH_ATTR_NAME = 'ngh';\r\n/**\r\n * Marker used in a comment node to ensure hydration content integrity\r\n */\r\nconst SSR_CONTENT_INTEGRITY_MARKER = 'nghm';\r\n/**\r\n * Reference to a function that reads `ngh` attribute value from a given RNode\r\n * and retrieves hydration information from the TransferState using that value\r\n * as an index. Returns `null` by default, when hydration is not enabled.\r\n *\r\n * @param rNode Component's host element.\r\n * @param injector Injector that this component has access to.\r\n * @param isRootView Specifies whether we trying to read hydration info for the root view.\r\n */\r\nlet _retrieveHydrationInfoImpl = () => null;\r\nfunction retrieveHydrationInfoImpl(rNode, injector, isRootView = false) {\r\n    let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);\r\n    if (nghAttrValue == null)\r\n        return null;\r\n    // For cases when a root component also acts as an anchor node for a ViewContainerRef\r\n    // (for example, when ViewContainerRef is injected in a root component), there is a need\r\n    // to serialize information about the component itself, as well as an LContainer that\r\n    // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\r\n    // (1) hydration info for the root component itself and (2) hydration info for the\r\n    // ViewContainerRef instance (an LContainer). Each piece of information is included into\r\n    // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\r\n    // Since we only have 1 root element, we encode both bits of info into a single string:\r\n    // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\r\n    // and 25 is the `ngh` for a root view which holds LContainer).\r\n    const [componentViewNgh, rootViewNgh] = nghAttrValue.split('|');\r\n    nghAttrValue = isRootView ? rootViewNgh : componentViewNgh;\r\n    if (!nghAttrValue)\r\n        return null;\r\n    // We've read one of the ngh ids, keep the remaining one, so that\r\n    // we can set it back on the DOM element.\r\n    const rootNgh = rootViewNgh ? `|${rootViewNgh}` : '';\r\n    const remainingNgh = isRootView ? componentViewNgh : rootNgh;\r\n    let data = {};\r\n    // An element might have an empty `ngh` attribute value (e.g. `<comp ngh=\"\" />`),\r\n    // which means that no special annotations are required. Do not attempt to read\r\n    // from the TransferState in this case.\r\n    if (nghAttrValue !== '') {\r\n        const transferState = injector.get(TransferState, null, { optional: true });\r\n        if (transferState !== null) {\r\n            const nghData = transferState.get(NGH_DATA_KEY, []);\r\n            // The nghAttrValue is always a number referencing an index\r\n            // in the hydration TransferState data.\r\n            data = nghData[Number(nghAttrValue)];\r\n            // If the `ngh` attribute exists and has a non-empty value,\r\n            // the hydration info *must* be present in the TransferState.\r\n            // If there is no data for some reasons, this is an error.\r\n            ngDevMode && assertDefined(data, 'Unable to retrieve hydration info from the TransferState.');\r\n        }\r\n    }\r\n    const dehydratedView = {\r\n        data,\r\n        firstChild: rNode.firstChild ?? null,\r\n    };\r\n    if (isRootView) {\r\n        // If there is hydration info present for the root view, it means that there was\r\n        // a ViewContainerRef injected in the root component. The root component host element\r\n        // acted as an anchor node in this scenario. As a result, the DOM nodes that represent\r\n        // embedded views in this ViewContainerRef are located as siblings to the host node,\r\n        // i.e. `<app-root /><#VIEW1><#VIEW2>...<!--container-->`. In this case, the current\r\n        // node becomes the first child of this root view and the next sibling is the first\r\n        // element in the DOM segment.\r\n        dehydratedView.firstChild = rNode;\r\n        // We use `0` here, since this is the slot (right after the HEADER_OFFSET)\r\n        // where a component LView or an LContainer is located in a root LView.\r\n        setSegmentHead(dehydratedView, 0, rNode.nextSibling);\r\n    }\r\n    if (remainingNgh) {\r\n        // If we have only used one of the ngh ids, store the remaining one\r\n        // back on this RNode.\r\n        rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);\r\n    }\r\n    else {\r\n        // The `ngh` attribute is cleared from the DOM node now\r\n        // that the data has been retrieved for all indices.\r\n        rNode.removeAttribute(NGH_ATTR_NAME);\r\n    }\r\n    // Note: don't check whether this node was claimed for hydration,\r\n    // because this node might've been previously claimed while processing\r\n    // template instructions.\r\n    ngDevMode && markRNodeAsClaimedByHydration(rNode, /* checkIfAlreadyClaimed */ false);\r\n    ngDevMode && ngDevMode.hydratedComponents++;\r\n    return dehydratedView;\r\n}\r\n/**\r\n * Sets the implementation for the `retrieveHydrationInfo` function.\r\n */\r\nfunction enableRetrieveHydrationInfoImpl() {\r\n    _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;\r\n}\r\n/**\r\n * Retrieves hydration info by reading the value from the `ngh` attribute\r\n * and accessing a corresponding slot in TransferState storage.\r\n */\r\nfunction retrieveHydrationInfo(rNode, injector, isRootView = false) {\r\n    return _retrieveHydrationInfoImpl(rNode, injector, isRootView);\r\n}\r\n/**\r\n * Retrieves the necessary object from a given ViewRef to serialize:\r\n *  - an LView for component views\r\n *  - an LContainer for cases when component acts as a ViewContainerRef anchor\r\n *  - `null` in case of an embedded view\r\n */\r\nfunction getLNodeForHydration(viewRef) {\r\n    // Reading an internal field from `ViewRef` instance.\r\n    let lView = viewRef._lView;\r\n    const tView = lView[TVIEW];\r\n    // A registered ViewRef might represent an instance of an\r\n    // embedded view, in which case we do not need to annotate it.\r\n    if (tView.type === 2 /* TViewType.Embedded */) {\r\n        return null;\r\n    }\r\n    // Check if it's a root view and if so, retrieve component's\r\n    // LView from the first slot after the header.\r\n    if (isRootView(lView)) {\r\n        lView = lView[HEADER_OFFSET];\r\n    }\r\n    return lView;\r\n}\r\nfunction getTextNodeContent(node) {\r\n    return node.textContent?.replace(/\\s/gm, '');\r\n}\r\n/**\r\n * Restores text nodes and separators into the DOM that were lost during SSR\r\n * serialization. The hydration process replaces empty text nodes and text\r\n * nodes that are immediately adjacent to other text nodes with comment nodes\r\n * that this method filters on to restore those missing nodes that the\r\n * hydration process is expecting to be present.\r\n *\r\n * @param node The app's root HTML Element\r\n */\r\nfunction processTextNodeMarkersBeforeHydration(node) {\r\n    const doc = getDocument();\r\n    const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\r\n        acceptNode(node) {\r\n            const content = getTextNodeContent(node);\r\n            const isTextNodeMarker = content === \"ngetn\" /* TextNodeMarker.EmptyNode */ || content === \"ngtns\" /* TextNodeMarker.Separator */;\r\n            return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\r\n        },\r\n    });\r\n    let currentNode;\r\n    // We cannot modify the DOM while using the commentIterator,\r\n    // because it throws off the iterator state.\r\n    // So we collect all marker nodes first and then follow up with\r\n    // applying the changes to the DOM: either inserting an empty node\r\n    // or just removing the marker if it was used as a separator.\r\n    const nodes = [];\r\n    while ((currentNode = commentNodesIterator.nextNode())) {\r\n        nodes.push(currentNode);\r\n    }\r\n    for (const node of nodes) {\r\n        if (node.textContent === \"ngetn\" /* TextNodeMarker.EmptyNode */) {\r\n            node.replaceWith(doc.createTextNode(''));\r\n        }\r\n        else {\r\n            node.remove();\r\n        }\r\n    }\r\n}\r\n/**\r\n * Internal type that represents a claimed node.\r\n * Only used in dev mode.\r\n */\r\nvar HydrationStatus;\r\n(function (HydrationStatus) {\r\n    HydrationStatus[\"Hydrated\"] = \"hydrated\";\r\n    HydrationStatus[\"Skipped\"] = \"skipped\";\r\n    HydrationStatus[\"Mismatched\"] = \"mismatched\";\r\n})(HydrationStatus || (HydrationStatus = {}));\r\nconst HYDRATION_INFO_KEY = '__ngDebugHydrationInfo__';\r\nfunction patchHydrationInfo(node, info) {\r\n    node[HYDRATION_INFO_KEY] = info;\r\n}\r\nfunction readHydrationInfo(node) {\r\n    return node[HYDRATION_INFO_KEY] ?? null;\r\n}\r\n/**\r\n * Marks a node as \"claimed\" by hydration process.\r\n * This is needed to make assessments in tests whether\r\n * the hydration process handled all nodes.\r\n */\r\nfunction markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {\r\n    if (!ngDevMode) {\r\n        throw new Error('Calling `markRNodeAsClaimedByHydration` in prod mode ' +\r\n            'is not supported and likely a mistake.');\r\n    }\r\n    if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {\r\n        throw new Error('Trying to claim a node, which was claimed already.');\r\n    }\r\n    patchHydrationInfo(node, { status: HydrationStatus.Hydrated });\r\n    ngDevMode.hydratedNodes++;\r\n}\r\nfunction markRNodeAsSkippedByHydration(node) {\r\n    if (!ngDevMode) {\r\n        throw new Error('Calling `markRNodeAsSkippedByHydration` in prod mode ' +\r\n            'is not supported and likely a mistake.');\r\n    }\r\n    patchHydrationInfo(node, { status: HydrationStatus.Skipped });\r\n    ngDevMode.componentsSkippedHydration++;\r\n}\r\nfunction countBlocksSkippedByHydration(injector) {\r\n    const transferState = injector.get(TransferState);\r\n    const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\r\n    if (ngDevMode) {\r\n        ngDevMode.deferBlocksWithIncrementalHydration = Object.keys(nghDeferData).length;\r\n    }\r\n}\r\nfunction markRNodeAsHavingHydrationMismatch(node, expectedNodeDetails = null, actualNodeDetails = null) {\r\n    if (!ngDevMode) {\r\n        throw new Error('Calling `markRNodeAsMismatchedByHydration` in prod mode ' +\r\n            'is not supported and likely a mistake.');\r\n    }\r\n    // The RNode can be a standard HTMLElement (not an Angular component or directive)\r\n    // The devtools component tree only displays Angular components & directives\r\n    // Therefore we attach the debug info to the closest component/directive\r\n    while (node && !getComponent(node)) {\r\n        node = node?.parentNode;\r\n    }\r\n    if (node) {\r\n        patchHydrationInfo(node, {\r\n            status: HydrationStatus.Mismatched,\r\n            expectedNodeDetails,\r\n            actualNodeDetails,\r\n        });\r\n    }\r\n}\r\nfunction isRNodeClaimedForHydration(node) {\r\n    return readHydrationInfo(node)?.status === HydrationStatus.Hydrated;\r\n}\r\nfunction setSegmentHead(hydrationInfo, index, node) {\r\n    hydrationInfo.segmentHeads ??= {};\r\n    hydrationInfo.segmentHeads[index] = node;\r\n}\r\nfunction getSegmentHead(hydrationInfo, index) {\r\n    return hydrationInfo.segmentHeads?.[index] ?? null;\r\n}\r\nfunction isIncrementalHydrationEnabled(injector) {\r\n    return injector.get(IS_INCREMENTAL_HYDRATION_ENABLED, false, {\r\n        optional: true,\r\n    });\r\n}\r\n/** Throws an error if the incremental hydration is not enabled */\r\nfunction assertIncrementalHydrationIsConfigured(injector) {\r\n    if (!isIncrementalHydrationEnabled(injector)) {\r\n        throw new RuntimeError(508 /* RuntimeErrorCode.MISCONFIGURED_INCREMENTAL_HYDRATION */, 'Angular has detected that some `@defer` blocks use `hydrate` triggers, ' +\r\n            'but incremental hydration was not enabled. Please ensure that the `withIncrementalHydration()` ' +\r\n            'call is added as an argument for the `provideClientHydration()` function call ' +\r\n            'in your application config.');\r\n    }\r\n}\r\n/** Throws an error if the ssrUniqueId on the LDeferBlockDetails is not present  */\r\nfunction assertSsrIdDefined(ssrUniqueId) {\r\n    assertDefined(ssrUniqueId, 'Internal error: expecting an SSR id for a defer block that should be hydrated, but the id is not present');\r\n}\r\n/**\r\n * Returns the size of an <ng-container>, using either the information\r\n * serialized in `ELEMENT_CONTAINERS` (element container size) or by\r\n * computing the sum of root nodes in all dehydrated views in a given\r\n * container (in case this `<ng-container>` was also used as a view\r\n * container host node, e.g. <ng-container *ngIf>).\r\n */\r\nfunction getNgContainerSize(hydrationInfo, index) {\r\n    const data = hydrationInfo.data;\r\n    let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;\r\n    // If there is no serialized information available in the `ELEMENT_CONTAINERS` slot,\r\n    // check if we have info about view containers at this location (e.g.\r\n    // `<ng-container *ngIf>`) and use container size as a number of root nodes in this\r\n    // element container.\r\n    if (size === null && data[CONTAINERS]?.[index]) {\r\n        size = calcSerializedContainerSize(hydrationInfo, index);\r\n    }\r\n    return size;\r\n}\r\nfunction isSerializedElementContainer(hydrationInfo, index) {\r\n    return hydrationInfo.data[ELEMENT_CONTAINERS]?.[index] !== undefined;\r\n}\r\nfunction getSerializedContainerViews(hydrationInfo, index) {\r\n    return hydrationInfo.data[CONTAINERS]?.[index] ?? null;\r\n}\r\n/**\r\n * Computes the size of a serialized container (the number of root nodes)\r\n * by calculating the sum of root nodes in all dehydrated views in this container.\r\n */\r\nfunction calcSerializedContainerSize(hydrationInfo, index) {\r\n    const views = getSerializedContainerViews(hydrationInfo, index) ?? [];\r\n    let numNodes = 0;\r\n    for (let view of views) {\r\n        numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);\r\n    }\r\n    return numNodes;\r\n}\r\n/**\r\n * Attempt to initialize the `disconnectedNodes` field of the given\r\n * `DehydratedView`. Returns the initialized value.\r\n */\r\nfunction initDisconnectedNodes(hydrationInfo) {\r\n    // Check if we are processing disconnected info for the first time.\r\n    if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\r\n        const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\r\n        hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\r\n    }\r\n    return hydrationInfo.disconnectedNodes;\r\n}\r\n/**\r\n * Checks whether a node is annotated as \"disconnected\", i.e. not present\r\n * in the DOM at serialization time. We should not attempt hydration for\r\n * such nodes and instead, use a regular \"creation mode\".\r\n */\r\nfunction isDisconnectedNode$1(hydrationInfo, index) {\r\n    // Check if we are processing disconnected info for the first time.\r\n    if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\r\n        const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\r\n        hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\r\n    }\r\n    return !!initDisconnectedNodes(hydrationInfo)?.has(index);\r\n}\r\n/**\r\n * Helper function to prepare text nodes for serialization by ensuring\r\n * that seperate logical text blocks in the DOM remain separate after\r\n * serialization.\r\n */\r\nfunction processTextNodeBeforeSerialization(context, node) {\r\n    // Handle cases where text nodes can be lost after DOM serialization:\r\n    //  1. When there is an *empty text node* in DOM: in this case, this\r\n    //     node would not make it into the serialized string and as a result,\r\n    //     this node wouldn't be created in a browser. This would result in\r\n    //     a mismatch during the hydration, where the runtime logic would expect\r\n    //     a text node to be present in live DOM, but no text node would exist.\r\n    //     Example: `<span>{{ name }}</span>` when the `name` is an empty string.\r\n    //     This would result in `<span></span>` string after serialization and\r\n    //     in a browser only the `span` element would be created. To resolve that,\r\n    //     an extra comment node is appended in place of an empty text node and\r\n    //     that special comment node is replaced with an empty text node *before*\r\n    //     hydration.\r\n    //  2. When there are 2 consecutive text nodes present in the DOM.\r\n    //     Example: `<div>Hello <ng-container *ngIf=\"true\">world</ng-container></div>`.\r\n    //     In this scenario, the live DOM would look like this:\r\n    //       <div>#text('Hello ') #text('world') #comment('container')</div>\r\n    //     Serialized string would look like this: `<div>Hello world<!--container--></div>`.\r\n    //     The live DOM in a browser after that would be:\r\n    //       <div>#text('Hello world') #comment('container')</div>\r\n    //     Notice how 2 text nodes are now \"merged\" into one. This would cause hydration\r\n    //     logic to fail, since it'd expect 2 text nodes being present, not one.\r\n    //     To fix this, we insert a special comment node in between those text nodes, so\r\n    //     serialized representation is: `<div>Hello <!--ngtns-->world<!--container--></div>`.\r\n    //     This forces browser to create 2 text nodes separated by a comment node.\r\n    //     Before running a hydration process, this special comment node is removed, so the\r\n    //     live DOM has exactly the same state as it was before serialization.\r\n    // Collect this node as required special annotation only when its\r\n    // contents is empty. Otherwise, such text node would be present on\r\n    // the client after server-side rendering and no special handling needed.\r\n    const el = node;\r\n    const corruptedTextNodes = context.corruptedTextNodes;\r\n    if (el.textContent === '') {\r\n        corruptedTextNodes.set(el, \"ngetn\" /* TextNodeMarker.EmptyNode */);\r\n    }\r\n    else if (el.nextSibling?.nodeType === Node.TEXT_NODE) {\r\n        corruptedTextNodes.set(el, \"ngtns\" /* TextNodeMarker.Separator */);\r\n    }\r\n}\r\nfunction convertHydrateTriggersToJsAction(triggers) {\r\n    let actionList = [];\r\n    if (triggers !== null) {\r\n        if (triggers.has(4 /* DeferBlockTrigger.Hover */)) {\r\n            actionList.push(...hoverEventNames);\r\n        }\r\n        if (triggers.has(3 /* DeferBlockTrigger.Interaction */)) {\r\n            actionList.push(...interactionEventNames);\r\n        }\r\n    }\r\n    return actionList;\r\n}\r\n/**\r\n * Builds a queue of blocks that need to be hydrated, looking up the\r\n * tree to the topmost defer block that exists in the tree that hasn't\r\n * been hydrated, but exists in the registry. This queue is in top down\r\n * hierarchical order as a list of defer block ids.\r\n * Note: This is utilizing serialized information to navigate up the tree\r\n */\r\nfunction getParentBlockHydrationQueue(deferBlockId, injector) {\r\n    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n    const transferState = injector.get(TransferState);\r\n    const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\r\n    let isTopMostDeferBlock = false;\r\n    let currentBlockId = deferBlockId;\r\n    let parentBlockPromise = null;\r\n    const hydrationQueue = [];\r\n    while (!isTopMostDeferBlock && currentBlockId) {\r\n        ngDevMode &&\r\n            assertEqual(hydrationQueue.indexOf(currentBlockId), -1, 'Internal error: defer block hierarchy has a cycle.');\r\n        isTopMostDeferBlock = dehydratedBlockRegistry.has(currentBlockId);\r\n        const hydratingParentBlock = dehydratedBlockRegistry.hydrating.get(currentBlockId);\r\n        if (parentBlockPromise === null && hydratingParentBlock != null) {\r\n            parentBlockPromise = hydratingParentBlock.promise;\r\n            break;\r\n        }\r\n        hydrationQueue.unshift(currentBlockId);\r\n        currentBlockId = deferBlockParents[currentBlockId][DEFER_PARENT_BLOCK_ID];\r\n    }\r\n    return { parentBlockPromise, hydrationQueue };\r\n}\r\nfunction gatherDeferBlocksByJSActionAttribute(doc) {\r\n    const jsactionNodes = doc.body.querySelectorAll('[jsaction]');\r\n    const blockMap = new Set();\r\n    const eventTypes = [hoverEventNames.join(':;'), interactionEventNames.join(':;')].join('|');\r\n    for (let node of jsactionNodes) {\r\n        const attr = node.getAttribute('jsaction');\r\n        const blockId = node.getAttribute('ngb');\r\n        if (attr?.match(eventTypes) && blockId !== null) {\r\n            blockMap.add(node);\r\n        }\r\n    }\r\n    return blockMap;\r\n}\r\nfunction appendDeferBlocksToJSActionMap(doc, injector) {\r\n    const blockMap = gatherDeferBlocksByJSActionAttribute(doc);\r\n    const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);\r\n    for (let rNode of blockMap) {\r\n        sharedMapFunction(rNode, jsActionMap);\r\n    }\r\n}\r\n/**\r\n * Retrieves defer block hydration information from the TransferState.\r\n *\r\n * @param injector Injector that this component has access to.\r\n */\r\nlet _retrieveDeferBlockDataImpl = () => {\r\n    return {};\r\n};\r\nfunction retrieveDeferBlockDataImpl(injector) {\r\n    const transferState = injector.get(TransferState, null, { optional: true });\r\n    if (transferState !== null) {\r\n        const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\r\n        ngDevMode &&\r\n            assertDefined(nghDeferData, 'Unable to retrieve defer block info from the TransferState.');\r\n        return nghDeferData;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Sets the implementation for the `retrieveDeferBlockData` function.\r\n */\r\nfunction enableRetrieveDeferBlockDataImpl() {\r\n    _retrieveDeferBlockDataImpl = retrieveDeferBlockDataImpl;\r\n}\r\n/**\r\n * Retrieves defer block data from TransferState storage\r\n */\r\nfunction retrieveDeferBlockData(injector) {\r\n    return _retrieveDeferBlockDataImpl(injector);\r\n}\r\nfunction isTimerTrigger(triggerInfo) {\r\n    return typeof triggerInfo === 'object' && triggerInfo.trigger === 5 /* DeferBlockTrigger.Timer */;\r\n}\r\nfunction getHydrateTimerTrigger(blockData) {\r\n    const trigger = blockData[DEFER_HYDRATE_TRIGGERS]?.find((t) => isTimerTrigger(t));\r\n    return trigger?.delay ?? null;\r\n}\r\nfunction hasHydrateTrigger(blockData, trigger) {\r\n    return blockData[DEFER_HYDRATE_TRIGGERS]?.includes(trigger) ?? false;\r\n}\r\n/**\r\n * Creates a summary of the given serialized defer block, which is used later to properly initialize\r\n * specific triggers.\r\n */\r\nfunction createBlockSummary(blockInfo) {\r\n    return {\r\n        data: blockInfo,\r\n        hydrate: {\r\n            idle: hasHydrateTrigger(blockInfo, 0 /* DeferBlockTrigger.Idle */),\r\n            immediate: hasHydrateTrigger(blockInfo, 1 /* DeferBlockTrigger.Immediate */),\r\n            timer: getHydrateTimerTrigger(blockInfo),\r\n            viewport: hasHydrateTrigger(blockInfo, 2 /* DeferBlockTrigger.Viewport */),\r\n        },\r\n    };\r\n}\r\n/**\r\n * Processes all of the defer block data in the transfer state and creates a map of the summaries\r\n */\r\nfunction processBlockData(injector) {\r\n    const blockData = retrieveDeferBlockData(injector);\r\n    let blockDetails = new Map();\r\n    for (let blockId in blockData) {\r\n        blockDetails.set(blockId, createBlockSummary(blockData[blockId]));\r\n    }\r\n    return blockDetails;\r\n}\r\nfunction isSsrContentsIntegrity(node) {\r\n    return (!!node &&\r\n        node.nodeType === Node.COMMENT_NODE &&\r\n        node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER);\r\n}\r\nfunction skipTextNodes(node) {\r\n    // Ignore whitespace. Before the <body>, we shouldn't find text nodes that aren't whitespace.\r\n    while (node && node.nodeType === Node.TEXT_NODE) {\r\n        node = node.previousSibling;\r\n    }\r\n    return node;\r\n}\r\n/**\r\n * Verifies whether the DOM contains a special marker added during SSR time to make sure\r\n * there is no SSR'ed contents transformations happen after SSR is completed. Typically that\r\n * happens either by CDN or during the build process as an optimization to remove comment nodes.\r\n * Hydration process requires comment nodes produced by Angular to locate correct DOM segments.\r\n * When this special marker is *not* present - throw an error and do not proceed with hydration,\r\n * since it will not be able to function correctly.\r\n *\r\n * Note: this function is invoked only on the client, so it's safe to use DOM APIs.\r\n */\r\nfunction verifySsrContentsIntegrity(doc) {\r\n    for (const node of doc.body.childNodes) {\r\n        if (isSsrContentsIntegrity(node)) {\r\n            return;\r\n        }\r\n    }\r\n    // Check if the HTML parser may have moved the marker to just before the <body> tag,\r\n    // e.g. because the body tag was implicit and not present in the markup. An implicit body\r\n    // tag is unlikely to interfer with whitespace/comments inside of the app's root element.\r\n    // Case 1: Implicit body. Example:\r\n    //   <!doctype html><head><title>Hi</title></head><!--nghm--><app-root></app-root>\r\n    const beforeBody = skipTextNodes(doc.body.previousSibling);\r\n    if (isSsrContentsIntegrity(beforeBody)) {\r\n        return;\r\n    }\r\n    // Case 2: Implicit body & head. Example:\r\n    //   <!doctype html><head><title>Hi</title><!--nghm--><app-root></app-root>\r\n    let endOfHead = skipTextNodes(doc.head.lastChild);\r\n    if (isSsrContentsIntegrity(endOfHead)) {\r\n        return;\r\n    }\r\n    throw new RuntimeError(-507 /* RuntimeErrorCode.MISSING_SSR_CONTENT_INTEGRITY_MARKER */, typeof ngDevMode !== 'undefined' &&\r\n        ngDevMode &&\r\n        'Angular hydration logic detected that HTML content of this page was modified after it ' +\r\n            'was produced during server side rendering. Make sure that there are no optimizations ' +\r\n            'that remove comment nodes from HTML enabled on your CDN. Angular hydration ' +\r\n            'relies on HTML produced by the server, including whitespaces and comment nodes.');\r\n}\r\n\r\n/** Refreshes all content queries declared by directives in a given view */\r\nfunction refreshContentQueries(tView, lView) {\r\n    const contentQueries = tView.contentQueries;\r\n    if (contentQueries !== null) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            for (let i = 0; i < contentQueries.length; i += 2) {\r\n                const queryStartIdx = contentQueries[i];\r\n                const directiveDefIdx = contentQueries[i + 1];\r\n                if (directiveDefIdx !== -1) {\r\n                    const directiveDef = tView.data[directiveDefIdx];\r\n                    ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\r\n                    ngDevMode &&\r\n                        assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\r\n                    setCurrentQueryIndex(queryStartIdx);\r\n                    directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n}\r\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\r\n    ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\r\n    setCurrentQueryIndex(0);\r\n    const prevConsumer = setActiveConsumer(null);\r\n    try {\r\n        viewQueryFn(flags, component);\r\n    }\r\n    finally {\r\n        setActiveConsumer(prevConsumer);\r\n    }\r\n}\r\nfunction executeContentQueries(tView, tNode, lView) {\r\n    if (isContentQueryHost(tNode)) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            const start = tNode.directiveStart;\r\n            const end = tNode.directiveEnd;\r\n            for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\r\n                const def = tView.data[directiveIndex];\r\n                if (def.contentQueries) {\r\n                    const directiveInstance = lView[directiveIndex];\r\n                    ngDevMode &&\r\n                        assertDefined(directiveIndex, 'Incorrect reference to a directive defining a content query');\r\n                    def.contentQueries(1 /* RenderFlags.Create */, directiveInstance, directiveIndex);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the CSS styles encapsulation policies for the {@link /api/core/Component Component} decorator's\r\n * `encapsulation` option.\r\n *\r\n * See {@link Component#encapsulation encapsulation}.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\r\n *\r\n * @publicApi\r\n */\r\nvar ViewEncapsulation;\r\n(function (ViewEncapsulation) {\r\n    // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\r\n    // https://github.com/angular/angular/issues/44119 for additional information.\r\n    /**\r\n     * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\r\n     * component's host element and applying the same attribute to all the CSS selectors provided\r\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\r\n     *\r\n     * This is the default option.\r\n     */\r\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\r\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\r\n    /**\r\n     * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\r\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\r\n     * to any HTML element of the application regardless of their host Component.\r\n     */\r\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\r\n    /**\r\n     * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\r\n     * a ShadowRoot for the component's host element which is then used to encapsulate\r\n     * all the Component's styling.\r\n     */\r\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\r\n})(ViewEncapsulation || (ViewEncapsulation = {}));\r\n\r\n/**\r\n * @fileoverview\r\n * A module to facilitate use of a Trusted Types policy internally within\r\n * Angular. It lazily constructs the Trusted Types policy, providing helper\r\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\r\n * available, strings are used as a fallback.\r\n * @security All use of this module is security-sensitive and should go through\r\n * security review.\r\n */\r\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\r\nlet policy$1;\r\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\r\nfunction getPolicy$1() {\r\n    if (policy$1 === undefined) {\r\n        policy$1 = null;\r\n        if (_global.trustedTypes) {\r\n            try {\r\n                policy$1 = _global.trustedTypes.createPolicy('angular', {\r\n                    createHTML: (s) => s,\r\n                    createScript: (s) => s,\r\n                    createScriptURL: (s) => s,\r\n                });\r\n            }\r\n            catch {\r\n                // trustedTypes.createPolicy throws if called with a name that is\r\n                // already registered, even in report-only mode. Until the API changes,\r\n                // catch the error not to break the applications functionally. In such\r\n                // cases, the code will fall back to using strings.\r\n            }\r\n        }\r\n    }\r\n    return policy$1;\r\n}\r\n/**\r\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that the\r\n * provided string will never cause an XSS vulnerability if used in a context\r\n * that will be interpreted as HTML by a browser, e.g. when assigning to\r\n * element.innerHTML.\r\n */\r\nfunction trustedHTMLFromString(html) {\r\n    return getPolicy$1()?.createHTML(html) || html;\r\n}\r\n/**\r\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\r\n * when Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that the\r\n * provided string will never cause an XSS vulnerability if used in a context\r\n * that will cause a browser to load and execute a resource, e.g. when\r\n * assigning to script.src.\r\n */\r\nfunction trustedScriptURLFromString(url) {\r\n    return getPolicy$1()?.createScriptURL(url) || url;\r\n}\r\n\r\n/**\r\n * @fileoverview\r\n * A module to facilitate use of a Trusted Types policy internally within\r\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\r\n * lazily constructs the Trusted Types policy, providing helper utilities for\r\n * promoting strings to Trusted Types. When Trusted Types are not available,\r\n * strings are used as a fallback.\r\n * @security All use of this module is security-sensitive and should go through\r\n * security review.\r\n */\r\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\r\nlet policy;\r\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\r\nfunction getPolicy() {\r\n    if (policy === undefined) {\r\n        policy = null;\r\n        if (_global.trustedTypes) {\r\n            try {\r\n                policy = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {\r\n                    createHTML: (s) => s,\r\n                    createScript: (s) => s,\r\n                    createScriptURL: (s) => s,\r\n                });\r\n            }\r\n            catch {\r\n                // trustedTypes.createPolicy throws if called with a name that is\r\n                // already registered, even in report-only mode. Until the API changes,\r\n                // catch the error not to break the applications functionally. In such\r\n                // cases, the code will fall back to using strings.\r\n            }\r\n        }\r\n    }\r\n    return policy;\r\n}\r\n/**\r\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only passed strings that come directly from custom sanitizers or the\r\n * bypassSecurityTrust* functions.\r\n */\r\nfunction trustedHTMLFromStringBypass(html) {\r\n    return getPolicy()?.createHTML(html) || html;\r\n}\r\n/**\r\n * Unsafely promote a string to a TrustedScript, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only passed strings that come directly from custom sanitizers or the\r\n * bypassSecurityTrust* functions.\r\n */\r\nfunction trustedScriptFromStringBypass(script) {\r\n    return getPolicy()?.createScript(script) || script;\r\n}\r\n/**\r\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\r\n * when Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only passed strings that come directly from custom sanitizers or the\r\n * bypassSecurityTrust* functions.\r\n */\r\nfunction trustedScriptURLFromStringBypass(url) {\r\n    return getPolicy()?.createScriptURL(url) || url;\r\n}\r\n\r\nclass SafeValueImpl {\r\n    changingThisBreaksApplicationSecurity;\r\n    constructor(changingThisBreaksApplicationSecurity) {\r\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\r\n    }\r\n    toString() {\r\n        return (`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\r\n            ` (see ${XSS_SECURITY_URL})`);\r\n    }\r\n}\r\nclass SafeHtmlImpl extends SafeValueImpl {\r\n    getTypeName() {\r\n        return \"HTML\" /* BypassType.Html */;\r\n    }\r\n}\r\nclass SafeStyleImpl extends SafeValueImpl {\r\n    getTypeName() {\r\n        return \"Style\" /* BypassType.Style */;\r\n    }\r\n}\r\nclass SafeScriptImpl extends SafeValueImpl {\r\n    getTypeName() {\r\n        return \"Script\" /* BypassType.Script */;\r\n    }\r\n}\r\nclass SafeUrlImpl extends SafeValueImpl {\r\n    getTypeName() {\r\n        return \"URL\" /* BypassType.Url */;\r\n    }\r\n}\r\nclass SafeResourceUrlImpl extends SafeValueImpl {\r\n    getTypeName() {\r\n        return \"ResourceURL\" /* BypassType.ResourceUrl */;\r\n    }\r\n}\r\nfunction unwrapSafeValue(value) {\r\n    return value instanceof SafeValueImpl\r\n        ? value.changingThisBreaksApplicationSecurity\r\n        : value;\r\n}\r\nfunction allowSanitizationBypassAndThrow(value, type) {\r\n    const actualType = getSanitizationBypassType(value);\r\n    if (actualType != null && actualType !== type) {\r\n        // Allow ResourceURLs in URL contexts, they are strictly more trusted.\r\n        if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */)\r\n            return true;\r\n        throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\r\n    }\r\n    return actualType === type;\r\n}\r\nfunction getSanitizationBypassType(value) {\r\n    return (value instanceof SafeValueImpl && value.getTypeName()) || null;\r\n}\r\n/**\r\n * Mark `html` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedHtml `html` string which needs to be implicitly trusted.\r\n * @returns a `html` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustHtml(trustedHtml) {\r\n    return new SafeHtmlImpl(trustedHtml);\r\n}\r\n/**\r\n * Mark `style` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedStyle `style` string which needs to be implicitly trusted.\r\n * @returns a `style` hich has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustStyle(trustedStyle) {\r\n    return new SafeStyleImpl(trustedStyle);\r\n}\r\n/**\r\n * Mark `script` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedScript `script` string which needs to be implicitly trusted.\r\n * @returns a `script` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustScript(trustedScript) {\r\n    return new SafeScriptImpl(trustedScript);\r\n}\r\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedUrl `url` string which needs to be implicitly trusted.\r\n * @returns a `url`  which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustUrl(trustedUrl) {\r\n    return new SafeUrlImpl(trustedUrl);\r\n}\r\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\r\n * @returns a `url` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\r\n    return new SafeResourceUrlImpl(trustedResourceUrl);\r\n}\r\n\r\n/**\r\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\r\n * that needs sanitizing.\r\n * Depending upon browser support we use one of two strategies for doing this.\r\n * Default: DOMParser strategy\r\n * Fallback: InertDocument strategy\r\n */\r\nfunction getInertBodyHelper(defaultDoc) {\r\n    const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\r\n    return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\r\n}\r\n/**\r\n * Uses DOMParser to create and fill an inert body element.\r\n * This is the default strategy used in browsers that support it.\r\n */\r\nclass DOMParserHelper {\r\n    inertDocumentHelper;\r\n    constructor(inertDocumentHelper) {\r\n        this.inertDocumentHelper = inertDocumentHelper;\r\n    }\r\n    getInertBodyElement(html) {\r\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\r\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\r\n        // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\r\n        // in `html` from consuming the otherwise explicit `</body>` tag.\r\n        html = '<body><remove></remove>' + html;\r\n        try {\r\n            const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\r\n            if (body === null) {\r\n                // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\r\n                // becomes available in the following tick of the JS engine. In that case we fall back to\r\n                // the `inertDocumentHelper` instead.\r\n                return this.inertDocumentHelper.getInertBodyElement(html);\r\n            }\r\n            body.firstChild?.remove();\r\n            return body;\r\n        }\r\n        catch {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Use an HTML5 `template` element to create and fill an inert DOM element.\r\n * This is the fallback strategy if the browser does not support DOMParser.\r\n */\r\nclass InertDocumentHelper {\r\n    defaultDoc;\r\n    inertDocument;\r\n    constructor(defaultDoc) {\r\n        this.defaultDoc = defaultDoc;\r\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\r\n    }\r\n    getInertBodyElement(html) {\r\n        const templateEl = this.inertDocument.createElement('template');\r\n        templateEl.innerHTML = trustedHTMLFromString(html);\r\n        return templateEl;\r\n    }\r\n}\r\n/**\r\n * We need to determine whether the DOMParser exists in the global context and\r\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\r\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\r\n *\r\n * @suppress {uselessCode}\r\n */\r\nfunction isDOMParserAvailable() {\r\n    try {\r\n        return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\r\n * contexts.\r\n *\r\n * This regular expression matches a subset of URLs that will not cause script\r\n * execution if used in URL context within a HTML document. Specifically, this\r\n * regular expression matches if:\r\n * (1) Either a protocol that is not javascript:, and that has valid characters\r\n *     (alphanumeric or [+-.]).\r\n * (2) or no protocol.  A protocol must be followed by a colon. The below\r\n *     allows that by allowing colons only after one of the characters [/?#].\r\n *     A colon after a hash (#) must be in the fragment.\r\n *     Otherwise, a colon after a (?) must be in a query.\r\n *     Otherwise, a colon after a single solidus (/) must be in a path.\r\n *     Otherwise, a colon after a double solidus (//) must be in the authority\r\n *     (before port).\r\n *\r\n * The pattern disallows &, used in HTML entity declarations before\r\n * one of the characters in [/?#]. This disallows HTML entities used in the\r\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\r\n * It also disallows HTML entities in the first path part of a relative path,\r\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\r\n * that. More importantly, it disallows masking of a colon,\r\n * e.g. \"javascript&#58;...\".\r\n *\r\n * This regular expression was taken from the Closure sanitization library.\r\n */\r\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\r\nfunction _sanitizeUrl(url) {\r\n    url = String(url);\r\n    if (url.match(SAFE_URL_PATTERN))\r\n        return url;\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\r\n    }\r\n    return 'unsafe:' + url;\r\n}\r\n\r\nfunction tagSet(tags) {\r\n    const res = {};\r\n    for (const t of tags.split(','))\r\n        res[t] = true;\r\n    return res;\r\n}\r\nfunction merge(...sets) {\r\n    const res = {};\r\n    for (const s of sets) {\r\n        for (const v in s) {\r\n            if (s.hasOwnProperty(v))\r\n                res[v] = true;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n// Good source of info about elements and attributes\r\n// https://html.spec.whatwg.org/#semantics\r\n// https://simon.html5.org/html-elements\r\n// Safe Void Elements - HTML5\r\n// https://html.spec.whatwg.org/#void-elements\r\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\r\n// Elements that you can, intentionally, leave open (and which close themselves)\r\n// https://html.spec.whatwg.org/#optional-tags\r\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\r\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\r\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\r\n// Safe Block Elements - HTML5\r\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\r\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\r\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\r\n// Inline Elements - HTML5\r\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\r\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\r\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\r\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\r\n// Attributes that have href and hence need to be sanitized\r\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\r\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\r\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\r\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\r\n    'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' +\r\n    'valign,value,vspace,width');\r\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\r\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\r\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\r\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\r\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\r\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\r\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\r\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\r\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\r\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\r\n// innerHTML is required, SVG attributes should be added here.\r\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\r\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\r\n// are left out here.\r\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\r\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\r\n//\r\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\r\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\r\n// don't want to preserve the content, if the elements themselves are going to be removed.\r\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\r\n/**\r\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\r\n * attributes.\r\n */\r\nclass SanitizingHtmlSerializer {\r\n    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\r\n    // because characters were re-encoded.\r\n    sanitizedSomething = false;\r\n    buf = [];\r\n    sanitizeChildren(el) {\r\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\r\n        // However this code never accesses properties off of `document` before deleting its contents\r\n        // again, so it shouldn't be vulnerable to DOM clobbering.\r\n        let current = el.firstChild;\r\n        let traverseContent = true;\r\n        let parentNodes = [];\r\n        while (current) {\r\n            if (current.nodeType === Node.ELEMENT_NODE) {\r\n                traverseContent = this.startElement(current);\r\n            }\r\n            else if (current.nodeType === Node.TEXT_NODE) {\r\n                this.chars(current.nodeValue);\r\n            }\r\n            else {\r\n                // Strip non-element, non-text nodes.\r\n                this.sanitizedSomething = true;\r\n            }\r\n            if (traverseContent && current.firstChild) {\r\n                // Push current node to the parent stack before entering its content.\r\n                parentNodes.push(current);\r\n                current = getFirstChild(current);\r\n                continue;\r\n            }\r\n            while (current) {\r\n                // Leaving the element.\r\n                // Walk up and to the right, closing tags as we go.\r\n                if (current.nodeType === Node.ELEMENT_NODE) {\r\n                    this.endElement(current);\r\n                }\r\n                let next = getNextSibling(current);\r\n                if (next) {\r\n                    current = next;\r\n                    break;\r\n                }\r\n                // There was no next sibling, walk up to the parent node (extract it from the stack).\r\n                current = parentNodes.pop();\r\n            }\r\n        }\r\n        return this.buf.join('');\r\n    }\r\n    /**\r\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\r\n     * be traversed. Element content must always be traversed (even if the element itself is not\r\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\r\n     *\r\n     * @param element The element to sanitize.\r\n     * @return True if the element's contents should be traversed.\r\n     */\r\n    startElement(element) {\r\n        const tagName = getNodeName(element).toLowerCase();\r\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.sanitizedSomething = true;\r\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\r\n        }\r\n        this.buf.push('<');\r\n        this.buf.push(tagName);\r\n        const elAttrs = element.attributes;\r\n        for (let i = 0; i < elAttrs.length; i++) {\r\n            const elAttr = elAttrs.item(i);\r\n            const attrName = elAttr.name;\r\n            const lower = attrName.toLowerCase();\r\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\r\n                this.sanitizedSomething = true;\r\n                continue;\r\n            }\r\n            let value = elAttr.value;\r\n            // TODO(martinprobst): Special case image URIs for data:image/...\r\n            if (URI_ATTRS[lower])\r\n                value = _sanitizeUrl(value);\r\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\r\n        }\r\n        this.buf.push('>');\r\n        return true;\r\n    }\r\n    endElement(current) {\r\n        const tagName = getNodeName(current).toLowerCase();\r\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.buf.push('</');\r\n            this.buf.push(tagName);\r\n            this.buf.push('>');\r\n        }\r\n    }\r\n    chars(chars) {\r\n        this.buf.push(encodeEntities(chars));\r\n    }\r\n}\r\n/**\r\n * Verifies whether a given child node is a descendant of a given parent node.\r\n * It may not be the case when properties like `.firstChild` are clobbered and\r\n * accessing `.firstChild` results in an unexpected node returned.\r\n */\r\nfunction isClobberedElement(parentNode, childNode) {\r\n    return ((parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !==\r\n        Node.DOCUMENT_POSITION_CONTAINED_BY);\r\n}\r\n/**\r\n * Retrieves next sibling node and makes sure that there is no\r\n * clobbering of the `nextSibling` property happening.\r\n */\r\nfunction getNextSibling(node) {\r\n    const nextSibling = node.nextSibling;\r\n    // Make sure there is no `nextSibling` clobbering: navigating to\r\n    // the next sibling and going back to the previous one should result\r\n    // in the original node.\r\n    if (nextSibling && node !== nextSibling.previousSibling) {\r\n        throw clobberedElementError(nextSibling);\r\n    }\r\n    return nextSibling;\r\n}\r\n/**\r\n * Retrieves first child node and makes sure that there is no\r\n * clobbering of the `firstChild` property happening.\r\n */\r\nfunction getFirstChild(node) {\r\n    const firstChild = node.firstChild;\r\n    if (firstChild && isClobberedElement(node, firstChild)) {\r\n        throw clobberedElementError(firstChild);\r\n    }\r\n    return firstChild;\r\n}\r\n/** Gets a reasonable nodeName, even for clobbered nodes. */\r\nfunction getNodeName(node) {\r\n    const nodeName = node.nodeName;\r\n    // If the property is clobbered, assume it is an `HTMLFormElement`.\r\n    return typeof nodeName === 'string' ? nodeName : 'FORM';\r\n}\r\nfunction clobberedElementError(node) {\r\n    return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\r\n}\r\n// Regular Expressions for parsing tags and attributes\r\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\r\n// ! to ~ is the ASCII range.\r\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\r\n/**\r\n * Escapes all potentially dangerous characters, so that the\r\n * resulting string can be safely inserted into attribute or\r\n * element text.\r\n * @param value\r\n */\r\nfunction encodeEntities(value) {\r\n    return value\r\n        .replace(/&/g, '&amp;')\r\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\r\n        const hi = match.charCodeAt(0);\r\n        const low = match.charCodeAt(1);\r\n        return '&#' + ((hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000) + ';';\r\n    })\r\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) {\r\n        return '&#' + match.charCodeAt(0) + ';';\r\n    })\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\nlet inertBodyHelper;\r\n/**\r\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\r\n * the DOM in a browser environment.\r\n */\r\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\r\n    let inertBodyElement = null;\r\n    try {\r\n        inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\r\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\r\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\r\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\r\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\r\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\r\n        let mXSSAttempts = 5;\r\n        let parsedHtml = unsafeHtml;\r\n        do {\r\n            if (mXSSAttempts === 0) {\r\n                throw new Error('Failed to sanitize html because the input is unstable');\r\n            }\r\n            mXSSAttempts--;\r\n            unsafeHtml = parsedHtml;\r\n            parsedHtml = inertBodyElement.innerHTML;\r\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\r\n        } while (unsafeHtml !== parsedHtml);\r\n        const sanitizer = new SanitizingHtmlSerializer();\r\n        const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\r\n            console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\r\n        }\r\n        return trustedHTMLFromString(safeHtml);\r\n    }\r\n    finally {\r\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\r\n        if (inertBodyElement) {\r\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\r\n            while (parent.firstChild) {\r\n                parent.firstChild.remove();\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getTemplateContent(el) {\r\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el)\r\n        ? el.content\r\n        : null;\r\n}\r\nfunction isTemplateElement(el) {\r\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\r\n}\r\n\r\n/**\r\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\r\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\r\n * handled.\r\n *\r\n * See DomSanitizer for more details on security in Angular applications.\r\n *\r\n * @publicApi\r\n */\r\nvar SecurityContext;\r\n(function (SecurityContext) {\r\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\r\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\r\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\r\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\r\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\r\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\r\n})(SecurityContext || (SecurityContext = {}));\r\n\r\n/**\r\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * This method parses the `html` and locates potentially dangerous content (such as urls and\r\n * javascript) and removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\r\n *\r\n * @param unsafeHtml untrusted `html`, typically from the user.\r\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\r\n * and urls have been removed.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsanitizeHtml(unsafeHtml) {\r\n    const sanitizer = getSanitizer();\r\n    if (sanitizer) {\r\n        return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\r\n    }\r\n    if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\r\n        return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\r\n    }\r\n    return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\r\n}\r\n/**\r\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\r\n *\r\n * @param unsafeStyle untrusted `style`, typically from the user.\r\n * @returns `style` string which is safe to bind to the `style` properties.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsanitizeStyle(unsafeStyle) {\r\n    const sanitizer = getSanitizer();\r\n    if (sanitizer) {\r\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\r\n    }\r\n    if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\r\n        return unwrapSafeValue(unsafeStyle);\r\n    }\r\n    return renderStringify(unsafeStyle);\r\n}\r\n/**\r\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\r\n * dangerous\r\n * content.\r\n *\r\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\r\n * removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\r\n *\r\n * @param unsafeUrl untrusted `url`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * all of the dangerous javascript has been removed.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsanitizeUrl(unsafeUrl) {\r\n    const sanitizer = getSanitizer();\r\n    if (sanitizer) {\r\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\r\n    }\r\n    if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\r\n        return unwrapSafeValue(unsafeUrl);\r\n    }\r\n    return _sanitizeUrl(renderStringify(unsafeUrl));\r\n}\r\n/**\r\n * A `url` sanitizer which only lets trusted `url`s through.\r\n *\r\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\r\n *\r\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * only trusted `url`s have been allowed to pass.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\r\n    const sanitizer = getSanitizer();\r\n    if (sanitizer) {\r\n        return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\r\n    }\r\n    if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\r\n        return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\r\n    }\r\n    throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\r\n}\r\n/**\r\n * A `script` sanitizer which only lets trusted javascript through.\r\n *\r\n * This passes only `script`s marked trusted by calling {@link\r\n * bypassSanitizationTrustScript}.\r\n *\r\n * @param unsafeScript untrusted `script`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\r\n * because only trusted `scripts` have been allowed to pass.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsanitizeScript(unsafeScript) {\r\n    const sanitizer = getSanitizer();\r\n    if (sanitizer) {\r\n        return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\r\n    }\r\n    if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\r\n        return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\r\n    }\r\n    throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\r\n}\r\n/**\r\n * A template tag function for promoting the associated constant literal to a\r\n * TrustedHTML. Interpolation is explicitly not allowed.\r\n *\r\n * @param html constant template literal containing trusted HTML.\r\n * @returns TrustedHTML wrapping `html`.\r\n *\r\n * @security This is a security-sensitive function and should only be used to\r\n * convert constant values of attributes and properties found in\r\n * application-provided Angular templates to TrustedHTML.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtrustConstantHtml(html) {\r\n    // The following runtime check ensures that the function was called as a\r\n    // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\r\n    // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\r\n    // is an array with a `raw` property that is also an array. The associated\r\n    // template literal has no interpolation if and only if the length of the\r\n    // TemplateStringsArray is 1.\r\n    if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\r\n        throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\r\n    }\r\n    return trustedHTMLFromString(html[0]);\r\n}\r\n/**\r\n * A template tag function for promoting the associated constant literal to a\r\n * TrustedScriptURL. Interpolation is explicitly not allowed.\r\n *\r\n * @param url constant template literal containing a trusted script URL.\r\n * @returns TrustedScriptURL wrapping `url`.\r\n *\r\n * @security This is a security-sensitive function and should only be used to\r\n * convert constant values of attributes and properties found in\r\n * application-provided Angular templates to TrustedScriptURL.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtrustConstantResourceUrl(url) {\r\n    // The following runtime check ensures that the function was called as a\r\n    // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\r\n    // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\r\n    // TemplateStringsArray is an array with a `raw` property that is also an\r\n    // array. The associated template literal has no interpolation if and only if\r\n    // the length of the TemplateStringsArray is 1.\r\n    if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\r\n        throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\r\n    }\r\n    return trustedScriptURLFromString(url[0]);\r\n}\r\n/**\r\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\r\n *\r\n * The rules are based on the RESOURCE_URL context config from\r\n * `packages/compiler/src/schema/dom_security_schema.ts`.\r\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\r\n */\r\nfunction getUrlSanitizer(tag, prop) {\r\n    if ((prop === 'src' &&\r\n        (tag === 'embed' ||\r\n            tag === 'frame' ||\r\n            tag === 'iframe' ||\r\n            tag === 'media' ||\r\n            tag === 'script')) ||\r\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\r\n        return ɵɵsanitizeResourceUrl;\r\n    }\r\n    return ɵɵsanitizeUrl;\r\n}\r\n/**\r\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\r\n *\r\n * This function is used in case we can't define security context at compile time, when only prop\r\n * name is available. This happens when we generate host bindings for Directives/Components. The\r\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\r\n * runtime.\r\n *\r\n * @param unsafeUrl untrusted `url`, typically from the user.\r\n * @param tag target element tag name.\r\n * @param prop name of the property that contains the value.\r\n * @returns `url` string which is safe to bind.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\r\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\r\n}\r\nfunction validateAgainstEventProperties(name) {\r\n    if (name.toLowerCase().startsWith('on')) {\r\n        const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` +\r\n            `please use (${name.slice(2)})=...` +\r\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\r\n            ` current module.`;\r\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\r\n    }\r\n}\r\nfunction validateAgainstEventAttributes(name) {\r\n    if (name.toLowerCase().startsWith('on')) {\r\n        const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\r\n            `please use (${name.slice(2)})=...`;\r\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\r\n    }\r\n}\r\nfunction getSanitizer() {\r\n    const lView = getLView();\r\n    return lView && lView[ENVIRONMENT].sanitizer;\r\n}\r\n\r\n/**\r\n * Disallowed strings in the comment.\r\n *\r\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\r\n */\r\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\r\n/**\r\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\r\n */\r\nconst COMMENT_DELIMITER = /(<|>)/g;\r\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\r\n/**\r\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\r\n *\r\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\r\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\r\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\r\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\r\n *\r\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\r\n *\r\n * ```ts\r\n * div.innerHTML = div.innerHTML\r\n * ```\r\n *\r\n * One would expect that the above code would be safe to do, but it turns out that because comment\r\n * text is not escaped, the comment may contain text which will prematurely close the comment\r\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\r\n * may contain such text and expect them to be safe.)\r\n *\r\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\r\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\r\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\r\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\r\n *\r\n * @param value text to make safe for comment node by escaping the comment open/close character\r\n *     sequence.\r\n */\r\nfunction escapeCommentText(value) {\r\n    return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\r\n}\r\n\r\n/** Defines the default value of the `NG_REFLECT_ATTRS_FLAG` flag. */\r\nconst NG_REFLECT_ATTRS_FLAG_DEFAULT = false;\r\n/**\r\n * Defines an internal flag that indicates whether the runtime code should be\r\n * producing `ng-reflect-*` attributes.\r\n */\r\nconst NG_REFLECT_ATTRS_FLAG = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'NG_REFLECT_FLAG' : '', {\r\n    providedIn: 'root',\r\n    factory: () => NG_REFLECT_ATTRS_FLAG_DEFAULT,\r\n});\r\n/**\r\n * Enables the logic to produce `ng-reflect-*` attributes on elements with bindings.\r\n *\r\n * Note: this is a dev-mode only setting and it will have no effect in production mode.\r\n * In production mode, the `ng-reflect-*` attributes are *never* produced by Angular.\r\n *\r\n * Important: using and relying on the `ng-reflect-*` attributes is not recommended,\r\n * they are deprecated and only present for backwards compatibility. Angular will stop\r\n * producing them in one of the future versions.\r\n *\r\n * @publicApi\r\n */\r\nfunction provideNgReflectAttributes() {\r\n    const providers = typeof ngDevMode === 'undefined' || ngDevMode\r\n        ? [\r\n            {\r\n                provide: NG_REFLECT_ATTRS_FLAG,\r\n                useValue: true,\r\n            },\r\n        ]\r\n        : [];\r\n    return makeEnvironmentProviders(providers);\r\n}\r\nfunction normalizeDebugBindingName(name) {\r\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\r\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\r\n    return `ng-reflect-${name}`;\r\n}\r\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\r\nfunction camelCaseToDashCase(input) {\r\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\r\n}\r\nfunction normalizeDebugBindingValue(value) {\r\n    try {\r\n        // Limit the size of the value as otherwise the DOM just gets polluted.\r\n        return value != null ? value.toString().slice(0, 30) : value;\r\n    }\r\n    catch (e) {\r\n        return '[ERROR] Exception while trying to serialize the value';\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a schema that allows an NgModule to contain the following:\r\n * - Non-Angular elements named with dash case (`-`).\r\n * - Element properties named with dash case (`-`).\r\n * Dash case is the naming convention for custom elements.\r\n *\r\n * @publicApi\r\n */\r\nconst CUSTOM_ELEMENTS_SCHEMA = {\r\n    name: 'custom-elements',\r\n};\r\n/**\r\n * Defines a schema that allows any property on any element.\r\n *\r\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\r\n * template. The usage of this schema is generally discouraged because it prevents useful validation\r\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\r\n *\r\n * @publicApi\r\n */\r\nconst NO_ERRORS_SCHEMA = {\r\n    name: 'no-errors-schema',\r\n};\r\n\r\nlet shouldThrowErrorOnUnknownElement = false;\r\n/**\r\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\r\n * instead of just logging the error.\r\n * (for AOT-compiled ones this check happens at build time).\r\n */\r\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\r\n    shouldThrowErrorOnUnknownElement = shouldThrow;\r\n}\r\n/**\r\n * Gets the current value of the strict mode.\r\n */\r\nfunction ɵgetUnknownElementStrictMode() {\r\n    return shouldThrowErrorOnUnknownElement;\r\n}\r\nlet shouldThrowErrorOnUnknownProperty = false;\r\n/**\r\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\r\n * instead of just logging the error.\r\n * (for AOT-compiled ones this check happens at build time).\r\n */\r\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\r\n    shouldThrowErrorOnUnknownProperty = shouldThrow;\r\n}\r\n/**\r\n * Gets the current value of the strict mode.\r\n */\r\nfunction ɵgetUnknownPropertyStrictMode() {\r\n    return shouldThrowErrorOnUnknownProperty;\r\n}\r\n/**\r\n * Validates that the element is known at runtime and produces\r\n * an error if it's not the case.\r\n * This check is relevant for JIT-compiled components (for AOT-compiled\r\n * ones this check happens at build time).\r\n *\r\n * The element is considered known if either:\r\n * - it's a known HTML element\r\n * - it's a known custom element\r\n * - the element matches any directive\r\n * - the element is allowed by one of the schemas\r\n *\r\n * @param element Element to validate\r\n * @param lView An `LView` that represents a current component that is being rendered\r\n * @param tagName Name of the tag to check\r\n * @param schemas Array of schemas\r\n * @param hasDirectives Boolean indicating that the element matches any directive\r\n */\r\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\r\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\r\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\r\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\r\n    // execute the check below.\r\n    if (schemas === null)\r\n        return;\r\n    // If the element matches any directive, it's considered as valid.\r\n    if (!hasDirectives && tagName !== null) {\r\n        // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\r\n        // as a custom element. Note that unknown elements with a dash in their name won't be instances\r\n        // of HTMLUnknownElement in browsers that support web components.\r\n        const isUnknown = \r\n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\r\n        // Domino doesn't expose HTMLUnknownElement globally.\r\n        (typeof HTMLUnknownElement !== 'undefined' &&\r\n            HTMLUnknownElement &&\r\n            element instanceof HTMLUnknownElement) ||\r\n            (typeof customElements !== 'undefined' &&\r\n                tagName.indexOf('-') > -1 &&\r\n                !customElements.get(tagName));\r\n        if (isUnknown && !matchingSchemas(schemas, tagName)) {\r\n            const isHostStandalone = isHostComponentStandalone(lView);\r\n            const templateLocation = getTemplateLocationDetails(lView);\r\n            const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\r\n            let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\r\n            message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone\r\n                ? \"included in the '@Component.imports' of this component\"\r\n                : 'a part of an @NgModule where this component is declared'}.\\n`;\r\n            if (tagName && tagName.indexOf('-') > -1) {\r\n                message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\r\n            }\r\n            else {\r\n                message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\r\n            }\r\n            if (shouldThrowErrorOnUnknownElement) {\r\n                throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\r\n            }\r\n            else {\r\n                console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that the property of the element is known at runtime and returns\r\n * false if it's not the case.\r\n * This check is relevant for JIT-compiled components (for AOT-compiled\r\n * ones this check happens at build time).\r\n *\r\n * The property is considered known if either:\r\n * - it's a known property of the element\r\n * - the element is allowed by one of the schemas\r\n * - the property is used for animations\r\n *\r\n * @param element Element to validate\r\n * @param propName Name of the property to check\r\n * @param tagName Name of the tag hosting the property\r\n * @param schemas Array of schemas\r\n */\r\nfunction isPropertyValid(element, propName, tagName, schemas) {\r\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\r\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\r\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\r\n    // execute the check below.\r\n    if (schemas === null)\r\n        return true;\r\n    // The property is considered valid if the element matches the schema, it exists on the element,\r\n    // or it is synthetic.\r\n    if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\r\n        return true;\r\n    }\r\n    // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\r\n    return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\r\n}\r\n/**\r\n * Logs or throws an error that a property is not supported on an element.\r\n *\r\n * @param propName Name of the invalid property\r\n * @param tagName Name of the tag hosting the property\r\n * @param nodeType Type of the node hosting the property\r\n * @param lView An `LView` that represents a current component\r\n */\r\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\r\n    // Special-case a situation when a structural directive is applied to\r\n    // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\r\n    // In this case the compiler generates the `ɵɵtemplate` instruction with\r\n    // the `null` as the tagName. The directive matching logic at runtime relies\r\n    // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\r\n    // a default value of the `tNode.value` is not feasible at this moment.\r\n    if (!tagName && nodeType === 4 /* TNodeType.Container */) {\r\n        tagName = 'ng-template';\r\n    }\r\n    const isHostStandalone = isHostComponentStandalone(lView);\r\n    const templateLocation = getTemplateLocationDetails(lView);\r\n    let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\r\n    const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\r\n    const importLocation = isHostStandalone\r\n        ? \"included in the '@Component.imports' of this component\"\r\n        : 'a part of an @NgModule where this component is declared';\r\n    if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\r\n        // Most likely this is a control flow directive (such as `*ngIf`) used in\r\n        // a template, but the directive or the `CommonModule` is not imported.\r\n        const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\r\n        message +=\r\n            `\\nIf the '${propName}' is an Angular control flow directive, ` +\r\n                `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\r\n    }\r\n    else {\r\n        // May be an Angular component, which is not imported/declared?\r\n        message +=\r\n            `\\n1. If '${tagName}' is an Angular component and it has the ` +\r\n                `'${propName}' input, then verify that it is ${importLocation}.`;\r\n        // May be a Web Component?\r\n        if (tagName && tagName.indexOf('-') > -1) {\r\n            message +=\r\n                `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` +\r\n                    `to the ${schemas} of this component to suppress this message.`;\r\n            message +=\r\n                `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\r\n                    `the ${schemas} of this component.`;\r\n        }\r\n        else {\r\n            // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\r\n            message +=\r\n                `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\r\n                    `the ${schemas} of this component.`;\r\n        }\r\n    }\r\n    reportUnknownPropertyError(message);\r\n}\r\nfunction reportUnknownPropertyError(message) {\r\n    if (shouldThrowErrorOnUnknownProperty) {\r\n        throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\r\n    }\r\n    else {\r\n        console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\r\n    }\r\n}\r\n/**\r\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\r\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\r\n * be too slow for production mode and also it relies on the constructor function being available.\r\n *\r\n * Gets a reference to the host component def (where a current component is declared).\r\n *\r\n * @param lView An `LView` that represents a current component that is being rendered.\r\n */\r\nfunction getDeclarationComponentDef(lView) {\r\n    !ngDevMode && throwError('Must never be called in production mode');\r\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\r\n    const context = declarationLView[CONTEXT];\r\n    // Unable to obtain a context.\r\n    if (!context)\r\n        return null;\r\n    return context.constructor ? getComponentDef(context.constructor) : null;\r\n}\r\n/**\r\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\r\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\r\n * be too slow for production mode.\r\n *\r\n * Checks if the current component is declared inside of a standalone component template.\r\n *\r\n * @param lView An `LView` that represents a current component that is being rendered.\r\n */\r\nfunction isHostComponentStandalone(lView) {\r\n    !ngDevMode && throwError('Must never be called in production mode');\r\n    const componentDef = getDeclarationComponentDef(lView);\r\n    // Treat host component as non-standalone if we can't obtain the def.\r\n    return !!componentDef?.standalone;\r\n}\r\n/**\r\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\r\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\r\n * be too slow for production mode.\r\n *\r\n * Constructs a string describing the location of the host component template. The function is used\r\n * in dev mode to produce error messages.\r\n *\r\n * @param lView An `LView` that represents a current component that is being rendered.\r\n */\r\nfunction getTemplateLocationDetails(lView) {\r\n    !ngDevMode && throwError('Must never be called in production mode');\r\n    const hostComponentDef = getDeclarationComponentDef(lView);\r\n    const componentClassName = hostComponentDef?.type?.name;\r\n    return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\r\n}\r\n/**\r\n * The set of known control flow directives and their corresponding imports.\r\n * We use this set to produce a more precises error message with a note\r\n * that the `CommonModule` should also be included.\r\n */\r\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([\r\n    ['ngIf', 'NgIf'],\r\n    ['ngFor', 'NgFor'],\r\n    ['ngSwitchCase', 'NgSwitchCase'],\r\n    ['ngSwitchDefault', 'NgSwitchDefault'],\r\n]);\r\n/**\r\n * Returns true if the tag name is allowed by specified schemas.\r\n * @param schemas Array of schemas\r\n * @param tagName Name of the tag\r\n */\r\nfunction matchingSchemas(schemas, tagName) {\r\n    if (schemas !== null) {\r\n        for (let i = 0; i < schemas.length; i++) {\r\n            const schema = schemas[i];\r\n            if (schema === NO_ERRORS_SCHEMA ||\r\n                (schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵresolveWindow(element) {\r\n    return element.ownerDocument.defaultView;\r\n}\r\n/**\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵresolveDocument(element) {\r\n    return element.ownerDocument;\r\n}\r\n/**\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵresolveBody(element) {\r\n    return element.ownerDocument.body;\r\n}\r\n/**\r\n * The special delimiter we use to separate property names, prefixes, and suffixes\r\n * in property binding metadata. See storeBindingMetadata().\r\n *\r\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\r\n * because it is a very uncommon character that is unlikely to be part of a user's\r\n * property names or interpolation strings. If it is in fact used in a property\r\n * binding, DebugElement.properties will not return the correct value for that\r\n * binding. However, there should be no runtime effect for real applications.\r\n *\r\n * This character is typically rendered as a question mark inside of a diamond.\r\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\r\n *\r\n */\r\nconst INTERPOLATION_DELIMITER = `�`;\r\n/**\r\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\r\n */\r\nfunction maybeUnwrapFn(value) {\r\n    if (value instanceof Function) {\r\n        return value();\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\n\r\n/**\r\n * The max length of the string representation of a value in an error message\r\n */\r\nconst VALUE_STRING_LENGTH_LIMIT = 200;\r\n/** Verifies that a given type is a Standalone Component. */\r\nfunction assertStandaloneComponentType(type) {\r\n    assertComponentDef(type);\r\n    const componentDef = getComponentDef(type);\r\n    if (!componentDef.standalone) {\r\n        throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` +\r\n            `but Angular expects to have a standalone component here. ` +\r\n            `Please make sure the ${stringifyForError(type)} component has ` +\r\n            `the \\`standalone: true\\` flag in the decorator.`);\r\n    }\r\n}\r\n/** Verifies whether a given type is a component */\r\nfunction assertComponentDef(type) {\r\n    if (!getComponentDef(type)) {\r\n        throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` +\r\n            `make sure it has the \\`@Component\\` decorator.`);\r\n    }\r\n}\r\n/** Called when there are multiple component selectors that match a given node */\r\nfunction throwMultipleComponentError(tNode, first, second) {\r\n    throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` +\r\n        `${stringifyForError(first)} and ` +\r\n        `${stringifyForError(second)}`);\r\n}\r\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\r\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {\r\n    const hostComponentDef = getDeclarationComponentDef(lView);\r\n    const componentClassName = hostComponentDef?.type?.name;\r\n    const field = propName ? ` for '${propName}'` : '';\r\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ''}`;\r\n    if (creationMode) {\r\n        msg +=\r\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\r\n                ` Has it been created in a change detection hook?`;\r\n    }\r\n    throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\r\n}\r\nfunction formatValue(value) {\r\n    let strValue = String(value);\r\n    // JSON.stringify will throw on circular references\r\n    try {\r\n        if (Array.isArray(value) || strValue === '[object Object]') {\r\n            strValue = JSON.stringify(value);\r\n        }\r\n    }\r\n    catch (error) { }\r\n    return strValue.length > VALUE_STRING_LENGTH_LIMIT\r\n        ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + '…'\r\n        : strValue;\r\n}\r\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\r\n    const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\r\n    let oldValue = prefix, newValue = prefix;\r\n    for (let i = 0; i < chunks.length; i++) {\r\n        const slotIdx = rootIndex + i;\r\n        oldValue += `${lView[slotIdx]}${chunks[i]}`;\r\n        newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\r\n    }\r\n    return { propName, oldValue, newValue };\r\n}\r\n/**\r\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\r\n * - property name (for property bindings or interpolations)\r\n * - old and new values, enriched using information from metadata\r\n *\r\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\r\n * function description.\r\n */\r\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\r\n    const tData = lView[TVIEW].data;\r\n    const metadata = tData[bindingIndex];\r\n    if (typeof metadata === 'string') {\r\n        // metadata for property interpolation\r\n        if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\r\n            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\r\n        }\r\n        // metadata for property binding\r\n        return { propName: metadata, oldValue, newValue };\r\n    }\r\n    // metadata is not available for this expression, check if this expression is a part of the\r\n    // property interpolation by going from the current binding index left and look for a string that\r\n    // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\r\n    // [..., 'id�Prefix � and � suffix', null, null, null, ...]\r\n    if (metadata === null) {\r\n        let idx = bindingIndex - 1;\r\n        while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\r\n            idx--;\r\n        }\r\n        const meta = tData[idx];\r\n        if (typeof meta === 'string') {\r\n            const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\r\n            // first interpolation delimiter separates property name from interpolation parts (in case of\r\n            // property interpolations), so we subtract one from total number of found delimiters\r\n            if (matches && matches.length - 1 > bindingIndex - idx) {\r\n                return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\r\n            }\r\n        }\r\n    }\r\n    return { propName: undefined, oldValue, newValue };\r\n}\r\n\r\n/**\r\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\r\n *\r\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\r\n *\r\n * @param className A string containing classes (whitespace separated)\r\n * @param classToSearch A class name to locate\r\n * @param startingIndex Starting location of search\r\n * @returns an index of the located class (or -1 if not found)\r\n */\r\nfunction classIndexOf(className, classToSearch, startingIndex) {\r\n    ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\r\n    let end = className.length;\r\n    while (true) {\r\n        const foundIndex = className.indexOf(classToSearch, startingIndex);\r\n        if (foundIndex === -1)\r\n            return foundIndex;\r\n        if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\r\n            // Ensure that it has leading whitespace\r\n            const length = classToSearch.length;\r\n            if (foundIndex + length === end ||\r\n                className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\r\n                // Ensure that it has trailing whitespace\r\n                return foundIndex;\r\n            }\r\n        }\r\n        // False positive, keep searching from where we left off.\r\n        startingIndex = foundIndex + 1;\r\n    }\r\n}\r\n\r\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\r\n/**\r\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\r\n *\r\n * @param tNode static data of the node to match\r\n * @param attrs `TAttributes` to search through.\r\n * @param cssClassToMatch class to match (lowercase)\r\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\r\n *    addition to the `AttributeMarker.Classes`.\r\n */\r\nfunction isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {\r\n    ngDevMode &&\r\n        assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\r\n    let i = 0;\r\n    if (isProjectionMode) {\r\n        for (; i < attrs.length && typeof attrs[i] === 'string'; i += 2) {\r\n            // Search for an implicit `class` attribute and check if its value matches `cssClassToMatch`.\r\n            if (attrs[i] === 'class' &&\r\n                classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    else if (isInlineTemplate(tNode)) {\r\n        // Matching directives (i.e. when not matching for projection mode) should not consider the\r\n        // class bindings that are present on inline templates, as those class bindings only target\r\n        // the root node of the template, not the template itself.\r\n        return false;\r\n    }\r\n    // Resume the search for classes after the `Classes` marker.\r\n    i = attrs.indexOf(1 /* AttributeMarker.Classes */, i);\r\n    if (i > -1) {\r\n        // We found the classes section. Start searching for the class.\r\n        let item;\r\n        while (++i < attrs.length && typeof (item = attrs[i]) === 'string') {\r\n            if (item.toLowerCase() === cssClassToMatch) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\r\n *\r\n * @param tNode current TNode\r\n */\r\nfunction isInlineTemplate(tNode) {\r\n    return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\r\n}\r\n/**\r\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\r\n *\r\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\r\n * directive matching mode:\r\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\r\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\r\n * tag name was extracted from * syntax so we would match the same directive twice);\r\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\r\n * (applicable to TNodeType.Container only).\r\n */\r\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\r\n    const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\r\n    return currentSelector === tagNameToCompare;\r\n}\r\n/**\r\n * A utility function to match an Ivy node static data against a simple CSS selector\r\n *\r\n * @param tNode static data of the node to match\r\n * @param selector The selector to try matching against the node.\r\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\r\n * directive matching.\r\n * @returns true if node matches the selector.\r\n */\r\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\r\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\r\n    let mode = 4 /* SelectorFlags.ELEMENT */;\r\n    const nodeAttrs = tNode.attrs;\r\n    // Find the index of first attribute that has no value, only a name.\r\n    const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;\r\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\r\n    // current one doesn't match\r\n    let skipToNextSelector = false;\r\n    for (let i = 0; i < selector.length; i++) {\r\n        const current = selector[i];\r\n        if (typeof current === 'number') {\r\n            // If we finish processing a :not selector and it hasn't failed, return false\r\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\r\n                return false;\r\n            }\r\n            // If we are skipping to the next :not() and this mode flag is positive,\r\n            // it's a part of the current :not() selector, and we should keep skipping\r\n            if (skipToNextSelector && isPositive(current))\r\n                continue;\r\n            skipToNextSelector = false;\r\n            mode = current | (mode & 1 /* SelectorFlags.NOT */);\r\n            continue;\r\n        }\r\n        if (skipToNextSelector)\r\n            continue;\r\n        if (mode & 4 /* SelectorFlags.ELEMENT */) {\r\n            mode = 2 /* SelectorFlags.ATTRIBUTE */ | (mode & 1 /* SelectorFlags.NOT */);\r\n            if ((current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode)) ||\r\n                (current === '' && selector.length === 1)) {\r\n                if (isPositive(mode))\r\n                    return false;\r\n                skipToNextSelector = true;\r\n            }\r\n        }\r\n        else if (mode & 8 /* SelectorFlags.CLASS */) {\r\n            if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {\r\n                if (isPositive(mode))\r\n                    return false;\r\n                skipToNextSelector = true;\r\n            }\r\n        }\r\n        else {\r\n            const selectorAttrValue = selector[++i];\r\n            const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\r\n            if (attrIndexInNode === -1) {\r\n                if (isPositive(mode))\r\n                    return false;\r\n                skipToNextSelector = true;\r\n                continue;\r\n            }\r\n            if (selectorAttrValue !== '') {\r\n                let nodeAttrValue;\r\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\r\n                    nodeAttrValue = '';\r\n                }\r\n                else {\r\n                    ngDevMode &&\r\n                        assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\r\n                    // we lowercase the attribute value to be able to match\r\n                    // selectors without case-sensitivity\r\n                    // (selectors are already in lowercase when generated)\r\n                    nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\r\n                }\r\n                if (mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\r\n                    if (isPositive(mode))\r\n                        return false;\r\n                    skipToNextSelector = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return isPositive(mode) || skipToNextSelector;\r\n}\r\nfunction isPositive(mode) {\r\n    return (mode & 1 /* SelectorFlags.NOT */) === 0;\r\n}\r\n/**\r\n * Examines the attribute's definition array for a node to find the index of the\r\n * attribute that matches the given `name`.\r\n *\r\n * NOTE: This will not match namespaced attributes.\r\n *\r\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\r\n * The following table summarizes which types of attributes we attempt to match:\r\n *\r\n * ===========================================================================================================\r\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\r\n * Attributes\r\n * ===========================================================================================================\r\n * Inline + Projection     | YES               | YES                 | NO                  | YES\r\n * -----------------------------------------------------------------------------------------------------------\r\n * Inline + Directive      | NO                | NO                  | YES                 | NO\r\n * -----------------------------------------------------------------------------------------------------------\r\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\r\n * -----------------------------------------------------------------------------------------------------------\r\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\r\n * ===========================================================================================================\r\n *\r\n * @param name the name of the attribute to find\r\n * @param attrs the attribute array to examine\r\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\r\n * rather than a manually expanded template node (e.g `<ng-template>`).\r\n * @param isProjectionMode true if we are matching against content projection otherwise we are\r\n * matching against directives.\r\n */\r\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\r\n    if (attrs === null)\r\n        return -1;\r\n    let i = 0;\r\n    if (isProjectionMode || !isInlineTemplate) {\r\n        let bindingsMode = false;\r\n        while (i < attrs.length) {\r\n            const maybeAttrName = attrs[i];\r\n            if (maybeAttrName === name) {\r\n                return i;\r\n            }\r\n            else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ ||\r\n                maybeAttrName === 6 /* AttributeMarker.I18n */) {\r\n                bindingsMode = true;\r\n            }\r\n            else if (maybeAttrName === 1 /* AttributeMarker.Classes */ ||\r\n                maybeAttrName === 2 /* AttributeMarker.Styles */) {\r\n                let value = attrs[++i];\r\n                // We should skip classes here because we have a separate mechanism for\r\n                // matching classes in projection mode.\r\n                while (typeof value === 'string') {\r\n                    value = attrs[++i];\r\n                }\r\n                continue;\r\n            }\r\n            else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\r\n                // We do not care about Template attributes in this scenario.\r\n                break;\r\n            }\r\n            else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\r\n                // Skip the whole namespaced attribute and value. This is by design.\r\n                i += 4;\r\n                continue;\r\n            }\r\n            // In binding mode there are only names, rather than name-value pairs.\r\n            i += bindingsMode ? 1 : 2;\r\n        }\r\n        // We did not match the attribute\r\n        return -1;\r\n    }\r\n    else {\r\n        return matchTemplateAttribute(attrs, name);\r\n    }\r\n}\r\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\r\n    for (let i = 0; i < selector.length; i++) {\r\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getProjectAsAttrValue(tNode) {\r\n    const nodeAttrs = tNode.attrs;\r\n    if (nodeAttrs != null) {\r\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\r\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\r\n        // (attribute names are stored at even indexes)\r\n        if ((ngProjectAsAttrIdx & 1) === 0) {\r\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\r\n    for (let i = 0; i < nodeAttrs.length; i++) {\r\n        const nodeAttr = nodeAttrs[i];\r\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\r\n            return i;\r\n        }\r\n    }\r\n    return nodeAttrs.length;\r\n}\r\nfunction matchTemplateAttribute(attrs, name) {\r\n    let i = attrs.indexOf(4 /* AttributeMarker.Template */);\r\n    if (i > -1) {\r\n        i++;\r\n        while (i < attrs.length) {\r\n            const attr = attrs[i];\r\n            // Return in case we checked all template attrs and are switching to the next section in the\r\n            // attrs array (that starts with a number that represents an attribute marker).\r\n            if (typeof attr === 'number')\r\n                return -1;\r\n            if (attr === name)\r\n                return i;\r\n            i++;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Checks whether a selector is inside a CssSelectorList\r\n * @param selector Selector to be checked.\r\n * @param list List in which to look for the selector.\r\n */\r\nfunction isSelectorInSelectorList(selector, list) {\r\n    selectorListLoop: for (let i = 0; i < list.length; i++) {\r\n        const currentSelectorInList = list[i];\r\n        if (selector.length !== currentSelectorInList.length) {\r\n            continue;\r\n        }\r\n        for (let j = 0; j < selector.length; j++) {\r\n            if (selector[j] !== currentSelectorInList[j]) {\r\n                continue selectorListLoop;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\r\n    return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\r\n}\r\nfunction stringifyCSSSelector(selector) {\r\n    let result = selector[0];\r\n    let i = 1;\r\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\r\n    let currentChunk = '';\r\n    let isNegativeMode = false;\r\n    while (i < selector.length) {\r\n        let valueOrMarker = selector[i];\r\n        if (typeof valueOrMarker === 'string') {\r\n            if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\r\n                const attrValue = selector[++i];\r\n                currentChunk +=\r\n                    '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\r\n            }\r\n            else if (mode & 8 /* SelectorFlags.CLASS */) {\r\n                currentChunk += '.' + valueOrMarker;\r\n            }\r\n            else if (mode & 4 /* SelectorFlags.ELEMENT */) {\r\n                currentChunk += ' ' + valueOrMarker;\r\n            }\r\n        }\r\n        else {\r\n            //\r\n            // Append current chunk to the final result in case we come across SelectorFlag, which\r\n            // indicates that the previous section of a selector is over. We need to accumulate content\r\n            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\r\n            // ```\r\n            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\r\n            // ```\r\n            // should be transformed to `.classA :not(.classB .classC)`.\r\n            //\r\n            // Note: for negative selector part, we accumulate content between flags until we find the\r\n            // next negative flag. This is needed to support a case where `:not()` rule contains more than\r\n            // one chunk, e.g. the following selector:\r\n            // ```\r\n            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\r\n            // ```\r\n            // should be stringified to `:not(p.foo) :not(.bar)`\r\n            //\r\n            if (currentChunk !== '' && !isPositive(valueOrMarker)) {\r\n                result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\r\n                currentChunk = '';\r\n            }\r\n            mode = valueOrMarker;\r\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\r\n            // mode is maintained for remaining chunks of a selector.\r\n            isNegativeMode = isNegativeMode || !isPositive(mode);\r\n        }\r\n        i++;\r\n    }\r\n    if (currentChunk !== '') {\r\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Generates string representation of CSS selector in parsed form.\r\n *\r\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\r\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\r\n * example, while bootstrapping a component), a string version of the selector is required to query\r\n * for the host element on the page. This function takes the parsed form of a selector and returns\r\n * its string representation.\r\n *\r\n * @param selectorList selector in parsed form\r\n * @returns string representation of a given selector\r\n */\r\nfunction stringifyCSSSelectorList(selectorList) {\r\n    return selectorList.map(stringifyCSSSelector).join(',');\r\n}\r\n/**\r\n * Extracts attributes and classes information from a given CSS selector.\r\n *\r\n * This function is used while creating a component dynamically. In this case, the host element\r\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\r\n * selector.\r\n *\r\n * @param selector CSS selector in parsed form (in a form of array)\r\n * @returns object with `attrs` and `classes` fields that contain extracted information\r\n */\r\nfunction extractAttrsAndClassesFromSelector(selector) {\r\n    const attrs = [];\r\n    const classes = [];\r\n    let i = 1;\r\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\r\n    while (i < selector.length) {\r\n        let valueOrMarker = selector[i];\r\n        if (typeof valueOrMarker === 'string') {\r\n            if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\r\n                if (valueOrMarker !== '') {\r\n                    attrs.push(valueOrMarker, selector[++i]);\r\n                }\r\n            }\r\n            else if (mode === 8 /* SelectorFlags.CLASS */) {\r\n                classes.push(valueOrMarker);\r\n            }\r\n        }\r\n        else {\r\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\r\n            // mode is maintained for remaining chunks of a selector. Since attributes and classes are\r\n            // extracted only for \"positive\" part of the selector, we can stop here.\r\n            if (!isPositive(mode))\r\n                break;\r\n            mode = valueOrMarker;\r\n        }\r\n        i++;\r\n    }\r\n    if (classes.length) {\r\n        attrs.push(1 /* AttributeMarker.Classes */, ...classes);\r\n    }\r\n    return attrs;\r\n}\r\n\r\n/** A special value which designates that a value has not changed. */\r\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? { __brand__: 'NO_CHANGE' } : {};\r\n\r\nfunction createTextNode(renderer, value) {\r\n    return renderer.createText(value);\r\n}\r\nfunction updateTextNode(renderer, rNode, value) {\r\n    renderer.setValue(rNode, value);\r\n}\r\nfunction createCommentNode(renderer, value) {\r\n    return renderer.createComment(escapeCommentText(value));\r\n}\r\n/**\r\n * Creates a native element from a tag name, using a renderer.\r\n * @param renderer A renderer to use\r\n * @param name the tag name\r\n * @param namespace Optional namespace for element.\r\n * @returns the element created\r\n */\r\nfunction createElementNode(renderer, name, namespace) {\r\n    return renderer.createElement(name, namespace);\r\n}\r\n/**\r\n * Inserts a native node before another native node for a given parent.\r\n * This is a utility function that can be used when native nodes were determined.\r\n */\r\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\r\n    renderer.insertBefore(parent, child, beforeNode, isMove);\r\n}\r\nfunction nativeAppendChild(renderer, parent, child) {\r\n    ngDevMode && assertDefined(parent, 'parent node must be defined');\r\n    renderer.appendChild(parent, child);\r\n}\r\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\r\n    if (beforeNode !== null) {\r\n        nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\r\n    }\r\n    else {\r\n        nativeAppendChild(renderer, parent, child);\r\n    }\r\n}\r\n/**\r\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\r\n * parent from the native tree as not all platforms / browsers support the equivalent of\r\n * node.remove().\r\n *\r\n * @param renderer A renderer to be used\r\n * @param rNode The native node that should be removed\r\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\r\n */\r\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\r\n    renderer.removeChild(null, rNode, isHostElement);\r\n}\r\n/**\r\n * Clears the contents of a given RElement.\r\n *\r\n * @param rElement the native RElement to be cleared\r\n */\r\nfunction clearElementContents(rElement) {\r\n    rElement.textContent = '';\r\n}\r\n/**\r\n * Write `cssText` to `RElement`.\r\n *\r\n * This function does direct write without any reconciliation. Used for writing initial values, so\r\n * that static styling values do not pull in the style parser.\r\n *\r\n * @param renderer Renderer to use\r\n * @param element The element which needs to be updated.\r\n * @param newValue The new class list to write.\r\n */\r\nfunction writeDirectStyle(renderer, element, newValue) {\r\n    ngDevMode && assertString(newValue, \"'newValue' should be a string\");\r\n    renderer.setAttribute(element, 'style', newValue);\r\n}\r\n/**\r\n * Write `className` to `RElement`.\r\n *\r\n * This function does direct write without any reconciliation. Used for writing initial values, so\r\n * that static styling values do not pull in the style parser.\r\n *\r\n * @param renderer Renderer to use\r\n * @param element The element which needs to be updated.\r\n * @param newValue The new class list to write.\r\n */\r\nfunction writeDirectClass(renderer, element, newValue) {\r\n    ngDevMode && assertString(newValue, \"'newValue' should be a string\");\r\n    if (newValue === '') {\r\n        // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\r\n        renderer.removeAttribute(element, 'class');\r\n    }\r\n    else {\r\n        renderer.setAttribute(element, 'class', newValue);\r\n    }\r\n}\r\n/** Sets up the static DOM attributes on an `RNode`. */\r\nfunction setupStaticAttributes(renderer, element, tNode) {\r\n    const { mergedAttrs, classes, styles } = tNode;\r\n    if (mergedAttrs !== null) {\r\n        setUpAttributes(renderer, element, mergedAttrs);\r\n    }\r\n    if (classes !== null) {\r\n        writeDirectClass(renderer, element, classes);\r\n    }\r\n    if (styles !== null) {\r\n        writeDirectStyle(renderer, element, styles);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a TView instance\r\n *\r\n * @param type Type of `TView`.\r\n * @param declTNode Declaration location of this `TView`.\r\n * @param templateFn Template function\r\n * @param decls The number of nodes, local refs, and pipes in this template\r\n * @param directives Registry of directives for this view\r\n * @param pipes Registry of pipes for this view\r\n * @param viewQuery View queries for this view\r\n * @param schemas Schemas for this view\r\n * @param consts Constants for this view\r\n */\r\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {\r\n    const bindingStartIndex = HEADER_OFFSET + decls;\r\n    // This length does not yet contain host bindings from child directives because at this point,\r\n    // we don't know which directives are active on this template. As soon as a directive is matched\r\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\r\n    const initialViewLength = bindingStartIndex + vars;\r\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\r\n    const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\r\n    const tView = (blueprint[TVIEW] = {\r\n        type: type,\r\n        blueprint: blueprint,\r\n        template: templateFn,\r\n        queries: null,\r\n        viewQuery: viewQuery,\r\n        declTNode: declTNode,\r\n        data: blueprint.slice().fill(null, bindingStartIndex),\r\n        bindingStartIndex: bindingStartIndex,\r\n        expandoStartIndex: initialViewLength,\r\n        hostBindingOpCodes: null,\r\n        firstCreatePass: true,\r\n        firstUpdatePass: true,\r\n        staticViewQueries: false,\r\n        staticContentQueries: false,\r\n        preOrderHooks: null,\r\n        preOrderCheckHooks: null,\r\n        contentHooks: null,\r\n        contentCheckHooks: null,\r\n        viewHooks: null,\r\n        viewCheckHooks: null,\r\n        destroyHooks: null,\r\n        cleanup: null,\r\n        contentQueries: null,\r\n        components: null,\r\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\r\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\r\n        firstChild: null,\r\n        schemas: schemas,\r\n        consts: consts,\r\n        incompleteFirstPass: false,\r\n        ssrId,\r\n    });\r\n    if (ngDevMode) {\r\n        // For performance reasons it is important that the tView retains the same shape during runtime.\r\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\r\n        // prevent class transitions.\r\n        Object.seal(tView);\r\n    }\r\n    return tView;\r\n}\r\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\r\n    const blueprint = [];\r\n    for (let i = 0; i < initialViewLength; i++) {\r\n        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\r\n    }\r\n    return blueprint;\r\n}\r\n/**\r\n * Gets TView from a template function or creates a new TView\r\n * if it doesn't already exist.\r\n *\r\n * @param def ComponentDef\r\n * @returns TView\r\n */\r\nfunction getOrCreateComponentTView(def) {\r\n    const tView = def.tView;\r\n    // Create a TView if there isn't one, or recreate it if the first create pass didn't\r\n    // complete successfully since we can't know for sure whether it's in a usable shape.\r\n    if (tView === null || tView.incompleteFirstPass) {\r\n        // Declaration node here is null since this function is called when we dynamically create a\r\n        // component and hence there is no declaration.\r\n        const declTNode = null;\r\n        return (def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id));\r\n    }\r\n    return tView;\r\n}\r\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {\r\n    const lView = tView.blueprint.slice();\r\n    lView[HOST] = host;\r\n    lView[FLAGS] =\r\n        flags |\r\n            4 /* LViewFlags.CreationMode */ |\r\n            128 /* LViewFlags.Attached */ |\r\n            8 /* LViewFlags.FirstLViewPass */ |\r\n            64 /* LViewFlags.Dirty */ |\r\n            1024 /* LViewFlags.RefreshView */;\r\n    if (embeddedViewInjector !== null ||\r\n        (parentLView && parentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */)) {\r\n        lView[FLAGS] |= 2048 /* LViewFlags.HasEmbeddedViewInjector */;\r\n    }\r\n    resetPreOrderHookFlags(lView);\r\n    ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\r\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\r\n    lView[CONTEXT] = context;\r\n    lView[ENVIRONMENT] = (environment || (parentLView && parentLView[ENVIRONMENT]));\r\n    ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\r\n    lView[RENDERER] = (renderer || (parentLView && parentLView[RENDERER]));\r\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\r\n    lView[INJECTOR] = injector || (parentLView && parentLView[INJECTOR]) || null;\r\n    lView[T_HOST] = tHostNode;\r\n    lView[ID] = getUniqueLViewId();\r\n    lView[HYDRATION] = hydrationInfo;\r\n    lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\r\n    ngDevMode &&\r\n        assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\r\n    lView[DECLARATION_COMPONENT_VIEW] =\r\n        tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\r\n    return lView;\r\n}\r\nfunction createComponentLView(lView, hostTNode, def) {\r\n    const native = getNativeByTNode(hostTNode, lView);\r\n    const tView = getOrCreateComponentTView(def);\r\n    // Only component views should be added to the view tree directly. Embedded views are\r\n    // accessed through their containers because they may be removed / re-added later.\r\n    const rendererFactory = lView[ENVIRONMENT].rendererFactory;\r\n    const componentView = addToEndOfViewTree(lView, createLView(lView, tView, null, getInitialLViewFlagsFromDef(def), native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));\r\n    // Component view will always be created before any injected LContainers,\r\n    // so this is a regular element, wrap it with the component view\r\n    return (lView[hostTNode.index] = componentView);\r\n}\r\n/**\r\n * Gets the initial set of LView flags based on the component definition that the LView represents.\r\n * @param def Component definition from which to determine the flags.\r\n */\r\nfunction getInitialLViewFlagsFromDef(def) {\r\n    let flags = 16 /* LViewFlags.CheckAlways */;\r\n    if (def.signals) {\r\n        flags = 4096 /* LViewFlags.SignalView */;\r\n    }\r\n    else if (def.onPush) {\r\n        flags = 64 /* LViewFlags.Dirty */;\r\n    }\r\n    return flags;\r\n}\r\n/**\r\n * When elements are created dynamically after a view blueprint is created (e.g. through\r\n * i18nApply()), we need to adjust the blueprint for future template passes.\r\n *\r\n * @param tView `TView` associated with `LView`\r\n * @param lView The `LView` containing the blueprint to adjust\r\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\r\n * @param initialValue Initial value to store in blueprint\r\n */\r\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\r\n    if (numSlotsToAlloc === 0)\r\n        return -1;\r\n    if (ngDevMode) {\r\n        assertFirstCreatePass(tView);\r\n        assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\r\n        assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\r\n        assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\r\n        assertFirstUpdatePass(tView);\r\n    }\r\n    const allocIdx = lView.length;\r\n    for (let i = 0; i < numSlotsToAlloc; i++) {\r\n        lView.push(initialValue);\r\n        tView.blueprint.push(initialValue);\r\n        tView.data.push(null);\r\n    }\r\n    return allocIdx;\r\n}\r\n/**\r\n * Adds LView or LContainer to the end of the current view tree.\r\n *\r\n * This structure will be used to traverse through nested views to remove listeners\r\n * and call onDestroy callbacks.\r\n *\r\n * @param lView The view where LView or LContainer should be added\r\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\r\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\r\n * @returns The state passed in\r\n */\r\nfunction addToEndOfViewTree(lView, lViewOrLContainer) {\r\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\r\n    // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\r\n    // of order, the change detection will run out of order, as the act of retrieving the the\r\n    // LContainer from the RNode is what adds it to the queue.\r\n    if (lView[CHILD_HEAD]) {\r\n        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\r\n    }\r\n    else {\r\n        lView[CHILD_HEAD] = lViewOrLContainer;\r\n    }\r\n    lView[CHILD_TAIL] = lViewOrLContainer;\r\n    return lViewOrLContainer;\r\n}\r\n\r\n/**\r\n * Advances to an element for later binding instructions.\r\n *\r\n * Used in conjunction with instructions like {@link property} to act on elements with specified\r\n * indices, for example those created with {@link element} or {@link elementStart}.\r\n *\r\n * ```ts\r\n * (rf: RenderFlags, ctx: any) => {\r\n *   if (rf & 1) {\r\n *     text(0, 'Hello');\r\n *     text(1, 'Goodbye')\r\n *     element(2, 'div');\r\n *   }\r\n *   if (rf & 2) {\r\n *     advance(2); // Advance twice to the <div>.\r\n *     property('title', 'test');\r\n *   }\r\n *  }\r\n * ```\r\n * @param delta Number of elements to advance forwards by.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵadvance(delta = 1) {\r\n    ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\r\n    selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\r\n}\r\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\r\n    ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\r\n    // Flush the initial hooks for elements in the view that have been added up to this point.\r\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\r\n    if (!checkNoChangesMode) {\r\n        const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\r\n        if (hooksInitPhaseCompleted) {\r\n            const preOrderCheckHooks = tView.preOrderCheckHooks;\r\n            if (preOrderCheckHooks !== null) {\r\n                executeCheckHooks(lView, preOrderCheckHooks, index);\r\n            }\r\n        }\r\n        else {\r\n            const preOrderHooks = tView.preOrderHooks;\r\n            if (preOrderHooks !== null) {\r\n                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\r\n            }\r\n        }\r\n    }\r\n    // We must set the selected index *after* running the hooks, because hooks may have side-effects\r\n    // that cause other template functions to run, thus updating the selected index, which is global\r\n    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\r\n    // will be altered by the time we leave the `ɵɵadvance` instruction.\r\n    setSelectedIndex(index);\r\n}\r\n\r\n/** Flags describing an input for a directive. */\r\nvar InputFlags;\r\n(function (InputFlags) {\r\n    InputFlags[InputFlags[\"None\"] = 0] = \"None\";\r\n    InputFlags[InputFlags[\"SignalBased\"] = 1] = \"SignalBased\";\r\n    InputFlags[InputFlags[\"HasDecoratorInputTransform\"] = 2] = \"HasDecoratorInputTransform\";\r\n})(InputFlags || (InputFlags = {}));\r\n\r\nfunction writeToDirectiveInput(def, instance, publicName, value) {\r\n    const prevConsumer = setActiveConsumer(null);\r\n    try {\r\n        if (ngDevMode) {\r\n            if (!def.inputs.hasOwnProperty(publicName)) {\r\n                throw new Error(`ASSERTION ERROR: Directive ${def.type.name} does not have an input with a public name of \"${publicName}\"`);\r\n            }\r\n            // Usually we resolve the directive instance using `LView[someIndex]` before writing to an\r\n            // input, however if the read happens to early, the `LView[someIndex]` might actually be a\r\n            // `NodeInjectorFactory`. Check for this specific case here since it can break in subtle ways.\r\n            if (instance instanceof NodeInjectorFactory) {\r\n                throw new Error(`ASSERTION ERROR: Cannot write input to factory for type ${def.type.name}. Directive has not been created yet.`);\r\n            }\r\n        }\r\n        const [privateName, flags, transform] = def.inputs[publicName];\r\n        // If we know we are dealing with a signal input, we cache its reference\r\n        // in a tree-shakable way. The input signal node can then be used for\r\n        // value transform execution or actual value updates without introducing\r\n        // additional megamorphic accesses for accessing the instance field.\r\n        let inputSignalNode = null;\r\n        if ((flags & InputFlags.SignalBased) !== 0) {\r\n            const field = instance[privateName];\r\n            inputSignalNode = field[SIGNAL];\r\n        }\r\n        // If there is a signal node and a transform, run it before potentially\r\n        // delegating to features like `NgOnChanges`.\r\n        if (inputSignalNode !== null && inputSignalNode.transformFn !== undefined) {\r\n            value = inputSignalNode.transformFn(value);\r\n        }\r\n        else if (transform !== null) {\r\n            // If there is a decorator input transform, run it.\r\n            value = transform.call(instance, value);\r\n        }\r\n        if (def.setInput !== null) {\r\n            def.setInput(instance, inputSignalNode, value, publicName, privateName);\r\n        }\r\n        else {\r\n            applyValueToInputField(instance, inputSignalNode, privateName, value);\r\n        }\r\n    }\r\n    finally {\r\n        setActiveConsumer(prevConsumer);\r\n    }\r\n}\r\n\r\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\r\n    const prevSelectedIndex = getSelectedIndex();\r\n    const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\r\n    try {\r\n        setSelectedIndex(-1);\r\n        if (isUpdatePhase && lView.length > HEADER_OFFSET) {\r\n            // When we're updating, inherently select 0 so we don't\r\n            // have to generate that instruction for most update blocks.\r\n            selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\r\n        }\r\n        const preHookType = isUpdatePhase\r\n            ? 2 /* ProfilerEvent.TemplateUpdateStart */\r\n            : 0 /* ProfilerEvent.TemplateCreateStart */;\r\n        profiler(preHookType, context, templateFn);\r\n        templateFn(rf, context);\r\n    }\r\n    finally {\r\n        setSelectedIndex(prevSelectedIndex);\r\n        const postHookType = isUpdatePhase\r\n            ? 3 /* ProfilerEvent.TemplateUpdateEnd */\r\n            : 1 /* ProfilerEvent.TemplateCreateEnd */;\r\n        profiler(postHookType, context, templateFn);\r\n    }\r\n}\r\n/**\r\n * Creates directive instances.\r\n */\r\nfunction createDirectivesInstances(tView, lView, tNode) {\r\n    instantiateAllDirectives(tView, lView, tNode);\r\n    if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\r\n        invokeDirectivesHostBindings(tView, lView, tNode);\r\n    }\r\n}\r\n/**\r\n * Takes a list of local names and indices and pushes the resolved local variable values\r\n * to LView in the same order as they are loaded in the template with load().\r\n */\r\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\r\n    const localNames = tNode.localNames;\r\n    if (localNames !== null) {\r\n        let localIndex = tNode.index + 1;\r\n        for (let i = 0; i < localNames.length; i += 2) {\r\n            const index = localNames[i + 1];\r\n            const value = index === -1\r\n                ? localRefExtractor(tNode, viewData)\r\n                : viewData[index];\r\n            viewData[localIndex++] = value;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\r\n *\r\n * @param renderer the renderer used to locate the element.\r\n * @param elementOrSelector Render element or CSS selector to locate the element.\r\n * @param encapsulation View Encapsulation defined for component that requests host element.\r\n * @param injector Root view injector instance.\r\n */\r\nfunction locateHostElement(renderer, elementOrSelector, encapsulation, injector) {\r\n    // Note: we use default value for the `PRESERVE_HOST_CONTENT` here even though it's a\r\n    // tree-shakable one (providedIn:'root'). This code path can be triggered during dynamic\r\n    // component creation (after calling ViewContainerRef.createComponent) when an injector\r\n    // instance can be provided. The injector instance might be disconnected from the main DI\r\n    // tree, thus the `PRESERVE_HOST_CONTENT` would not be able to instantiate. In this case, the\r\n    // default value will be used.\r\n    const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);\r\n    // When using native Shadow DOM, do not clear host element to allow native slot\r\n    // projection.\r\n    const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation.ShadowDom;\r\n    const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);\r\n    applyRootElementTransform(rootElement);\r\n    return rootElement;\r\n}\r\n/**\r\n * Applies any root element transformations that are needed. If hydration is enabled,\r\n * this will process corrupted text nodes.\r\n *\r\n * @param rootElement the app root HTML Element\r\n */\r\nfunction applyRootElementTransform(rootElement) {\r\n    _applyRootElementTransformImpl(rootElement);\r\n}\r\n/**\r\n * Reference to a function that applies transformations to the root HTML element\r\n * of an app. When hydration is enabled, this processes any corrupt text nodes\r\n * so they are properly hydratable on the client.\r\n *\r\n * @param rootElement the app root HTML Element\r\n */\r\nlet _applyRootElementTransformImpl = () => null;\r\n/**\r\n * Processes text node markers before hydration begins. This replaces any special comment\r\n * nodes that were added prior to serialization are swapped out to restore proper text\r\n * nodes before hydration.\r\n *\r\n * @param rootElement the app root HTML Element\r\n */\r\nfunction applyRootElementTransformImpl(rootElement) {\r\n    if (hasSkipHydrationAttrOnRElement(rootElement)) {\r\n        // Handle a situation when the `ngSkipHydration` attribute is applied\r\n        // to the root node of an application. In this case, we should clear\r\n        // the contents and render everything from scratch.\r\n        clearElementContents(rootElement);\r\n    }\r\n    else {\r\n        processTextNodeMarkersBeforeHydration(rootElement);\r\n    }\r\n}\r\n/**\r\n * Sets the implementation for the `applyRootElementTransform` function.\r\n */\r\nfunction enableApplyRootElementTransformImpl() {\r\n    _applyRootElementTransformImpl = applyRootElementTransformImpl;\r\n}\r\n/**\r\n * Mapping between attributes names that don't correspond to their element property names.\r\n *\r\n * Performance note: this function is written as a series of if checks (instead of, say, a property\r\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\r\n * mapping property names. Do NOT change without benchmarking.\r\n *\r\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\r\n * type-checking machinery of ngtsc.\r\n */\r\nfunction mapPropName(name) {\r\n    if (name === 'class')\r\n        return 'className';\r\n    if (name === 'for')\r\n        return 'htmlFor';\r\n    if (name === 'formaction')\r\n        return 'formAction';\r\n    if (name === 'innerHtml')\r\n        return 'innerHTML';\r\n    if (name === 'readonly')\r\n        return 'readOnly';\r\n    if (name === 'tabindex')\r\n        return 'tabIndex';\r\n    return name;\r\n}\r\nfunction setPropertyAndInputs(tNode, lView, propName, value, renderer, sanitizer) {\r\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\r\n    const tView = lView[TVIEW];\r\n    const hasSetInput = setAllInputsForProperty(tNode, tView, lView, propName, value);\r\n    if (hasSetInput) {\r\n        isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);\r\n        ngDevMode && setNgReflectProperties(lView, tView, tNode, propName, value);\r\n        return; // Stop propcessing if we've matched at least one input.\r\n    }\r\n    setDomProperty(tNode, lView, propName, value, renderer, sanitizer);\r\n}\r\n/**\r\n * Sets a DOM property on a specific node.\r\n * @param tNode TNode on which to set the value.\r\n * @param lView View in which the node is located.\r\n * @param propName Name of the property.\r\n * @param value Value to set on the property.\r\n * @param renderer Renderer to use when setting the property.\r\n * @param sanitizer Function used to sanitize the value before setting it.\r\n */\r\nfunction setDomProperty(tNode, lView, propName, value, renderer, sanitizer) {\r\n    if (tNode.type & 3 /* TNodeType.AnyRNode */) {\r\n        const element = getNativeByTNode(tNode, lView);\r\n        propName = mapPropName(propName);\r\n        if (ngDevMode) {\r\n            validateAgainstEventProperties(propName);\r\n            if (!isPropertyValid(element, propName, tNode.value, lView[TVIEW].schemas)) {\r\n                handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\r\n            }\r\n        }\r\n        // It is assumed that the sanitizer is only added when the compiler determines that the\r\n        // property is risky, so sanitization can be done without further checks.\r\n        value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\r\n        renderer.setProperty(element, propName, value);\r\n    }\r\n    else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\r\n        // If the node is a container and the property didn't\r\n        // match any of the inputs or schemas we should throw.\r\n        if (ngDevMode && !matchingSchemas(lView[TVIEW].schemas, tNode.value)) {\r\n            handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\r\n        }\r\n    }\r\n}\r\n/** If node is an OnPush component, marks its LView dirty. */\r\nfunction markDirtyIfOnPush(lView, viewIndex) {\r\n    ngDevMode && assertLView(lView);\r\n    const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\r\n    if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\r\n        childComponentLView[FLAGS] |= 64 /* LViewFlags.Dirty */;\r\n    }\r\n}\r\nfunction setNgReflectProperty(lView, tNode, attrName, value) {\r\n    const environment = lView[ENVIRONMENT];\r\n    if (!environment.ngReflect) {\r\n        return;\r\n    }\r\n    const element = getNativeByTNode(tNode, lView);\r\n    const renderer = lView[RENDERER];\r\n    attrName = normalizeDebugBindingName(attrName);\r\n    const debugValue = normalizeDebugBindingValue(value);\r\n    if (tNode.type & 3 /* TNodeType.AnyRNode */) {\r\n        if (value == null) {\r\n            renderer.removeAttribute(element, attrName);\r\n        }\r\n        else {\r\n            renderer.setAttribute(element, attrName, debugValue);\r\n        }\r\n    }\r\n    else {\r\n        const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);\r\n        renderer.setValue(element, textContent);\r\n    }\r\n}\r\nfunction setNgReflectProperties(lView, tView, tNode, publicName, value) {\r\n    const environment = lView[ENVIRONMENT];\r\n    if (!environment.ngReflect || !(tNode.type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */))) {\r\n        return;\r\n    }\r\n    const inputConfig = tNode.inputs?.[publicName];\r\n    const hostInputConfig = tNode.hostDirectiveInputs?.[publicName];\r\n    if (hostInputConfig) {\r\n        for (let i = 0; i < hostInputConfig.length; i += 2) {\r\n            const index = hostInputConfig[i];\r\n            const publicName = hostInputConfig[i + 1];\r\n            const def = tView.data[index];\r\n            setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\r\n        }\r\n    }\r\n    // Note: we set the private name of the input as the reflected property, not the public one.\r\n    if (inputConfig) {\r\n        for (const index of inputConfig) {\r\n            const def = tView.data[index];\r\n            setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Instantiate all the directives that were previously resolved on the current node.\r\n */\r\nfunction instantiateAllDirectives(tView, lView, tNode) {\r\n    const start = tNode.directiveStart;\r\n    const end = tNode.directiveEnd;\r\n    // The component view needs to be created before creating the node injector\r\n    // since it is used to inject some special symbols like `ChangeDetectorRef`.\r\n    if (isComponentHost(tNode)) {\r\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\r\n        createComponentLView(lView, tNode, tView.data[start + tNode.componentOffset]);\r\n    }\r\n    if (!tView.firstCreatePass) {\r\n        getOrCreateNodeInjectorForNode(tNode, lView);\r\n    }\r\n    const initialInputs = tNode.initialInputs;\r\n    for (let i = start; i < end; i++) {\r\n        const def = tView.data[i];\r\n        const directive = getNodeInjectable(lView, tView, i, tNode);\r\n        attachPatchData(directive, lView);\r\n        if (initialInputs !== null) {\r\n            setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\r\n        }\r\n        if (isComponentDef(def)) {\r\n            const componentView = getComponentLViewByIndex(tNode.index, lView);\r\n            componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\r\n        }\r\n    }\r\n}\r\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\r\n    const start = tNode.directiveStart;\r\n    const end = tNode.directiveEnd;\r\n    const elementIndex = tNode.index;\r\n    const currentDirectiveIndex = getCurrentDirectiveIndex();\r\n    try {\r\n        setSelectedIndex(elementIndex);\r\n        for (let dirIndex = start; dirIndex < end; dirIndex++) {\r\n            const def = tView.data[dirIndex];\r\n            const directive = lView[dirIndex];\r\n            setCurrentDirectiveIndex(dirIndex);\r\n            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\r\n                invokeHostBindingsInCreationMode(def, directive);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        setSelectedIndex(-1);\r\n        setCurrentDirectiveIndex(currentDirectiveIndex);\r\n    }\r\n}\r\n/**\r\n * Invoke the host bindings in creation mode.\r\n *\r\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\r\n * @param directive Instance of directive.\r\n */\r\nfunction invokeHostBindingsInCreationMode(def, directive) {\r\n    if (def.hostBindings !== null) {\r\n        def.hostBindings(1 /* RenderFlags.Create */, directive);\r\n    }\r\n}\r\n/**\r\n * Matches the current node against all available selectors.\r\n * If a component is matched (at most one), it is returned in first position in the array.\r\n */\r\nfunction findDirectiveDefMatches(tView, tNode) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\r\n    const registry = tView.directiveRegistry;\r\n    let matches = null;\r\n    if (registry) {\r\n        for (let i = 0; i < registry.length; i++) {\r\n            const def = registry[i];\r\n            if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\r\n                matches ??= [];\r\n                if (isComponentDef(def)) {\r\n                    if (ngDevMode) {\r\n                        assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` +\r\n                            `Please use a different tag to activate the ${stringify(def.type)} component.`);\r\n                        if (matches.length && isComponentDef(matches[0])) {\r\n                            throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\r\n                        }\r\n                    }\r\n                    matches.unshift(def);\r\n                }\r\n                else {\r\n                    matches.push(def);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return matches;\r\n}\r\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\r\n    if (ngDevMode) {\r\n        assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\r\n        validateAgainstEventAttributes(name);\r\n        assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` +\r\n            `Host bindings are not valid on ng-container or ng-template.`);\r\n    }\r\n    const element = getNativeByTNode(tNode, lView);\r\n    setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\r\n}\r\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\r\n    if (value == null) {\r\n        renderer.removeAttribute(element, name, namespace);\r\n    }\r\n    else {\r\n        const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\r\n        renderer.setAttribute(element, name, strValue, namespace);\r\n    }\r\n}\r\n/**\r\n * Sets initial input properties on directive instances from attribute data\r\n *\r\n * @param lView Current LView that is being processed.\r\n * @param directiveIndex Index of the directive in directives array\r\n * @param instance Instance of the directive on which to set the initial inputs\r\n * @param def The directive def that contains the list of inputs\r\n * @param tNode The static data for this node\r\n */\r\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\r\n    const initialInputs = initialInputData[directiveIndex];\r\n    if (initialInputs !== null) {\r\n        for (let i = 0; i < initialInputs.length; i += 2) {\r\n            const lookupName = initialInputs[i];\r\n            const value = initialInputs[i + 1];\r\n            writeToDirectiveInput(def, instance, lookupName, value);\r\n            if (ngDevMode) {\r\n                setNgReflectProperty(lView, tNode, def.inputs[lookupName][0], value);\r\n            }\r\n        }\r\n    }\r\n}\r\n///////////////////////////////\r\n//// Bindings & interpolations\r\n///////////////////////////////\r\n/**\r\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\r\n *\r\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\r\n * - a bound property name;\r\n * - a static parts of interpolated strings;\r\n *\r\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\r\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\r\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\r\n * following format:\r\n * - `propertyName` for bound properties;\r\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\r\n * interpolated properties.\r\n *\r\n * @param tData `TData` where meta-data will be saved;\r\n * @param tNode `TNode` that is a target of the binding;\r\n * @param propertyName bound property name;\r\n * @param bindingIndex binding index in `LView`\r\n * @param interpolationParts static interpolation parts (for property interpolations)\r\n */\r\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\r\n    // Binding meta-data are stored only the first time a given property instruction is processed.\r\n    // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\r\n    // binding meta-data to decide if one should be stored (or if was stored already).\r\n    if (tData[bindingIndex] === null) {\r\n        if (!tNode.inputs?.[propertyName] && !tNode.hostDirectiveInputs?.[propertyName]) {\r\n            const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\r\n            propBindingIdxs.push(bindingIndex);\r\n            let bindingMetadata = propertyName;\r\n            if (interpolationParts.length > 0) {\r\n                bindingMetadata +=\r\n                    INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\r\n            }\r\n            tData[bindingIndex] = bindingMetadata;\r\n        }\r\n    }\r\n}\r\n/**\r\n * There are cases where the sub component's renderer needs to be included\r\n * instead of the current renderer (see the componentSyntheticHost* instructions).\r\n */\r\nfunction loadComponentRenderer(currentDef, tNode, lView) {\r\n    // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\r\n    // component (see packages/core/src/render3/component.ts). This is not consistent with the process\r\n    // of creating inner components, when current directive index is available in the state. In order\r\n    // to avoid relying on current def being `null` (thus special-casing root component creation), the\r\n    // process of creating root component should be unified with the process of creating inner\r\n    // components.\r\n    if (currentDef === null || isComponentDef(currentDef)) {\r\n        lView = unwrapLView(lView[tNode.index]);\r\n    }\r\n    return lView[RENDERER];\r\n}\r\n/** Handles an error thrown in an LView. */\r\nfunction handleUncaughtError(lView, error) {\r\n    const injector = lView[INJECTOR];\r\n    if (!injector) {\r\n        return;\r\n    }\r\n    const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);\r\n    errorHandler?.(error);\r\n}\r\n/**\r\n * Set all directive inputs with the specific public name on the node.\r\n *\r\n * @param tNode TNode on which the input is being set.\r\n * @param tView Current TView\r\n * @param lView `LView` which contains the directives.\r\n * @param publicName Public name of the input being set.\r\n * @param value Value to set.\r\n */\r\nfunction setAllInputsForProperty(tNode, tView, lView, publicName, value) {\r\n    const inputs = tNode.inputs?.[publicName];\r\n    const hostDirectiveInputs = tNode.hostDirectiveInputs?.[publicName];\r\n    let hasMatch = false;\r\n    if (hostDirectiveInputs) {\r\n        for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\r\n            const index = hostDirectiveInputs[i];\r\n            ngDevMode && assertIndexInRange(lView, index);\r\n            const publicName = hostDirectiveInputs[i + 1];\r\n            const def = tView.data[index];\r\n            writeToDirectiveInput(def, lView[index], publicName, value);\r\n            hasMatch = true;\r\n        }\r\n    }\r\n    if (inputs) {\r\n        for (const index of inputs) {\r\n            ngDevMode && assertIndexInRange(lView, index);\r\n            const instance = lView[index];\r\n            const def = tView.data[index];\r\n            writeToDirectiveInput(def, instance, publicName, value);\r\n            hasMatch = true;\r\n        }\r\n    }\r\n    return hasMatch;\r\n}\r\n/**\r\n * Sets an input value only on a specific directive and its host directives.\r\n * @param tNode TNode on which the input is being set.\r\n * @param tView Current TView\r\n * @param lView `LView` which contains the directives.\r\n * @param target Directive on which to set the input.\r\n * @param publicName Public name of the input being set.\r\n * @param value Value to set.\r\n */\r\nfunction setDirectiveInput(tNode, tView, lView, target, publicName, value) {\r\n    let hostIndex = null;\r\n    let hostDirectivesStart = null;\r\n    let hostDirectivesEnd = null;\r\n    let hasSet = false;\r\n    if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\r\n        throw new Error(`Node does not have a directive with type ${target.type.name}`);\r\n    }\r\n    const data = tNode.directiveToIndex.get(target.type);\r\n    if (typeof data === 'number') {\r\n        hostIndex = data;\r\n    }\r\n    else {\r\n        [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\r\n    }\r\n    if (hostDirectivesStart !== null &&\r\n        hostDirectivesEnd !== null &&\r\n        tNode.hostDirectiveInputs?.hasOwnProperty(publicName)) {\r\n        const hostDirectiveInputs = tNode.hostDirectiveInputs[publicName];\r\n        for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\r\n            const index = hostDirectiveInputs[i];\r\n            if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\r\n                ngDevMode && assertIndexInRange(lView, index);\r\n                const def = tView.data[index];\r\n                const hostDirectivePublicName = hostDirectiveInputs[i + 1];\r\n                writeToDirectiveInput(def, lView[index], hostDirectivePublicName, value);\r\n                hasSet = true;\r\n            }\r\n            else if (index > hostDirectivesEnd) {\r\n                // Directives here are in ascending order so we can stop looking once we're past the range.\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (hostIndex !== null && target.inputs.hasOwnProperty(publicName)) {\r\n        ngDevMode && assertIndexInRange(lView, hostIndex);\r\n        writeToDirectiveInput(target, lView[hostIndex], publicName, value);\r\n        hasSet = true;\r\n    }\r\n    return hasSet;\r\n}\r\n\r\nfunction renderComponent(hostLView, componentHostIdx) {\r\n    ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\r\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\r\n    const componentTView = componentView[TVIEW];\r\n    syncViewWithBlueprint(componentTView, componentView);\r\n    const hostRNode = componentView[HOST];\r\n    // Populate an LView with hydration info retrieved from the DOM via TransferState.\r\n    if (hostRNode !== null && componentView[HYDRATION] === null) {\r\n        componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);\r\n    }\r\n    profiler(18 /* ProfilerEvent.ComponentStart */);\r\n    renderView(componentTView, componentView, componentView[CONTEXT]);\r\n    profiler(19 /* ProfilerEvent.ComponentEnd */, componentView[CONTEXT]);\r\n}\r\n/**\r\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\r\n *\r\n * Typically, blueprints and their view instances should always be in sync, so the loop here\r\n * will be skipped. However, consider this case of two components side-by-side:\r\n *\r\n * App template:\r\n * ```html\r\n * <comp></comp>\r\n * <comp></comp>\r\n * ```\r\n *\r\n * The following will happen:\r\n * 1. App template begins processing.\r\n * 2. First <comp> is matched as a component and its LView is created.\r\n * 3. Second <comp> is matched as a component and its LView is created.\r\n * 4. App template completes processing, so it's time to check child templates.\r\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\r\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\r\n * <comp> template, but its LView was created before this update, so it is out of sync.\r\n *\r\n * Note that embedded views inside ngFor loops will never be out of sync because these views\r\n * are processed as soon as they are created.\r\n *\r\n * @param tView The `TView` that contains the blueprint for syncing\r\n * @param lView The view to sync\r\n */\r\nfunction syncViewWithBlueprint(tView, lView) {\r\n    for (let i = lView.length; i < tView.blueprint.length; i++) {\r\n        lView.push(tView.blueprint[i]);\r\n    }\r\n}\r\n/**\r\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\r\n * - creating view query functions (if any);\r\n * - executing a template function in the creation mode;\r\n * - updating static queries (if any);\r\n * - creating child components defined in a given view.\r\n */\r\nfunction renderView(tView, lView, context) {\r\n    ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\r\n    ngDevMode && assertNotReactive(renderView.name);\r\n    enterView(lView);\r\n    try {\r\n        const viewQuery = tView.viewQuery;\r\n        if (viewQuery !== null) {\r\n            executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\r\n        }\r\n        // Execute a template associated with this view, if it exists. A template function might not be\r\n        // defined for the root component views.\r\n        const templateFn = tView.template;\r\n        if (templateFn !== null) {\r\n            executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\r\n        }\r\n        // This needs to be set before children are processed to support recursive components.\r\n        // This must be set to false immediately after the first creation run because in an\r\n        // ngFor loop, all the views will be created together before update mode runs and turns\r\n        // off firstCreatePass. If we don't set it here, instances will perform directive\r\n        // matching, etc again and again.\r\n        if (tView.firstCreatePass) {\r\n            tView.firstCreatePass = false;\r\n        }\r\n        // Mark all queries active in this view as dirty. This is necessary for signal-based queries to\r\n        // have a clear marking point where we can read query results atomically (for a given view).\r\n        lView[QUERIES]?.finishViewCreation(tView);\r\n        // We resolve content queries specifically marked as `static` in creation mode. Dynamic\r\n        // content queries are resolved during change detection (i.e. update mode), after embedded\r\n        // views are refreshed (see block above).\r\n        if (tView.staticContentQueries) {\r\n            refreshContentQueries(tView, lView);\r\n        }\r\n        // We must materialize query results before child components are processed\r\n        // in case a child component has projected a container. The LContainer needs\r\n        // to exist so the embedded views are properly attached by the container.\r\n        if (tView.staticViewQueries) {\r\n            executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\r\n        }\r\n        // Render child component views.\r\n        const components = tView.components;\r\n        if (components !== null) {\r\n            renderChildComponents(lView, components);\r\n        }\r\n    }\r\n    catch (error) {\r\n        // If we didn't manage to get past the first template pass due to\r\n        // an error, mark the view as corrupted so we can try to recover.\r\n        if (tView.firstCreatePass) {\r\n            tView.incompleteFirstPass = true;\r\n            tView.firstCreatePass = false;\r\n        }\r\n        throw error;\r\n    }\r\n    finally {\r\n        lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\r\n        leaveView();\r\n    }\r\n}\r\n/** Renders child components in the current view (creation mode). */\r\nfunction renderChildComponents(hostLView, components) {\r\n    for (let i = 0; i < components.length; i++) {\r\n        renderComponent(hostLView, components[i]);\r\n    }\r\n}\r\n\r\nfunction createAndRenderEmbeddedLView(declarationLView, templateTNode, context, options) {\r\n    const prevConsumer = setActiveConsumer(null);\r\n    try {\r\n        const embeddedTView = templateTNode.tView;\r\n        ngDevMode && assertDefined(embeddedTView, 'TView must be defined for a template node.');\r\n        ngDevMode && assertTNodeForLView(templateTNode, declarationLView);\r\n        // Embedded views follow the change detection strategy of the view they're declared in.\r\n        const isSignalView = declarationLView[FLAGS] & 4096 /* LViewFlags.SignalView */;\r\n        const viewFlags = isSignalView ? 4096 /* LViewFlags.SignalView */ : 16 /* LViewFlags.CheckAlways */;\r\n        const embeddedLView = createLView(declarationLView, embeddedTView, context, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);\r\n        const declarationLContainer = declarationLView[templateTNode.index];\r\n        ngDevMode && assertLContainer(declarationLContainer);\r\n        embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\r\n        const declarationViewLQueries = declarationLView[QUERIES];\r\n        if (declarationViewLQueries !== null) {\r\n            embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\r\n        }\r\n        // execute creation mode of a view\r\n        renderView(embeddedTView, embeddedLView, context);\r\n        return embeddedLView;\r\n    }\r\n    finally {\r\n        setActiveConsumer(prevConsumer);\r\n    }\r\n}\r\n/**\r\n * Returns whether an elements that belong to a view should be\r\n * inserted into the DOM. For client-only cases, DOM elements are\r\n * always inserted. For hydration cases, we check whether serialized\r\n * info is available for a view and the view is not in a \"skip hydration\"\r\n * block (in which case view contents was re-created, thus needing insertion).\r\n */\r\nfunction shouldAddViewToDom(tNode, dehydratedView) {\r\n    return (!dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode));\r\n}\r\n\r\nconst USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT = false;\r\nconst UseExhaustiveCheckNoChanges = new InjectionToken(ngDevMode ? 'exhaustive checkNoChanges' : '');\r\n\r\nlet _icuContainerIterate;\r\n/**\r\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\r\n */\r\nfunction icuContainerIterate(tIcuContainerNode, lView) {\r\n    return _icuContainerIterate(tIcuContainerNode, lView);\r\n}\r\n/**\r\n * Ensures that `IcuContainerVisitor`'s implementation is present.\r\n *\r\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\r\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\r\n */\r\nfunction ensureIcuContainerVisitorLoaded(loader) {\r\n    if (_icuContainerIterate === undefined) {\r\n        // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\r\n        // can be inlined into call-site.\r\n        _icuContainerIterate = loader();\r\n    }\r\n}\r\n\r\n/**\r\n * Flags for renderer-specific style modifiers.\r\n * @publicApi\r\n */\r\nvar RendererStyleFlags2;\r\n(function (RendererStyleFlags2) {\r\n    // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\r\n    // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\r\n    // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\r\n    /**\r\n     * Marks a style as important.\r\n     */\r\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\r\n    /**\r\n     * Marks a style as using dash case naming (this-is-dash-case).\r\n     */\r\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\r\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\r\n\r\n/**\r\n * Checks whether a TNode is considered detached, i.e. not present in the\r\n * translated i18n template. We should not attempt hydration for such nodes\r\n * and instead, use a regular \"creation mode\".\r\n */\r\nfunction isDetachedByI18n(tNode) {\r\n    return (tNode.flags & 32 /* TNodeFlags.isDetached */) === 32 /* TNodeFlags.isDetached */;\r\n}\r\n\r\n/**\r\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\r\n * being passed as an argument.\r\n */\r\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\r\n    // If this slot was allocated for a text node dynamically created by i18n, the text node itself\r\n    // won't be created until i18nApply() in the update block, so this node should be skipped.\r\n    // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\r\n    // in `i18n_spec.ts`.\r\n    if (lNodeToHandle != null) {\r\n        let lContainer;\r\n        let isComponent = false;\r\n        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\r\n        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\r\n        // it has LContainer so that we can process all of those cases appropriately.\r\n        if (isLContainer(lNodeToHandle)) {\r\n            lContainer = lNodeToHandle;\r\n        }\r\n        else if (isLView(lNodeToHandle)) {\r\n            isComponent = true;\r\n            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\r\n            lNodeToHandle = lNodeToHandle[HOST];\r\n        }\r\n        const rNode = unwrapRNode(lNodeToHandle);\r\n        if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\r\n            if (beforeNode == null) {\r\n                nativeAppendChild(renderer, parent, rNode);\r\n            }\r\n            else {\r\n                nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\r\n            }\r\n        }\r\n        else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\r\n            nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\r\n        }\r\n        else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\r\n            nativeRemoveNode(renderer, rNode, isComponent);\r\n        }\r\n        else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\r\n            renderer.destroyNode(rNode);\r\n        }\r\n        if (lContainer != null) {\r\n            applyContainer(renderer, action, lContainer, parent, beforeNode);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Removes all DOM elements associated with a view.\r\n *\r\n * Because some root nodes of the view may be containers, we sometimes need\r\n * to propagate deeply into the nested containers to remove all elements in the\r\n * views beneath it.\r\n *\r\n * @param tView The `TView' of the `LView` from which elements should be added or removed\r\n * @param lView The view from which elements should be added or removed\r\n */\r\nfunction removeViewFromDOM(tView, lView) {\r\n    detachViewFromDOM(tView, lView);\r\n    lView[HOST] = null;\r\n    lView[T_HOST] = null;\r\n}\r\n/**\r\n * Adds all DOM elements associated with a view.\r\n *\r\n * Because some root nodes of the view may be containers, we sometimes need\r\n * to propagate deeply into the nested containers to add all elements in the\r\n * views beneath it.\r\n *\r\n * @param tView The `TView' of the `LView` from which elements should be added or removed\r\n * @param parentTNode The `TNode` where the `LView` should be attached to.\r\n * @param renderer Current renderer to use for DOM manipulations.\r\n * @param lView The view from which elements should be added or removed\r\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\r\n * @param beforeNode The node before which elements should be added, if insert mode\r\n */\r\nfunction addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\r\n    lView[HOST] = parentNativeNode;\r\n    lView[T_HOST] = parentTNode;\r\n    applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\r\n}\r\n/**\r\n * Detach a `LView` from the DOM by detaching its nodes.\r\n *\r\n * @param tView The `TView' of the `LView` to be detached\r\n * @param lView the `LView` to be detached.\r\n */\r\nfunction detachViewFromDOM(tView, lView) {\r\n    // When we remove a view from the DOM, we need to rerun afterRender hooks\r\n    // We don't necessarily needs to run change detection. DOM removal only requires\r\n    // change detection if animations are enabled (this notification is handled by animations).\r\n    lView[ENVIRONMENT].changeDetectionScheduler?.notify(9 /* NotificationSource.ViewDetachedFromDOM */);\r\n    applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\r\n}\r\n/**\r\n * Traverses down and up the tree of views and containers to remove listeners and\r\n * call onDestroy callbacks.\r\n *\r\n * Notes:\r\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\r\n *  - Must process containers instead of their views to avoid splicing\r\n *  when views are destroyed and re-added.\r\n *  - Using a while loop because it's faster than recursion\r\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\r\n *\r\n *  @param rootView The view to destroy\r\n */\r\nfunction destroyViewTree(rootView) {\r\n    // If the view has no children, we can clean it up and return early.\r\n    let lViewOrLContainer = rootView[CHILD_HEAD];\r\n    if (!lViewOrLContainer) {\r\n        return cleanUpView(rootView[TVIEW], rootView);\r\n    }\r\n    while (lViewOrLContainer) {\r\n        let next = null;\r\n        if (isLView(lViewOrLContainer)) {\r\n            // If LView, traverse down to child.\r\n            next = lViewOrLContainer[CHILD_HEAD];\r\n        }\r\n        else {\r\n            ngDevMode && assertLContainer(lViewOrLContainer);\r\n            // If container, traverse down to its first LView.\r\n            const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\r\n            if (firstView)\r\n                next = firstView;\r\n        }\r\n        if (!next) {\r\n            // Only clean up view when moving to the side or up, as destroy hooks\r\n            // should be called in order from the bottom up.\r\n            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\r\n                if (isLView(lViewOrLContainer)) {\r\n                    cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\r\n                }\r\n                lViewOrLContainer = lViewOrLContainer[PARENT];\r\n            }\r\n            if (lViewOrLContainer === null)\r\n                lViewOrLContainer = rootView;\r\n            if (isLView(lViewOrLContainer)) {\r\n                cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\r\n            }\r\n            next = lViewOrLContainer && lViewOrLContainer[NEXT];\r\n        }\r\n        lViewOrLContainer = next;\r\n    }\r\n}\r\nfunction detachMovedView(declarationContainer, lView) {\r\n    ngDevMode && assertLContainer(declarationContainer);\r\n    ngDevMode &&\r\n        assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\r\n    const movedViews = declarationContainer[MOVED_VIEWS];\r\n    const declarationViewIndex = movedViews.indexOf(lView);\r\n    movedViews.splice(declarationViewIndex, 1);\r\n}\r\n/**\r\n * A standalone function which destroys an LView,\r\n * conducting clean up (e.g. removing listeners, calling onDestroys).\r\n *\r\n * @param tView The `TView' of the `LView` to be destroyed\r\n * @param lView The view to be destroyed.\r\n */\r\nfunction destroyLView(tView, lView) {\r\n    if (isDestroyed(lView)) {\r\n        return;\r\n    }\r\n    const renderer = lView[RENDERER];\r\n    if (renderer.destroyNode) {\r\n        applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\r\n    }\r\n    destroyViewTree(lView);\r\n}\r\n/**\r\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\r\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\r\n * can be propagated to @Output listeners.\r\n *\r\n * @param tView `TView` for the `LView` to clean up.\r\n * @param lView The LView to clean up\r\n */\r\nfunction cleanUpView(tView, lView) {\r\n    if (isDestroyed(lView)) {\r\n        return;\r\n    }\r\n    const prevConsumer = setActiveConsumer(null);\r\n    try {\r\n        // Usually the Attached flag is removed when the view is detached from its parent, however\r\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\r\n        lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\r\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\r\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\r\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\r\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\r\n        // really more of an \"afterDestroy\" hook if you think about it.\r\n        lView[FLAGS] |= 256 /* LViewFlags.Destroyed */;\r\n        lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\r\n        executeOnDestroys(tView, lView);\r\n        processCleanups(tView, lView);\r\n        // For component views only, the local renderer is destroyed at clean up time.\r\n        if (lView[TVIEW].type === 1 /* TViewType.Component */) {\r\n            lView[RENDERER].destroy();\r\n        }\r\n        const declarationContainer = lView[DECLARATION_LCONTAINER];\r\n        // we are dealing with an embedded view that is still inserted into a container\r\n        if (declarationContainer !== null && isLContainer(lView[PARENT])) {\r\n            // and this is a projected view\r\n            if (declarationContainer !== lView[PARENT]) {\r\n                detachMovedView(declarationContainer, lView);\r\n            }\r\n            // For embedded views still attached to a container: remove query result from this view.\r\n            const lQueries = lView[QUERIES];\r\n            if (lQueries !== null) {\r\n                lQueries.detachView(tView);\r\n            }\r\n        }\r\n        // Unregister the view once everything else has been cleaned up.\r\n        unregisterLView(lView);\r\n    }\r\n    finally {\r\n        setActiveConsumer(prevConsumer);\r\n    }\r\n}\r\n/** Removes listeners and unsubscribes from output subscriptions */\r\nfunction processCleanups(tView, lView) {\r\n    ngDevMode && assertNotReactive(processCleanups.name);\r\n    const tCleanup = tView.cleanup;\r\n    const lCleanup = lView[CLEANUP];\r\n    if (tCleanup !== null) {\r\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\r\n            if (typeof tCleanup[i] === 'string') {\r\n                // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\r\n                // 2 at the end of this block).\r\n                const targetIdx = tCleanup[i + 3];\r\n                ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\r\n                if (targetIdx >= 0) {\r\n                    // Destroy anything whose teardown is a function call (e.g. QueryList, ModelSignal).\r\n                    lCleanup[targetIdx]();\r\n                }\r\n                else {\r\n                    // Subscription\r\n                    lCleanup[-targetIdx].unsubscribe();\r\n                }\r\n                i += 2;\r\n            }\r\n            else {\r\n                // This is a cleanup function that is grouped with the index of its context\r\n                const context = lCleanup[tCleanup[i + 1]];\r\n                tCleanup[i].call(context);\r\n            }\r\n        }\r\n    }\r\n    if (lCleanup !== null) {\r\n        lView[CLEANUP] = null;\r\n    }\r\n    const destroyHooks = lView[ON_DESTROY_HOOKS];\r\n    if (destroyHooks !== null) {\r\n        // Reset the ON_DESTROY_HOOKS array before iterating over it to prevent hooks that unregister\r\n        // themselves from mutating the array during iteration.\r\n        lView[ON_DESTROY_HOOKS] = null;\r\n        for (let i = 0; i < destroyHooks.length; i++) {\r\n            const destroyHooksFn = destroyHooks[i];\r\n            ngDevMode && assertFunction(destroyHooksFn, 'Expecting destroy hook to be a function.');\r\n            destroyHooksFn();\r\n        }\r\n    }\r\n    // Destroy effects registered to the view. Many of these will have been processed above.\r\n    const effects = lView[EFFECTS];\r\n    if (effects !== null) {\r\n        lView[EFFECTS] = null;\r\n        for (const effect of effects) {\r\n            effect.destroy();\r\n        }\r\n    }\r\n}\r\n/** Calls onDestroy hooks for this view */\r\nfunction executeOnDestroys(tView, lView) {\r\n    ngDevMode && assertNotReactive(executeOnDestroys.name);\r\n    let destroyHooks;\r\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\r\n        for (let i = 0; i < destroyHooks.length; i += 2) {\r\n            const context = lView[destroyHooks[i]];\r\n            // Only call the destroy hook if the context has been requested.\r\n            if (!(context instanceof NodeInjectorFactory)) {\r\n                const toCall = destroyHooks[i + 1];\r\n                if (Array.isArray(toCall)) {\r\n                    for (let j = 0; j < toCall.length; j += 2) {\r\n                        const callContext = context[toCall[j]];\r\n                        const hook = toCall[j + 1];\r\n                        profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\r\n                        try {\r\n                            hook.call(callContext);\r\n                        }\r\n                        finally {\r\n                            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\r\n                    try {\r\n                        toCall.call(context);\r\n                    }\r\n                    finally {\r\n                        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a native element if a node can be inserted into the given parent.\r\n *\r\n * There are two reasons why we may not be able to insert a element immediately.\r\n * - Projection: When creating a child content element of a component, we have to skip the\r\n *   insertion because the content of a component will be projected.\r\n *   `<component><content>delayed due to projection</content></component>`\r\n * - Parent container is disconnected: This can happen when we are inserting a view into\r\n *   parent container, which itself is disconnected. For example the parent container is part\r\n *   of a View which has not be inserted or is made for projection but has not been inserted\r\n *   into destination.\r\n *\r\n * @param tView: Current `TView`.\r\n * @param tNode: `TNode` for which we wish to retrieve render parent.\r\n * @param lView: Current `LView`.\r\n */\r\nfunction getParentRElement(tView, tNode, lView) {\r\n    return getClosestRElement(tView, tNode.parent, lView);\r\n}\r\n/**\r\n * Get closest `RElement` or `null` if it can't be found.\r\n *\r\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\r\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\r\n * If `TNode` is `null` then return host `RElement`:\r\n *   - return `null` if projection\r\n *   - return `null` if parent container is disconnected (we have no parent.)\r\n *\r\n * @param tView: Current `TView`.\r\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\r\n *     needed).\r\n * @param lView: Current `LView`.\r\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\r\n */\r\nfunction getClosestRElement(tView, tNode, lView) {\r\n    let parentTNode = tNode;\r\n    // Skip over element and ICU containers as those are represented by a comment node and\r\n    // can't be used as a render parent. Also skip let declarations since they don't have a\r\n    // corresponding DOM node at all.\r\n    while (parentTNode !== null &&\r\n        parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */ | 128 /* TNodeType.LetDeclaration */)) {\r\n        tNode = parentTNode;\r\n        parentTNode = tNode.parent;\r\n    }\r\n    // If the parent tNode is null, then we are inserting across views: either into an embedded view\r\n    // or a component view.\r\n    if (parentTNode === null) {\r\n        // We are inserting a root element of the component view into the component host element and\r\n        // it should always be eager.\r\n        return lView[HOST];\r\n    }\r\n    else {\r\n        ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\r\n        if (isComponentHost(parentTNode)) {\r\n            ngDevMode && assertTNodeForLView(parentTNode, lView);\r\n            const { encapsulation } = tView.data[parentTNode.directiveStart + parentTNode.componentOffset];\r\n            // We've got a parent which is an element in the current view. We just need to verify if the\r\n            // parent element is not a component. Component's content nodes are not inserted immediately\r\n            // because they will be projected, and so doing insert at this point would be wasteful.\r\n            // Since the projection would then move it to its final destination. Note that we can't\r\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\r\n            // (<content> or <slot>) have to be in place as elements are being inserted.\r\n            if (encapsulation === ViewEncapsulation.None ||\r\n                encapsulation === ViewEncapsulation.Emulated) {\r\n                return null;\r\n            }\r\n        }\r\n        return getNativeByTNode(parentTNode, lView);\r\n    }\r\n}\r\n/**\r\n * Find a node in front of which `currentTNode` should be inserted.\r\n *\r\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\r\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\r\n *\r\n * @param parentTNode parent `TNode`\r\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\r\n * @param lView current `LView`\r\n */\r\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\r\n    return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\r\n}\r\n/**\r\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\r\n * account)\r\n *\r\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\r\n * does not take `TNode.insertBeforeIndex` into account.\r\n *\r\n * @param parentTNode parent `TNode`\r\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\r\n * @param lView current `LView`\r\n */\r\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\r\n    if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\r\n        return getNativeByTNode(parentTNode, lView);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\r\n *\r\n * This function will only be set if i18n code runs.\r\n */\r\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\r\n/**\r\n * Tree shakable boundary for `processI18nInsertBefore` function.\r\n *\r\n * This function will only be set if i18n code runs.\r\n */\r\nlet _processI18nInsertBefore;\r\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\r\n    _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\r\n    _processI18nInsertBefore = processI18nInsertBefore;\r\n}\r\n/**\r\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\r\n *\r\n * @param tView The `TView' to be appended\r\n * @param lView The current LView\r\n * @param childRNode The native child (or children) that should be appended\r\n * @param childTNode The TNode of the child element\r\n */\r\nfunction appendChild(tView, lView, childRNode, childTNode) {\r\n    const parentRNode = getParentRElement(tView, childTNode, lView);\r\n    const renderer = lView[RENDERER];\r\n    const parentTNode = childTNode.parent || lView[T_HOST];\r\n    const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\r\n    if (parentRNode != null) {\r\n        if (Array.isArray(childRNode)) {\r\n            for (let i = 0; i < childRNode.length; i++) {\r\n                nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\r\n            }\r\n        }\r\n        else {\r\n            nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\r\n        }\r\n    }\r\n    _processI18nInsertBefore !== undefined &&\r\n        _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\r\n}\r\n/**\r\n * Returns the first native node for a given LView, starting from the provided TNode.\r\n *\r\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\r\n */\r\nfunction getFirstNativeNode(lView, tNode) {\r\n    if (tNode !== null) {\r\n        ngDevMode &&\r\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ |\r\n                12 /* TNodeType.AnyContainer */ |\r\n                32 /* TNodeType.Icu */ |\r\n                16 /* TNodeType.Projection */ |\r\n                128 /* TNodeType.LetDeclaration */);\r\n        const tNodeType = tNode.type;\r\n        if (tNodeType & 3 /* TNodeType.AnyRNode */) {\r\n            return getNativeByTNode(tNode, lView);\r\n        }\r\n        else if (tNodeType & 4 /* TNodeType.Container */) {\r\n            return getBeforeNodeForView(-1, lView[tNode.index]);\r\n        }\r\n        else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\r\n            const elIcuContainerChild = tNode.child;\r\n            if (elIcuContainerChild !== null) {\r\n                return getFirstNativeNode(lView, elIcuContainerChild);\r\n            }\r\n            else {\r\n                const rNodeOrLContainer = lView[tNode.index];\r\n                if (isLContainer(rNodeOrLContainer)) {\r\n                    return getBeforeNodeForView(-1, rNodeOrLContainer);\r\n                }\r\n                else {\r\n                    return unwrapRNode(rNodeOrLContainer);\r\n                }\r\n            }\r\n        }\r\n        else if (tNodeType & 128 /* TNodeType.LetDeclaration */) {\r\n            return getFirstNativeNode(lView, tNode.next);\r\n        }\r\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\r\n            let nextRNode = icuContainerIterate(tNode, lView);\r\n            let rNode = nextRNode();\r\n            // If the ICU container has no nodes, than we use the ICU anchor as the node.\r\n            return rNode || unwrapRNode(lView[tNode.index]);\r\n        }\r\n        else {\r\n            const projectionNodes = getProjectionNodes(lView, tNode);\r\n            if (projectionNodes !== null) {\r\n                if (Array.isArray(projectionNodes)) {\r\n                    return projectionNodes[0];\r\n                }\r\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\r\n                ngDevMode && assertParentView(parentView);\r\n                return getFirstNativeNode(parentView, projectionNodes);\r\n            }\r\n            else {\r\n                return getFirstNativeNode(lView, tNode.next);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction getProjectionNodes(lView, tNode) {\r\n    if (tNode !== null) {\r\n        const componentView = lView[DECLARATION_COMPONENT_VIEW];\r\n        const componentHost = componentView[T_HOST];\r\n        const slotIdx = tNode.projection;\r\n        ngDevMode && assertProjectionSlots(lView);\r\n        return componentHost.projection[slotIdx];\r\n    }\r\n    return null;\r\n}\r\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\r\n    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\r\n    if (nextViewIndex < lContainer.length) {\r\n        const lView = lContainer[nextViewIndex];\r\n        const firstTNodeOfView = lView[TVIEW].firstChild;\r\n        if (firstTNodeOfView !== null) {\r\n            return getFirstNativeNode(lView, firstTNodeOfView);\r\n        }\r\n    }\r\n    return lContainer[NATIVE];\r\n}\r\n/**\r\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\r\n * nodes on the LView or projection boundary.\r\n */\r\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\r\n    while (tNode != null) {\r\n        ngDevMode && assertTNodeForLView(tNode, lView);\r\n        // Let declarations don't have corresponding DOM nodes so we skip over them.\r\n        if (tNode.type === 128 /* TNodeType.LetDeclaration */) {\r\n            tNode = tNode.next;\r\n            continue;\r\n        }\r\n        ngDevMode &&\r\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\r\n        const rawSlotValue = lView[tNode.index];\r\n        const tNodeType = tNode.type;\r\n        if (isProjection) {\r\n            if (action === 0 /* WalkTNodeTreeAction.Create */) {\r\n                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\r\n                tNode.flags |= 2 /* TNodeFlags.isProjected */;\r\n            }\r\n        }\r\n        if (!isDetachedByI18n(tNode)) {\r\n            if (tNodeType & 8 /* TNodeType.ElementContainer */) {\r\n                applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\r\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\r\n            }\r\n            else if (tNodeType & 32 /* TNodeType.Icu */) {\r\n                const nextRNode = icuContainerIterate(tNode, lView);\r\n                let rNode;\r\n                while ((rNode = nextRNode())) {\r\n                    applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\r\n                }\r\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\r\n            }\r\n            else if (tNodeType & 16 /* TNodeType.Projection */) {\r\n                applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\r\n            }\r\n            else {\r\n                ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\r\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\r\n            }\r\n        }\r\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\r\n    }\r\n}\r\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\r\n    applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\r\n}\r\n/**\r\n * `applyProjection` performs operation on the projection.\r\n *\r\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\r\n * complication is that those nodes themselves could be re-projected from their parent component.\r\n *\r\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\r\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\r\n * @param tProjectionNode node to project\r\n */\r\nfunction applyProjection(tView, lView, tProjectionNode) {\r\n    const renderer = lView[RENDERER];\r\n    const parentRNode = getParentRElement(tView, tProjectionNode, lView);\r\n    const parentTNode = tProjectionNode.parent || lView[T_HOST];\r\n    let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\r\n    applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\r\n}\r\n/**\r\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\r\n * detach, destroy)\r\n *\r\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\r\n * complication is that those nodes themselves could be re-projected from their parent component.\r\n *\r\n * @param renderer Render to use\r\n * @param action action to perform (insert, detach, destroy)\r\n * @param lView The LView which needs to be inserted, detached, destroyed.\r\n * @param tProjectionNode node to project\r\n * @param parentRElement parent DOM element for insertion/removal.\r\n * @param beforeNode Before which node the insertions should happen.\r\n */\r\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\r\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\r\n    const componentNode = componentLView[T_HOST];\r\n    ngDevMode &&\r\n        assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\r\n    const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\r\n    if (Array.isArray(nodeToProjectOrRNodes)) {\r\n        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\r\n        // need to support passing projectable nodes, so we cheat and put them in the TNode\r\n        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\r\n        // because we know that TView is not shared and therefore it will not be a problem.\r\n        // This should be refactored and cleaned up.\r\n        for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\r\n            const rNode = nodeToProjectOrRNodes[i];\r\n            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\r\n        }\r\n    }\r\n    else {\r\n        let nodeToProject = nodeToProjectOrRNodes;\r\n        const projectedComponentLView = componentLView[PARENT];\r\n        // If a parent <ng-content> is located within a skip hydration block,\r\n        // annotate an actual node that is being projected with the same flag too.\r\n        if (hasInSkipHydrationBlockFlag(tProjectionNode)) {\r\n            nodeToProject.flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\r\n        }\r\n        applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\r\n    }\r\n}\r\n/**\r\n * `applyContainer` performs an operation on the container and its views as specified by\r\n * `action` (insert, detach, destroy)\r\n *\r\n * Inserting a Container is complicated by the fact that the container may have Views which\r\n * themselves have containers or projections.\r\n *\r\n * @param renderer Renderer to use\r\n * @param action action to perform (insert, detach, destroy)\r\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\r\n * @param parentRElement parent DOM element for insertion/removal.\r\n * @param beforeNode Before which node the insertions should happen.\r\n */\r\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\r\n    ngDevMode && assertLContainer(lContainer);\r\n    const anchor = lContainer[NATIVE]; // LContainer has its own before node.\r\n    const native = unwrapRNode(lContainer);\r\n    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\r\n    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\r\n    // node (comment in the DOM) that will be different from the LContainer's host node. In this\r\n    // particular case we need to execute action on 2 nodes:\r\n    // - container's host node (this is done in the executeActionOnElementOrContainer)\r\n    // - container's host node (this is done here)\r\n    if (anchor !== native) {\r\n        // This is very strange to me (Misko). I would expect that the native is same as anchor. I\r\n        // don't see a reason why they should be different, but they are.\r\n        //\r\n        // If they are we need to process the second anchor as well.\r\n        applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\r\n    }\r\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\r\n        const lView = lContainer[i];\r\n        applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\r\n    }\r\n}\r\n/**\r\n * Writes class/style to element.\r\n *\r\n * @param renderer Renderer to use.\r\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\r\n * @param rNode The Node to write to.\r\n * @param prop Property to write to. This would be the class/style name.\r\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\r\n *        otherwise).\r\n */\r\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\r\n    if (isClassBased) {\r\n        // We actually want JS true/false here because any truthy value should add the class\r\n        if (!value) {\r\n            renderer.removeClass(rNode, prop);\r\n        }\r\n        else {\r\n            renderer.addClass(rNode, prop);\r\n        }\r\n    }\r\n    else {\r\n        let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\r\n        if (value == null /** || value === undefined */) {\r\n            renderer.removeStyle(rNode, prop, flags);\r\n        }\r\n        else {\r\n            // A value is important if it ends with `!important`. The style\r\n            // parser strips any semicolons at the end of the value.\r\n            const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\r\n            if (isImportant) {\r\n                // !important has to be stripped from the value for it to be valid.\r\n                value = value.slice(0, -10);\r\n                flags |= RendererStyleFlags2.Important;\r\n            }\r\n            renderer.setStyle(rNode, prop, value, flags);\r\n        }\r\n    }\r\n}\r\n\r\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\r\n    while (tNode !== null) {\r\n        // Let declarations don't have corresponding DOM nodes so we skip over them.\r\n        if (tNode.type === 128 /* TNodeType.LetDeclaration */) {\r\n            tNode = isProjection ? tNode.projectionNext : tNode.next;\r\n            continue;\r\n        }\r\n        ngDevMode &&\r\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\r\n        const lNode = lView[tNode.index];\r\n        if (lNode !== null) {\r\n            result.push(unwrapRNode(lNode));\r\n        }\r\n        // A given lNode can represent either a native node or a LContainer (when it is a host of a\r\n        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\r\n        // from the views in this container.\r\n        if (isLContainer(lNode)) {\r\n            collectNativeNodesInLContainer(lNode, result);\r\n        }\r\n        const tNodeType = tNode.type;\r\n        if (tNodeType & 8 /* TNodeType.ElementContainer */) {\r\n            collectNativeNodes(tView, lView, tNode.child, result);\r\n        }\r\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\r\n            const nextRNode = icuContainerIterate(tNode, lView);\r\n            let rNode;\r\n            while ((rNode = nextRNode())) {\r\n                result.push(rNode);\r\n            }\r\n        }\r\n        else if (tNodeType & 16 /* TNodeType.Projection */) {\r\n            const nodesInSlot = getProjectionNodes(lView, tNode);\r\n            if (Array.isArray(nodesInSlot)) {\r\n                result.push(...nodesInSlot);\r\n            }\r\n            else {\r\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\r\n                ngDevMode && assertParentView(parentView);\r\n                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\r\n            }\r\n        }\r\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Collects all root nodes in all views in a given LContainer.\r\n */\r\nfunction collectNativeNodesInLContainer(lContainer, result) {\r\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\r\n        const lViewInAContainer = lContainer[i];\r\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\r\n        if (lViewFirstChildTNode !== null) {\r\n            collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\r\n        }\r\n    }\r\n    // When an LContainer is created, the anchor (comment) node is:\r\n    // - (1) either reused in case of an ElementContainer (<ng-container>)\r\n    // - (2) or a new comment node is created\r\n    // In the first case, the anchor comment node would be added to the final\r\n    // list by the code in the `collectNativeNodes` function\r\n    // (see the `result.push(unwrapRNode(lNode))` line), but the second\r\n    // case requires extra handling: the anchor node needs to be added to the\r\n    // final list manually. See additional information in the `createAnchorNode`\r\n    // function in the `view_container_ref.ts`.\r\n    //\r\n    // In the first case, the same reference would be stored in the `NATIVE`\r\n    // and `HOST` slots in an LContainer. Otherwise, this is the second case and\r\n    // we should add an element to the final list.\r\n    if (lContainer[NATIVE] !== lContainer[HOST]) {\r\n        result.push(lContainer[NATIVE]);\r\n    }\r\n}\r\n\r\nfunction addAfterRenderSequencesForView(lView) {\r\n    if (lView[AFTER_RENDER_SEQUENCES_TO_ADD] !== null) {\r\n        for (const sequence of lView[AFTER_RENDER_SEQUENCES_TO_ADD]) {\r\n            sequence.impl.addSequence(sequence);\r\n        }\r\n        lView[AFTER_RENDER_SEQUENCES_TO_ADD].length = 0;\r\n    }\r\n}\r\n\r\nlet freeConsumers = [];\r\n/**\r\n * Create a new template consumer pointing at the specified LView.\r\n * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that\r\n * case, the LView will be updated.\r\n */\r\nfunction getOrBorrowReactiveLViewConsumer(lView) {\r\n    return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);\r\n}\r\nfunction borrowReactiveLViewConsumer(lView) {\r\n    const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);\r\n    consumer.lView = lView;\r\n    return consumer;\r\n}\r\nfunction maybeReturnReactiveLViewConsumer(consumer) {\r\n    if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {\r\n        // The consumer got committed.\r\n        return;\r\n    }\r\n    consumer.lView = null;\r\n    freeConsumers.push(consumer);\r\n}\r\nconst REACTIVE_LVIEW_CONSUMER_NODE = {\r\n    ...REACTIVE_NODE,\r\n    consumerIsAlwaysLive: true,\r\n    kind: 'template',\r\n    consumerMarkedDirty: (node) => {\r\n        markAncestorsForTraversal(node.lView);\r\n    },\r\n    consumerOnSignalRead() {\r\n        this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\r\n    },\r\n};\r\n/**\r\n * Creates a temporary consumer for use with `LView`s that should not have consumers.\r\n * If the LView already has a consumer, returns the existing one instead.\r\n *\r\n * This is necessary because some APIs may cause change detection directly on an LView\r\n * that we do not want to have a consumer (Embedded views today). As a result, there\r\n * would be no active consumer from running change detection on its host component\r\n * and any signals in the LView template would be untracked. Instead, we create\r\n * this temporary consumer that marks the first parent that _should_ have a consumer\r\n * for refresh. Once change detection runs as part of that refresh, we throw away\r\n * this consumer because its signals will then be tracked by the parent's consumer.\r\n */\r\nfunction getOrCreateTemporaryConsumer(lView) {\r\n    const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);\r\n    consumer.lView = lView;\r\n    return consumer;\r\n}\r\nconst TEMPORARY_CONSUMER_NODE = {\r\n    ...REACTIVE_NODE,\r\n    consumerIsAlwaysLive: true,\r\n    kind: 'template',\r\n    consumerMarkedDirty: (node) => {\r\n        let parent = getLViewParent(node.lView);\r\n        while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {\r\n            parent = getLViewParent(parent);\r\n        }\r\n        if (!parent) {\r\n            // If we can't find an appropriate parent that should have a consumer, we\r\n            // don't have a way of appropriately refreshing this LView as part of application synchronization.\r\n            return;\r\n        }\r\n        markViewForRefresh(parent);\r\n    },\r\n    consumerOnSignalRead() {\r\n        this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\r\n    },\r\n};\r\n/**\r\n * Indicates if the view should get its own reactive consumer node.\r\n *\r\n * In the current design, all embedded views share a consumer with the component view. This allows\r\n * us to refresh at the component level rather than at a per-view level. In addition, root views get\r\n * their own reactive node because root component will have a host view that executes the\r\n * component's host bindings. This needs to be tracked in a consumer as well.\r\n *\r\n * To get a more granular change detection than per-component, all we would just need to update the\r\n * condition here so that a given view gets a reactive consumer which can become dirty independently\r\n * from its parent component. For example embedded views for signal components could be created with\r\n * a new type \"SignalEmbeddedView\" and the condition here wouldn't even need updating in order to\r\n * get granular per-view change detection for signal components.\r\n */\r\nfunction viewShouldHaveReactiveConsumer(tView) {\r\n    return tView.type !== 2 /* TViewType.Embedded */;\r\n}\r\nfunction isReactiveLViewConsumer(node) {\r\n    return node.kind === 'template';\r\n}\r\n\r\nfunction runEffectsInView(view) {\r\n    if (view[EFFECTS] === null) {\r\n        return;\r\n    }\r\n    // Since effects can make other effects dirty, we flush them in a loop until there are no more to\r\n    // flush.\r\n    let tryFlushEffects = true;\r\n    while (tryFlushEffects) {\r\n        let foundDirtyEffect = false;\r\n        for (const effect of view[EFFECTS]) {\r\n            if (!effect.dirty) {\r\n                continue;\r\n            }\r\n            foundDirtyEffect = true;\r\n            // `runEffectsInView` is called during change detection, and therefore runs\r\n            // in the Angular zone if it's available.\r\n            if (effect.zone === null || Zone.current === effect.zone) {\r\n                effect.run();\r\n            }\r\n            else {\r\n                effect.zone.run(() => effect.run());\r\n            }\r\n        }\r\n        // Check if we need to continue flushing. If we didn't find any dirty effects, then there's\r\n        // no need to loop back. Otherwise, check the view to see if it was marked for traversal\r\n        // again. If so, there's a chance that one of the effects we ran caused another effect to\r\n        // become dirty.\r\n        tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */);\r\n    }\r\n}\r\n\r\n/**\r\n * The maximum number of times the change detection traversal will rerun before throwing an error.\r\n */\r\nconst MAXIMUM_REFRESH_RERUNS$1 = 100;\r\nfunction detectChangesInternal(lView, mode = 0 /* ChangeDetectionMode.Global */) {\r\n    const environment = lView[ENVIRONMENT];\r\n    const rendererFactory = environment.rendererFactory;\r\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\r\n    // since they were assigned. We do not want to invoke renderer factory functions in that mode\r\n    // to avoid any possible side-effects.\r\n    const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\r\n    if (!checkNoChangesMode) {\r\n        rendererFactory.begin?.();\r\n    }\r\n    try {\r\n        detectChangesInViewWhileDirty(lView, mode);\r\n    }\r\n    finally {\r\n        if (!checkNoChangesMode) {\r\n            rendererFactory.end?.();\r\n        }\r\n    }\r\n}\r\nfunction detectChangesInViewWhileDirty(lView, mode) {\r\n    const lastIsRefreshingViewsValue = isRefreshingViews();\r\n    try {\r\n        setIsRefreshingViews(true);\r\n        detectChangesInView(lView, mode);\r\n        // We don't need or want to do any looping when in exhaustive checkNoChanges because we\r\n        // already traverse all the views and nothing should change so we shouldn't have to do\r\n        // another pass to pick up new changes.\r\n        if (ngDevMode && isExhaustiveCheckNoChanges()) {\r\n            return;\r\n        }\r\n        let retries = 0;\r\n        // If after running change detection, this view still needs to be refreshed or there are\r\n        // descendants views that need to be refreshed due to re-dirtying during the change detection\r\n        // run, detect changes on the view again. We run change detection in `Targeted` mode to only\r\n        // refresh views with the `RefreshView` flag.\r\n        while (requiresRefreshOrTraversal(lView)) {\r\n            if (retries === MAXIMUM_REFRESH_RERUNS$1) {\r\n                throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode &&\r\n                    'Infinite change detection while trying to refresh views. ' +\r\n                        'There may be components which each cause the other to require a refresh, ' +\r\n                        'causing an infinite loop.');\r\n            }\r\n            retries++;\r\n            // Even if this view is detached, we still detect changes in targeted mode because this was\r\n            // the root of the change detection run.\r\n            detectChangesInView(lView, 1 /* ChangeDetectionMode.Targeted */);\r\n        }\r\n    }\r\n    finally {\r\n        // restore state to what it was before entering this change detection loop\r\n        setIsRefreshingViews(lastIsRefreshingViewsValue);\r\n    }\r\n}\r\nfunction checkNoChangesInternal(lView, exhaustive) {\r\n    setIsInCheckNoChangesMode(exhaustive ? CheckNoChangesMode.Exhaustive : CheckNoChangesMode.OnlyDirtyViews);\r\n    try {\r\n        detectChangesInternal(lView);\r\n    }\r\n    finally {\r\n        setIsInCheckNoChangesMode(CheckNoChangesMode.Off);\r\n    }\r\n}\r\n/**\r\n * Processes a view in update mode. This includes a number of steps in a specific order:\r\n * - executing a template function in update mode;\r\n * - executing hooks;\r\n * - refreshing queries;\r\n * - setting host bindings;\r\n * - refreshing child (embedded and component) views.\r\n */\r\nfunction refreshView(tView, lView, templateFn, context) {\r\n    ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\r\n    if (isDestroyed(lView))\r\n        return;\r\n    const flags = lView[FLAGS];\r\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\r\n    // since they were assigned. We do not want to execute lifecycle hooks in that mode.\r\n    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\r\n    const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();\r\n    // Start component reactive context\r\n    // - We might already be in a reactive context if this is an embedded view of the host.\r\n    // - We might be descending into a view that needs a consumer.\r\n    enterView(lView);\r\n    let returnConsumerToPool = true;\r\n    let prevConsumer = null;\r\n    let currentConsumer = null;\r\n    if (!isInCheckNoChangesPass) {\r\n        if (viewShouldHaveReactiveConsumer(tView)) {\r\n            currentConsumer = getOrBorrowReactiveLViewConsumer(lView);\r\n            prevConsumer = consumerBeforeComputation(currentConsumer);\r\n        }\r\n        else if (getActiveConsumer() === null) {\r\n            // If the current view should not have a reactive consumer but we don't have an active consumer,\r\n            // we still need to create a temporary consumer to track any signal reads in this template.\r\n            // This is a rare case that can happen with\r\n            // - `viewContainerRef.createEmbeddedView(...).detectChanges()`.\r\n            // - `viewContainerRef.createEmbeddedView(...)` without any other dirty marking on the parent,\r\n            //   flagging the parent component for traversal but not triggering a full `refreshView`.\r\n            // This temporary consumer marks the first parent that _should_ have a consumer for refresh.\r\n            // Once that refresh happens, the signals will be tracked in the parent consumer and we can destroy\r\n            // the temporary one.\r\n            returnConsumerToPool = false;\r\n            currentConsumer = getOrCreateTemporaryConsumer(lView);\r\n            prevConsumer = consumerBeforeComputation(currentConsumer);\r\n        }\r\n        else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {\r\n            consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\r\n            lView[REACTIVE_TEMPLATE_CONSUMER] = null;\r\n        }\r\n    }\r\n    try {\r\n        resetPreOrderHookFlags(lView);\r\n        setBindingIndex(tView.bindingStartIndex);\r\n        if (templateFn !== null) {\r\n            executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\r\n        }\r\n        const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\r\n        // execute pre-order hooks (OnInit, OnChanges, DoCheck)\r\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\r\n        if (!isInCheckNoChangesPass) {\r\n            if (hooksInitPhaseCompleted) {\r\n                const preOrderCheckHooks = tView.preOrderCheckHooks;\r\n                if (preOrderCheckHooks !== null) {\r\n                    executeCheckHooks(lView, preOrderCheckHooks, null);\r\n                }\r\n            }\r\n            else {\r\n                const preOrderHooks = tView.preOrderHooks;\r\n                if (preOrderHooks !== null) {\r\n                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\r\n                }\r\n                incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\r\n            }\r\n        }\r\n        // We do not need to mark transplanted views for refresh when doing exhaustive checks\r\n        // because all views will be reached anyways during the traversal.\r\n        if (!isInExhaustiveCheckNoChangesPass) {\r\n            // First mark transplanted views that are declared in this lView as needing a refresh at their\r\n            // insertion points. This is needed to avoid the situation where the template is defined in this\r\n            // `LView` but its declaration appears after the insertion component.\r\n            markTransplantedViewsForRefresh(lView);\r\n        }\r\n        runEffectsInView(lView);\r\n        detectChangesInEmbeddedViews(lView, 0 /* ChangeDetectionMode.Global */);\r\n        // Content query results must be refreshed before content hooks are called.\r\n        if (tView.contentQueries !== null) {\r\n            refreshContentQueries(tView, lView);\r\n        }\r\n        // execute content hooks (AfterContentInit, AfterContentChecked)\r\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\r\n        if (!isInCheckNoChangesPass) {\r\n            if (hooksInitPhaseCompleted) {\r\n                const contentCheckHooks = tView.contentCheckHooks;\r\n                if (contentCheckHooks !== null) {\r\n                    executeCheckHooks(lView, contentCheckHooks);\r\n                }\r\n            }\r\n            else {\r\n                const contentHooks = tView.contentHooks;\r\n                if (contentHooks !== null) {\r\n                    executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\r\n                }\r\n                incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\r\n            }\r\n        }\r\n        processHostBindingOpCodes(tView, lView);\r\n        // Refresh child component views.\r\n        const components = tView.components;\r\n        if (components !== null) {\r\n            detectChangesInChildComponents(lView, components, 0 /* ChangeDetectionMode.Global */);\r\n        }\r\n        // View queries must execute after refreshing child components because a template in this view\r\n        // could be inserted in a child component. If the view query executes before child component\r\n        // refresh, the template might not yet be inserted.\r\n        const viewQuery = tView.viewQuery;\r\n        if (viewQuery !== null) {\r\n            executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\r\n        }\r\n        // execute view hooks (AfterViewInit, AfterViewChecked)\r\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\r\n        if (!isInCheckNoChangesPass) {\r\n            if (hooksInitPhaseCompleted) {\r\n                const viewCheckHooks = tView.viewCheckHooks;\r\n                if (viewCheckHooks !== null) {\r\n                    executeCheckHooks(lView, viewCheckHooks);\r\n                }\r\n            }\r\n            else {\r\n                const viewHooks = tView.viewHooks;\r\n                if (viewHooks !== null) {\r\n                    executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\r\n                }\r\n                incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\r\n            }\r\n        }\r\n        if (tView.firstUpdatePass === true) {\r\n            // We need to make sure that we only flip the flag on successful `refreshView` only\r\n            // Don't do this in `finally` block.\r\n            // If we did this in `finally` block then an exception could block the execution of styling\r\n            // instructions which in turn would be unable to insert themselves into the styling linked\r\n            // list. The result of this would be that if the exception would not be throw on subsequent CD\r\n            // the styling would be unable to process it data and reflect to the DOM.\r\n            tView.firstUpdatePass = false;\r\n        }\r\n        // Schedule any effects that are waiting on the update pass of this view.\r\n        if (lView[EFFECTS_TO_SCHEDULE]) {\r\n            for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {\r\n                notifyEffect();\r\n            }\r\n            // Once they've been run, we can drop the array.\r\n            lView[EFFECTS_TO_SCHEDULE] = null;\r\n        }\r\n        // Do not reset the dirty state when running in check no changes mode. We don't want components\r\n        // to behave differently depending on whether check no changes is enabled or not. For example:\r\n        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\r\n        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\r\n        // no changes cycle, the component would be not be dirty for the next update pass. This would\r\n        // be different in production mode where the component dirty state is not reset.\r\n        if (!isInCheckNoChangesPass) {\r\n            addAfterRenderSequencesForView(lView);\r\n            lView[FLAGS] &= ~(64 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (!isInCheckNoChangesPass) {\r\n            // If refreshing a view causes an error, we need to remark the ancestors as needing traversal\r\n            // because the error might have caused a situation where views below the current location are\r\n            // dirty but will be unreachable because the \"has dirty children\" flag in the ancestors has been\r\n            // cleared during change detection and we failed to run to completion.\r\n            markAncestorsForTraversal(lView);\r\n        }\r\n        throw e;\r\n    }\r\n    finally {\r\n        if (currentConsumer !== null) {\r\n            consumerAfterComputation(currentConsumer, prevConsumer);\r\n            if (returnConsumerToPool) {\r\n                maybeReturnReactiveLViewConsumer(currentConsumer);\r\n            }\r\n        }\r\n        leaveView();\r\n    }\r\n}\r\n/**\r\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\r\n * them by executing an associated template function.\r\n */\r\nfunction detectChangesInEmbeddedViews(lView, mode) {\r\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\r\n        for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\r\n            const embeddedLView = lContainer[i];\r\n            detectChangesInViewIfAttached(embeddedLView, mode);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Mark transplanted views as needing to be refreshed at their attachment points.\r\n *\r\n * @param lView The `LView` that may have transplanted views.\r\n */\r\nfunction markTransplantedViewsForRefresh(lView) {\r\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\r\n        if (!(lContainer[FLAGS] & 2 /* LContainerFlags.HasTransplantedViews */))\r\n            continue;\r\n        const movedViews = lContainer[MOVED_VIEWS];\r\n        ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\r\n        for (let i = 0; i < movedViews.length; i++) {\r\n            const movedLView = movedViews[i];\r\n            markViewForRefresh(movedLView);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Detects changes in a component by entering the component view and processing its bindings,\r\n * queries, etc. if it is CheckAlways, OnPush and Dirty, etc.\r\n *\r\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\r\n */\r\nfunction detectChangesInComponent(hostLView, componentHostIdx, mode) {\r\n    ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\r\n    profiler(18 /* ProfilerEvent.ComponentStart */);\r\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\r\n    detectChangesInViewIfAttached(componentView, mode);\r\n    profiler(19 /* ProfilerEvent.ComponentEnd */, componentView[CONTEXT]);\r\n}\r\n/**\r\n * Visits a view as part of change detection traversal.\r\n *\r\n * If the view is detached, no additional traversal happens.\r\n */\r\nfunction detectChangesInViewIfAttached(lView, mode) {\r\n    if (!viewAttachedToChangeDetector(lView)) {\r\n        return;\r\n    }\r\n    detectChangesInView(lView, mode);\r\n}\r\n/**\r\n * Visits a view as part of change detection traversal.\r\n *\r\n * The view is refreshed if:\r\n * - If the view is CheckAlways or Dirty and ChangeDetectionMode is `Global`\r\n * - If the view has the `RefreshView` flag\r\n *\r\n * The view is not refreshed, but descendants are traversed in `ChangeDetectionMode.Targeted` if the\r\n * view HasChildViewsToRefresh flag is set.\r\n */\r\nfunction detectChangesInView(lView, mode) {\r\n    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\r\n    const tView = lView[TVIEW];\r\n    const flags = lView[FLAGS];\r\n    const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];\r\n    // Refresh CheckAlways views in Global mode.\r\n    let shouldRefreshView = !!(mode === 0 /* ChangeDetectionMode.Global */ && flags & 16 /* LViewFlags.CheckAlways */);\r\n    // Refresh Dirty views in Global mode, as long as we're not in checkNoChanges.\r\n    // CheckNoChanges never worked with `OnPush` components because the `Dirty` flag was\r\n    // cleared before checkNoChanges ran. Because there is now a loop for to check for\r\n    // backwards views, it gives an opportunity for `OnPush` components to be marked `Dirty`\r\n    // before the CheckNoChanges pass. We don't want existing errors that are hidden by the\r\n    // current CheckNoChanges bug to surface when making unrelated changes.\r\n    shouldRefreshView ||= !!(flags & 64 /* LViewFlags.Dirty */ &&\r\n        mode === 0 /* ChangeDetectionMode.Global */ &&\r\n        !isInCheckNoChangesPass);\r\n    // Always refresh views marked for refresh, regardless of mode.\r\n    shouldRefreshView ||= !!(flags & 1024 /* LViewFlags.RefreshView */);\r\n    // Refresh views when they have a dirty reactive consumer, regardless of mode.\r\n    shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));\r\n    shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());\r\n    // Mark the Flags and `ReactiveNode` as not dirty before refreshing the component, so that they\r\n    // can be re-dirtied during the refresh process.\r\n    if (consumer) {\r\n        consumer.dirty = false;\r\n    }\r\n    lView[FLAGS] &= ~(8192 /* LViewFlags.HasChildViewsToRefresh */ | 1024 /* LViewFlags.RefreshView */);\r\n    if (shouldRefreshView) {\r\n        refreshView(tView, lView, tView.template, lView[CONTEXT]);\r\n    }\r\n    else if (flags & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\r\n        // Set active consumer to null to avoid inheriting an improper reactive context\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            if (!isInCheckNoChangesPass) {\r\n                runEffectsInView(lView);\r\n            }\r\n            detectChangesInEmbeddedViews(lView, 1 /* ChangeDetectionMode.Targeted */);\r\n            const components = tView.components;\r\n            if (components !== null) {\r\n                detectChangesInChildComponents(lView, components, 1 /* ChangeDetectionMode.Targeted */);\r\n            }\r\n            if (!isInCheckNoChangesPass) {\r\n                addAfterRenderSequencesForView(lView);\r\n            }\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n}\r\n/** Refreshes child components in the current view (update mode). */\r\nfunction detectChangesInChildComponents(hostLView, components, mode) {\r\n    for (let i = 0; i < components.length; i++) {\r\n        detectChangesInComponent(hostLView, components[i], mode);\r\n    }\r\n}\r\n/**\r\n * Invoke `HostBindingsFunction`s for view.\r\n *\r\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\r\n * `HostBindingsFunction`s associated with the current `LView`.\r\n *\r\n * @param tView Current `TView`.\r\n * @param lView Current `LView`.\r\n */\r\nfunction processHostBindingOpCodes(tView, lView) {\r\n    const hostBindingOpCodes = tView.hostBindingOpCodes;\r\n    if (hostBindingOpCodes === null)\r\n        return;\r\n    try {\r\n        for (let i = 0; i < hostBindingOpCodes.length; i++) {\r\n            const opCode = hostBindingOpCodes[i];\r\n            if (opCode < 0) {\r\n                // Negative numbers are element indexes.\r\n                setSelectedIndex(~opCode);\r\n            }\r\n            else {\r\n                // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\r\n                const directiveIdx = opCode;\r\n                const bindingRootIndx = hostBindingOpCodes[++i];\r\n                const hostBindingFn = hostBindingOpCodes[++i];\r\n                setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\r\n                const context = lView[directiveIdx];\r\n                profiler(24 /* ProfilerEvent.HostBindingsUpdateStart */, context);\r\n                hostBindingFn(2 /* RenderFlags.Update */, context);\r\n                profiler(25 /* ProfilerEvent.HostBindingsUpdateEnd */, context);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        setSelectedIndex(-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Marks current view and all ancestors dirty.\r\n *\r\n * Returns the root view because it is found as a byproduct of marking the view tree\r\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\r\n * change detection. Otherwise, such methods would need to traverse up the view tree\r\n * an additional time to get the root view and schedule a tick on it.\r\n *\r\n * @param lView The starting LView to mark dirty\r\n * @returns the root LView\r\n */\r\nfunction markViewDirty(lView, source) {\r\n    const dirtyBitsToUse = isRefreshingViews()\r\n        ? // When we are actively refreshing views, we only use the `Dirty` bit to mark a view\r\n            64 /* LViewFlags.Dirty */\r\n        : // When we are not actively refreshing a view tree, it is absolutely\r\n            // valid to update state and mark views dirty. We use the `RefreshView` flag in this\r\n            // case to allow synchronously rerunning change detection. This applies today to\r\n            // afterRender hooks as well as animation listeners which execute after detecting\r\n            // changes in a view when the render factory flushes.\r\n            1024 /* LViewFlags.RefreshView */ | 64 /* LViewFlags.Dirty */;\r\n    lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);\r\n    while (lView) {\r\n        lView[FLAGS] |= dirtyBitsToUse;\r\n        const parent = getLViewParent(lView);\r\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\r\n        if (isRootView(lView) && !parent) {\r\n            return lView;\r\n        }\r\n        // continue otherwise\r\n        lView = parent;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\r\n *\r\n * @param hostNative The host element for the LContainer\r\n * @param hostTNode The host TNode for the LContainer\r\n * @param currentView The parent view of the LContainer\r\n * @param native The native comment element\r\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\r\n * @returns LContainer\r\n */\r\nfunction createLContainer(hostNative, currentView, native, tNode) {\r\n    ngDevMode && assertLView(currentView);\r\n    const lContainer = [\r\n        hostNative, // host native\r\n        true, // Boolean `true` in this position signifies that this is an `LContainer`\r\n        0, // flags\r\n        currentView, // parent\r\n        null, // next\r\n        tNode, // t_host\r\n        null, // dehydrated views\r\n        native, // native,\r\n        null, // view refs\r\n        null, // moved views\r\n    ];\r\n    ngDevMode &&\r\n        assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\r\n    return lContainer;\r\n}\r\nfunction getLViewFromLContainer(lContainer, index) {\r\n    const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\r\n    // avoid reading past the array boundaries\r\n    if (adjustedIndex < lContainer.length) {\r\n        const lView = lContainer[adjustedIndex];\r\n        ngDevMode && assertLView(lView);\r\n        return lView;\r\n    }\r\n    return undefined;\r\n}\r\nfunction addLViewToLContainer(lContainer, lView, index, addToDOM = true) {\r\n    const tView = lView[TVIEW];\r\n    // Insert into the view tree so the new view can be change-detected\r\n    insertView(tView, lView, lContainer, index);\r\n    // Insert elements that belong to this view into the DOM tree\r\n    if (addToDOM) {\r\n        const beforeNode = getBeforeNodeForView(index, lContainer);\r\n        const renderer = lView[RENDERER];\r\n        const parentRNode = renderer.parentNode(lContainer[NATIVE]);\r\n        if (parentRNode !== null) {\r\n            addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\r\n        }\r\n    }\r\n    // When in hydration mode, reset the pointer to the first child in\r\n    // the dehydrated view. This indicates that the view was hydrated and\r\n    // further attaching/detaching should work with this view as normal.\r\n    const hydrationInfo = lView[HYDRATION];\r\n    if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\r\n        hydrationInfo.firstChild = null;\r\n    }\r\n}\r\nfunction removeLViewFromLContainer(lContainer, index) {\r\n    const lView = detachView(lContainer, index);\r\n    if (lView !== undefined) {\r\n        destroyLView(lView[TVIEW], lView);\r\n    }\r\n    return lView;\r\n}\r\n/**\r\n * Detaches a view from a container.\r\n *\r\n * This method removes the view from the container's array of active views. It also\r\n * removes the view's elements from the DOM.\r\n *\r\n * @param lContainer The container from which to detach a view\r\n * @param removeIndex The index of the view to detach\r\n * @returns Detached LView instance.\r\n */\r\nfunction detachView(lContainer, removeIndex) {\r\n    if (lContainer.length <= CONTAINER_HEADER_OFFSET)\r\n        return;\r\n    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\r\n    const viewToDetach = lContainer[indexInContainer];\r\n    if (viewToDetach) {\r\n        const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\r\n        if (declarationLContainer !== null && declarationLContainer !== lContainer) {\r\n            detachMovedView(declarationLContainer, viewToDetach);\r\n        }\r\n        if (removeIndex > 0) {\r\n            lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\r\n        }\r\n        const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\r\n        removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\r\n        // notify query that a view has been removed\r\n        const lQueries = removedLView[QUERIES];\r\n        if (lQueries !== null) {\r\n            lQueries.detachView(removedLView[TVIEW]);\r\n        }\r\n        viewToDetach[PARENT] = null;\r\n        viewToDetach[NEXT] = null;\r\n        // Unsets the attached flag\r\n        viewToDetach[FLAGS] &= ~128 /* LViewFlags.Attached */;\r\n    }\r\n    return viewToDetach;\r\n}\r\n/**\r\n * Inserts a view into a container.\r\n *\r\n * This adds the view to the container's array of active views in the correct\r\n * position. It also adds the view's elements to the DOM if the container isn't a\r\n * root node of another view (in that case, the view's elements will be added when\r\n * the container's parent view is added later).\r\n *\r\n * @param tView The `TView' of the `LView` to insert\r\n * @param lView The view to insert\r\n * @param lContainer The container into which the view should be inserted\r\n * @param index Which index in the container to insert the child view into\r\n */\r\nfunction insertView(tView, lView, lContainer, index) {\r\n    ngDevMode && assertLView(lView);\r\n    ngDevMode && assertLContainer(lContainer);\r\n    const indexInContainer = CONTAINER_HEADER_OFFSET + index;\r\n    const containerLength = lContainer.length;\r\n    if (index > 0) {\r\n        // This is a new view, we need to add it to the children.\r\n        lContainer[indexInContainer - 1][NEXT] = lView;\r\n    }\r\n    if (index < containerLength - CONTAINER_HEADER_OFFSET) {\r\n        lView[NEXT] = lContainer[indexInContainer];\r\n        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\r\n    }\r\n    else {\r\n        lContainer.push(lView);\r\n        lView[NEXT] = null;\r\n    }\r\n    lView[PARENT] = lContainer;\r\n    // track views where declaration and insertion points are different\r\n    const declarationLContainer = lView[DECLARATION_LCONTAINER];\r\n    if (declarationLContainer !== null && lContainer !== declarationLContainer) {\r\n        trackMovedView(declarationLContainer, lView);\r\n    }\r\n    // notify query that a new view has been added\r\n    const lQueries = lView[QUERIES];\r\n    if (lQueries !== null) {\r\n        lQueries.insertView(tView);\r\n    }\r\n    updateAncestorTraversalFlagsOnAttach(lView);\r\n    // Sets the attached flag\r\n    lView[FLAGS] |= 128 /* LViewFlags.Attached */;\r\n}\r\n/**\r\n * Track views created from the declaration container (TemplateRef) and inserted into a\r\n * different LContainer or attached directly to ApplicationRef.\r\n */\r\nfunction trackMovedView(declarationContainer, lView) {\r\n    ngDevMode && assertDefined(lView, 'LView required');\r\n    ngDevMode && assertLContainer(declarationContainer);\r\n    const movedViews = declarationContainer[MOVED_VIEWS];\r\n    const parent = lView[PARENT];\r\n    ngDevMode && assertDefined(parent, 'missing parent');\r\n    if (isLView(parent)) {\r\n        declarationContainer[FLAGS] |= 2 /* LContainerFlags.HasTransplantedViews */;\r\n    }\r\n    else {\r\n        const insertedComponentLView = parent[PARENT][DECLARATION_COMPONENT_VIEW];\r\n        ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\r\n        const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\r\n        ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\r\n        if (declaredComponentLView !== insertedComponentLView) {\r\n            // At this point the declaration-component is not same as insertion-component; this means that\r\n            // this is a transplanted view. Mark the declared lView as having transplanted views so that\r\n            // those views can participate in CD.\r\n            declarationContainer[FLAGS] |= 2 /* LContainerFlags.HasTransplantedViews */;\r\n        }\r\n    }\r\n    if (movedViews === null) {\r\n        declarationContainer[MOVED_VIEWS] = [lView];\r\n    }\r\n    else {\r\n        movedViews.push(lView);\r\n    }\r\n}\r\n\r\nclass ViewRef {\r\n    _lView;\r\n    _cdRefInjectingView;\r\n    _appRef = null;\r\n    _attachedToViewContainer = false;\r\n    exhaustive;\r\n    get rootNodes() {\r\n        const lView = this._lView;\r\n        const tView = lView[TVIEW];\r\n        return collectNativeNodes(tView, lView, tView.firstChild, []);\r\n    }\r\n    constructor(\r\n    /**\r\n     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\r\n     *\r\n     * When ViewRef is created for a dynamic component, this also represents the `LView` for the\r\n     * component.\r\n     *\r\n     * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\r\n     * view.\r\n     *\r\n     * @internal\r\n     */\r\n    _lView, \r\n    /**\r\n     * This represents the `LView` associated with the point where `ChangeDetectorRef` was\r\n     * requested.\r\n     *\r\n     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\r\n     */\r\n    _cdRefInjectingView) {\r\n        this._lView = _lView;\r\n        this._cdRefInjectingView = _cdRefInjectingView;\r\n    }\r\n    get context() {\r\n        return this._lView[CONTEXT];\r\n    }\r\n    /**\r\n     * @deprecated Replacing the full context object is not supported. Modify the context\r\n     *   directly, or consider using a `Proxy` if you need to replace the full object.\r\n     * // TODO(devversion): Remove this.\r\n     */\r\n    set context(value) {\r\n        if (ngDevMode) {\r\n            // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\r\n            // up for assignments on the setter. We want to let users know about the deprecated usage.\r\n            console.warn('Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.');\r\n        }\r\n        this._lView[CONTEXT] = value;\r\n    }\r\n    get destroyed() {\r\n        return isDestroyed(this._lView);\r\n    }\r\n    destroy() {\r\n        if (this._appRef) {\r\n            this._appRef.detachView(this);\r\n        }\r\n        else if (this._attachedToViewContainer) {\r\n            const parent = this._lView[PARENT];\r\n            if (isLContainer(parent)) {\r\n                const viewRefs = parent[VIEW_REFS];\r\n                const index = viewRefs ? viewRefs.indexOf(this) : -1;\r\n                if (index > -1) {\r\n                    ngDevMode &&\r\n                        assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\r\n                    detachView(parent, index);\r\n                    removeFromArray(viewRefs, index);\r\n                }\r\n            }\r\n            this._attachedToViewContainer = false;\r\n        }\r\n        destroyLView(this._lView[TVIEW], this._lView);\r\n    }\r\n    onDestroy(callback) {\r\n        storeLViewOnDestroy(this._lView, callback);\r\n    }\r\n    /**\r\n     * Marks a view and all of its ancestors dirty.\r\n     *\r\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\r\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * ```ts\r\n     * @Component({\r\n     *   selector: 'app-root',\r\n     *   template: `Number of ticks: {{numberOfTicks}}`\r\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n     * })\r\n     * class AppComponent {\r\n     *   numberOfTicks = 0;\r\n     *\r\n     *   constructor(private ref: ChangeDetectorRef) {\r\n     *     setInterval(() => {\r\n     *       this.numberOfTicks++;\r\n     *       // the following is required, otherwise the view will not be updated\r\n     *       this.ref.markForCheck();\r\n     *     }, 1000);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    markForCheck() {\r\n        markViewDirty(this._cdRefInjectingView || this._lView, 4 /* NotificationSource.MarkForCheck */);\r\n    }\r\n    /**\r\n     * Detaches the view from the change detection tree.\r\n     *\r\n     * Detached views will not be checked during change detection runs until they are\r\n     * re-attached, even if they are dirty. `detach` can be used in combination with\r\n     * {@link ChangeDetectorRef#detectChanges} to implement local change\r\n     * detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds. We can do that by detaching\r\n     * the component's change detector and doing a local check every five seconds.\r\n     *\r\n     * ```ts\r\n     * class DataProvider {\r\n     *   // in a real application the returned data will be different every time\r\n     *   get data() {\r\n     *     return [1,2,3,4,5];\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'giant-list',\r\n     *   template: `\r\n     *     @for(d of dataProvider.data; track $index) {\r\n     *        <li>Data {{d}}</li>\r\n     *     }\r\n     *   `,\r\n     * })\r\n     * class GiantList {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n     *     ref.detach();\r\n     *     setInterval(() => {\r\n     *       this.ref.detectChanges();\r\n     *     }, 5000);\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     <giant-list><giant-list>\r\n     *   `,\r\n     * })\r\n     * class App {\r\n     * }\r\n     * ```\r\n     */\r\n    detach() {\r\n        this._lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\r\n    }\r\n    /**\r\n     * Re-attaches a view to the change detection tree.\r\n     *\r\n     * This can be used to re-attach views that were previously detached from the tree\r\n     * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * The following example creates a component displaying `live` data. The component will detach\r\n     * its change detector from the main change detector tree when the component's live property\r\n     * is set to false.\r\n     *\r\n     * ```ts\r\n     * class DataProvider {\r\n     *   data = 1;\r\n     *\r\n     *   constructor() {\r\n     *     setInterval(() => {\r\n     *       this.data = this.data * 2;\r\n     *     }, 500);\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'live-data',\r\n     *   inputs: ['live'],\r\n     *   template: 'Data: {{dataProvider.data}}'\r\n     * })\r\n     * class LiveData {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n     *\r\n     *   set live(value) {\r\n     *     if (value) {\r\n     *       this.ref.reattach();\r\n     *     } else {\r\n     *       this.ref.detach();\r\n     *     }\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'app-root',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n     *     <live-data [live]=\"live\"><live-data>\r\n     *   `,\r\n     * })\r\n     * class AppComponent {\r\n     *   live = true;\r\n     * }\r\n     * ```\r\n     */\r\n    reattach() {\r\n        updateAncestorTraversalFlagsOnAttach(this._lView);\r\n        this._lView[FLAGS] |= 128 /* LViewFlags.Attached */;\r\n    }\r\n    /**\r\n     * Checks the view and its children.\r\n     *\r\n     * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\r\n     * local change detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds.\r\n     *\r\n     * We can do that by detaching the component's change detector and doing a local change detection\r\n     * check every five seconds.\r\n     *\r\n     * See {@link ChangeDetectorRef#detach} for more information.\r\n     */\r\n    detectChanges() {\r\n        // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\r\n        // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\r\n        // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\r\n        // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\r\n        // in the state of the LViewFlags during template execution.\r\n        this._lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\r\n        detectChangesInternal(this._lView);\r\n    }\r\n    /**\r\n     * Checks the change detector and its children, and throws if any changes are detected.\r\n     *\r\n     * This is used in development mode to verify that running change detection doesn't\r\n     * introduce other changes.\r\n     */\r\n    checkNoChanges() {\r\n        if (!ngDevMode)\r\n            return;\r\n        try {\r\n            this.exhaustive ??= this._lView[INJECTOR].get(UseExhaustiveCheckNoChanges, USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT);\r\n        }\r\n        catch {\r\n            this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\r\n        }\r\n        checkNoChangesInternal(this._lView, this.exhaustive);\r\n    }\r\n    attachToViewContainerRef() {\r\n        if (this._appRef) {\r\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\r\n        }\r\n        this._attachedToViewContainer = true;\r\n    }\r\n    detachFromAppRef() {\r\n        this._appRef = null;\r\n        const isRoot = isRootView(this._lView);\r\n        const declarationContainer = this._lView[DECLARATION_LCONTAINER];\r\n        if (declarationContainer !== null && !isRoot) {\r\n            detachMovedView(declarationContainer, this._lView);\r\n        }\r\n        detachViewFromDOM(this._lView[TVIEW], this._lView);\r\n    }\r\n    attachToAppRef(appRef) {\r\n        if (this._attachedToViewContainer) {\r\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\r\n        }\r\n        this._appRef = appRef;\r\n        const isRoot = isRootView(this._lView);\r\n        const declarationContainer = this._lView[DECLARATION_LCONTAINER];\r\n        if (declarationContainer !== null && !isRoot) {\r\n            trackMovedView(declarationContainer, this._lView);\r\n        }\r\n        updateAncestorTraversalFlagsOnAttach(this._lView);\r\n    }\r\n}\r\n/**\r\n * Reports whether the given view is considered dirty according to the different marking mechanisms.\r\n */\r\nfunction isViewDirty(view) {\r\n    return requiresRefreshOrTraversal(view._lView) || !!(view._lView[FLAGS] & 64 /* LViewFlags.Dirty */);\r\n}\r\nfunction markForRefresh(view) {\r\n    // This function is only used by elements where _cdRefInjectingView is the same as _lView\r\n    markViewForRefresh(view._lView);\r\n}\r\n\r\n/**\r\n * Represents an embedded template that can be used to instantiate embedded views.\r\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\r\n * method `createEmbeddedView()`.\r\n *\r\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\r\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\r\n * is injected into the constructor of the directive,\r\n * using the `TemplateRef` token.\r\n *\r\n * You can also use a `Query` to find a `TemplateRef` associated with\r\n * a component or a directive.\r\n *\r\n * @see {@link ViewContainerRef}\r\n *\r\n * @publicApi\r\n */\r\nclass TemplateRef {\r\n    _declarationLView;\r\n    _declarationTContainer;\r\n    /**\r\n     * The anchor element in the parent view for this embedded view.\r\n     *\r\n     * The data-binding and [injection contexts](guide/di/dependency-injection-context) of embedded\r\n     * views created from this `TemplateRef` inherit from the contexts of this location.\r\n     *\r\n     * Typically new embedded views are attached to the view container of this location, but in\r\n     * advanced use-cases, the view can be attached to a different container while keeping the\r\n     * data-binding and injection context from the original location.\r\n     *\r\n     */\r\n    elementRef;\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = injectTemplateRef;\r\n    /** @internal */\r\n    constructor(_declarationLView, _declarationTContainer, elementRef) {\r\n        this._declarationLView = _declarationLView;\r\n        this._declarationTContainer = _declarationTContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n    /**\r\n     * Returns an `ssrId` associated with a TView, which was used to\r\n     * create this instance of the `TemplateRef`.\r\n     *\r\n     * @internal\r\n     */\r\n    get ssrId() {\r\n        return this._declarationTContainer.tView?.ssrId || null;\r\n    }\r\n    /**\r\n     * Instantiates an unattached embedded view based on this template.\r\n     * @param context The data-binding context of the embedded view, as declared\r\n     * in the `<ng-template>` usage.\r\n     * @param injector Injector to be used within the embedded view.\r\n     * @returns The new embedded view object.\r\n     */\r\n    createEmbeddedView(context, injector) {\r\n        return this.createEmbeddedViewImpl(context, injector);\r\n    }\r\n    /**\r\n     * Implementation of the `createEmbeddedView` function.\r\n     *\r\n     * This implementation is internal and allows framework code\r\n     * to invoke it with extra parameters (e.g. for hydration) without\r\n     * affecting public API.\r\n     *\r\n     * @internal\r\n     */\r\n    createEmbeddedViewImpl(context, injector, dehydratedView) {\r\n        const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context, { embeddedViewInjector: injector, dehydratedView });\r\n        return new ViewRef(embeddedLView);\r\n    }\r\n}\r\n/**\r\n * Creates a TemplateRef given a node.\r\n *\r\n * @returns The TemplateRef instance to use\r\n */\r\nfunction injectTemplateRef() {\r\n    return createTemplateRef(getCurrentTNode(), getLView());\r\n}\r\n/**\r\n * Creates a TemplateRef and stores it on the injector.\r\n *\r\n * @param hostTNode The node on which a TemplateRef is requested\r\n * @param hostLView The `LView` to which the node belongs\r\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\r\n */\r\nfunction createTemplateRef(hostTNode, hostLView) {\r\n    if (hostTNode.type & 4 /* TNodeType.Container */) {\r\n        ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\r\n        return new TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\r\n    }\r\n    return null;\r\n}\r\n\r\nconst AT_THIS_LOCATION = '<-- AT THIS LOCATION';\r\n/**\r\n * Retrieves a user friendly string for a given TNodeType for use in\r\n * friendly error messages\r\n *\r\n * @param tNodeType\r\n * @returns\r\n */\r\nfunction getFriendlyStringFromTNodeType(tNodeType) {\r\n    switch (tNodeType) {\r\n        case 4 /* TNodeType.Container */:\r\n            return 'view container';\r\n        case 2 /* TNodeType.Element */:\r\n            return 'element';\r\n        case 8 /* TNodeType.ElementContainer */:\r\n            return 'ng-container';\r\n        case 32 /* TNodeType.Icu */:\r\n            return 'icu';\r\n        case 64 /* TNodeType.Placeholder */:\r\n            return 'i18n';\r\n        case 16 /* TNodeType.Projection */:\r\n            return 'projection';\r\n        case 1 /* TNodeType.Text */:\r\n            return 'text';\r\n        case 128 /* TNodeType.LetDeclaration */:\r\n            return '@let';\r\n        default:\r\n            // This should not happen as we cover all possible TNode types above.\r\n            return '<unknown>';\r\n    }\r\n}\r\n/**\r\n * Validates that provided nodes match during the hydration process.\r\n */\r\nfunction validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {\r\n    if (!node ||\r\n        node.nodeType !== nodeType ||\r\n        (node.nodeType === Node.ELEMENT_NODE &&\r\n            node.tagName.toLowerCase() !== tagName?.toLowerCase())) {\r\n        const expectedNode = shortRNodeDescription(nodeType, tagName, null);\r\n        let header = `During hydration Angular expected ${expectedNode} but `;\r\n        const hostComponentDef = getDeclarationComponentDef(lView);\r\n        const componentClassName = hostComponentDef?.type?.name;\r\n        const expectedDom = describeExpectedDom(lView, tNode, isViewContainerAnchor);\r\n        const expected = `Angular expected this DOM:\\n\\n${expectedDom}\\n\\n`;\r\n        let actual = '';\r\n        const componentHostElement = unwrapRNode(lView[HOST]);\r\n        if (!node) {\r\n            // No node found during hydration.\r\n            header += `the node was not found.\\n\\n`;\r\n            // Since the node is missing, we use the closest node to attach the error to\r\n            markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom);\r\n        }\r\n        else {\r\n            const actualNode = shortRNodeDescription(node.nodeType, node.tagName ?? null, node.textContent ?? null);\r\n            header += `found ${actualNode}.\\n\\n`;\r\n            const actualDom = describeDomFromNode(node);\r\n            actual = `Actual DOM is:\\n\\n${actualDom}\\n\\n`;\r\n            // DevTools only report hydration issues on the component level, so we attach extra debug\r\n            // info to a component host element to make it available to DevTools.\r\n            markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom, actualDom);\r\n        }\r\n        const footer = getHydrationErrorFooter(componentClassName);\r\n        const message = header + expected + actual + getHydrationAttributeNote() + footer;\r\n        throw new RuntimeError(-500 /* RuntimeErrorCode.HYDRATION_NODE_MISMATCH */, message);\r\n    }\r\n}\r\n/**\r\n * Validates that a given node has sibling nodes\r\n */\r\nfunction validateSiblingNodeExists(node) {\r\n    validateNodeExists(node);\r\n    if (!node.nextSibling) {\r\n        const header = 'During hydration Angular expected more sibling nodes to be present.\\n\\n';\r\n        const actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\r\n        const footer = getHydrationErrorFooter();\r\n        const message = header + actual + footer;\r\n        markRNodeAsHavingHydrationMismatch(node, '', actual);\r\n        throw new RuntimeError(-501 /* RuntimeErrorCode.HYDRATION_MISSING_SIBLINGS */, message);\r\n    }\r\n}\r\n/**\r\n * Validates that a node exists or throws\r\n */\r\nfunction validateNodeExists(node, lView = null, tNode = null) {\r\n    if (!node) {\r\n        const header = 'During hydration, Angular expected an element to be present at this location.\\n\\n';\r\n        let expected = '';\r\n        let footer = '';\r\n        if (lView !== null && tNode !== null) {\r\n            expected = describeExpectedDom(lView, tNode, false);\r\n            footer = getHydrationErrorFooter();\r\n            // Since the node is missing, we use the closest node to attach the error to\r\n            markRNodeAsHavingHydrationMismatch(unwrapRNode(lView[HOST]), expected, '');\r\n        }\r\n        throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, `${header}${expected}\\n\\n${footer}`);\r\n    }\r\n}\r\n/**\r\n * Builds the hydration error message when a node is not found\r\n *\r\n * @param lView the LView where the node exists\r\n * @param tNode the TNode\r\n */\r\nfunction nodeNotFoundError(lView, tNode) {\r\n    const header = 'During serialization, Angular was unable to find an element in the DOM:\\n\\n';\r\n    const expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\r\n    const footer = getHydrationErrorFooter();\r\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\r\n}\r\n/**\r\n * Builds a hydration error message when a node is not found at a path location\r\n *\r\n * @param host the Host Node\r\n * @param path the path to the node\r\n */\r\nfunction nodeNotFoundAtPathError(host, path) {\r\n    const header = `During hydration Angular was unable to locate a node ` +\r\n        `using the \"${path}\" path, starting from the ${describeRNode(host)} node.\\n\\n`;\r\n    const footer = getHydrationErrorFooter();\r\n    markRNodeAsHavingHydrationMismatch(host);\r\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + footer);\r\n}\r\n/**\r\n * Builds the hydration error message in the case that dom nodes are created outside of\r\n * the Angular context and are being used as projected nodes\r\n *\r\n * @param lView the LView\r\n * @param tNode the TNode\r\n * @returns an error\r\n */\r\nfunction unsupportedProjectionOfDomNodes(rNode) {\r\n    const header = 'During serialization, Angular detected DOM nodes ' +\r\n        'that were created outside of Angular context and provided as projectable nodes ' +\r\n        '(likely via `ViewContainerRef.createComponent` or `createComponent` APIs). ' +\r\n        'Hydration is not supported for such cases, consider refactoring the code to avoid ' +\r\n        'this pattern or using `ngSkipHydration` on the host element of the component.\\n\\n';\r\n    const actual = `${describeDomFromNode(rNode)}\\n\\n`;\r\n    const message = header + actual + getHydrationAttributeNote();\r\n    return new RuntimeError(-503 /* RuntimeErrorCode.UNSUPPORTED_PROJECTION_DOM_NODES */, message);\r\n}\r\n/**\r\n * Builds the hydration error message in the case that ngSkipHydration was used on a\r\n * node that is not a component host element or host binding\r\n *\r\n * @param rNode the HTML Element\r\n * @returns an error\r\n */\r\nfunction invalidSkipHydrationHost(rNode) {\r\n    const header = 'The `ngSkipHydration` flag is applied on a node ' +\r\n        \"that doesn't act as a component host. Hydration can be \" +\r\n        'skipped only on per-component basis.\\n\\n';\r\n    const actual = `${describeDomFromNode(rNode)}\\n\\n`;\r\n    const footer = 'Please move the `ngSkipHydration` attribute to the component host element.\\n\\n';\r\n    const message = header + actual + footer;\r\n    return new RuntimeError(-504 /* RuntimeErrorCode.INVALID_SKIP_HYDRATION_HOST */, message);\r\n}\r\n// Stringification methods\r\n/**\r\n * Stringifies a given TNode's attributes\r\n *\r\n * @param tNode a provided TNode\r\n * @returns string\r\n */\r\nfunction stringifyTNodeAttrs(tNode) {\r\n    const results = [];\r\n    if (tNode.attrs) {\r\n        for (let i = 0; i < tNode.attrs.length;) {\r\n            const attrName = tNode.attrs[i++];\r\n            // Once we reach the first flag, we know that the list of\r\n            // attributes is over.\r\n            if (typeof attrName == 'number') {\r\n                break;\r\n            }\r\n            const attrValue = tNode.attrs[i++];\r\n            results.push(`${attrName}=\"${shorten(attrValue)}\"`);\r\n        }\r\n    }\r\n    return results.join(' ');\r\n}\r\n/**\r\n * The list of internal attributes that should be filtered out while\r\n * producing an error message.\r\n */\r\nconst internalAttrs = new Set(['ngh', 'ng-version', 'ng-server-context']);\r\n/**\r\n * Stringifies an HTML Element's attributes\r\n *\r\n * @param rNode an HTML Element\r\n * @returns string\r\n */\r\nfunction stringifyRNodeAttrs(rNode) {\r\n    const results = [];\r\n    for (let i = 0; i < rNode.attributes.length; i++) {\r\n        const attr = rNode.attributes[i];\r\n        if (internalAttrs.has(attr.name))\r\n            continue;\r\n        results.push(`${attr.name}=\"${shorten(attr.value)}\"`);\r\n    }\r\n    return results.join(' ');\r\n}\r\n// Methods for Describing the DOM\r\n/**\r\n * Converts a tNode to a helpful readable string value for use in error messages\r\n *\r\n * @param tNode a given TNode\r\n * @param innerContent the content of the node\r\n * @returns string\r\n */\r\nfunction describeTNode(tNode, innerContent = '…') {\r\n    switch (tNode.type) {\r\n        case 1 /* TNodeType.Text */:\r\n            const content = tNode.value ? `(${tNode.value})` : '';\r\n            return `#text${content}`;\r\n        case 2 /* TNodeType.Element */:\r\n            const attrs = stringifyTNodeAttrs(tNode);\r\n            const tag = tNode.value.toLowerCase();\r\n            return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\r\n        case 8 /* TNodeType.ElementContainer */:\r\n            return '<!-- ng-container -->';\r\n        case 4 /* TNodeType.Container */:\r\n            return '<!-- container -->';\r\n        default:\r\n            const typeAsString = getFriendlyStringFromTNodeType(tNode.type);\r\n            return `#node(${typeAsString})`;\r\n    }\r\n}\r\n/**\r\n * Converts an RNode to a helpful readable string value for use in error messages\r\n *\r\n * @param rNode a given RNode\r\n * @param innerContent the content of the node\r\n * @returns string\r\n */\r\nfunction describeRNode(rNode, innerContent = '…') {\r\n    const node = rNode;\r\n    switch (node.nodeType) {\r\n        case Node.ELEMENT_NODE:\r\n            const tag = node.tagName.toLowerCase();\r\n            const attrs = stringifyRNodeAttrs(node);\r\n            return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\r\n        case Node.TEXT_NODE:\r\n            const content = node.textContent ? shorten(node.textContent) : '';\r\n            return `#text${content ? `(${content})` : ''}`;\r\n        case Node.COMMENT_NODE:\r\n            return `<!-- ${shorten(node.textContent ?? '')} -->`;\r\n        default:\r\n            return `#node(${node.nodeType})`;\r\n    }\r\n}\r\n/**\r\n * Builds the string containing the expected DOM present given the LView and TNode\r\n * values for a readable error message\r\n *\r\n * @param lView the lView containing the DOM\r\n * @param tNode the tNode\r\n * @param isViewContainerAnchor boolean\r\n * @returns string\r\n */\r\nfunction describeExpectedDom(lView, tNode, isViewContainerAnchor) {\r\n    const spacer = '  ';\r\n    let content = '';\r\n    if (tNode.prev) {\r\n        content += spacer + '…\\n';\r\n        content += spacer + describeTNode(tNode.prev) + '\\n';\r\n    }\r\n    else if (tNode.type && tNode.type & 12 /* TNodeType.AnyContainer */) {\r\n        content += spacer + '…\\n';\r\n    }\r\n    if (isViewContainerAnchor) {\r\n        content += spacer + describeTNode(tNode) + '\\n';\r\n        content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}\\n`;\r\n    }\r\n    else {\r\n        content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}\\n`;\r\n    }\r\n    content += spacer + '…\\n';\r\n    const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;\r\n    if (parentRNode) {\r\n        content = describeRNode(parentRNode, '\\n' + content);\r\n    }\r\n    return content;\r\n}\r\n/**\r\n * Builds the string containing the DOM present around a given RNode for a\r\n * readable error message\r\n *\r\n * @param node the RNode\r\n * @returns string\r\n */\r\nfunction describeDomFromNode(node) {\r\n    const spacer = '  ';\r\n    let content = '';\r\n    const currentNode = node;\r\n    if (currentNode.previousSibling) {\r\n        content += spacer + '…\\n';\r\n        content += spacer + describeRNode(currentNode.previousSibling) + '\\n';\r\n    }\r\n    content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}\\n`;\r\n    if (node.nextSibling) {\r\n        content += spacer + '…\\n';\r\n    }\r\n    if (node.parentNode) {\r\n        content = describeRNode(currentNode.parentNode, '\\n' + content);\r\n    }\r\n    return content;\r\n}\r\n/**\r\n * Shortens the description of a given RNode by its type for readability\r\n *\r\n * @param nodeType the type of node\r\n * @param tagName the node tag name\r\n * @param textContent the text content in the node\r\n * @returns string\r\n */\r\nfunction shortRNodeDescription(nodeType, tagName, textContent) {\r\n    switch (nodeType) {\r\n        case Node.ELEMENT_NODE:\r\n            return `<${tagName.toLowerCase()}>`;\r\n        case Node.TEXT_NODE:\r\n            const content = textContent ? ` (with the \"${shorten(textContent)}\" content)` : '';\r\n            return `a text node${content}`;\r\n        case Node.COMMENT_NODE:\r\n            return 'a comment node';\r\n        default:\r\n            return `#node(nodeType=${nodeType})`;\r\n    }\r\n}\r\n/**\r\n * Builds the footer hydration error message\r\n *\r\n * @param componentClassName the name of the component class\r\n * @returns string\r\n */\r\nfunction getHydrationErrorFooter(componentClassName) {\r\n    const componentInfo = componentClassName ? `the \"${componentClassName}\"` : 'corresponding';\r\n    return (`To fix this problem:\\n` +\r\n        `  * check ${componentInfo} component for hydration-related issues\\n` +\r\n        `  * check to see if your template has valid HTML structure\\n` +\r\n        `  * or skip hydration by adding the \\`ngSkipHydration\\` attribute ` +\r\n        `to its host node in a template\\n\\n`);\r\n}\r\n/**\r\n * An attribute related note for hydration errors\r\n */\r\nfunction getHydrationAttributeNote() {\r\n    return ('Note: attributes are only displayed to better represent the DOM' +\r\n        ' but have no effect on hydration mismatches.\\n\\n');\r\n}\r\n// Node string utility functions\r\n/**\r\n * Strips all newlines out of a given string\r\n *\r\n * @param input a string to be cleared of new line characters\r\n * @returns\r\n */\r\nfunction stripNewlines(input) {\r\n    return input.replace(/\\s+/gm, '');\r\n}\r\n/**\r\n * Reduces a string down to a maximum length of characters with ellipsis for readability\r\n *\r\n * @param input a string input\r\n * @param maxLength a maximum length in characters\r\n * @returns string\r\n */\r\nfunction shorten(input, maxLength = 50) {\r\n    if (!input) {\r\n        return '';\r\n    }\r\n    input = stripNewlines(input);\r\n    return input.length > maxLength ? `${input.substring(0, maxLength - 1)}…` : input;\r\n}\r\n\r\n/**\r\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\r\n *\r\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\r\n * takes `TNode.insertBeforeIndex` into account.\r\n *\r\n * @param parentTNode parent `TNode`\r\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\r\n * @param lView current `LView`\r\n */\r\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\r\n    const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\r\n    const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex)\r\n        ? tNodeInsertBeforeIndex[0]\r\n        : tNodeInsertBeforeIndex;\r\n    if (insertBeforeIndex === null) {\r\n        return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\r\n    }\r\n    else {\r\n        ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\r\n        return unwrapRNode(lView[insertBeforeIndex]);\r\n    }\r\n}\r\n/**\r\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\r\n *\r\n * See `TNode.insertBeforeIndex`\r\n */\r\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\r\n    const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\r\n    if (Array.isArray(tNodeInsertBeforeIndex)) {\r\n        // An array indicates that there are i18n nodes that need to be added as children of this\r\n        // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\r\n        // only now can be added. The first element of the array is the normal index where we should\r\n        // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\r\n        // `childRNode`.\r\n        ngDevMode && assertDomNode(childRNode);\r\n        let i18nParent = childRNode;\r\n        let anchorRNode = null;\r\n        if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\r\n            anchorRNode = i18nParent;\r\n            i18nParent = parentRElement;\r\n        }\r\n        if (i18nParent !== null && childTNode.componentOffset === -1) {\r\n            for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\r\n                // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\r\n                // see `assertDomNode` below.\r\n                const i18nChild = lView[tNodeInsertBeforeIndex[i]];\r\n                nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\r\n    ngDevMode &&\r\n        index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\r\n        // `view_engine_compatibility` for additional context.\r\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\r\n    // Keep this function short, so that the VM will inline it.\r\n    ngDevMode && assertPureTNodeType(type);\r\n    let tNode = tView.data[index];\r\n    if (tNode === null) {\r\n        tNode = createTNodeAtIndex(tView, index, type, name, attrs);\r\n        if (isInI18nBlock()) {\r\n            // If we are in i18n block then all elements should be pre declared through `Placeholder`\r\n            // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\r\n            // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\r\n            // removed, so we mark it as detached.\r\n            tNode.flags |= 32 /* TNodeFlags.isDetached */;\r\n        }\r\n    }\r\n    else if (tNode.type & 64 /* TNodeType.Placeholder */) {\r\n        tNode.type = type;\r\n        tNode.value = name;\r\n        tNode.attrs = attrs;\r\n        const parent = getCurrentParentTNode();\r\n        tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\r\n        ngDevMode && assertTNodeForTView(tNode, tView);\r\n        ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\r\n    }\r\n    setCurrentTNode(tNode, true);\r\n    return tNode;\r\n}\r\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\r\n    const currentTNode = getCurrentTNodePlaceholderOk();\r\n    const isParent = isCurrentTNodeParent();\r\n    const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\r\n    // Parents cannot cross component boundaries because components will be used in multiple places.\r\n    const tNode = (tView.data[index] = createTNode(tView, parent, type, index, name, attrs));\r\n    // Assign a pointer to the first child node of a given view. The first node is not always the one\r\n    // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\r\n    // the index 1 or more, so we can't just check node index.\r\n    linkTNodeInTView(tView, tNode, currentTNode, isParent);\r\n    return tNode;\r\n}\r\nfunction linkTNodeInTView(tView, tNode, currentTNode, isParent) {\r\n    if (tView.firstChild === null) {\r\n        tView.firstChild = tNode;\r\n    }\r\n    if (currentTNode !== null) {\r\n        if (isParent) {\r\n            // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\r\n            if (currentTNode.child == null && tNode.parent !== null) {\r\n                // We are in the same view, which means we are adding content node to the parent view.\r\n                currentTNode.child = tNode;\r\n            }\r\n        }\r\n        else {\r\n            if (currentTNode.next === null) {\r\n                // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\r\n                // to break the links which i18n created.\r\n                currentTNode.next = tNode;\r\n                tNode.prev = currentTNode;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction createTNode(tView, tParent, type, index, value, attrs) {\r\n    ngDevMode &&\r\n        index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\r\n        // `view_engine_compatibility` for additional context.\r\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\r\n    ngDevMode && assertNotSame(attrs, undefined, \"'undefined' is not valid value for 'attrs'\");\r\n    ngDevMode && tParent && assertTNodeForTView(tParent, tView);\r\n    let injectorIndex = tParent ? tParent.injectorIndex : -1;\r\n    let flags = 0;\r\n    if (isInSkipHydrationBlock$1()) {\r\n        flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\r\n    }\r\n    // TODO: would it be helpful to use a prototypal inheritance here, similar to the way we do so with signals?\r\n    const tNode = {\r\n        type,\r\n        index,\r\n        insertBeforeIndex: null,\r\n        injectorIndex,\r\n        directiveStart: -1,\r\n        directiveEnd: -1,\r\n        directiveStylingLast: -1,\r\n        componentOffset: -1,\r\n        propertyBindings: null,\r\n        flags,\r\n        providerIndexes: 0,\r\n        value: value,\r\n        attrs: attrs,\r\n        mergedAttrs: null,\r\n        localNames: null,\r\n        initialInputs: null,\r\n        inputs: null,\r\n        hostDirectiveInputs: null,\r\n        outputs: null,\r\n        hostDirectiveOutputs: null,\r\n        directiveToIndex: null,\r\n        tView: null,\r\n        next: null,\r\n        prev: null,\r\n        projectionNext: null,\r\n        child: null,\r\n        parent: tParent,\r\n        projection: null,\r\n        styles: null,\r\n        stylesWithoutHost: null,\r\n        residualStyles: undefined,\r\n        classes: null,\r\n        classesWithoutHost: null,\r\n        residualClasses: undefined,\r\n        classBindings: 0,\r\n        styleBindings: 0,\r\n    };\r\n    if (ngDevMode) {\r\n        // For performance reasons it is important that the tNode retains the same shape during runtime.\r\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\r\n        // prevent class transitions.\r\n        Object.seal(tNode);\r\n    }\r\n    return tNode;\r\n}\r\n\r\n/**\r\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\r\n * `tNode.insertBeforeIndex`.\r\n *\r\n * Things to keep in mind:\r\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\r\n *    `ɵɵi18nStart` instruction.\r\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\r\n *    `ɵɵelementStart` instruction.\r\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\r\n *    smaller index `TNode` is guaranteed to be created before a larger one)\r\n *\r\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\r\n *\r\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\r\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\r\n * the next node is not yet created and therefore we can't insert in front of it.\r\n *\r\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\r\n *        know if there will be further `TNode`s inserted after.)\r\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\r\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\r\n *        previous to see if we can update its `insertBeforeTNode`)\r\n *\r\n * See `TNode.insertBeforeIndex` for more context.\r\n *\r\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\r\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\r\n * @param newTNode A TNode to add to the `previousTNodes` list.\r\n */\r\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\r\n    // Start with Rule1\r\n    ngDevMode &&\r\n        assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\r\n    previousTNodes.push(newTNode);\r\n    if (previousTNodes.length > 1) {\r\n        for (let i = previousTNodes.length - 2; i >= 0; i--) {\r\n            const existingTNode = previousTNodes[i];\r\n            // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\r\n            // It is safe to ignore them.\r\n            if (!isI18nText(existingTNode)) {\r\n                if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&\r\n                    getInsertBeforeIndex(existingTNode) === null) {\r\n                    // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\r\n                    // then add the `insertBeforeIndex`.\r\n                    setInsertBeforeIndex(existingTNode, newTNode.index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isI18nText(tNode) {\r\n    return !(tNode.type & 64 /* TNodeType.Placeholder */);\r\n}\r\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\r\n    return isI18nText(newTNode) || existingTNode.index > newTNode.index;\r\n}\r\nfunction getInsertBeforeIndex(tNode) {\r\n    const index = tNode.insertBeforeIndex;\r\n    return Array.isArray(index) ? index[0] : index;\r\n}\r\nfunction setInsertBeforeIndex(tNode, value) {\r\n    const index = tNode.insertBeforeIndex;\r\n    if (Array.isArray(index)) {\r\n        // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\r\n        index[0] = value;\r\n    }\r\n    else {\r\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\r\n        tNode.insertBeforeIndex = value;\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieve `TIcu` at a given `index`.\r\n *\r\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\r\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\r\n *\r\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\r\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\r\n * expressed (parent ICU may have selected a case which does not contain it.)\r\n *\r\n * @param tView Current `TView`.\r\n * @param index Index where the value should be read from.\r\n */\r\nfunction getTIcu(tView, index) {\r\n    const value = tView.data[index];\r\n    if (value === null || typeof value === 'string')\r\n        return null;\r\n    if (ngDevMode &&\r\n        !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\r\n        throwError(\"We expect to get 'null'|'TIcu'|'TIcuContainer', but got: \" + value);\r\n    }\r\n    // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\r\n    // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\r\n    // will be just two cases which fits into the browser inline cache (inline cache can take up to\r\n    // 4)\r\n    const tIcu = value.hasOwnProperty('currentCaseLViewIndex')\r\n        ? value\r\n        : value.value;\r\n    ngDevMode && assertTIcu(tIcu);\r\n    return tIcu;\r\n}\r\n/**\r\n * Store `TIcu` at a give `index`.\r\n *\r\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\r\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\r\n *\r\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\r\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\r\n * expressed (parent ICU may have selected a case which does not contain it.)\r\n *\r\n * @param tView Current `TView`.\r\n * @param index Index where the value should be stored at in `Tview.data`\r\n * @param tIcu The TIcu to store.\r\n */\r\nfunction setTIcu(tView, index, tIcu) {\r\n    const tNode = tView.data[index];\r\n    ngDevMode &&\r\n        assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, \"We expect to get 'null'|'TIcuContainer'\");\r\n    if (tNode === null) {\r\n        tView.data[index] = tIcu;\r\n    }\r\n    else {\r\n        ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\r\n        tNode.value = tIcu;\r\n    }\r\n}\r\n/**\r\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\r\n *\r\n * See `TNode.insertBeforeIndex`\r\n */\r\nfunction setTNodeInsertBeforeIndex(tNode, index) {\r\n    ngDevMode && assertTNode(tNode);\r\n    let insertBeforeIndex = tNode.insertBeforeIndex;\r\n    if (insertBeforeIndex === null) {\r\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\r\n        insertBeforeIndex = tNode.insertBeforeIndex = [\r\n            null /* may be updated to number later */,\r\n            index,\r\n        ];\r\n    }\r\n    else {\r\n        assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\r\n        insertBeforeIndex.push(index);\r\n    }\r\n}\r\n/**\r\n * Create `TNode.type=TNodeType.Placeholder` node.\r\n *\r\n * See `TNodeType.Placeholder` for more information.\r\n */\r\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\r\n    const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\r\n    addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\r\n    return tNode;\r\n}\r\n/**\r\n * Returns current ICU case.\r\n *\r\n * ICU cases are stored as index into the `TIcu.cases`.\r\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\r\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\r\n * for cases which have just been switched. This function removes the negative flag.\r\n */\r\nfunction getCurrentICUCaseIndex(tIcu, lView) {\r\n    const currentCase = lView[tIcu.currentCaseLViewIndex];\r\n    return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\r\n}\r\nfunction getParentFromIcuCreateOpCode(mergedCode) {\r\n    return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\r\n}\r\nfunction getRefFromIcuCreateOpCode(mergedCode) {\r\n    return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\r\n}\r\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\r\n    return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\r\n}\r\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\r\n    ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\r\n    ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\r\n    return (opCode | (parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */) | (refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */));\r\n}\r\n// Returns whether the given value corresponds to a root template message,\r\n// or a sub-template.\r\nfunction isRootTemplateMessage(subTemplateIndex) {\r\n    return subTemplateIndex === -1;\r\n}\r\n\r\nfunction enterIcu(state, tIcu, lView) {\r\n    state.index = 0;\r\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\r\n    if (currentCase !== null) {\r\n        ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\r\n        state.removes = tIcu.remove[currentCase];\r\n    }\r\n    else {\r\n        state.removes = EMPTY_ARRAY;\r\n    }\r\n}\r\nfunction icuContainerIteratorNext(state) {\r\n    if (state.index < state.removes.length) {\r\n        const removeOpCode = state.removes[state.index++];\r\n        ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\r\n        if (removeOpCode > 0) {\r\n            const rNode = state.lView[removeOpCode];\r\n            ngDevMode && assertDomNode(rNode);\r\n            return rNode;\r\n        }\r\n        else {\r\n            state.stack.push(state.index, state.removes);\r\n            // ICUs are represented by negative indices\r\n            const tIcuIndex = ~removeOpCode;\r\n            const tIcu = state.lView[TVIEW].data[tIcuIndex];\r\n            ngDevMode && assertTIcu(tIcu);\r\n            enterIcu(state, tIcu, state.lView);\r\n            return icuContainerIteratorNext(state);\r\n        }\r\n    }\r\n    else {\r\n        if (state.stack.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            state.removes = state.stack.pop();\r\n            state.index = state.stack.pop();\r\n            return icuContainerIteratorNext(state);\r\n        }\r\n    }\r\n}\r\nfunction loadIcuContainerVisitor() {\r\n    const _state = {\r\n        stack: [],\r\n        index: -1,\r\n    };\r\n    /**\r\n     * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\r\n     * to determine which root belong to the ICU.\r\n     *\r\n     * Example of usage.\r\n     * ```ts\r\n     * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\r\n     * let rNode: RNode|null;\r\n     * while(rNode = nextRNode()) {\r\n     *   console.log(rNode);\r\n     * }\r\n     * ```\r\n     *\r\n     * @param tIcuContainerNode Current `TIcuContainerNode`\r\n     * @param lView `LView` where the `RNode`s should be looked up.\r\n     */\r\n    function icuContainerIteratorStart(tIcuContainerNode, lView) {\r\n        _state.lView = lView;\r\n        while (_state.stack.length)\r\n            _state.stack.pop();\r\n        ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\r\n        enterIcu(_state, tIcuContainerNode.value, lView);\r\n        return icuContainerIteratorNext.bind(null, _state);\r\n    }\r\n    return icuContainerIteratorStart;\r\n}\r\nfunction createIcuIterator(tIcu, lView) {\r\n    const state = {\r\n        stack: [],\r\n        index: -1,\r\n        lView,\r\n    };\r\n    ngDevMode && assertTIcu(tIcu);\r\n    enterIcu(state, tIcu, lView);\r\n    return icuContainerIteratorNext.bind(null, state);\r\n}\r\n\r\n/**\r\n * Regexp that extracts a reference node information from the compressed node location.\r\n * The reference node is represented as either:\r\n *  - a number which points to an LView slot\r\n *  - the `b` char which indicates that the lookup should start from the `document.body`\r\n *  - the `h` char to start lookup from the component host node (`lView[HOST]`)\r\n */\r\nconst REF_EXTRACTOR_REGEXP = /* @__PURE__ */ new RegExp(`^(\\\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);\r\n/**\r\n * Helper function that takes a reference node location and a set of navigation steps\r\n * (from the reference node) to a target node and outputs a string that represents\r\n * a location.\r\n *\r\n * For example, given: referenceNode = 'b' (body) and path = ['firstChild', 'firstChild',\r\n * 'nextSibling'], the function returns: `bf2n`.\r\n */\r\nfunction compressNodeLocation(referenceNode, path) {\r\n    const result = [referenceNode];\r\n    for (const segment of path) {\r\n        const lastIdx = result.length - 1;\r\n        if (lastIdx > 0 && result[lastIdx - 1] === segment) {\r\n            // An empty string in a count slot represents 1 occurrence of an instruction.\r\n            const value = (result[lastIdx] || 1);\r\n            result[lastIdx] = value + 1;\r\n        }\r\n        else {\r\n            // Adding a new segment to the path.\r\n            // Using an empty string in a counter field to avoid encoding `1`s\r\n            // into the path, since they are implicit (e.g. `f1n1` vs `fn`), so\r\n            // it's enough to have a single char in this case.\r\n            result.push(segment, '');\r\n        }\r\n    }\r\n    return result.join('');\r\n}\r\n/**\r\n * Helper function that reverts the `compressNodeLocation` and transforms a given\r\n * string into an array where at 0th position there is a reference node info and\r\n * after that it contains information (in pairs) about a navigation step and the\r\n * number of repetitions.\r\n *\r\n * For example, the path like 'bf2n' will be transformed to:\r\n * ['b', 'firstChild', 2, 'nextSibling', 1].\r\n *\r\n * This information is later consumed by the code that navigates the DOM to find\r\n * a given node by its location.\r\n */\r\nfunction decompressNodeLocation(path) {\r\n    const matches = path.match(REF_EXTRACTOR_REGEXP);\r\n    const [_, refNodeId, refNodeName, rest] = matches;\r\n    // If a reference node is represented by an index, transform it to a number.\r\n    const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;\r\n    const steps = [];\r\n    // Match all segments in a path.\r\n    for (const [_, step, count] of rest.matchAll(/(f|n)(\\d*)/g)) {\r\n        const repeat = parseInt(count, 10) || 1;\r\n        steps.push(step, repeat);\r\n    }\r\n    return [ref, ...steps];\r\n}\r\n\r\n/** Whether current TNode is a first node in an <ng-container>. */\r\nfunction isFirstElementInNgContainer(tNode) {\r\n    return !tNode.prev && tNode.parent?.type === 8 /* TNodeType.ElementContainer */;\r\n}\r\n/** Returns an instruction index (subtracting HEADER_OFFSET). */\r\nfunction getNoOffsetIndex(tNode) {\r\n    return tNode.index - HEADER_OFFSET;\r\n}\r\n/**\r\n * Check whether a given node exists, but is disconnected from the DOM.\r\n */\r\nfunction isDisconnectedNode(tNode, lView) {\r\n    return (!(tNode.type & (16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */)) &&\r\n        !!lView[tNode.index] &&\r\n        isDisconnectedRNode(unwrapRNode(lView[tNode.index])));\r\n}\r\n/**\r\n * Check whether the given node exists, but is disconnected from the DOM.\r\n *\r\n * Note: we leverage the fact that we have this information available in the DOM emulation\r\n * layer (in Domino) for now. Longer-term solution should not rely on the DOM emulation and\r\n * only use internal data structures and state to compute this information.\r\n */\r\nfunction isDisconnectedRNode(rNode) {\r\n    return !!rNode && !rNode.isConnected;\r\n}\r\n/**\r\n * Locate a node in an i18n tree that corresponds to a given instruction index.\r\n *\r\n * @param hydrationInfo The hydration annotation data\r\n * @param noOffsetIndex the instruction index\r\n * @returns an RNode that corresponds to the instruction index\r\n */\r\nfunction locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex) {\r\n    const i18nNodes = hydrationInfo.i18nNodes;\r\n    if (i18nNodes) {\r\n        return i18nNodes.get(noOffsetIndex);\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Attempt to locate an RNode by a path, if it exists.\r\n *\r\n * @param hydrationInfo The hydration annotation data\r\n * @param lView the current lView\r\n * @param noOffsetIndex the instruction index\r\n * @returns an RNode that corresponds to the instruction index or null if no path exists\r\n */\r\nfunction tryLocateRNodeByPath(hydrationInfo, lView, noOffsetIndex) {\r\n    const nodes = hydrationInfo.data[NODES];\r\n    const path = nodes?.[noOffsetIndex];\r\n    return path ? locateRNodeByPath(path, lView) : null;\r\n}\r\n/**\r\n * Locate a node in DOM tree that corresponds to a given TNode.\r\n *\r\n * @param hydrationInfo The hydration annotation data\r\n * @param tView the current tView\r\n * @param lView the current lView\r\n * @param tNode the current tNode\r\n * @returns an RNode that represents a given tNode\r\n */\r\nfunction locateNextRNode(hydrationInfo, tView, lView, tNode) {\r\n    const noOffsetIndex = getNoOffsetIndex(tNode);\r\n    let native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);\r\n    if (native === undefined) {\r\n        const nodes = hydrationInfo.data[NODES];\r\n        if (nodes?.[noOffsetIndex]) {\r\n            // We know the exact location of the node.\r\n            native = locateRNodeByPath(nodes[noOffsetIndex], lView);\r\n        }\r\n        else if (tView.firstChild === tNode) {\r\n            // We create a first node in this view, so we use a reference\r\n            // to the first child in this DOM segment.\r\n            native = hydrationInfo.firstChild;\r\n        }\r\n        else {\r\n            // Locate a node based on a previous sibling or a parent node.\r\n            const previousTNodeParent = tNode.prev === null;\r\n            const previousTNode = (tNode.prev ?? tNode.parent);\r\n            ngDevMode &&\r\n                assertDefined(previousTNode, 'Unexpected state: current TNode does not have a connection ' +\r\n                    'to the previous node or a parent node.');\r\n            if (isFirstElementInNgContainer(tNode)) {\r\n                const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);\r\n                native = getSegmentHead(hydrationInfo, noOffsetParentIndex);\r\n            }\r\n            else {\r\n                let previousRElement = getNativeByTNode(previousTNode, lView);\r\n                if (previousTNodeParent) {\r\n                    native = previousRElement.firstChild;\r\n                }\r\n                else {\r\n                    // If the previous node is an element, but it also has container info,\r\n                    // this means that we are processing a node like `<div #vcrTarget>`, which is\r\n                    // represented in the DOM as `<div></div>...<!--container-->`.\r\n                    // In this case, there are nodes *after* this element and we need to skip\r\n                    // all of them to reach an element that we are looking for.\r\n                    const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);\r\n                    const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);\r\n                    if (previousTNode.type === 2 /* TNodeType.Element */ && segmentHead) {\r\n                        const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);\r\n                        // `+1` stands for an anchor comment node after all the views in this container.\r\n                        const nodesToSkip = numRootNodesToSkip + 1;\r\n                        // First node after this segment.\r\n                        native = siblingAfter(nodesToSkip, segmentHead);\r\n                    }\r\n                    else {\r\n                        native = previousRElement.nextSibling;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return native;\r\n}\r\n/**\r\n * Skips over a specified number of nodes and returns the next sibling node after that.\r\n */\r\nfunction siblingAfter(skip, from) {\r\n    let currentNode = from;\r\n    for (let i = 0; i < skip; i++) {\r\n        ngDevMode && validateSiblingNodeExists(currentNode);\r\n        currentNode = currentNode.nextSibling;\r\n    }\r\n    return currentNode;\r\n}\r\n/**\r\n * Helper function to produce a string representation of the navigation steps\r\n * (in terms of `nextSibling` and `firstChild` navigations). Used in error\r\n * messages in dev mode.\r\n */\r\nfunction stringifyNavigationInstructions(instructions) {\r\n    const container = [];\r\n    for (let i = 0; i < instructions.length; i += 2) {\r\n        const step = instructions[i];\r\n        const repeat = instructions[i + 1];\r\n        for (let r = 0; r < repeat; r++) {\r\n            container.push(step === NODE_NAVIGATION_STEP_FIRST_CHILD ? 'firstChild' : 'nextSibling');\r\n        }\r\n    }\r\n    return container.join('.');\r\n}\r\n/**\r\n * Helper function that navigates from a starting point node (the `from` node)\r\n * using provided set of navigation instructions (within `path` argument).\r\n */\r\nfunction navigateToNode(from, instructions) {\r\n    let node = from;\r\n    for (let i = 0; i < instructions.length; i += 2) {\r\n        const step = instructions[i];\r\n        const repeat = instructions[i + 1];\r\n        for (let r = 0; r < repeat; r++) {\r\n            if (ngDevMode && !node) {\r\n                throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\r\n            }\r\n            switch (step) {\r\n                case NODE_NAVIGATION_STEP_FIRST_CHILD:\r\n                    node = node.firstChild;\r\n                    break;\r\n                case NODE_NAVIGATION_STEP_NEXT_SIBLING:\r\n                    node = node.nextSibling;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    if (ngDevMode && !node) {\r\n        throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\r\n    }\r\n    return node;\r\n}\r\n/**\r\n * Locates an RNode given a set of navigation instructions (which also contains\r\n * a starting point node info).\r\n */\r\nfunction locateRNodeByPath(path, lView) {\r\n    const [referenceNode, ...navigationInstructions] = decompressNodeLocation(path);\r\n    let ref;\r\n    if (referenceNode === REFERENCE_NODE_HOST) {\r\n        ref = lView[DECLARATION_COMPONENT_VIEW][HOST];\r\n    }\r\n    else if (referenceNode === REFERENCE_NODE_BODY) {\r\n        ref = ɵɵresolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);\r\n    }\r\n    else {\r\n        const parentElementId = Number(referenceNode);\r\n        ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);\r\n    }\r\n    return navigateToNode(ref, navigationInstructions);\r\n}\r\n/**\r\n * Generate a list of DOM navigation operations to get from node `start` to node `finish`.\r\n *\r\n * Note: assumes that node `start` occurs before node `finish` in an in-order traversal of the DOM\r\n * tree. That is, we should be able to get from `start` to `finish` purely by using `.firstChild`\r\n * and `.nextSibling` operations.\r\n */\r\nfunction navigateBetween(start, finish) {\r\n    if (start === finish) {\r\n        return [];\r\n    }\r\n    else if (start.parentElement == null || finish.parentElement == null) {\r\n        return null;\r\n    }\r\n    else if (start.parentElement === finish.parentElement) {\r\n        return navigateBetweenSiblings(start, finish);\r\n    }\r\n    else {\r\n        // `finish` is a child of its parent, so the parent will always have a child.\r\n        const parent = finish.parentElement;\r\n        const parentPath = navigateBetween(start, parent);\r\n        const childPath = navigateBetween(parent.firstChild, finish);\r\n        if (!parentPath || !childPath)\r\n            return null;\r\n        return [\r\n            // First navigate to `finish`'s parent\r\n            ...parentPath,\r\n            // Then to its first child.\r\n            NODE_NAVIGATION_STEP_FIRST_CHILD,\r\n            // And finally from that node to `finish` (maybe a no-op if we're already there).\r\n            ...childPath,\r\n        ];\r\n    }\r\n}\r\n/**\r\n * Calculates a path between 2 sibling nodes (generates a number of `NextSibling` navigations).\r\n * Returns `null` if no such path exists between the given nodes.\r\n */\r\nfunction navigateBetweenSiblings(start, finish) {\r\n    const nav = [];\r\n    let node = null;\r\n    for (node = start; node != null && node !== finish; node = node.nextSibling) {\r\n        nav.push(NODE_NAVIGATION_STEP_NEXT_SIBLING);\r\n    }\r\n    // If the `node` becomes `null` or `undefined` at the end, that means that we\r\n    // didn't find the `end` node, thus return `null` (which would trigger serialization\r\n    // error to be produced).\r\n    return node == null ? null : nav;\r\n}\r\n/**\r\n * Calculates a path between 2 nodes in terms of `nextSibling` and `firstChild`\r\n * navigations:\r\n * - the `from` node is a known node, used as an starting point for the lookup\r\n *   (the `fromNodeName` argument is a string representation of the node).\r\n * - the `to` node is a node that the runtime logic would be looking up,\r\n *   using the path generated by this function.\r\n */\r\nfunction calcPathBetween(from, to, fromNodeName) {\r\n    const path = navigateBetween(from, to);\r\n    return path === null ? null : compressNodeLocation(fromNodeName, path);\r\n}\r\n/**\r\n * Invoked at serialization time (on the server) when a set of navigation\r\n * instructions needs to be generated for a TNode.\r\n */\r\nfunction calcPathForNode(tNode, lView, excludedParentNodes) {\r\n    let parentTNode = tNode.parent;\r\n    let parentIndex;\r\n    let parentRNode;\r\n    let referenceNodeName;\r\n    // Skip over all parent nodes that are disconnected from the DOM, such nodes\r\n    // can not be used as anchors.\r\n    //\r\n    // This might happen in certain content projection-based use-cases, where\r\n    // a content of an element is projected and used, when a parent element\r\n    // itself remains detached from DOM. In this scenario we try to find a parent\r\n    // element that is attached to DOM and can act as an anchor instead.\r\n    //\r\n    // It can also happen that the parent node should be excluded, for example,\r\n    // because it belongs to an i18n block, which requires paths which aren't\r\n    // relative to other views in an i18n block.\r\n    while (parentTNode !== null &&\r\n        (isDisconnectedNode(parentTNode, lView) || excludedParentNodes?.has(parentTNode.index))) {\r\n        parentTNode = parentTNode.parent;\r\n    }\r\n    if (parentTNode === null || !(parentTNode.type & 3 /* TNodeType.AnyRNode */)) {\r\n        // If there is no parent TNode or a parent TNode does not represent an RNode\r\n        // (i.e. not a DOM node), use component host element as a reference node.\r\n        parentIndex = referenceNodeName = REFERENCE_NODE_HOST;\r\n        parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];\r\n    }\r\n    else {\r\n        // Use parent TNode as a reference node.\r\n        parentIndex = parentTNode.index;\r\n        parentRNode = unwrapRNode(lView[parentIndex]);\r\n        referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);\r\n    }\r\n    let rNode = unwrapRNode(lView[tNode.index]);\r\n    if (tNode.type & (12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */)) {\r\n        // For <ng-container> nodes, instead of serializing a reference\r\n        // to the anchor comment node, serialize a location of the first\r\n        // DOM element. Paired with the container size (serialized as a part\r\n        // of `ngh.containers`), it should give enough information for runtime\r\n        // to hydrate nodes in this container.\r\n        const firstRNode = getFirstNativeNode(lView, tNode);\r\n        // If container is not empty, use a reference to the first element,\r\n        // otherwise, rNode would point to an anchor comment node.\r\n        if (firstRNode) {\r\n            rNode = firstRNode;\r\n        }\r\n    }\r\n    let path = calcPathBetween(parentRNode, rNode, referenceNodeName);\r\n    if (path === null && parentRNode !== rNode) {\r\n        // Searching for a path between elements within a host node failed.\r\n        // Trying to find a path to an element starting from the `document.body` instead.\r\n        //\r\n        // Important note: this type of reference is relatively unstable, since Angular\r\n        // may not be able to control parts of the page that the runtime logic navigates\r\n        // through. This is mostly needed to cover \"portals\" use-case (like menus, dialog boxes,\r\n        // etc), where nodes are content-projected (including direct DOM manipulations) outside\r\n        // of the host node. The better solution is to provide APIs to work with \"portals\",\r\n        // at which point this code path would not be needed.\r\n        const body = parentRNode.ownerDocument.body;\r\n        path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);\r\n        if (path === null) {\r\n            // If the path is still empty, it's likely that this node is detached and\r\n            // won't be found during hydration.\r\n            throw nodeNotFoundError(lView, tNode);\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Retrieves all comments nodes that contain ngh comments referring to a defer block\r\n */\r\nfunction gatherDeferBlocksCommentNodes(doc, node) {\r\n    const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, { acceptNode });\r\n    let currentNode;\r\n    const nodesByBlockId = new Map();\r\n    while ((currentNode = commentNodesIterator.nextNode())) {\r\n        const nghPattern = 'ngh=';\r\n        const content = currentNode?.textContent;\r\n        const nghIdx = content?.indexOf(nghPattern) ?? -1;\r\n        if (nghIdx > -1) {\r\n            const nghValue = content.substring(nghIdx + nghPattern.length).trim();\r\n            // Make sure the value has an expected format.\r\n            ngDevMode &&\r\n                assertEqual(nghValue.startsWith('d'), true, 'Invalid defer block id found in a comment node.');\r\n            nodesByBlockId.set(nghValue, currentNode);\r\n        }\r\n    }\r\n    return nodesByBlockId;\r\n}\r\nfunction acceptNode(node) {\r\n    return node.textContent?.trimStart().startsWith('ngh=')\r\n        ? NodeFilter.FILTER_ACCEPT\r\n        : NodeFilter.FILTER_REJECT;\r\n}\r\n\r\nlet _isI18nHydrationSupportEnabled = false;\r\nlet _prepareI18nBlockForHydrationImpl = () => {\r\n    // noop unless `enablePrepareI18nBlockForHydrationImpl` is invoked.\r\n};\r\nfunction setIsI18nHydrationSupportEnabled(enabled) {\r\n    _isI18nHydrationSupportEnabled = enabled;\r\n}\r\nfunction isI18nHydrationSupportEnabled() {\r\n    return _isI18nHydrationSupportEnabled;\r\n}\r\n/**\r\n * Prepares an i18n block and its children, located at the given\r\n * view and instruction index, for hydration.\r\n *\r\n * @param lView lView with the i18n block\r\n * @param index index of the i18n block in the lView\r\n * @param parentTNode TNode of the parent of the i18n block\r\n * @param subTemplateIndex sub-template index, or -1 for the main template\r\n */\r\nfunction prepareI18nBlockForHydration(lView, index, parentTNode, subTemplateIndex) {\r\n    _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);\r\n}\r\nfunction enablePrepareI18nBlockForHydrationImpl() {\r\n    _prepareI18nBlockForHydrationImpl = prepareI18nBlockForHydrationImpl;\r\n}\r\nfunction isI18nHydrationEnabled(injector) {\r\n    injector = injector ?? inject(Injector);\r\n    return injector.get(IS_I18N_HYDRATION_ENABLED, false);\r\n}\r\n/**\r\n * Collects, if not already cached, all of the indices in the\r\n * given TView which are children of an i18n block.\r\n *\r\n * Since i18n blocks don't introduce a parent TNode, this is necessary\r\n * in order to determine which indices in a LView are translated.\r\n */\r\nfunction getOrComputeI18nChildren(tView, context) {\r\n    let i18nChildren = context.i18nChildren.get(tView);\r\n    if (i18nChildren === undefined) {\r\n        i18nChildren = collectI18nChildren(tView);\r\n        context.i18nChildren.set(tView, i18nChildren);\r\n    }\r\n    return i18nChildren;\r\n}\r\nfunction collectI18nChildren(tView) {\r\n    const children = new Set();\r\n    function collectI18nViews(node) {\r\n        children.add(node.index);\r\n        switch (node.kind) {\r\n            case 1 /* I18nNodeKind.ELEMENT */:\r\n            case 2 /* I18nNodeKind.PLACEHOLDER */: {\r\n                for (const childNode of node.children) {\r\n                    collectI18nViews(childNode);\r\n                }\r\n                break;\r\n            }\r\n            case 3 /* I18nNodeKind.ICU */: {\r\n                for (const caseNodes of node.cases) {\r\n                    for (const caseNode of caseNodes) {\r\n                        collectI18nViews(caseNode);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // Traverse through the AST of each i18n block in the LView,\r\n    // and collect every instruction index.\r\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\r\n        const tI18n = tView.data[i];\r\n        if (!tI18n || !tI18n.ast) {\r\n            continue;\r\n        }\r\n        for (const node of tI18n.ast) {\r\n            collectI18nViews(node);\r\n        }\r\n    }\r\n    return children.size === 0 ? null : children;\r\n}\r\n/**\r\n * Attempts to serialize i18n data for an i18n block, located at\r\n * the given view and instruction index.\r\n *\r\n * @param lView lView with the i18n block\r\n * @param index index of the i18n block in the lView\r\n * @param context the hydration context\r\n * @returns the i18n data, or null if there is no relevant data\r\n */\r\nfunction trySerializeI18nBlock(lView, index, context) {\r\n    if (!context.isI18nHydrationEnabled) {\r\n        return null;\r\n    }\r\n    const tView = lView[TVIEW];\r\n    const tI18n = tView.data[index];\r\n    if (!tI18n || !tI18n.ast) {\r\n        return null;\r\n    }\r\n    const parentTNode = tView.data[tI18n.parentTNodeIndex];\r\n    if (parentTNode && isI18nInSkipHydrationBlock(parentTNode)) {\r\n        return null;\r\n    }\r\n    const serializedI18nBlock = {\r\n        caseQueue: [],\r\n        disconnectedNodes: new Set(),\r\n        disjointNodes: new Set(),\r\n    };\r\n    serializeI18nBlock(lView, serializedI18nBlock, context, tI18n.ast);\r\n    return serializedI18nBlock.caseQueue.length === 0 &&\r\n        serializedI18nBlock.disconnectedNodes.size === 0 &&\r\n        serializedI18nBlock.disjointNodes.size === 0\r\n        ? null\r\n        : serializedI18nBlock;\r\n}\r\nfunction serializeI18nBlock(lView, serializedI18nBlock, context, nodes) {\r\n    let prevRNode = null;\r\n    for (const node of nodes) {\r\n        const nextRNode = serializeI18nNode(lView, serializedI18nBlock, context, node);\r\n        if (nextRNode) {\r\n            if (isDisjointNode(prevRNode, nextRNode)) {\r\n                serializedI18nBlock.disjointNodes.add(node.index - HEADER_OFFSET);\r\n            }\r\n            prevRNode = nextRNode;\r\n        }\r\n    }\r\n    return prevRNode;\r\n}\r\n/**\r\n * Helper to determine whether the given nodes are \"disjoint\".\r\n *\r\n * The i18n hydration process walks through the DOM and i18n nodes\r\n * at the same time. It expects the sibling DOM node of the previous\r\n * i18n node to be the first node of the next i18n node.\r\n *\r\n * In cases of content projection, this won't always be the case. So\r\n * when we detect that, we mark the node as \"disjoint\", ensuring that\r\n * we will serialize the path to the node. This way, when we hydrate the\r\n * i18n node, we will be able to find the correct place to start.\r\n */\r\nfunction isDisjointNode(prevNode, nextNode) {\r\n    return prevNode && prevNode.nextSibling !== nextNode;\r\n}\r\n/**\r\n * Process the given i18n node for serialization.\r\n * Returns the first RNode for the i18n node to begin hydration.\r\n */\r\nfunction serializeI18nNode(lView, serializedI18nBlock, context, node) {\r\n    const maybeRNode = unwrapRNode(lView[node.index]);\r\n    if (!maybeRNode || isDisconnectedRNode(maybeRNode)) {\r\n        serializedI18nBlock.disconnectedNodes.add(node.index - HEADER_OFFSET);\r\n        return null;\r\n    }\r\n    const rNode = maybeRNode;\r\n    switch (node.kind) {\r\n        case 0 /* I18nNodeKind.TEXT */: {\r\n            processTextNodeBeforeSerialization(context, rNode);\r\n            break;\r\n        }\r\n        case 1 /* I18nNodeKind.ELEMENT */:\r\n        case 2 /* I18nNodeKind.PLACEHOLDER */: {\r\n            serializeI18nBlock(lView, serializedI18nBlock, context, node.children);\r\n            break;\r\n        }\r\n        case 3 /* I18nNodeKind.ICU */: {\r\n            const currentCase = lView[node.currentCaseLViewIndex];\r\n            if (currentCase != null) {\r\n                // i18n uses a negative value to signal a change to a new case, so we\r\n                // need to invert it to get the proper value.\r\n                const caseIdx = currentCase < 0 ? ~currentCase : currentCase;\r\n                serializedI18nBlock.caseQueue.push(caseIdx);\r\n                serializeI18nBlock(lView, serializedI18nBlock, context, node.cases[caseIdx]);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return getFirstNativeNodeForI18nNode(lView, node);\r\n}\r\n/**\r\n * Helper function to get the first native node to begin hydrating\r\n * the given i18n node.\r\n */\r\nfunction getFirstNativeNodeForI18nNode(lView, node) {\r\n    const tView = lView[TVIEW];\r\n    const maybeTNode = tView.data[node.index];\r\n    if (isTNodeShape(maybeTNode)) {\r\n        // If the node is backed by an actual TNode, we can simply delegate.\r\n        return getFirstNativeNode(lView, maybeTNode);\r\n    }\r\n    else if (node.kind === 3 /* I18nNodeKind.ICU */) {\r\n        // A nested ICU container won't have an actual TNode. In that case, we can use\r\n        // an iterator to find the first child.\r\n        const icuIterator = createIcuIterator(maybeTNode, lView);\r\n        let rNode = icuIterator();\r\n        // If the ICU container has no nodes, then we use the ICU anchor as the node.\r\n        return rNode ?? unwrapRNode(lView[node.index]);\r\n    }\r\n    else {\r\n        // Otherwise, the node is a text or trivial element in an ICU container,\r\n        // and we can just use the RNode directly.\r\n        return unwrapRNode(lView[node.index]) ?? null;\r\n    }\r\n}\r\nfunction setCurrentNode(state, node) {\r\n    state.currentNode = node;\r\n}\r\n/**\r\n * Marks the current RNode as the hydration root for the given\r\n * AST node.\r\n */\r\nfunction appendI18nNodeToCollection(context, state, astNode) {\r\n    const noOffsetIndex = astNode.index - HEADER_OFFSET;\r\n    const { disconnectedNodes } = context;\r\n    const currentNode = state.currentNode;\r\n    if (state.isConnected) {\r\n        context.i18nNodes.set(noOffsetIndex, currentNode);\r\n        // We expect the node to be connected, so ensure that it\r\n        // is not in the set, regardless of whether we found it,\r\n        // so that the downstream error handling can provide the\r\n        // proper context.\r\n        disconnectedNodes.delete(noOffsetIndex);\r\n    }\r\n    else {\r\n        disconnectedNodes.add(noOffsetIndex);\r\n    }\r\n    return currentNode;\r\n}\r\n/**\r\n * Skip over some sibling nodes during hydration.\r\n *\r\n * Note: we use this instead of `siblingAfter` as it's expected that\r\n * sometimes we might encounter null nodes. In those cases, we want to\r\n * defer to downstream error handling to provide proper context.\r\n */\r\nfunction skipSiblingNodes(state, skip) {\r\n    let currentNode = state.currentNode;\r\n    for (let i = 0; i < skip; i++) {\r\n        if (!currentNode) {\r\n            break;\r\n        }\r\n        currentNode = currentNode?.nextSibling ?? null;\r\n    }\r\n    return currentNode;\r\n}\r\n/**\r\n * Fork the given state into a new state for hydrating children.\r\n */\r\nfunction forkHydrationState(state, nextNode) {\r\n    return { currentNode: nextNode, isConnected: state.isConnected };\r\n}\r\nfunction prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex) {\r\n    const hydrationInfo = lView[HYDRATION];\r\n    if (!hydrationInfo) {\r\n        return;\r\n    }\r\n    if (!isI18nHydrationSupportEnabled() ||\r\n        (parentTNode &&\r\n            (isI18nInSkipHydrationBlock(parentTNode) ||\r\n                isDisconnectedNode$1(hydrationInfo, parentTNode.index - HEADER_OFFSET)))) {\r\n        return;\r\n    }\r\n    const tView = lView[TVIEW];\r\n    const tI18n = tView.data[index];\r\n    ngDevMode &&\r\n        assertDefined(tI18n, 'Expected i18n data to be present in a given TView slot during hydration');\r\n    function findHydrationRoot() {\r\n        if (isRootTemplateMessage(subTemplateIndex)) {\r\n            // This is the root of an i18n block. In this case, our hydration root will\r\n            // depend on where our parent TNode (i.e. the block with i18n applied) is\r\n            // in the DOM.\r\n            ngDevMode && assertDefined(parentTNode, 'Expected parent TNode while hydrating i18n root');\r\n            const rootNode = locateNextRNode(hydrationInfo, tView, lView, parentTNode);\r\n            // If this i18n block is attached to an <ng-container>, then we want to begin\r\n            // hydrating directly with the RNode. Otherwise, for a TNode with a physical DOM\r\n            // element, we want to recurse into the first child and begin there.\r\n            return parentTNode.type & 8 /* TNodeType.ElementContainer */ ? rootNode : rootNode.firstChild;\r\n        }\r\n        // This is a nested template in an i18n block. In this case, the entire view\r\n        // is translated, and part of a dehydrated view in a container. This means that\r\n        // we can simply begin hydration with the first dehydrated child.\r\n        return hydrationInfo?.firstChild;\r\n    }\r\n    const currentNode = findHydrationRoot();\r\n    ngDevMode && assertDefined(currentNode, 'Expected root i18n node during hydration');\r\n    const disconnectedNodes = initDisconnectedNodes(hydrationInfo) ?? new Set();\r\n    const i18nNodes = (hydrationInfo.i18nNodes ??= new Map());\r\n    const caseQueue = hydrationInfo.data[I18N_DATA]?.[index - HEADER_OFFSET] ?? [];\r\n    const dehydratedIcuData = (hydrationInfo.dehydratedIcuData ??= new Map());\r\n    collectI18nNodesFromDom({ hydrationInfo, lView, i18nNodes, disconnectedNodes, caseQueue, dehydratedIcuData }, { currentNode, isConnected: true }, tI18n.ast);\r\n    // Nodes from inactive ICU cases should be considered disconnected. We track them above\r\n    // because they aren't (and shouldn't be) serialized. Since we may mutate or create a\r\n    // new set, we need to be sure to write the expected value back to the DehydratedView.\r\n    hydrationInfo.disconnectedNodes = disconnectedNodes.size === 0 ? null : disconnectedNodes;\r\n}\r\nfunction collectI18nNodesFromDom(context, state, nodeOrNodes) {\r\n    if (Array.isArray(nodeOrNodes)) {\r\n        let nextState = state;\r\n        for (const node of nodeOrNodes) {\r\n            // Whenever a node doesn't directly follow the previous RNode, it\r\n            // is given a path. We need to resume collecting nodes from that location\r\n            // until and unless we find another disjoint node.\r\n            const targetNode = tryLocateRNodeByPath(context.hydrationInfo, context.lView, node.index - HEADER_OFFSET);\r\n            if (targetNode) {\r\n                nextState = forkHydrationState(state, targetNode);\r\n            }\r\n            collectI18nNodesFromDom(context, nextState, node);\r\n        }\r\n    }\r\n    else {\r\n        if (context.disconnectedNodes.has(nodeOrNodes.index - HEADER_OFFSET)) {\r\n            // i18n nodes can be considered disconnected if e.g. they were projected.\r\n            // In that case, we have to make sure to skip over them.\r\n            return;\r\n        }\r\n        switch (nodeOrNodes.kind) {\r\n            case 0 /* I18nNodeKind.TEXT */: {\r\n                // Claim a text node for hydration\r\n                const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\r\n                setCurrentNode(state, currentNode?.nextSibling ?? null);\r\n                break;\r\n            }\r\n            case 1 /* I18nNodeKind.ELEMENT */: {\r\n                // Recurse into the current element's children...\r\n                collectI18nNodesFromDom(context, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);\r\n                // And claim the parent element itself.\r\n                const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\r\n                setCurrentNode(state, currentNode?.nextSibling ?? null);\r\n                break;\r\n            }\r\n            case 2 /* I18nNodeKind.PLACEHOLDER */: {\r\n                const noOffsetIndex = nodeOrNodes.index - HEADER_OFFSET;\r\n                const { hydrationInfo } = context;\r\n                const containerSize = getNgContainerSize(hydrationInfo, noOffsetIndex);\r\n                switch (nodeOrNodes.type) {\r\n                    case 0 /* I18nPlaceholderType.ELEMENT */: {\r\n                        // Hydration expects to find the head of the element.\r\n                        const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\r\n                        // A TNode for the node may not yet if we're hydrating during the first pass,\r\n                        // so use the serialized data to determine if this is an <ng-container>.\r\n                        if (isSerializedElementContainer(hydrationInfo, noOffsetIndex)) {\r\n                            // An <ng-container> doesn't have a physical DOM node, so we need to\r\n                            // continue hydrating from siblings.\r\n                            collectI18nNodesFromDom(context, state, nodeOrNodes.children);\r\n                            // Skip over the anchor element. It will be claimed by the\r\n                            // downstream container hydration.\r\n                            const nextNode = skipSiblingNodes(state, 1);\r\n                            setCurrentNode(state, nextNode);\r\n                        }\r\n                        else {\r\n                            // Non-container elements represent an actual node in the DOM, so we\r\n                            // need to continue hydration with the children, and claim the node.\r\n                            collectI18nNodesFromDom(context, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);\r\n                            setCurrentNode(state, currentNode?.nextSibling ?? null);\r\n                            // Elements can also be the anchor of a view container, so there may\r\n                            // be elements after this node that we need to skip.\r\n                            if (containerSize !== null) {\r\n                                // `+1` stands for an anchor node after all of the views in the container.\r\n                                const nextNode = skipSiblingNodes(state, containerSize + 1);\r\n                                setCurrentNode(state, nextNode);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 1 /* I18nPlaceholderType.SUBTEMPLATE */: {\r\n                        ngDevMode &&\r\n                            assertNotEqual(containerSize, null, 'Expected a container size while hydrating i18n subtemplate');\r\n                        // Hydration expects to find the head of the template.\r\n                        appendI18nNodeToCollection(context, state, nodeOrNodes);\r\n                        // Skip over all of the template children, as well as the anchor\r\n                        // node, since the template itself will handle them instead.\r\n                        const nextNode = skipSiblingNodes(state, containerSize + 1);\r\n                        setCurrentNode(state, nextNode);\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 3 /* I18nNodeKind.ICU */: {\r\n                // If the current node is connected, we need to pop the next case from the\r\n                // queue, so that the active case is also considered connected.\r\n                const selectedCase = state.isConnected ? context.caseQueue.shift() : null;\r\n                const childState = { currentNode: null, isConnected: false };\r\n                // We traverse through each case, even if it's not active,\r\n                // so that we correctly populate disconnected nodes.\r\n                for (let i = 0; i < nodeOrNodes.cases.length; i++) {\r\n                    collectI18nNodesFromDom(context, i === selectedCase ? state : childState, nodeOrNodes.cases[i]);\r\n                }\r\n                if (selectedCase !== null) {\r\n                    // ICUs represent a branching state, and the selected case could be different\r\n                    // than what it was on the server. In that case, we need to be able to clean\r\n                    // up the nodes from the original case. To do that, we store the selected case.\r\n                    context.dehydratedIcuData.set(nodeOrNodes.index, { case: selectedCase, node: nodeOrNodes });\r\n                }\r\n                // Hydration expects to find the ICU anchor element.\r\n                const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\r\n                setCurrentNode(state, currentNode?.nextSibling ?? null);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nlet _claimDehydratedIcuCaseImpl = () => {\r\n    // noop unless `enableClaimDehydratedIcuCaseImpl` is invoked\r\n};\r\n/**\r\n * Mark the case for the ICU node at the given index in the view as claimed,\r\n * allowing its nodes to be hydrated and not cleaned up.\r\n */\r\nfunction claimDehydratedIcuCase(lView, icuIndex, caseIndex) {\r\n    _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);\r\n}\r\nfunction enableClaimDehydratedIcuCaseImpl() {\r\n    _claimDehydratedIcuCaseImpl = claimDehydratedIcuCaseImpl;\r\n}\r\nfunction claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex) {\r\n    const dehydratedIcuDataMap = lView[HYDRATION]?.dehydratedIcuData;\r\n    if (dehydratedIcuDataMap) {\r\n        const dehydratedIcuData = dehydratedIcuDataMap.get(icuIndex);\r\n        if (dehydratedIcuData?.case === caseIndex) {\r\n            // If the case we're attempting to claim matches the dehydrated one,\r\n            // we remove it from the map to mark it as \"claimed.\"\r\n            dehydratedIcuDataMap.delete(icuIndex);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Clean up all i18n hydration data associated with the given view.\r\n */\r\nfunction cleanupI18nHydrationData(lView) {\r\n    const hydrationInfo = lView[HYDRATION];\r\n    if (hydrationInfo) {\r\n        const { i18nNodes, dehydratedIcuData: dehydratedIcuDataMap } = hydrationInfo;\r\n        if (i18nNodes && dehydratedIcuDataMap) {\r\n            const renderer = lView[RENDERER];\r\n            for (const dehydratedIcuData of dehydratedIcuDataMap.values()) {\r\n                cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData);\r\n            }\r\n        }\r\n        hydrationInfo.i18nNodes = undefined;\r\n        hydrationInfo.dehydratedIcuData = undefined;\r\n    }\r\n}\r\nfunction cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData) {\r\n    for (const node of dehydratedIcuData.node.cases[dehydratedIcuData.case]) {\r\n        const rNode = i18nNodes.get(node.index - HEADER_OFFSET);\r\n        if (rNode) {\r\n            nativeRemoveNode(renderer, rNode, false);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Removes all dehydrated views from a given LContainer:\r\n * both in internal data structure, as well as removing\r\n * corresponding DOM nodes that belong to that dehydrated view.\r\n */\r\nfunction removeDehydratedViews(lContainer) {\r\n    const views = lContainer[DEHYDRATED_VIEWS] ?? [];\r\n    const parentLView = lContainer[PARENT];\r\n    const renderer = parentLView[RENDERER];\r\n    const retainedViews = [];\r\n    for (const view of views) {\r\n        // Do not clean up contents of `@defer` blocks.\r\n        // The cleanup for this content would happen once a given block\r\n        // is triggered and hydrated.\r\n        if (view.data[DEFER_BLOCK_ID] !== undefined) {\r\n            retainedViews.push(view);\r\n        }\r\n        else {\r\n            removeDehydratedView(view, renderer);\r\n            ngDevMode && ngDevMode.dehydratedViewsRemoved++;\r\n        }\r\n    }\r\n    // Reset the value to an array to indicate that no\r\n    // further processing of dehydrated views is needed for\r\n    // this view container (i.e. do not trigger the lookup process\r\n    // once again in case a `ViewContainerRef` is created later).\r\n    lContainer[DEHYDRATED_VIEWS] = retainedViews;\r\n}\r\nfunction removeDehydratedViewList(deferBlock) {\r\n    const { lContainer } = deferBlock;\r\n    const dehydratedViews = lContainer[DEHYDRATED_VIEWS];\r\n    if (dehydratedViews === null)\r\n        return;\r\n    const parentLView = lContainer[PARENT];\r\n    const renderer = parentLView[RENDERER];\r\n    for (const view of dehydratedViews) {\r\n        removeDehydratedView(view, renderer);\r\n        ngDevMode && ngDevMode.dehydratedViewsRemoved++;\r\n    }\r\n}\r\n/**\r\n * Helper function to remove all nodes from a dehydrated view.\r\n */\r\nfunction removeDehydratedView(dehydratedView, renderer) {\r\n    let nodesRemoved = 0;\r\n    let currentRNode = dehydratedView.firstChild;\r\n    if (currentRNode) {\r\n        const numNodes = dehydratedView.data[NUM_ROOT_NODES];\r\n        while (nodesRemoved < numNodes) {\r\n            ngDevMode && validateSiblingNodeExists(currentRNode);\r\n            const nextSibling = currentRNode.nextSibling;\r\n            nativeRemoveNode(renderer, currentRNode, false);\r\n            currentRNode = nextSibling;\r\n            nodesRemoved++;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Walks over all views within this LContainer invokes dehydrated views\r\n * cleanup function for each one.\r\n */\r\nfunction cleanupLContainer(lContainer) {\r\n    removeDehydratedViews(lContainer);\r\n    // The host could be an LView if this container is on a component node.\r\n    // In this case, descend into host LView for further cleanup. See also\r\n    // LContainer[HOST] docs for additional information.\r\n    const hostLView = lContainer[HOST];\r\n    if (isLView(hostLView)) {\r\n        cleanupLView(hostLView);\r\n    }\r\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\r\n        cleanupLView(lContainer[i]);\r\n    }\r\n}\r\n/**\r\n * Walks over `LContainer`s and components registered within\r\n * this LView and invokes dehydrated views cleanup function for each one.\r\n */\r\nfunction cleanupLView(lView) {\r\n    cleanupI18nHydrationData(lView);\r\n    const tView = lView[TVIEW];\r\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\r\n        if (isLContainer(lView[i])) {\r\n            const lContainer = lView[i];\r\n            cleanupLContainer(lContainer);\r\n        }\r\n        else if (isLView(lView[i])) {\r\n            // This is a component, enter the `cleanupLView` recursively.\r\n            cleanupLView(lView[i]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Walks over all views registered within the ApplicationRef and removes\r\n * all dehydrated views from all `LContainer`s along the way.\r\n */\r\nfunction cleanupDehydratedViews(appRef) {\r\n    const viewRefs = appRef._views;\r\n    for (const viewRef of viewRefs) {\r\n        const lNode = getLNodeForHydration(viewRef);\r\n        // An `lView` might be `null` if a `ViewRef` represents\r\n        // an embedded view (not a component view).\r\n        if (lNode !== null && lNode[HOST] !== null) {\r\n            if (isLView(lNode)) {\r\n                cleanupLView(lNode);\r\n            }\r\n            else {\r\n                // Cleanup in all views within this view container\r\n                cleanupLContainer(lNode);\r\n            }\r\n            ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;\r\n        }\r\n    }\r\n}\r\n/**\r\n * post hydration cleanup handling for defer blocks that were incrementally\r\n * hydrated. This removes all the jsaction attributes, timers, observers,\r\n * dehydrated views and containers\r\n */\r\nfunction cleanupHydratedDeferBlocks(deferBlock, hydratedBlocks, registry, appRef) {\r\n    if (deferBlock !== null) {\r\n        registry.cleanup(hydratedBlocks);\r\n        cleanupLContainer(deferBlock.lContainer);\r\n        cleanupDehydratedViews(appRef);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a current DOM node and a serialized information about the views\r\n * in a container, walks over the DOM structure, collecting the list of\r\n * dehydrated views.\r\n */\r\nfunction locateDehydratedViewsInContainer(currentRNode, serializedViews) {\r\n    const dehydratedViews = [];\r\n    for (const serializedView of serializedViews) {\r\n        // Repeats a view multiple times as needed, based on the serialized information\r\n        // (for example, for *ngFor-produced views).\r\n        for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {\r\n            const view = {\r\n                data: serializedView,\r\n                firstChild: null,\r\n            };\r\n            if (serializedView[NUM_ROOT_NODES] > 0) {\r\n                // Keep reference to the first node in this view,\r\n                // so it can be accessed while invoking template instructions.\r\n                view.firstChild = currentRNode;\r\n                // Move over to the next node after this view, which can\r\n                // either be a first node of the next view or an anchor comment\r\n                // node after the last view in a container.\r\n                currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);\r\n            }\r\n            dehydratedViews.push(view);\r\n        }\r\n    }\r\n    return [currentRNode, dehydratedViews];\r\n}\r\n/**\r\n * Reference to a function that searches for a matching dehydrated views\r\n * stored on a given lContainer.\r\n * Returns `null` by default, when hydration is not enabled.\r\n */\r\nlet _findMatchingDehydratedViewImpl = () => null;\r\n/**\r\n * Reference to a function that searches for a matching dehydrated view\r\n * stored on a control flow lContainer and removes the dehydrated content\r\n * once found.\r\n * Returns `null` by default, when hydration is not enabled.\r\n */\r\nlet _findAndReconcileMatchingDehydratedViewsImpl = () => null;\r\nfunction enableFindMatchingDehydratedViewImpl() {\r\n    _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;\r\n    _findAndReconcileMatchingDehydratedViewsImpl = findAndReconcileMatchingDehydratedViewsImpl;\r\n}\r\n/**\r\n * Retrieves the next dehydrated view from the LContainer and verifies that\r\n * it matches a given template id (from the TView that was used to create this\r\n * instance of a view). If the id doesn't match, that means that we are in an\r\n * unexpected state and can not complete the reconciliation process. Thus,\r\n * all dehydrated views from this LContainer are removed (including corresponding\r\n * DOM nodes) and the rendering is performed as if there were no dehydrated views\r\n * in this container.\r\n */\r\nfunction findMatchingDehydratedViewImpl(lContainer, template) {\r\n    if (hasMatchingDehydratedView(lContainer, template)) {\r\n        return lContainer[DEHYDRATED_VIEWS].shift();\r\n    }\r\n    else {\r\n        // Otherwise, we are at the state when reconciliation can not be completed,\r\n        // thus we remove all dehydrated views within this container (remove them\r\n        // from internal data structures as well as delete associated elements from\r\n        // the DOM tree).\r\n        removeDehydratedViews(lContainer);\r\n        return null;\r\n    }\r\n}\r\nfunction findMatchingDehydratedView(lContainer, template) {\r\n    return _findMatchingDehydratedViewImpl(lContainer, template);\r\n}\r\nfunction findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView) {\r\n    if (templateTNode.tView.ssrId === null)\r\n        return null;\r\n    const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);\r\n    // we know that an ssrId was generated, but we were unable to match it to\r\n    // a dehydrated view, which means that we may have changed branches\r\n    // between server and client. We'll need to find and remove those\r\n    // stale dehydrated views.\r\n    if (hostLView[TVIEW].firstUpdatePass && dehydratedView === null) {\r\n        removeStaleDehydratedBranch(hostLView, templateTNode);\r\n    }\r\n    return dehydratedView;\r\n}\r\nfunction findAndReconcileMatchingDehydratedViews(lContainer, templateTNode, hostLView) {\r\n    return _findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView);\r\n}\r\n/**\r\n * In the case that we have control flow that changes branches between server and\r\n * client, we're left with dehydrated content that will not be used. We need to find\r\n * it and clean it up at the right time so that we don't see duplicate content for\r\n * a few moments before the application reaches stability. This navigates the\r\n * control flow containers by looking at the TNodeFlags to find the matching\r\n * dehydrated content for the branch that is now stale from the server and removes it.\r\n */\r\nfunction removeStaleDehydratedBranch(hostLView, tNode) {\r\n    let currentTNode = tNode;\r\n    while (currentTNode) {\r\n        // We can return here if we've found the dehydrated view and cleaned it up.\r\n        // Otherwise we continue on until we either find it or reach the start of\r\n        // the control flow.\r\n        if (cleanupMatchingDehydratedViews(hostLView, currentTNode))\r\n            return;\r\n        if ((currentTNode.flags & 256 /* TNodeFlags.isControlFlowStart */) === 256 /* TNodeFlags.isControlFlowStart */) {\r\n            // we've hit the top of the control flow loop\r\n            break;\r\n        }\r\n        currentTNode = currentTNode.prev;\r\n    }\r\n    currentTNode = tNode.next; // jump to place we started so we can navigate down from there\r\n    while (currentTNode) {\r\n        if ((currentTNode.flags & 512 /* TNodeFlags.isInControlFlow */) !== 512 /* TNodeFlags.isInControlFlow */) {\r\n            // we've exited control flow and need to exit the loop.\r\n            break;\r\n        }\r\n        // Similar to above, we can return here if we've found the dehydrated view\r\n        // and cleaned it up. Otherwise we continue on until we either find it or\r\n        // reach the end of the control flow.\r\n        if (cleanupMatchingDehydratedViews(hostLView, currentTNode))\r\n            return;\r\n        currentTNode = currentTNode.next;\r\n    }\r\n}\r\nfunction hasMatchingDehydratedView(lContainer, template) {\r\n    const views = lContainer[DEHYDRATED_VIEWS];\r\n    if (!template || views === null || views.length === 0) {\r\n        return false;\r\n    }\r\n    // Verify whether the first dehydrated view in the container matches\r\n    // the template id passed to this function (that originated from a TView\r\n    // that was used to create an instance of an embedded or component views.\r\n    return views[0].data[TEMPLATE_ID] === template;\r\n}\r\nfunction cleanupMatchingDehydratedViews(hostLView, currentTNode) {\r\n    const ssrId = currentTNode.tView?.ssrId;\r\n    if (ssrId == null /* check both `null` and `undefined` */)\r\n        return false;\r\n    const container = hostLView[currentTNode.index];\r\n    // if we can find the dehydrated view in this container, we know we've found the stale view\r\n    // and we can remove it.\r\n    if (isLContainer(container) && hasMatchingDehydratedView(container, ssrId)) {\r\n        removeDehydratedViews(container);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Represents a component created by a `ComponentFactory`.\r\n * Provides access to the component instance and related objects,\r\n * and provides the means of destroying the instance.\r\n *\r\n * @publicApi\r\n */\r\nlet ComponentRef$1 = class ComponentRef {\r\n};\r\n/**\r\n * Base class for a factory that can create a component dynamically.\r\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\r\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\r\n *     Component class can be used directly.\r\n */\r\nlet ComponentFactory$1 = class ComponentFactory {\r\n};\r\n\r\nclass _NullComponentFactoryResolver {\r\n    resolveComponentFactory(component) {\r\n        throw new RuntimeError(917 /* RuntimeErrorCode.NO_COMPONENT_FACTORY_FOUND */, typeof ngDevMode !== 'undefined' &&\r\n            ngDevMode &&\r\n            `No component factory found for ${stringify(component)}.`);\r\n    }\r\n}\r\n/**\r\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\r\n * that can be used to create instances of components.\r\n * Use to obtain the factory for a given component type,\r\n * then use the factory's `create()` method to create a component of that type.\r\n *\r\n * Note: since v13, dynamic component creation via\r\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\r\n * does **not** require resolving component factory: component class can be used directly.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\r\n *     Component class can be used directly.\r\n */\r\nlet ComponentFactoryResolver$1 = class ComponentFactoryResolver {\r\n    static NULL = new _NullComponentFactoryResolver();\r\n};\r\n\r\n/**\r\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\r\n *\r\n * @publicApi\r\n */\r\nclass RendererFactory2 {\r\n}\r\n/**\r\n * Extend this base class to implement custom rendering. By default, Angular\r\n * renders a template into DOM. You can use custom rendering to intercept\r\n * rendering calls, or to render to something other than DOM.\r\n *\r\n * <div class=\"docs-alert docs-alert-important\">\r\n * <p>\r\n * Please be aware that usage of `Renderer2`, in context of accessing DOM elements, provides no\r\n * extra security which makes it equivalent to\r\n * {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls Security vulnerabilities}.\r\n * </p>\r\n * </div>\r\n *\r\n * Create your custom renderer using `RendererFactory2`.\r\n *\r\n * Use a custom renderer to bypass Angular's templating and\r\n * make custom UI changes that can't be expressed declaratively.\r\n * For example if you need to set a property or an attribute whose name is\r\n * not statically known, use the `setProperty()` or\r\n * `setAttribute()` method.\r\n *\r\n * @publicApi\r\n */\r\nclass Renderer2 {\r\n    /**\r\n     * If null or undefined, the view engine won't call it.\r\n     * This is used as a performance optimization for production mode.\r\n     */\r\n    destroyNode = null;\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = () => injectRenderer2();\r\n}\r\n/** Injects a Renderer2 for the current component. */\r\nfunction injectRenderer2() {\r\n    // We need the Renderer to be based on the component that it's being injected into, however since\r\n    // DI happens before we've entered its view, `getLView` will return the parent view instead.\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\r\n    return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\r\n}\r\n\r\n/**\r\n * Sanitizer is used by the views to sanitize potentially dangerous values.\r\n *\r\n * @publicApi\r\n */\r\nclass Sanitizer {\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: Sanitizer,\r\n        providedIn: 'root',\r\n        factory: () => null,\r\n    });\r\n}\r\n\r\nfunction isModuleWithProviders(value) {\r\n    return value.ngModule !== undefined;\r\n}\r\nfunction isNgModule(value) {\r\n    return !!getNgModuleDef(value);\r\n}\r\nfunction isPipe(value) {\r\n    return !!getPipeDef$1(value);\r\n}\r\nfunction isDirective(value) {\r\n    return !!getDirectiveDef(value);\r\n}\r\nfunction isComponent(value) {\r\n    return !!getComponentDef(value);\r\n}\r\nfunction getDependencyTypeForError(type) {\r\n    if (getComponentDef(type))\r\n        return 'component';\r\n    if (getDirectiveDef(type))\r\n        return 'directive';\r\n    if (getPipeDef$1(type))\r\n        return 'pipe';\r\n    return 'type';\r\n}\r\nfunction verifyStandaloneImport(depType, importingType) {\r\n    if (isForwardRef(depType)) {\r\n        depType = resolveForwardRef(depType);\r\n        if (!depType) {\r\n            throw new Error(`Expected forwardRef function, imported from \"${stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${stringifyForError(depType) || depType}\".`);\r\n        }\r\n    }\r\n    if (getNgModuleDef(depType) == null) {\r\n        const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);\r\n        if (def != null) {\r\n            // if a component, directive or pipe is imported make sure that it is standalone\r\n            if (!def.standalone) {\r\n                throw new Error(`The \"${stringifyForError(depType)}\" ${getDependencyTypeForError(depType)}, imported from \"${stringifyForError(importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\r\n            }\r\n        }\r\n        else {\r\n            // it can be either a module with provider or an unknown (not annotated) type\r\n            if (isModuleWithProviders(depType)) {\r\n                throw new Error(`A module with providers was imported from \"${stringifyForError(importingType)}\". Modules with providers are not supported in standalone components imports.`);\r\n            }\r\n            else {\r\n                throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An implementation of DepsTrackerApi which will be used for JIT and local compilation.\r\n */\r\nclass DepsTracker {\r\n    ownerNgModule = new Map();\r\n    ngModulesWithSomeUnresolvedDecls = new Set();\r\n    ngModulesScopeCache = new Map();\r\n    standaloneComponentsScopeCache = new Map();\r\n    /**\r\n     * Attempts to resolve ng module's forward ref declarations as much as possible and add them to\r\n     * the `ownerNgModule` map. This method normally should be called after the initial parsing when\r\n     * all the forward refs are resolved (e.g., when trying to render a component)\r\n     */\r\n    resolveNgModulesDecls() {\r\n        if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {\r\n            return;\r\n        }\r\n        for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {\r\n            const def = getNgModuleDef(moduleType);\r\n            if (def?.declarations) {\r\n                for (const decl of maybeUnwrapFn(def.declarations)) {\r\n                    if (isComponent(decl)) {\r\n                        this.ownerNgModule.set(decl, moduleType);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.ngModulesWithSomeUnresolvedDecls.clear();\r\n    }\r\n    /** @override */\r\n    getComponentDependencies(type, rawImports) {\r\n        this.resolveNgModulesDecls();\r\n        const def = getComponentDef(type);\r\n        if (def === null) {\r\n            throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);\r\n        }\r\n        if (def.standalone) {\r\n            const scope = this.getStandaloneComponentScope(type, rawImports);\r\n            if (scope.compilation.isPoisoned) {\r\n                return { dependencies: [] };\r\n            }\r\n            return {\r\n                dependencies: [\r\n                    ...scope.compilation.directives,\r\n                    ...scope.compilation.pipes,\r\n                    ...scope.compilation.ngModules,\r\n                ],\r\n            };\r\n        }\r\n        else {\r\n            if (!this.ownerNgModule.has(type)) {\r\n                // This component is orphan! No need to handle the error since the component rendering\r\n                // pipeline (e.g., view_container_ref) will check for this error based on configs.\r\n                return { dependencies: [] };\r\n            }\r\n            const scope = this.getNgModuleScope(this.ownerNgModule.get(type));\r\n            if (scope.compilation.isPoisoned) {\r\n                return { dependencies: [] };\r\n            }\r\n            return {\r\n                dependencies: [...scope.compilation.directives, ...scope.compilation.pipes],\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @override\r\n     * This implementation does not make use of param scopeInfo since it assumes the scope info is\r\n     * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}\r\n     */\r\n    registerNgModule(type, scopeInfo) {\r\n        if (!isNgModule(type)) {\r\n            throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);\r\n        }\r\n        // Lazily process the NgModules later when needed.\r\n        this.ngModulesWithSomeUnresolvedDecls.add(type);\r\n    }\r\n    /** @override */\r\n    clearScopeCacheFor(type) {\r\n        this.ngModulesScopeCache.delete(type);\r\n        this.standaloneComponentsScopeCache.delete(type);\r\n    }\r\n    /** @override */\r\n    getNgModuleScope(type) {\r\n        if (this.ngModulesScopeCache.has(type)) {\r\n            return this.ngModulesScopeCache.get(type);\r\n        }\r\n        const scope = this.computeNgModuleScope(type);\r\n        this.ngModulesScopeCache.set(type, scope);\r\n        return scope;\r\n    }\r\n    /** Compute NgModule scope afresh. */\r\n    computeNgModuleScope(type) {\r\n        const def = getNgModuleDefOrThrow(type);\r\n        const scope = {\r\n            exported: { directives: new Set(), pipes: new Set() },\r\n            compilation: { directives: new Set(), pipes: new Set() },\r\n        };\r\n        // Analyzing imports\r\n        for (const imported of maybeUnwrapFn(def.imports)) {\r\n            if (isNgModule(imported)) {\r\n                const importedScope = this.getNgModuleScope(imported);\r\n                // When this module imports another, the imported module's exported directives and pipes\r\n                // are added to the compilation scope of this module.\r\n                addSet(importedScope.exported.directives, scope.compilation.directives);\r\n                addSet(importedScope.exported.pipes, scope.compilation.pipes);\r\n            }\r\n            else if (isStandalone(imported)) {\r\n                if (isDirective(imported) || isComponent(imported)) {\r\n                    scope.compilation.directives.add(imported);\r\n                }\r\n                else if (isPipe(imported)) {\r\n                    scope.compilation.pipes.add(imported);\r\n                }\r\n                else {\r\n                    // The standalone thing is neither a component nor a directive nor a pipe ... (what?)\r\n                    throw new RuntimeError(980 /* RuntimeErrorCode.RUNTIME_DEPS_INVALID_IMPORTED_TYPE */, 'The standalone imported type is neither a component nor a directive nor a pipe');\r\n                }\r\n            }\r\n            else {\r\n                // The import is neither a module nor a module-with-providers nor a standalone thing. This\r\n                // is going to be an error. So we short circuit.\r\n                scope.compilation.isPoisoned = true;\r\n                break;\r\n            }\r\n        }\r\n        // Analyzing declarations\r\n        if (!scope.compilation.isPoisoned) {\r\n            for (const decl of maybeUnwrapFn(def.declarations)) {\r\n                // Cannot declare another NgModule or a standalone thing\r\n                if (isNgModule(decl) || isStandalone(decl)) {\r\n                    scope.compilation.isPoisoned = true;\r\n                    break;\r\n                }\r\n                if (isPipe(decl)) {\r\n                    scope.compilation.pipes.add(decl);\r\n                }\r\n                else {\r\n                    // decl is either a directive or a component. The component may not yet have the ɵcmp due\r\n                    // to async compilation.\r\n                    scope.compilation.directives.add(decl);\r\n                }\r\n            }\r\n        }\r\n        // Analyzing exports\r\n        for (const exported of maybeUnwrapFn(def.exports)) {\r\n            if (isNgModule(exported)) {\r\n                // When this module exports another, the exported module's exported directives and pipes\r\n                // are added to both the compilation and exported scopes of this module.\r\n                const exportedScope = this.getNgModuleScope(exported);\r\n                // Based on the current logic there is no way to have poisoned exported scope. So no need to\r\n                // check for it.\r\n                addSet(exportedScope.exported.directives, scope.exported.directives);\r\n                addSet(exportedScope.exported.pipes, scope.exported.pipes);\r\n                // Some test toolings which run in JIT mode depend on this behavior that the exported scope\r\n                // should also be present in the compilation scope, even though AoT does not support this\r\n                // and it is also in odds with NgModule metadata definitions. Without this some tests in\r\n                // Google will fail.\r\n                addSet(exportedScope.exported.directives, scope.compilation.directives);\r\n                addSet(exportedScope.exported.pipes, scope.compilation.pipes);\r\n            }\r\n            else if (isPipe(exported)) {\r\n                scope.exported.pipes.add(exported);\r\n            }\r\n            else {\r\n                scope.exported.directives.add(exported);\r\n            }\r\n        }\r\n        return scope;\r\n    }\r\n    /** @override */\r\n    getStandaloneComponentScope(type, rawImports) {\r\n        if (this.standaloneComponentsScopeCache.has(type)) {\r\n            return this.standaloneComponentsScopeCache.get(type);\r\n        }\r\n        const ans = this.computeStandaloneComponentScope(type, rawImports);\r\n        this.standaloneComponentsScopeCache.set(type, ans);\r\n        return ans;\r\n    }\r\n    computeStandaloneComponentScope(type, rawImports) {\r\n        const ans = {\r\n            compilation: {\r\n                // Standalone components are always able to self-reference.\r\n                directives: new Set([type]),\r\n                pipes: new Set(),\r\n                ngModules: new Set(),\r\n            },\r\n        };\r\n        for (const rawImport of flatten(rawImports ?? [])) {\r\n            const imported = resolveForwardRef(rawImport);\r\n            try {\r\n                verifyStandaloneImport(imported, type);\r\n            }\r\n            catch (e) {\r\n                // Short-circuit if an import is not valid\r\n                ans.compilation.isPoisoned = true;\r\n                return ans;\r\n            }\r\n            if (isNgModule(imported)) {\r\n                ans.compilation.ngModules.add(imported);\r\n                const importedScope = this.getNgModuleScope(imported);\r\n                // Short-circuit if an imported NgModule has corrupted exported scope.\r\n                if (importedScope.exported.isPoisoned) {\r\n                    ans.compilation.isPoisoned = true;\r\n                    return ans;\r\n                }\r\n                addSet(importedScope.exported.directives, ans.compilation.directives);\r\n                addSet(importedScope.exported.pipes, ans.compilation.pipes);\r\n            }\r\n            else if (isPipe(imported)) {\r\n                ans.compilation.pipes.add(imported);\r\n            }\r\n            else if (isDirective(imported) || isComponent(imported)) {\r\n                ans.compilation.directives.add(imported);\r\n            }\r\n            else {\r\n                // The imported thing is not module/pipe/directive/component, so we error and short-circuit\r\n                // here\r\n                ans.compilation.isPoisoned = true;\r\n                return ans;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n    /** @override */\r\n    isOrphanComponent(cmp) {\r\n        const def = getComponentDef(cmp);\r\n        if (!def || def.standalone) {\r\n            return false;\r\n        }\r\n        this.resolveNgModulesDecls();\r\n        return !this.ownerNgModule.has(cmp);\r\n    }\r\n}\r\nfunction addSet(sourceSet, targetSet) {\r\n    for (const m of sourceSet) {\r\n        targetSet.add(m);\r\n    }\r\n}\r\n/** The deps tracker to be used in the current Angular app in dev mode. */\r\nconst depsTracker = new DepsTracker();\r\n\r\n// This default value is when checking the hierarchy for a token.\r\n//\r\n// It means both:\r\n// - the token is not provided by the current injector,\r\n// - only the element injectors should be checked (ie do not check module injectors\r\n//\r\n//          mod1\r\n//         /\r\n//       el1   mod2\r\n//         \\  /\r\n//         el2\r\n//\r\n// When requesting el2.injector.get(token), we should check in the following order and return the\r\n// first found value:\r\n// - el2.injector.get(token, default)\r\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\r\n// - mod2.injector.get(token, default)\r\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\r\n\r\n/**\r\n * Injector that looks up a value using a specific injector, before falling back to the module\r\n * injector. Used primarily when creating components or embedded views dynamically.\r\n */\r\nclass ChainedInjector {\r\n    injector;\r\n    parentInjector;\r\n    constructor(injector, parentInjector) {\r\n        this.injector = injector;\r\n        this.parentInjector = parentInjector;\r\n    }\r\n    get(token, notFoundValue, options) {\r\n        const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, options);\r\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\r\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\r\n            // Return the value from the root element injector when\r\n            // - it provides it\r\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n            // - the module injector should not be checked\r\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n            return value;\r\n        }\r\n        return this.parentInjector.get(token, notFoundValue, options);\r\n    }\r\n}\r\n\r\n/**\r\n * Compute the static styling (class/style) from `TAttributes`.\r\n *\r\n * This function should be called during `firstCreatePass` only.\r\n *\r\n * @param tNode The `TNode` into which the styling information should be loaded.\r\n * @param attrs `TAttributes` containing the styling information.\r\n * @param writeToHost Where should the resulting static styles be written?\r\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\r\n *   - `true` Write to `TNode.styles` / `TNode.classes`\r\n */\r\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\r\n    ngDevMode &&\r\n        assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\r\n    let styles = writeToHost ? tNode.styles : null;\r\n    let classes = writeToHost ? tNode.classes : null;\r\n    let mode = 0;\r\n    if (attrs !== null) {\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const value = attrs[i];\r\n            if (typeof value === 'number') {\r\n                mode = value;\r\n            }\r\n            else if (mode == 1 /* AttributeMarker.Classes */) {\r\n                classes = concatStringsWithSpace(classes, value);\r\n            }\r\n            else if (mode == 2 /* AttributeMarker.Styles */) {\r\n                const style = value;\r\n                const styleValue = attrs[++i];\r\n                styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\r\n            }\r\n        }\r\n    }\r\n    writeToHost ? (tNode.styles = styles) : (tNode.stylesWithoutHost = styles);\r\n    writeToHost ? (tNode.classes = classes) : (tNode.classesWithoutHost = classes);\r\n}\r\n\r\nfunction ɵɵdirectiveInject(token, flags = 0 /* InternalInjectFlags.Default */) {\r\n    const lView = getLView();\r\n    // Fall back to inject() if view hasn't been created. This situation can happen in tests\r\n    // if inject utilities are used before bootstrapping.\r\n    if (lView === null) {\r\n        // Verify that we will not get into infinite loop.\r\n        ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\r\n        return __inject(token, flags);\r\n    }\r\n    const tNode = getCurrentTNode();\r\n    const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\r\n    ngDevMode && emitInjectEvent(token, value, flags);\r\n    return value;\r\n}\r\n/**\r\n * Throws an error indicating that a factory function could not be generated by the compiler for a\r\n * particular class.\r\n *\r\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\r\n * off, saving bytes of generated code while still providing a good experience in dev mode.\r\n *\r\n * The name of the class is not mentioned here, but will be in the generated factory function name\r\n * and thus in the stack trace.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinvalidFactory() {\r\n    const msg = ngDevMode\r\n        ? `This constructor was not compatible with Dependency Injection.`\r\n        : 'invalid';\r\n    throw new Error(msg);\r\n}\r\n\r\n/**\r\n * Resolve the matched directives on a node.\r\n */\r\nfunction resolveDirectives(tView, lView, tNode, localRefs, directiveMatcher) {\r\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    const exportsMap = localRefs === null ? null : { '': -1 };\r\n    const matchedDirectiveDefs = directiveMatcher(tView, tNode);\r\n    if (matchedDirectiveDefs !== null) {\r\n        let directiveDefs = matchedDirectiveDefs;\r\n        let hostDirectiveDefs = null;\r\n        let hostDirectiveRanges = null;\r\n        for (const def of matchedDirectiveDefs) {\r\n            if (def.resolveHostDirectives !== null) {\r\n                [directiveDefs, hostDirectiveDefs, hostDirectiveRanges] =\r\n                    def.resolveHostDirectives(matchedDirectiveDefs);\r\n                break;\r\n            }\r\n        }\r\n        ngDevMode && assertNoDuplicateDirectives(directiveDefs);\r\n        initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs, hostDirectiveRanges);\r\n    }\r\n    if (exportsMap !== null && localRefs !== null) {\r\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\r\n    }\r\n}\r\n/** Caches local names and their matching directive indices for query and template lookups. */\r\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\r\n    const localNames = (tNode.localNames = []);\r\n    // Local names must be stored in tNode in the same order that localRefs are defined\r\n    // in the template to ensure the data is loaded in the same slots as their refs\r\n    // in the template (for template queries).\r\n    for (let i = 0; i < localRefs.length; i += 2) {\r\n        const index = exportsMap[localRefs[i + 1]];\r\n        if (index == null)\r\n            throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\r\n        localNames.push(localRefs[i], index);\r\n    }\r\n}\r\n/**\r\n * Marks a given TNode as a component's host. This consists of:\r\n * - setting the component offset on the TNode.\r\n * - storing index of component's host element so it will be queued for view refresh during CD.\r\n */\r\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\r\n    hostTNode.componentOffset = componentOffset;\r\n    (tView.components ??= []).push(hostTNode.index);\r\n}\r\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\r\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs, hostDirectiveRanges) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    const directivesLength = directives.length;\r\n    let hasSeenComponent = false;\r\n    // Publishes the directive types to DI so they can be injected. Needs to\r\n    // happen in a separate pass before the TNode flags have been initialized.\r\n    for (let i = 0; i < directivesLength; i++) {\r\n        const def = directives[i];\r\n        if (!hasSeenComponent && isComponentDef(def)) {\r\n            hasSeenComponent = true;\r\n            markAsComponentHost(tView, tNode, i);\r\n        }\r\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, def.type);\r\n    }\r\n    initTNodeFlags(tNode, tView.data.length, directivesLength);\r\n    // When the same token is provided by several directives on the same node, some rules apply in\r\n    // the viewEngine:\r\n    // - viewProviders have priority over providers\r\n    // - the last directive in NgModule.declarations has priority over the previous one\r\n    // So to match these rules, the order in which providers are added in the arrays is very\r\n    // important.\r\n    for (let i = 0; i < directivesLength; i++) {\r\n        const def = directives[i];\r\n        if (def.providersResolver)\r\n            def.providersResolver(def);\r\n    }\r\n    let preOrderHooksFound = false;\r\n    let preOrderCheckHooksFound = false;\r\n    let directiveIdx = allocExpando(tView, lView, directivesLength, null);\r\n    ngDevMode &&\r\n        assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\r\n    // If there's at least one directive, we'll have to track it so initialize the map.\r\n    if (directivesLength > 0) {\r\n        tNode.directiveToIndex = new Map();\r\n    }\r\n    for (let i = 0; i < directivesLength; i++) {\r\n        const def = directives[i];\r\n        // Merge the attrs in the order of matches. This assumes that the first directive is the\r\n        // component itself, so that the component has the least priority.\r\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\r\n        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\r\n        saveNameToExportMap(directiveIdx, def, exportsMap);\r\n        // If a directive has host directives, we need to track both its index and the range within\r\n        // the host directives are declared. Host directives are not tracked, but should be resolved\r\n        // by looking up the host and getting its indexes from there.\r\n        if (hostDirectiveRanges !== null && hostDirectiveRanges.has(def)) {\r\n            const [start, end] = hostDirectiveRanges.get(def);\r\n            tNode.directiveToIndex.set(def.type, [\r\n                directiveIdx,\r\n                start + tNode.directiveStart,\r\n                end + tNode.directiveStart,\r\n            ]);\r\n        }\r\n        else if (hostDirectiveDefs === null || !hostDirectiveDefs.has(def)) {\r\n            tNode.directiveToIndex.set(def.type, directiveIdx);\r\n        }\r\n        if (def.contentQueries !== null)\r\n            tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\r\n        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\r\n            tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\r\n        const lifeCycleHooks = def.type.prototype;\r\n        // Only push a node index into the preOrderHooks array if this is the first\r\n        // pre-order hook found on this node.\r\n        if (!preOrderHooksFound &&\r\n            (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\r\n            // We will push the actual hook function into this array later during dir instantiation.\r\n            // We cannot do it now because we must ensure hooks are registered in the same\r\n            // order that directives are created (i.e. injection order).\r\n            (tView.preOrderHooks ??= []).push(tNode.index);\r\n            preOrderHooksFound = true;\r\n        }\r\n        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\r\n            (tView.preOrderCheckHooks ??= []).push(tNode.index);\r\n            preOrderCheckHooksFound = true;\r\n        }\r\n        directiveIdx++;\r\n    }\r\n    initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\r\n}\r\n/**\r\n * Initializes data structures required to work with directive inputs and outputs.\r\n * Initialization is done for all directives matched on a given TNode.\r\n */\r\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    for (let index = tNode.directiveStart; index < tNode.directiveEnd; index++) {\r\n        const directiveDef = tView.data[index];\r\n        if (hostDirectiveDefs === null || !hostDirectiveDefs.has(directiveDef)) {\r\n            setupSelectorMatchedInputsOrOutputs(0 /* BindingType.Inputs */, tNode, directiveDef, index);\r\n            setupSelectorMatchedInputsOrOutputs(1 /* BindingType.Outputs */, tNode, directiveDef, index);\r\n            setupInitialInputs(tNode, index, false);\r\n        }\r\n        else {\r\n            const hostDirectiveDef = hostDirectiveDefs.get(directiveDef);\r\n            setupHostDirectiveInputsOrOutputs(0 /* BindingType.Inputs */, tNode, hostDirectiveDef, index);\r\n            setupHostDirectiveInputsOrOutputs(1 /* BindingType.Outputs */, tNode, hostDirectiveDef, index);\r\n            setupInitialInputs(tNode, index, true);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Sets up the input/output bindings for a directive that was matched in the template through its\r\n * selector. This method is called repeatedly to build up all of the available inputs on a node.\r\n *\r\n * @param mode Whether inputs or outputs are being contructed.\r\n * @param tNode Node on which the bindings are being set up.\r\n * @param def Directive definition for which the bindings are being set up.\r\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\r\n */\r\nfunction setupSelectorMatchedInputsOrOutputs(mode, tNode, def, directiveIndex) {\r\n    const aliasMap = mode === 0 /* BindingType.Inputs */ ? def.inputs : def.outputs;\r\n    for (const publicName in aliasMap) {\r\n        if (aliasMap.hasOwnProperty(publicName)) {\r\n            let bindings;\r\n            if (mode === 0 /* BindingType.Inputs */) {\r\n                bindings = tNode.inputs ??= {};\r\n            }\r\n            else {\r\n                bindings = tNode.outputs ??= {};\r\n            }\r\n            bindings[publicName] ??= [];\r\n            bindings[publicName].push(directiveIndex);\r\n            setShadowStylingInputFlags(tNode, publicName);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Sets up input/output bindings that were defined through host directives on a specific node.\r\n * @param mode Whether inputs or outputs are being contructed.\r\n * @param tNode Node on which the bindings are being set up.\r\n * @param config Host directive definition that is being set up.\r\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\r\n */\r\nfunction setupHostDirectiveInputsOrOutputs(mode, tNode, config, directiveIndex) {\r\n    const aliasMap = mode === 0 /* BindingType.Inputs */ ? config.inputs : config.outputs;\r\n    for (const initialName in aliasMap) {\r\n        if (aliasMap.hasOwnProperty(initialName)) {\r\n            const publicName = aliasMap[initialName];\r\n            let bindings;\r\n            if (mode === 0 /* BindingType.Inputs */) {\r\n                bindings = tNode.hostDirectiveInputs ??= {};\r\n            }\r\n            else {\r\n                bindings = tNode.hostDirectiveOutputs ??= {};\r\n            }\r\n            bindings[publicName] ??= [];\r\n            bindings[publicName].push(directiveIndex, initialName);\r\n            setShadowStylingInputFlags(tNode, publicName);\r\n        }\r\n    }\r\n}\r\nfunction setShadowStylingInputFlags(tNode, publicName) {\r\n    if (publicName === 'class') {\r\n        tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\r\n    }\r\n    else if (publicName === 'style') {\r\n        tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\r\n    }\r\n}\r\n/**\r\n * Sets up the initialInputData for a node and stores it in the template's static storage\r\n * so subsequent template invocations don't have to recalculate it.\r\n *\r\n * initialInputData is an array containing values that need to be set as input properties\r\n * for directives on this node, but only once on creation. We need this array to support\r\n * the case where you set an @Input property of a directive using attribute-like syntax.\r\n * e.g. if you have a `name` @Input, you can set it once like this:\r\n *\r\n * <my-component name=\"Bess\"></my-component>\r\n *\r\n * @param tNode TNode on which to set up the initial inputs.\r\n * @param directiveIndex Index of the directive that is currently being processed.\r\n */\r\nfunction setupInitialInputs(tNode, directiveIndex, isHostDirective) {\r\n    const { attrs, inputs, hostDirectiveInputs } = tNode;\r\n    if (attrs === null ||\r\n        (!isHostDirective && inputs === null) ||\r\n        (isHostDirective && hostDirectiveInputs === null) ||\r\n        // Do not use unbound attributes as inputs to structural directives, since structural\r\n        // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\r\n        isInlineTemplate(tNode)) {\r\n        tNode.initialInputs ??= [];\r\n        tNode.initialInputs.push(null);\r\n        return;\r\n    }\r\n    let inputsToStore = null;\r\n    let i = 0;\r\n    while (i < attrs.length) {\r\n        const attrName = attrs[i];\r\n        if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\r\n            // We do not allow inputs on namespaced attributes.\r\n            i += 4;\r\n            continue;\r\n        }\r\n        else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\r\n            // Skip over the `ngProjectAs` value.\r\n            i += 2;\r\n            continue;\r\n        }\r\n        else if (typeof attrName === 'number') {\r\n            // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\r\n            break;\r\n        }\r\n        if (!isHostDirective && inputs.hasOwnProperty(attrName)) {\r\n            // Find the input's public name from the input store. Note that we can be found easier\r\n            // through the directive def, but we want to do it using the inputs store so that it can\r\n            // account for host directive aliases.\r\n            const inputConfig = inputs[attrName];\r\n            for (const index of inputConfig) {\r\n                if (index === directiveIndex) {\r\n                    inputsToStore ??= [];\r\n                    inputsToStore.push(attrName, attrs[i + 1]);\r\n                    // A directive can't have multiple inputs with the same name so we can break here.\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (isHostDirective && hostDirectiveInputs.hasOwnProperty(attrName)) {\r\n            const config = hostDirectiveInputs[attrName];\r\n            for (let j = 0; j < config.length; j += 2) {\r\n                if (config[j] === directiveIndex) {\r\n                    inputsToStore ??= [];\r\n                    inputsToStore.push(config[j + 1], attrs[i + 1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        i += 2;\r\n    }\r\n    tNode.initialInputs ??= [];\r\n    tNode.initialInputs.push(inputsToStore);\r\n}\r\n/**\r\n * Setup directive for instantiation.\r\n *\r\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\r\n * as `LView`. `TView` gets the `DirectiveDef`.\r\n *\r\n * @param tView `TView`\r\n * @param tNode `TNode`\r\n * @param lView `LView`\r\n * @param directiveIndex Index where the directive will be stored in the Expando.\r\n * @param def `DirectiveDef`\r\n */\r\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\r\n    ngDevMode &&\r\n        assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\r\n    tView.data[directiveIndex] = def;\r\n    const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\r\n    // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\r\n    // we also want to support `inject()` directly from the directive constructor context so we set\r\n    // `ɵɵdirectiveInject` as the inject implementation here too.\r\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\r\n    tView.blueprint[directiveIndex] = nodeInjectorFactory;\r\n    lView[directiveIndex] = nodeInjectorFactory;\r\n    registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\r\n}\r\n/**\r\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\r\n *\r\n * @param tView `TView` to which the `hostBindings` should be added.\r\n * @param tNode `TNode` the element which contains the directive\r\n * @param directiveIdx Directive index in view.\r\n * @param directiveVarsIdx Where will the directive's vars be stored\r\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\r\n */\r\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    const hostBindings = def.hostBindings;\r\n    if (hostBindings) {\r\n        let hostBindingOpCodes = tView.hostBindingOpCodes;\r\n        if (hostBindingOpCodes === null) {\r\n            hostBindingOpCodes = tView.hostBindingOpCodes = [];\r\n        }\r\n        const elementIndx = ~tNode.index;\r\n        if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\r\n            // Conditionally add select element so that we are more efficient in execution.\r\n            // NOTE: this is strictly not necessary and it trades code size for runtime perf.\r\n            // (We could just always add it.)\r\n            hostBindingOpCodes.push(elementIndx);\r\n        }\r\n        hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\r\n    }\r\n}\r\n/**\r\n * Returns the last selected element index in the `HostBindingOpCodes`\r\n *\r\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\r\n * if it changes. This method returns the last index (or '0' if not found.)\r\n *\r\n * Selected element index are only the ones which are negative.\r\n */\r\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\r\n    let i = hostBindingOpCodes.length;\r\n    while (i > 0) {\r\n        const value = hostBindingOpCodes[--i];\r\n        if (typeof value === 'number' && value < 0) {\r\n            return value;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * Builds up an export map as directives are created, so local refs can be quickly mapped\r\n * to their directive instances.\r\n */\r\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\r\n    if (exportsMap) {\r\n        if (def.exportAs) {\r\n            for (let i = 0; i < def.exportAs.length; i++) {\r\n                exportsMap[def.exportAs[i]] = directiveIdx;\r\n            }\r\n        }\r\n        if (isComponentDef(def))\r\n            exportsMap[''] = directiveIdx;\r\n    }\r\n}\r\n/**\r\n * Initializes the flags on the current node, setting all indices to the initial index,\r\n * the directive count to 0, and adding the isComponent flag.\r\n * @param index the initial index\r\n */\r\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\r\n    ngDevMode &&\r\n        assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\r\n    tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\r\n    // When the first directive is created on a node, save the index\r\n    tNode.directiveStart = index;\r\n    tNode.directiveEnd = index + numberOfDirectives;\r\n    tNode.providerIndexes = index;\r\n}\r\nfunction assertNoDuplicateDirectives(directives) {\r\n    // The array needs at least two elements in order to have duplicates.\r\n    if (directives.length < 2) {\r\n        return;\r\n    }\r\n    const seenDirectives = new Set();\r\n    for (const current of directives) {\r\n        if (seenDirectives.has(current)) {\r\n            throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTIVE */, `Directive ${current.type.name} matches multiple times on the same element. ` +\r\n                `Directives can only match an element once.`);\r\n        }\r\n        seenDirectives.add(current);\r\n    }\r\n}\r\n\r\nfunction elementStartFirstCreatePass(index, tView, lView, name, directiveMatcher, bindingsEnabled, attrsIndex, localRefsIndex) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    const tViewConsts = tView.consts;\r\n    const attrs = getConstant(tViewConsts, attrsIndex);\r\n    const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\r\n    if (bindingsEnabled) {\r\n        resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), directiveMatcher);\r\n    }\r\n    // Merge the template attrs last so that they have the highest priority.\r\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\r\n    if (tNode.attrs !== null) {\r\n        computeStaticStyling(tNode, tNode.attrs, false);\r\n    }\r\n    if (tNode.mergedAttrs !== null) {\r\n        computeStaticStyling(tNode, tNode.mergedAttrs, true);\r\n    }\r\n    if (tView.queries !== null) {\r\n        tView.queries.elementStart(tView, tNode);\r\n    }\r\n    return tNode;\r\n}\r\nfunction elementEndFirstCreatePass(tView, tNode) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    registerPostOrderHooks(tView, tNode);\r\n    if (isContentQueryHost(tNode)) {\r\n        tView.queries.elementEnd(tNode);\r\n    }\r\n}\r\n\r\nfunction isListLikeIterable(obj) {\r\n    if (!isJsObject(obj))\r\n        return false;\r\n    return (Array.isArray(obj) ||\r\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\r\n            Symbol.iterator in obj)); // JS Iterable have a Symbol.iterator prop\r\n}\r\nfunction areIterablesEqual(a, b, comparator) {\r\n    const iterator1 = a[Symbol.iterator]();\r\n    const iterator2 = b[Symbol.iterator]();\r\n    while (true) {\r\n        const item1 = iterator1.next();\r\n        const item2 = iterator2.next();\r\n        if (item1.done && item2.done)\r\n            return true;\r\n        if (item1.done || item2.done)\r\n            return false;\r\n        if (!comparator(item1.value, item2.value))\r\n            return false;\r\n    }\r\n}\r\nfunction iterateListLike(obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (let i = 0; i < obj.length; i++) {\r\n            fn(obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        const iterator = obj[Symbol.iterator]();\r\n        let item;\r\n        while (!(item = iterator.next()).done) {\r\n            fn(item.value);\r\n        }\r\n    }\r\n}\r\nfunction isJsObject(o) {\r\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\r\n}\r\n\r\nfunction devModeEqual(a, b) {\r\n    const isListLikeIterableA = isListLikeIterable(a);\r\n    const isListLikeIterableB = isListLikeIterable(b);\r\n    if (isListLikeIterableA && isListLikeIterableB) {\r\n        return areIterablesEqual(a, b, devModeEqual);\r\n    }\r\n    else {\r\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\r\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\r\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\r\n            return true;\r\n        }\r\n        else {\r\n            return Object.is(a, b);\r\n        }\r\n    }\r\n}\r\n\r\n// TODO(misko): consider inlining\r\n/** Updates binding and returns the value. */\r\nfunction updateBinding(lView, bindingIndex, value) {\r\n    return (lView[bindingIndex] = value);\r\n}\r\n/** Gets the current binding value. */\r\nfunction getBinding(lView, bindingIndex) {\r\n    ngDevMode && assertIndexInRange(lView, bindingIndex);\r\n    ngDevMode &&\r\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\r\n    return lView[bindingIndex];\r\n}\r\n/**\r\n * Updates binding if changed, then returns whether it was updated.\r\n *\r\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\r\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\r\n * behavior.\r\n *\r\n * @param lView current `LView`\r\n * @param bindingIndex The binding in the `LView` to check\r\n * @param value New value to check against `lView[bindingIndex]`\r\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\r\n *          `CheckNoChangesMode`)\r\n */\r\nfunction bindingUpdated(lView, bindingIndex, value) {\r\n    ngDevMode &&\r\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\r\n    if (value === NO_CHANGE) {\r\n        return false;\r\n    }\r\n    const oldValue = lView[bindingIndex];\r\n    if (Object.is(oldValue, value)) {\r\n        return false;\r\n    }\r\n    else {\r\n        if (ngDevMode && isInCheckNoChangesMode()) {\r\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\r\n            // (before the change detection was run).\r\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\r\n            if (!devModeEqual(oldValueToCompare, value)) {\r\n                const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\r\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);\r\n            }\r\n            // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\r\n            // For this reason we exit as if no change. The early exit is needed to prevent the changed\r\n            // value to be written into `LView` (If we would write the new value that we would not see it\r\n            // as change on next CD.)\r\n            return false;\r\n        }\r\n        lView[bindingIndex] = value;\r\n        return true;\r\n    }\r\n}\r\n/** Updates 2 bindings if changed, then returns whether either was updated. */\r\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\r\n    const different = bindingUpdated(lView, bindingIndex, exp1);\r\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\r\n}\r\n/** Updates 3 bindings if changed, then returns whether any was updated. */\r\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\r\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\r\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\r\n}\r\n/** Updates 4 bindings if changed, then returns whether any was updated. */\r\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\r\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\r\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\r\n}\r\n\r\n/**\r\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\r\n * if applicable.\r\n *\r\n * @param tNode The TNode associated with this listener\r\n * @param lView The LView that contains this listener\r\n * @param listenerFn The listener function to call\r\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\r\n * (the procedural renderer does this already, so in those cases, we should skip)\r\n */\r\nfunction wrapListener(tNode, lView, listenerFn) {\r\n    // Note: we are performing most of the work in the listener function itself\r\n    // to optimize listener registration.\r\n    return function wrapListenerIn_markDirtyAndPreventDefault(event) {\r\n        // In order to be backwards compatible with View Engine, events on component host nodes\r\n        // must also mark the component view itself dirty (i.e. the view that it owns).\r\n        const startView = isComponentHost(tNode) ? getComponentLViewByIndex(tNode.index, lView) : lView;\r\n        markViewDirty(startView, 5 /* NotificationSource.Listener */);\r\n        const context = lView[CONTEXT];\r\n        let result = executeListenerWithErrorHandling(lView, context, listenerFn, event);\r\n        // A just-invoked listener function might have coalesced listeners so we need to check for\r\n        // their presence and invoke as needed.\r\n        let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\r\n        while (nextListenerFn) {\r\n            // We should prevent default if any of the listeners explicitly return false\r\n            result = executeListenerWithErrorHandling(lView, context, nextListenerFn, event) && result;\r\n            nextListenerFn = nextListenerFn.__ngNextListenerFn__;\r\n        }\r\n        return result;\r\n    };\r\n}\r\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\r\n    const prevConsumer = setActiveConsumer$1(null);\r\n    try {\r\n        profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\r\n        // Only explicitly returning false from a listener should preventDefault\r\n        return listenerFn(e) !== false;\r\n    }\r\n    catch (error) {\r\n        handleUncaughtError(lView, error);\r\n        return false;\r\n    }\r\n    finally {\r\n        profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\r\n        setActiveConsumer$1(prevConsumer);\r\n    }\r\n}\r\n/**\r\n * Listen to a DOM event on a specific node.\r\n * @param tNode TNode on which to listen.\r\n * @param tView TView in which the node is placed.\r\n * @param lView LView in which the node instance is placed.\r\n * @param eventTargetResolver Resolver for global event targets.\r\n * @param renderer Renderer to use for listening to the event.\r\n * @param eventName Name of the event.\r\n * @param originalListener Original listener as it was created by the compiler. Necessary for event\r\n *   coalescing.\r\n * @param wrappedListener Listener wrapped with additional logic like marking for check and error\r\n *   handling.\r\n * @returns Boolean indicating whether the event was bound or was coalesced into an existing\r\n *   listener.\r\n */\r\nfunction listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, originalListener, wrappedListener) {\r\n    ngDevMode &&\r\n        assertNotSame(wrappedListener, originalListener, 'Expected wrapped and original listeners to be different.');\r\n    const isTNodeDirectiveHost = isDirectiveHost(tNode);\r\n    let hasCoalesced = false;\r\n    // In order to match current behavior, native DOM event listeners must be added for all\r\n    // events (including outputs).\r\n    // There might be cases where multiple directives on the same element try to register an event\r\n    // handler function for the same event. In this situation we want to avoid registration of\r\n    // several native listeners as each registration would be intercepted by NgZone and\r\n    // trigger change detection. This would mean that a single user action would result in several\r\n    // change detections being invoked. To avoid this situation we want to have only one call to\r\n    // native handler registration (for the same element and same type of event).\r\n    //\r\n    // In order to have just one native event handler in presence of multiple handler functions,\r\n    // we just register a first handler function as a native event listener and then chain\r\n    // (coalesce) other handler functions on top of the first native handler function.\r\n    let existingListener = null;\r\n    // Please note that the coalescing described here doesn't happen for events specifying an\r\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\r\n    // view engine.\r\n    // Also, we don't have to search for existing listeners if there are no directives\r\n    // matching on a given node as we can't register multiple event handlers for the same event in\r\n    // a template (this would mean having duplicate attributes).\r\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\r\n        existingListener = findExistingListener(tView, lView, eventName, tNode.index);\r\n    }\r\n    if (existingListener !== null) {\r\n        // Attach a new listener to coalesced listeners list, maintaining the order in which\r\n        // listeners are registered. For performance reasons, we keep a reference to the last\r\n        // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\r\n        // the entire set each time we need to add a new listener.\r\n        const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\r\n        lastListenerFn.__ngNextListenerFn__ = originalListener;\r\n        existingListener.__ngLastListenerFn__ = originalListener;\r\n        hasCoalesced = true;\r\n    }\r\n    else {\r\n        const native = getNativeByTNode(tNode, lView);\r\n        const target = eventTargetResolver ? eventTargetResolver(native) : native;\r\n        stashEventListenerImpl(lView, target, eventName, wrappedListener);\r\n        const cleanupFn = renderer.listen(target, eventName, wrappedListener);\r\n        const idxOrTargetGetter = eventTargetResolver\r\n            ? (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index]))\r\n            : tNode.index;\r\n        storeListenerCleanup(idxOrTargetGetter, tView, lView, eventName, wrappedListener, cleanupFn, false);\r\n    }\r\n    return hasCoalesced;\r\n}\r\n/**\r\n * A utility function that checks if a given element has already an event handler registered for an\r\n * event with a specified name. The TView.cleanup data structure is used to find out which events\r\n * are registered for a given element.\r\n */\r\nfunction findExistingListener(tView, lView, eventName, tNodeIndex) {\r\n    const tCleanup = tView.cleanup;\r\n    if (tCleanup != null) {\r\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\r\n            const cleanupEventName = tCleanup[i];\r\n            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIndex) {\r\n                // We have found a matching event name on the same node but it might not have been\r\n                // registered yet, so we must explicitly verify entries in the LView cleanup data\r\n                // structures.\r\n                const lCleanup = lView[CLEANUP];\r\n                const listenerIdxInLCleanup = tCleanup[i + 2];\r\n                return lCleanup && lCleanup.length > listenerIdxInLCleanup\r\n                    ? lCleanup[listenerIdxInLCleanup]\r\n                    : null;\r\n            }\r\n            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\r\n            // 2-element entries (for directive and queries destroy hooks). As such we can encounter\r\n            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\r\n            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\r\n            // documentation of TView.cleanup for more details of this data structure layout.\r\n            if (typeof cleanupEventName === 'string') {\r\n                i += 2;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Stores a cleanup function for an event listener.\r\n * @param indexOrTargetGetter Either the index of the TNode on which the event is bound or a\r\n *  function that when invoked will return the event target.\r\n * @param tView TView in which the event is bound.\r\n * @param lView LView in which the event is bound.\r\n * @param eventName Name of the event.\r\n * @param listenerFn Final callback of the event.\r\n * @param cleanup Function to invoke during cleanup.\r\n * @param isOutput Whether this is an output listener or a native DOM listener.\r\n */\r\nfunction storeListenerCleanup(indexOrTargetGetter, tView, lView, eventName, listenerFn, cleanup, isOutput) {\r\n    const tCleanup = tView.firstCreatePass ? getOrCreateTViewCleanup(tView) : null;\r\n    const lCleanup = getOrCreateLViewCleanup(lView);\r\n    const index = lCleanup.length;\r\n    lCleanup.push(listenerFn, cleanup);\r\n    tCleanup &&\r\n        tCleanup.push(eventName, indexOrTargetGetter, index, (index + 1) * (isOutput ? -1 : 1));\r\n}\r\n\r\nfunction createOutputListener(tNode, lView, listenerFn, targetDef, eventName) {\r\n    // TODO(pk): decouple checks from the actual binding\r\n    const wrappedListener = wrapListener(tNode, lView, listenerFn);\r\n    const hasBound = listenToDirectiveOutput(tNode, lView, targetDef, eventName, wrappedListener);\r\n    if (!hasBound && ngDevMode) {\r\n        throw new RuntimeError(316 /* RuntimeErrorCode.INVALID_BINDING_TARGET */, `${stringifyForError(targetDef.type)} does not have an output with a public name of \"${eventName}\".`);\r\n    }\r\n}\r\n/** Listens to an output on a specific directive. */\r\nfunction listenToDirectiveOutput(tNode, lView, target, eventName, listenerFn) {\r\n    let hostIndex = null;\r\n    let hostDirectivesStart = null;\r\n    let hostDirectivesEnd = null;\r\n    let hasOutput = false;\r\n    if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\r\n        throw new Error(`Node does not have a directive with type ${target.type.name}`);\r\n    }\r\n    const data = tNode.directiveToIndex.get(target.type);\r\n    if (typeof data === 'number') {\r\n        hostIndex = data;\r\n    }\r\n    else {\r\n        [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\r\n    }\r\n    if (hostDirectivesStart !== null &&\r\n        hostDirectivesEnd !== null &&\r\n        tNode.hostDirectiveOutputs?.hasOwnProperty(eventName)) {\r\n        const hostDirectiveOutputs = tNode.hostDirectiveOutputs[eventName];\r\n        for (let i = 0; i < hostDirectiveOutputs.length; i += 2) {\r\n            const index = hostDirectiveOutputs[i];\r\n            if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\r\n                ngDevMode && assertIndexInRange(lView, index);\r\n                hasOutput = true;\r\n                listenToOutput(tNode, lView, index, hostDirectiveOutputs[i + 1], eventName, listenerFn);\r\n            }\r\n            else if (index > hostDirectivesEnd) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (target.outputs.hasOwnProperty(eventName)) {\r\n        ngDevMode && assertIndexInRange(lView, hostIndex);\r\n        hasOutput = true;\r\n        listenToOutput(tNode, lView, hostIndex, eventName, eventName, listenerFn);\r\n    }\r\n    return hasOutput;\r\n}\r\nfunction listenToOutput(tNode, lView, directiveIndex, lookupName, eventName, listenerFn) {\r\n    ngDevMode && assertIndexInRange(lView, directiveIndex);\r\n    const instance = lView[directiveIndex];\r\n    const tView = lView[TVIEW];\r\n    const def = tView.data[directiveIndex];\r\n    const propertyName = def.outputs[lookupName];\r\n    const output = instance[propertyName];\r\n    if (ngDevMode && !isOutputSubscribable(output)) {\r\n        throw new Error(`@Output ${propertyName} not initialized in '${instance.constructor.name}'.`);\r\n    }\r\n    const subscription = output.subscribe(listenerFn);\r\n    storeListenerCleanup(tNode.index, tView, lView, eventName, listenerFn, subscription, true);\r\n}\r\n/**\r\n * Whether the given value represents a subscribable output.\r\n *\r\n * For example, an `EventEmitter, a `Subject`, an `Observable` or an\r\n * `OutputEmitter`.\r\n */\r\nfunction isOutputSubscribable(value) {\r\n    return (value != null && typeof value.subscribe === 'function');\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/** Symbol used to store and retrieve metadata about a binding. */\r\nconst BINDING = /* @__PURE__ */ Symbol('BINDING');\r\n// These are constant between all the bindings so we can reuse the objects.\r\nconst INPUT_BINDING_METADATA = { kind: 'input', requiredVars: 1 };\r\nconst OUTPUT_BINDING_METADATA = { kind: 'output', requiredVars: 0 };\r\n// TODO(pk): this is a sketch of an input binding instruction that still needs some cleanups\r\n// - take an index of a directive on TNode (as matched), review all the index mappings that we need to do\r\n// - move more logic to the first creation pass\r\n// - move this function to under the instructions folder\r\nfunction inputBindingUpdate(targetDirectiveIdx, publicName, value) {\r\n    const lView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, value)) {\r\n        const tView = lView[TVIEW];\r\n        const tNode = getSelectedTNode();\r\n        // TODO(pk): don't check on each and every binding, just assert in dev mode\r\n        const targetDef = tView.directiveRegistry[targetDirectiveIdx];\r\n        if (ngDevMode && !targetDef) {\r\n            throw new RuntimeError(315 /* RuntimeErrorCode.NO_BINDING_TARGET */, `Input binding to property \"${publicName}\" does not have a target.`);\r\n        }\r\n        // TODO(pk): the hasSet check should be replaced by one-off check in the first creation pass\r\n        const hasSet = setDirectiveInput(tNode, tView, lView, targetDef, publicName, value);\r\n        if (ngDevMode) {\r\n            if (!hasSet) {\r\n                throw new RuntimeError(315 /* RuntimeErrorCode.NO_BINDING_TARGET */, `${stringifyForError(targetDef.type)} does not have an input with a public name of \"${publicName}\".`);\r\n            }\r\n            storePropertyBindingMetadata(tView.data, tNode, publicName, bindingIndex);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates an input binding.\r\n * @param publicName Public name of the input to bind to.\r\n * @param value Callback that returns the current value for the binding. Can be either a signal or\r\n *   a plain getter function.\r\n *\r\n * ### Usage Example\r\n * In this example we create an instance of the `MyButton` component and bind the value of\r\n * the `isDisabled` signal to its `disabled` input.\r\n *\r\n * ```\r\n * const isDisabled = signal(false);\r\n *\r\n * createComponent(MyButton, {\r\n *   bindings: [inputBinding('disabled', isDisabled)]\r\n * });\r\n * ```\r\n */\r\nfunction inputBinding(publicName, value) {\r\n    // Note: ideally we would use a class here, but it seems like they\r\n    // don't get tree shaken when constructed by a function like this.\r\n    const binding = {\r\n        [BINDING]: INPUT_BINDING_METADATA,\r\n        update: () => inputBindingUpdate(binding.targetIdx, publicName, value()),\r\n    };\r\n    return binding;\r\n}\r\n/**\r\n * Creates an output binding.\r\n * @param eventName Public name of the output to listen to.\r\n * @param listener Function to be called when the output emits.\r\n *\r\n * ### Usage example\r\n * In this example we create an instance of the `MyCheckbox` component and listen\r\n * to its `onChange` event.\r\n *\r\n * ```\r\n * interface CheckboxChange {\r\n *   value: string;\r\n * }\r\n *\r\n * createComponent(MyCheckbox, {\r\n *   bindings: [\r\n *    outputBinding<CheckboxChange>('onChange', event => console.log(event.value))\r\n *   ],\r\n * });\r\n * ```\r\n */\r\nfunction outputBinding(eventName, listener) {\r\n    // Note: ideally we would use a class here, but it seems like they\r\n    // don't get tree shaken when constructed by a function like this.\r\n    const binding = {\r\n        [BINDING]: OUTPUT_BINDING_METADATA,\r\n        create: () => {\r\n            const lView = getLView();\r\n            const tNode = getCurrentTNode();\r\n            const tView = lView[TVIEW];\r\n            const targetDef = tView.directiveRegistry[binding.targetIdx];\r\n            createOutputListener(tNode, lView, listener, targetDef, eventName);\r\n        },\r\n    };\r\n    return binding;\r\n}\r\n/**\r\n * Creates a two-way binding.\r\n * @param eventName Public name of the two-way compatible input.\r\n * @param value Writable signal from which to get the current value and to which to write new\r\n * values.\r\n *\r\n * ### Usage example\r\n * In this example we create an instance of the `MyCheckbox` component and bind to its `value`\r\n * input using a two-way binding.\r\n *\r\n * ```\r\n * const checkboxValue = signal('');\r\n *\r\n * createComponent(MyCheckbox, {\r\n *   bindings: [\r\n *    twoWayBinding('value', checkboxValue),\r\n *   ],\r\n * });\r\n * ```\r\n */\r\nfunction twoWayBinding(publicName, value) {\r\n    const input = inputBinding(publicName, value);\r\n    const output = outputBinding(publicName + 'Change', (eventValue) => value.set(eventValue));\r\n    // We take advantage of inputs only having a `create` block and outputs only having an `update`\r\n    // block by passing them through directly instead of creating dedicated functions here. This\r\n    // assumption can break down if one of them starts targeting both blocks. These assertions\r\n    // are here to help us catch it if something changes in the future.\r\n    ngDevMode && assertNotDefined(input.create, 'Unexpected `create` callback in inputBinding');\r\n    ngDevMode && assertNotDefined(output.update, 'Unexpected `update` callback in outputBinding');\r\n    const binding = {\r\n        [BINDING]: {\r\n            kind: 'twoWay',\r\n            requiredVars: input[BINDING].requiredVars + output[BINDING].requiredVars,\r\n        },\r\n        set targetIdx(idx) {\r\n            input.targetIdx = idx;\r\n            output.targetIdx = idx;\r\n        },\r\n        create: output.create,\r\n        update: input.update,\r\n    };\r\n    return binding;\r\n}\r\n\r\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\r\n    ngModule;\r\n    /**\r\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\r\n     */\r\n    constructor(ngModule) {\r\n        super();\r\n        this.ngModule = ngModule;\r\n    }\r\n    resolveComponentFactory(component) {\r\n        ngDevMode && assertComponentType(component);\r\n        const componentDef = getComponentDef(component);\r\n        return new ComponentFactory(componentDef, this.ngModule);\r\n    }\r\n}\r\nfunction toInputRefArray(map) {\r\n    return Object.keys(map).map((name) => {\r\n        const [propName, flags, transform] = map[name];\r\n        const inputData = {\r\n            propName: propName,\r\n            templateName: name,\r\n            isSignal: (flags & InputFlags.SignalBased) !== 0,\r\n        };\r\n        if (transform) {\r\n            inputData.transform = transform;\r\n        }\r\n        return inputData;\r\n    });\r\n}\r\nfunction toOutputRefArray(map) {\r\n    return Object.keys(map).map((name) => ({ propName: map[name], templateName: name }));\r\n}\r\nfunction verifyNotAnOrphanComponent(componentDef) {\r\n    // TODO(pk): create assert that verifies ngDevMode\r\n    if ((typeof ngJitMode === 'undefined' || ngJitMode) &&\r\n        componentDef.debugInfo?.forbidOrphanRendering) {\r\n        if (depsTracker.isOrphanComponent(componentDef.type)) {\r\n            throw new RuntimeError(981 /* RuntimeErrorCode.RUNTIME_DEPS_ORPHAN_COMPONENT */, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(componentDef.type)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);\r\n        }\r\n    }\r\n}\r\nfunction createRootViewInjector(componentDef, environmentInjector, injector) {\r\n    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector\r\n        ? environmentInjector\r\n        : environmentInjector?.injector;\r\n    if (realEnvironmentInjector && componentDef.getStandaloneInjector !== null) {\r\n        realEnvironmentInjector =\r\n            componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\r\n    }\r\n    const rootViewInjector = realEnvironmentInjector\r\n        ? new ChainedInjector(injector, realEnvironmentInjector)\r\n        : injector;\r\n    return rootViewInjector;\r\n}\r\nfunction createRootLViewEnvironment(rootLViewInjector) {\r\n    const rendererFactory = rootLViewInjector.get(RendererFactory2, null);\r\n    if (rendererFactory === null) {\r\n        throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode &&\r\n            'Angular was not able to inject a renderer (RendererFactory2). ' +\r\n                'Likely this is due to a broken DI hierarchy. ' +\r\n                'Make sure that any injector used to create this component has a correct parent.');\r\n    }\r\n    const sanitizer = rootLViewInjector.get(Sanitizer, null);\r\n    const changeDetectionScheduler = rootLViewInjector.get(ChangeDetectionScheduler, null);\r\n    let ngReflect = false;\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        ngReflect = rootLViewInjector.get(NG_REFLECT_ATTRS_FLAG, NG_REFLECT_ATTRS_FLAG_DEFAULT);\r\n    }\r\n    return {\r\n        rendererFactory,\r\n        sanitizer,\r\n        changeDetectionScheduler,\r\n        ngReflect,\r\n    };\r\n}\r\nfunction createHostElement(componentDef, render) {\r\n    // Determine a tag name used for creating host elements when this component is created\r\n    // dynamically. Default to 'div' if this component did not specify any tag name in its\r\n    // selector.\r\n    const tagName = (componentDef.selectors[0][0] || 'div').toLowerCase();\r\n    const namespace = tagName === 'svg' ? SVG_NAMESPACE : tagName === 'math' ? MATH_ML_NAMESPACE : null;\r\n    return createElementNode(render, tagName, namespace);\r\n}\r\n/**\r\n * ComponentFactory interface implementation.\r\n */\r\nclass ComponentFactory extends ComponentFactory$1 {\r\n    componentDef;\r\n    ngModule;\r\n    selector;\r\n    componentType;\r\n    ngContentSelectors;\r\n    isBoundToModule;\r\n    cachedInputs = null;\r\n    cachedOutputs = null;\r\n    get inputs() {\r\n        this.cachedInputs ??= toInputRefArray(this.componentDef.inputs);\r\n        return this.cachedInputs;\r\n    }\r\n    get outputs() {\r\n        this.cachedOutputs ??= toOutputRefArray(this.componentDef.outputs);\r\n        return this.cachedOutputs;\r\n    }\r\n    /**\r\n     * @param componentDef The component definition.\r\n     * @param ngModule The NgModuleRef to which the factory is bound.\r\n     */\r\n    constructor(componentDef, ngModule) {\r\n        super();\r\n        this.componentDef = componentDef;\r\n        this.ngModule = ngModule;\r\n        this.componentType = componentDef.type;\r\n        this.selector = stringifyCSSSelectorList(componentDef.selectors);\r\n        this.ngContentSelectors = componentDef.ngContentSelectors ?? [];\r\n        this.isBoundToModule = !!ngModule;\r\n    }\r\n    create(injector, projectableNodes, rootSelectorOrNode, environmentInjector, directives, componentBindings) {\r\n        profiler(22 /* ProfilerEvent.DynamicComponentStart */);\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            const cmpDef = this.componentDef;\r\n            ngDevMode && verifyNotAnOrphanComponent(cmpDef);\r\n            const rootTView = createRootTView(rootSelectorOrNode, cmpDef, componentBindings, directives);\r\n            const rootViewInjector = createRootViewInjector(cmpDef, environmentInjector || this.ngModule, injector);\r\n            const environment = createRootLViewEnvironment(rootViewInjector);\r\n            const hostRenderer = environment.rendererFactory.createRenderer(null, cmpDef);\r\n            const hostElement = rootSelectorOrNode\r\n                ? locateHostElement(hostRenderer, rootSelectorOrNode, cmpDef.encapsulation, rootViewInjector)\r\n                : createHostElement(cmpDef, hostRenderer);\r\n            const hasInputBindings = componentBindings?.some(isInputBinding) ||\r\n                directives?.some((d) => typeof d !== 'function' && d.bindings.some(isInputBinding));\r\n            const rootLView = createLView(null, rootTView, null, 512 /* LViewFlags.IsRoot */ | getInitialLViewFlagsFromDef(cmpDef), null, null, environment, hostRenderer, rootViewInjector, null, retrieveHydrationInfo(hostElement, rootViewInjector, true /* isRootView */));\r\n            rootLView[HEADER_OFFSET] = hostElement;\r\n            // rootView is the parent when bootstrapping\r\n            // TODO(misko): it looks like we are entering view here but we don't really need to as\r\n            // `renderView` does that. However as the code is written it is needed because\r\n            // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\r\n            // issues would allow us to drop this.\r\n            enterView(rootLView);\r\n            let componentView = null;\r\n            try {\r\n                const hostTNode = elementStartFirstCreatePass(HEADER_OFFSET, rootTView, rootLView, '#host', () => rootTView.directiveRegistry, true, 0);\r\n                // ---- element instruction\r\n                // TODO(crisbeto): in practice `hostElement` should always be defined, but there are some\r\n                // tests where the renderer is mocked out and `undefined` is returned. We should update the\r\n                // tests so that this check can be removed.\r\n                if (hostElement) {\r\n                    setupStaticAttributes(hostRenderer, hostElement, hostTNode);\r\n                    attachPatchData(hostElement, rootLView);\r\n                }\r\n                // TODO(pk): this logic is similar to the instruction code where a node can have directives\r\n                createDirectivesInstances(rootTView, rootLView, hostTNode);\r\n                executeContentQueries(rootTView, hostTNode, rootLView);\r\n                elementEndFirstCreatePass(rootTView, hostTNode);\r\n                if (projectableNodes !== undefined) {\r\n                    projectNodes(hostTNode, this.ngContentSelectors, projectableNodes);\r\n                }\r\n                componentView = getComponentLViewByIndex(hostTNode.index, rootLView);\r\n                // TODO(pk): why do we need this logic?\r\n                rootLView[CONTEXT] = componentView[CONTEXT];\r\n                renderView(rootTView, rootLView, null);\r\n            }\r\n            catch (e) {\r\n                // Stop tracking the views if creation failed since\r\n                // the consumer won't have a way to dereference them.\r\n                if (componentView !== null) {\r\n                    unregisterLView(componentView);\r\n                }\r\n                unregisterLView(rootLView);\r\n                throw e;\r\n            }\r\n            finally {\r\n                profiler(23 /* ProfilerEvent.DynamicComponentEnd */);\r\n                leaveView();\r\n            }\r\n            return new ComponentRef(this.componentType, rootLView, !!hasInputBindings);\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n}\r\nfunction createRootTView(rootSelectorOrNode, componentDef, componentBindings, directives) {\r\n    const tAttributes = rootSelectorOrNode\r\n        ? ['ng-version', '20.0.6']\r\n        : // Extract attributes and classes from the first selector only to match VE behavior.\r\n            extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\r\n    let creationBindings = null;\r\n    let updateBindings = null;\r\n    let varsToAllocate = 0;\r\n    if (componentBindings) {\r\n        for (const binding of componentBindings) {\r\n            varsToAllocate += binding[BINDING].requiredVars;\r\n            if (binding.create) {\r\n                binding.targetIdx = 0;\r\n                (creationBindings ??= []).push(binding);\r\n            }\r\n            if (binding.update) {\r\n                binding.targetIdx = 0;\r\n                (updateBindings ??= []).push(binding);\r\n            }\r\n        }\r\n    }\r\n    if (directives) {\r\n        for (let i = 0; i < directives.length; i++) {\r\n            const directive = directives[i];\r\n            if (typeof directive !== 'function') {\r\n                for (const binding of directive.bindings) {\r\n                    varsToAllocate += binding[BINDING].requiredVars;\r\n                    const targetDirectiveIdx = i + 1;\r\n                    if (binding.create) {\r\n                        binding.targetIdx = targetDirectiveIdx;\r\n                        (creationBindings ??= []).push(binding);\r\n                    }\r\n                    if (binding.update) {\r\n                        binding.targetIdx = targetDirectiveIdx;\r\n                        (updateBindings ??= []).push(binding);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const directivesToApply = [componentDef];\r\n    if (directives) {\r\n        for (const directive of directives) {\r\n            const directiveType = typeof directive === 'function' ? directive : directive.type;\r\n            const directiveDef = ngDevMode\r\n                ? getDirectiveDefOrThrow(directiveType)\r\n                : getDirectiveDef(directiveType);\r\n            if (ngDevMode && !directiveDef.standalone) {\r\n                throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(directiveType)} directive must be standalone in ` +\r\n                    `order to be applied to a dynamically-created component.`);\r\n            }\r\n            directivesToApply.push(directiveDef);\r\n        }\r\n    }\r\n    const rootTView = createTView(0 /* TViewType.Root */, null, getRootTViewTemplate(creationBindings, updateBindings), 1, varsToAllocate, directivesToApply, null, null, null, [tAttributes], null);\r\n    return rootTView;\r\n}\r\nfunction getRootTViewTemplate(creationBindings, updateBindings) {\r\n    if (!creationBindings && !updateBindings) {\r\n        return null;\r\n    }\r\n    return (flags) => {\r\n        if (flags & 1 /* RenderFlags.Create */ && creationBindings) {\r\n            for (const binding of creationBindings) {\r\n                binding.create();\r\n            }\r\n        }\r\n        if (flags & 2 /* RenderFlags.Update */ && updateBindings) {\r\n            for (const binding of updateBindings) {\r\n                binding.update();\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction isInputBinding(binding) {\r\n    const kind = binding[BINDING].kind;\r\n    return kind === 'input' || kind === 'twoWay';\r\n}\r\n/**\r\n * Represents an instance of a Component created via a {@link ComponentFactory}.\r\n *\r\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\r\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\r\n * method.\r\n *\r\n */\r\nclass ComponentRef extends ComponentRef$1 {\r\n    _rootLView;\r\n    _hasInputBindings;\r\n    instance;\r\n    hostView;\r\n    changeDetectorRef;\r\n    componentType;\r\n    location;\r\n    previousInputValues = null;\r\n    _tNode;\r\n    constructor(componentType, _rootLView, _hasInputBindings) {\r\n        super();\r\n        this._rootLView = _rootLView;\r\n        this._hasInputBindings = _hasInputBindings;\r\n        this._tNode = getTNode(_rootLView[TVIEW], HEADER_OFFSET);\r\n        this.location = createElementRef(this._tNode, _rootLView);\r\n        this.instance = getComponentLViewByIndex(this._tNode.index, _rootLView)[CONTEXT];\r\n        this.hostView = this.changeDetectorRef = new ViewRef(_rootLView, undefined /* _cdRefInjectingView */);\r\n        this.componentType = componentType;\r\n    }\r\n    setInput(name, value) {\r\n        if (this._hasInputBindings && ngDevMode) {\r\n            throw new RuntimeError(317 /* RuntimeErrorCode.INVALID_SET_INPUT_CALL */, 'Cannot call `setInput` on a component that is using the `inputBinding` or `twoWayBinding` functions.');\r\n        }\r\n        const tNode = this._tNode;\r\n        this.previousInputValues ??= new Map();\r\n        // Do not set the input if it is the same as the last value\r\n        // This behavior matches `bindingUpdated` when binding inputs in templates.\r\n        if (this.previousInputValues.has(name) &&\r\n            Object.is(this.previousInputValues.get(name), value)) {\r\n            return;\r\n        }\r\n        const lView = this._rootLView;\r\n        const hasSetInput = setAllInputsForProperty(tNode, lView[TVIEW], lView, name, value);\r\n        this.previousInputValues.set(name, value);\r\n        const childComponentLView = getComponentLViewByIndex(tNode.index, lView);\r\n        markViewDirty(childComponentLView, 1 /* NotificationSource.SetInput */);\r\n        if (ngDevMode && !hasSetInput) {\r\n            const cmpNameForError = stringifyForError(this.componentType);\r\n            let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\r\n            message += `Make sure that the '${name}' property is declared as an input using the @Input() decorator or the input() function.`;\r\n            reportUnknownPropertyError(message);\r\n        }\r\n    }\r\n    get injector() {\r\n        return new NodeInjector(this._tNode, this._rootLView);\r\n    }\r\n    destroy() {\r\n        this.hostView.destroy();\r\n    }\r\n    onDestroy(callback) {\r\n        this.hostView.onDestroy(callback);\r\n    }\r\n}\r\n/** Projects the `projectableNodes` that were specified when creating a root component. */\r\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\r\n    const projection = (tNode.projection = []);\r\n    for (let i = 0; i < ngContentSelectors.length; i++) {\r\n        const nodesforSlot = projectableNodes[i];\r\n        // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\r\n        // case). Here we do normalize passed data structure to be an array of arrays to avoid\r\n        // complex checks down the line.\r\n        // We also normalize the length of the passed in projectable nodes (to match the number of\r\n        // <ng-container> slots defined by a component).\r\n        projection.push(nodesforSlot != null && nodesforSlot.length ? Array.from(nodesforSlot) : null);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a container where one or more views can be attached to a component.\r\n *\r\n * Can contain *host views* (created by instantiating a\r\n * component with the `createComponent()` method), and *embedded views*\r\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\r\n *\r\n * A view container instance can contain other view containers,\r\n * creating a view hierarchy.\r\n *\r\n * @usageNotes\r\n *\r\n * The example below demonstrates how the `createComponent` function can be used\r\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\r\n * so that it gets included into change detection cycles.\r\n *\r\n * Note: the example uses standalone components, but the function can also be used for\r\n * non-standalone components (declared in an NgModule) as well.\r\n *\r\n * ```angular-ts\r\n * @Component({\r\n *   standalone: true,\r\n *   selector: 'dynamic',\r\n *   template: `<span>This is a content of a dynamic component.</span>`,\r\n * })\r\n * class DynamicComponent {\r\n *   vcr = inject(ViewContainerRef);\r\n * }\r\n *\r\n * @Component({\r\n *   standalone: true,\r\n *   selector: 'app',\r\n *   template: `<main>Hi! This is the main content.</main>`,\r\n * })\r\n * class AppComponent {\r\n *   vcr = inject(ViewContainerRef);\r\n *\r\n *   ngAfterViewInit() {\r\n *     const compRef = this.vcr.createComponent(DynamicComponent);\r\n *     compRef.changeDetectorRef.detectChanges();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @see {@link ComponentRef}\r\n * @see {@link EmbeddedViewRef}\r\n *\r\n * @publicApi\r\n */\r\nclass ViewContainerRef {\r\n    /**\r\n     * @internal\r\n     * @nocollapse\r\n     */\r\n    static __NG_ELEMENT_ID__ = injectViewContainerRef;\r\n}\r\n/**\r\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\r\n * already exists, retrieves the existing ViewContainerRef.\r\n *\r\n * @returns The ViewContainerRef instance to use\r\n */\r\nfunction injectViewContainerRef() {\r\n    const previousTNode = getCurrentTNode();\r\n    return createContainerRef(previousTNode, getLView());\r\n}\r\nconst VE_ViewContainerRef = ViewContainerRef;\r\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\r\n// for that lands, this can be cleaned up.\r\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\r\n    _lContainer;\r\n    _hostTNode;\r\n    _hostLView;\r\n    constructor(_lContainer, _hostTNode, _hostLView) {\r\n        super();\r\n        this._lContainer = _lContainer;\r\n        this._hostTNode = _hostTNode;\r\n        this._hostLView = _hostLView;\r\n    }\r\n    get element() {\r\n        return createElementRef(this._hostTNode, this._hostLView);\r\n    }\r\n    get injector() {\r\n        return new NodeInjector(this._hostTNode, this._hostLView);\r\n    }\r\n    /** @deprecated No replacement */\r\n    get parentInjector() {\r\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\r\n        if (hasParentInjector(parentLocation)) {\r\n            const parentView = getParentInjectorView(parentLocation, this._hostLView);\r\n            const injectorIndex = getParentInjectorIndex(parentLocation);\r\n            ngDevMode && assertNodeInjector(parentView, injectorIndex);\r\n            const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\r\n            return new NodeInjector(parentTNode, parentView);\r\n        }\r\n        else {\r\n            return new NodeInjector(null, this._hostLView);\r\n        }\r\n    }\r\n    clear() {\r\n        while (this.length > 0) {\r\n            this.remove(this.length - 1);\r\n        }\r\n    }\r\n    get(index) {\r\n        const viewRefs = getViewRefs(this._lContainer);\r\n        return (viewRefs !== null && viewRefs[index]) || null;\r\n    }\r\n    get length() {\r\n        return this._lContainer.length - CONTAINER_HEADER_OFFSET;\r\n    }\r\n    createEmbeddedView(templateRef, context, indexOrOptions) {\r\n        let index;\r\n        let injector;\r\n        if (typeof indexOrOptions === 'number') {\r\n            index = indexOrOptions;\r\n        }\r\n        else if (indexOrOptions != null) {\r\n            index = indexOrOptions.index;\r\n            injector = indexOrOptions.injector;\r\n        }\r\n        const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);\r\n        const viewRef = templateRef.createEmbeddedViewImpl(context || {}, injector, dehydratedView);\r\n        this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\r\n        return viewRef;\r\n    }\r\n    createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector, directives, bindings) {\r\n        const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\r\n        let index;\r\n        // This function supports 2 signatures and we need to handle options correctly for both:\r\n        //   1. When first argument is a Component type. This signature also requires extra\r\n        //      options to be provided as object (more ergonomic option).\r\n        //   2. First argument is a Component factory. In this case extra options are represented as\r\n        //      positional arguments. This signature is less ergonomic and will be deprecated.\r\n        if (isComponentFactory) {\r\n            if (ngDevMode) {\r\n                assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' +\r\n                    'and an options object as the second argument. This combination of arguments ' +\r\n                    'is incompatible. You can either change the first argument to provide Component ' +\r\n                    'type or change the second argument to be a number (representing an index at ' +\r\n                    \"which to insert the new component's host view into this container)\");\r\n            }\r\n            index = indexOrOptions;\r\n        }\r\n        else {\r\n            if (ngDevMode) {\r\n                assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` +\r\n                    `Please check whether provided class has @Component decorator.`);\r\n                assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' +\r\n                    \"and a number (representing an index at which to insert the new component's \" +\r\n                    'host view into this container as the second argument. This combination of arguments ' +\r\n                    'is incompatible. Please use an object as the second argument instead.');\r\n            }\r\n            const options = (indexOrOptions || {});\r\n            if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\r\n                throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\r\n            }\r\n            index = options.index;\r\n            injector = options.injector;\r\n            projectableNodes = options.projectableNodes;\r\n            environmentInjector = options.environmentInjector || options.ngModuleRef;\r\n            directives = options.directives;\r\n            bindings = options.bindings;\r\n        }\r\n        const componentFactory = isComponentFactory\r\n            ? componentFactoryOrType\r\n            : new ComponentFactory(getComponentDef(componentFactoryOrType));\r\n        const contextInjector = injector || this.parentInjector;\r\n        // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\r\n        if (!environmentInjector && componentFactory.ngModule == null) {\r\n            // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\r\n            // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\r\n            // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\r\n            // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\r\n            // using a provided injector first, then fall back to the parent injector of this\r\n            // `ViewContainerRef` instance.\r\n            //\r\n            // For the factory-less case, it's critical to establish a connection with the module\r\n            // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\r\n            // so that a component can use DI tokens provided in MgModules. For this reason, we can not\r\n            // rely on the provided injector, since it might be detached from the DI tree (for example, if\r\n            // it was created via `Injector.create` without specifying a parent injector, or if an\r\n            // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\r\n            // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\r\n            // injector, which is normally connected to the DI tree, which includes module injector\r\n            // subtree.\r\n            const _injector = isComponentFactory ? contextInjector : this.parentInjector;\r\n            // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\r\n            // undefined` expression which seems to cause internal google apps to fail. This is documented\r\n            // in the following internal bug issue: go/b/142967802\r\n            const result = _injector.get(EnvironmentInjector, null);\r\n            if (result) {\r\n                environmentInjector = result;\r\n            }\r\n        }\r\n        const componentDef = getComponentDef(componentFactory.componentType ?? {});\r\n        const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);\r\n        const rNode = dehydratedView?.firstChild ?? null;\r\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector, directives, bindings);\r\n        this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\r\n        return componentRef;\r\n    }\r\n    insert(viewRef, index) {\r\n        return this.insertImpl(viewRef, index, true);\r\n    }\r\n    insertImpl(viewRef, index, addToDOM) {\r\n        const lView = viewRef._lView;\r\n        if (ngDevMode && viewRef.destroyed) {\r\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\r\n        }\r\n        if (viewAttachedToContainer(lView)) {\r\n            // If view is already attached, detach it first so we clean up references appropriately.\r\n            const prevIdx = this.indexOf(viewRef);\r\n            // A view might be attached either to this or a different container. The `prevIdx` for\r\n            // those cases will be:\r\n            // equal to -1 for views attached to this ViewContainerRef\r\n            // >= 0 for views attached to a different ViewContainerRef\r\n            if (prevIdx !== -1) {\r\n                this.detach(prevIdx);\r\n            }\r\n            else {\r\n                const prevLContainer = lView[PARENT];\r\n                ngDevMode &&\r\n                    assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\r\n                // We need to re-create a R3ViewContainerRef instance since those are not stored on\r\n                // LView (nor anywhere else).\r\n                const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\r\n                prevVCRef.detach(prevVCRef.indexOf(viewRef));\r\n            }\r\n        }\r\n        // Logical operation of adding `LView` to `LContainer`\r\n        const adjustedIdx = this._adjustIndex(index);\r\n        const lContainer = this._lContainer;\r\n        addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);\r\n        viewRef.attachToViewContainerRef();\r\n        addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\r\n        return viewRef;\r\n    }\r\n    move(viewRef, newIndex) {\r\n        if (ngDevMode && viewRef.destroyed) {\r\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\r\n        }\r\n        return this.insert(viewRef, newIndex);\r\n    }\r\n    indexOf(viewRef) {\r\n        const viewRefsArr = getViewRefs(this._lContainer);\r\n        return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\r\n    }\r\n    remove(index) {\r\n        const adjustedIdx = this._adjustIndex(index, -1);\r\n        const detachedView = detachView(this._lContainer, adjustedIdx);\r\n        if (detachedView) {\r\n            // Before destroying the view, remove it from the container's array of `ViewRef`s.\r\n            // This ensures the view container length is updated before calling\r\n            // `destroyLView`, which could recursively call view container methods that\r\n            // rely on an accurate container length.\r\n            // (e.g. a method on this view container being called by a child directive's OnDestroy\r\n            // lifecycle hook)\r\n            removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\r\n            destroyLView(detachedView[TVIEW], detachedView);\r\n        }\r\n    }\r\n    detach(index) {\r\n        const adjustedIdx = this._adjustIndex(index, -1);\r\n        const view = detachView(this._lContainer, adjustedIdx);\r\n        const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\r\n        return wasDetached ? new ViewRef(view) : null;\r\n    }\r\n    _adjustIndex(index, shift = 0) {\r\n        if (index == null) {\r\n            return this.length + shift;\r\n        }\r\n        if (ngDevMode) {\r\n            assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\r\n            // +1 because it's legal to insert at the end.\r\n            assertLessThan(index, this.length + 1 + shift, 'index');\r\n        }\r\n        return index;\r\n    }\r\n};\r\nfunction getViewRefs(lContainer) {\r\n    return lContainer[VIEW_REFS];\r\n}\r\nfunction getOrCreateViewRefs(lContainer) {\r\n    return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []));\r\n}\r\n/**\r\n * Creates a ViewContainerRef and stores it on the injector.\r\n *\r\n * @param hostTNode The node that is requesting a ViewContainerRef\r\n * @param hostLView The view to which the node belongs\r\n * @returns The ViewContainerRef instance to use\r\n */\r\nfunction createContainerRef(hostTNode, hostLView) {\r\n    ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\r\n    let lContainer;\r\n    const slotValue = hostLView[hostTNode.index];\r\n    if (isLContainer(slotValue)) {\r\n        // If the host is a container, we don't need to create a new LContainer\r\n        lContainer = slotValue;\r\n    }\r\n    else {\r\n        // An LContainer anchor can not be `null`, but we set it here temporarily\r\n        // and update to the actual value later in this function (see\r\n        // `_locateOrCreateAnchorNode`).\r\n        lContainer = createLContainer(slotValue, hostLView, null, hostTNode);\r\n        hostLView[hostTNode.index] = lContainer;\r\n        addToEndOfViewTree(hostLView, lContainer);\r\n    }\r\n    _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);\r\n    return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\r\n}\r\n/**\r\n * Creates and inserts a comment node that acts as an anchor for a view container.\r\n *\r\n * If the host is a regular element, we have to insert a comment node manually which will\r\n * be used as an anchor when inserting elements. In this specific case we use low-level DOM\r\n * manipulation to insert it.\r\n */\r\nfunction insertAnchorNode(hostLView, hostTNode) {\r\n    const renderer = hostLView[RENDERER];\r\n    const commentNode = renderer.createComment(ngDevMode ? 'container' : '');\r\n    const hostNative = getNativeByTNode(hostTNode, hostLView);\r\n    const parentOfHostNative = renderer.parentNode(hostNative);\r\n    nativeInsertBefore(renderer, parentOfHostNative, commentNode, renderer.nextSibling(hostNative), false);\r\n    return commentNode;\r\n}\r\nlet _locateOrCreateAnchorNode = createAnchorNode;\r\nlet _populateDehydratedViewsInLContainer = () => false; // noop by default\r\n/**\r\n * Looks up dehydrated views that belong to a given LContainer and populates\r\n * this information into the `LContainer[DEHYDRATED_VIEWS]` slot. When running\r\n * in client-only mode, this function is a noop.\r\n *\r\n * @param lContainer LContainer that should be populated.\r\n * @param tNode Corresponding TNode.\r\n * @param hostLView LView that hosts LContainer.\r\n * @returns a boolean flag that indicates whether a populating operation\r\n *   was successful. The operation might be unsuccessful in case is has completed\r\n *   previously, we are rendering in client-only mode or this content is located\r\n *   in a skip hydration section.\r\n */\r\nfunction populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {\r\n    return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);\r\n}\r\n/**\r\n * Regular creation mode: an anchor is created and\r\n * assigned to the `lContainer[NATIVE]` slot.\r\n */\r\nfunction createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\r\n    // We already have a native element (anchor) set, return.\r\n    if (lContainer[NATIVE])\r\n        return;\r\n    let commentNode;\r\n    // If the host is an element container, the native host element is guaranteed to be a\r\n    // comment and we can reuse that comment as anchor element for the new LContainer.\r\n    // The comment node in question is already part of the DOM structure so we don't need to append\r\n    // it again.\r\n    if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\r\n        commentNode = unwrapRNode(slotValue);\r\n    }\r\n    else {\r\n        commentNode = insertAnchorNode(hostLView, hostTNode);\r\n    }\r\n    lContainer[NATIVE] = commentNode;\r\n}\r\n/**\r\n * Hydration logic that looks up all dehydrated views in this container\r\n * and puts them into `lContainer[DEHYDRATED_VIEWS]` slot.\r\n *\r\n * @returns a boolean flag that indicates whether a populating operation\r\n *   was successful. The operation might be unsuccessful in case is has completed\r\n *   previously, we are rendering in client-only mode or this content is located\r\n *   in a skip hydration section.\r\n */\r\nfunction populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {\r\n    // We already have a native element (anchor) set and the process\r\n    // of finding dehydrated views happened (so the `lContainer[DEHYDRATED_VIEWS]`\r\n    // is not null), exit early.\r\n    if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {\r\n        return true;\r\n    }\r\n    const hydrationInfo = hostLView[HYDRATION];\r\n    const noOffsetIndex = tNode.index - HEADER_OFFSET;\r\n    const isNodeCreationMode = !hydrationInfo ||\r\n        isInSkipHydrationBlock(tNode) ||\r\n        isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\r\n    // Regular creation mode.\r\n    if (isNodeCreationMode) {\r\n        return false;\r\n    }\r\n    // Hydration mode, looking up an anchor node and dehydrated views in DOM.\r\n    const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);\r\n    const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];\r\n    ngDevMode &&\r\n        assertDefined(serializedViews, 'Unexpected state: no hydration info available for a given TNode, ' +\r\n            'which represents a view container.');\r\n    const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);\r\n    if (ngDevMode) {\r\n        validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);\r\n        // Do not throw in case this node is already claimed (thus `false` as a second\r\n        // argument). If this container is created based on an `<ng-template>`, the comment\r\n        // node would be already claimed from the `template` instruction. If an element acts\r\n        // as an anchor (e.g. <div #vcRef>), a separate comment node would be created/located,\r\n        // so we need to claim it here.\r\n        markRNodeAsClaimedByHydration(commentNode, false);\r\n    }\r\n    lContainer[NATIVE] = commentNode;\r\n    lContainer[DEHYDRATED_VIEWS] = dehydratedViews;\r\n    return true;\r\n}\r\nfunction locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\r\n    if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {\r\n        // Populating dehydrated views operation returned `false`, which indicates\r\n        // that the logic was running in client-only mode, this an anchor comment\r\n        // node should be created for this container.\r\n        createAnchorNode(lContainer, hostLView, hostTNode, slotValue);\r\n    }\r\n}\r\nfunction enableLocateOrCreateContainerRefImpl() {\r\n    _locateOrCreateAnchorNode = locateOrCreateAnchorNode;\r\n    _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;\r\n}\r\n\r\nclass LQuery_ {\r\n    queryList;\r\n    matches = null;\r\n    constructor(queryList) {\r\n        this.queryList = queryList;\r\n    }\r\n    clone() {\r\n        return new LQuery_(this.queryList);\r\n    }\r\n    setDirty() {\r\n        this.queryList.setDirty();\r\n    }\r\n}\r\nclass LQueries_ {\r\n    queries;\r\n    constructor(queries = []) {\r\n        this.queries = queries;\r\n    }\r\n    createEmbeddedView(tView) {\r\n        const tQueries = tView.queries;\r\n        if (tQueries !== null) {\r\n            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\r\n            const viewLQueries = [];\r\n            // An embedded view has queries propagated from a declaration view at the beginning of the\r\n            // TQueries collection and up until a first content query declared in the embedded view. Only\r\n            // propagated LQueries are created at this point (LQuery corresponding to declared content\r\n            // queries will be instantiated from the content query instructions for each directive).\r\n            for (let i = 0; i < noOfInheritedQueries; i++) {\r\n                const tQuery = tQueries.getByIndex(i);\r\n                const parentLQuery = this.queries[tQuery.indexInDeclarationView];\r\n                viewLQueries.push(parentLQuery.clone());\r\n            }\r\n            return new LQueries_(viewLQueries);\r\n        }\r\n        return null;\r\n    }\r\n    insertView(tView) {\r\n        this.dirtyQueriesWithMatches(tView);\r\n    }\r\n    detachView(tView) {\r\n        this.dirtyQueriesWithMatches(tView);\r\n    }\r\n    finishViewCreation(tView) {\r\n        this.dirtyQueriesWithMatches(tView);\r\n    }\r\n    dirtyQueriesWithMatches(tView) {\r\n        for (let i = 0; i < this.queries.length; i++) {\r\n            if (getTQuery(tView, i).matches !== null) {\r\n                this.queries[i].setDirty();\r\n            }\r\n        }\r\n    }\r\n}\r\nclass TQueryMetadata_ {\r\n    flags;\r\n    read;\r\n    predicate;\r\n    constructor(predicate, flags, read = null) {\r\n        this.flags = flags;\r\n        this.read = read;\r\n        // Compiler might not be able to pre-optimize and split multiple selectors.\r\n        if (typeof predicate === 'string') {\r\n            this.predicate = splitQueryMultiSelectors(predicate);\r\n        }\r\n        else {\r\n            this.predicate = predicate;\r\n        }\r\n    }\r\n}\r\nclass TQueries_ {\r\n    queries;\r\n    constructor(queries = []) {\r\n        this.queries = queries;\r\n    }\r\n    elementStart(tView, tNode) {\r\n        ngDevMode &&\r\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\r\n        for (let i = 0; i < this.queries.length; i++) {\r\n            this.queries[i].elementStart(tView, tNode);\r\n        }\r\n    }\r\n    elementEnd(tNode) {\r\n        for (let i = 0; i < this.queries.length; i++) {\r\n            this.queries[i].elementEnd(tNode);\r\n        }\r\n    }\r\n    embeddedTView(tNode) {\r\n        let queriesForTemplateRef = null;\r\n        for (let i = 0; i < this.length; i++) {\r\n            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\r\n            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\r\n            if (tqueryClone) {\r\n                tqueryClone.indexInDeclarationView = i;\r\n                if (queriesForTemplateRef !== null) {\r\n                    queriesForTemplateRef.push(tqueryClone);\r\n                }\r\n                else {\r\n                    queriesForTemplateRef = [tqueryClone];\r\n                }\r\n            }\r\n        }\r\n        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\r\n    }\r\n    template(tView, tNode) {\r\n        ngDevMode &&\r\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\r\n        for (let i = 0; i < this.queries.length; i++) {\r\n            this.queries[i].template(tView, tNode);\r\n        }\r\n    }\r\n    getByIndex(index) {\r\n        ngDevMode && assertIndexInRange(this.queries, index);\r\n        return this.queries[index];\r\n    }\r\n    get length() {\r\n        return this.queries.length;\r\n    }\r\n    track(tquery) {\r\n        this.queries.push(tquery);\r\n    }\r\n}\r\nclass TQuery_ {\r\n    metadata;\r\n    matches = null;\r\n    indexInDeclarationView = -1;\r\n    crossesNgTemplate = false;\r\n    /**\r\n     * A node index on which a query was declared (-1 for view queries and ones inherited from the\r\n     * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\r\n     * when to apply content queries to elements in a template.\r\n     */\r\n    _declarationNodeIndex;\r\n    /**\r\n     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\r\n     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\r\n     * elements in a template.\r\n     */\r\n    _appliesToNextNode = true;\r\n    constructor(metadata, nodeIndex = -1) {\r\n        this.metadata = metadata;\r\n        this._declarationNodeIndex = nodeIndex;\r\n    }\r\n    elementStart(tView, tNode) {\r\n        if (this.isApplyingToNode(tNode)) {\r\n            this.matchTNode(tView, tNode);\r\n        }\r\n    }\r\n    elementEnd(tNode) {\r\n        if (this._declarationNodeIndex === tNode.index) {\r\n            this._appliesToNextNode = false;\r\n        }\r\n    }\r\n    template(tView, tNode) {\r\n        this.elementStart(tView, tNode);\r\n    }\r\n    embeddedTView(tNode, childQueryIndex) {\r\n        if (this.isApplyingToNode(tNode)) {\r\n            this.crossesNgTemplate = true;\r\n            // A marker indicating a `<ng-template>` element (a placeholder for query results from\r\n            // embedded views created based on this `<ng-template>`).\r\n            this.addMatch(-tNode.index, childQueryIndex);\r\n            return new TQuery_(this.metadata);\r\n        }\r\n        return null;\r\n    }\r\n    isApplyingToNode(tNode) {\r\n        if (this._appliesToNextNode &&\r\n            (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\r\n            const declarationNodeIdx = this._declarationNodeIndex;\r\n            let parent = tNode.parent;\r\n            // Determine if a given TNode is a \"direct\" child of a node on which a content query was\r\n            // declared (only direct children of query's host node can match with the descendants: false\r\n            // option). There are 3 main use-case / conditions to consider here:\r\n            // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\r\n            // host node;\r\n            // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\r\n            // here <i #target> parent node is null;\r\n            // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\r\n            // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\r\n            // up past the query's host node!).\r\n            while (parent !== null &&\r\n                parent.type & 8 /* TNodeType.ElementContainer */ &&\r\n                parent.index !== declarationNodeIdx) {\r\n                parent = parent.parent;\r\n            }\r\n            return declarationNodeIdx === (parent !== null ? parent.index : -1);\r\n        }\r\n        return this._appliesToNextNode;\r\n    }\r\n    matchTNode(tView, tNode) {\r\n        const predicate = this.metadata.predicate;\r\n        if (Array.isArray(predicate)) {\r\n            for (let i = 0; i < predicate.length; i++) {\r\n                const name = predicate[i];\r\n                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\r\n                // Also try matching the name to a provider since strings can be used as DI tokens too.\r\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\r\n            }\r\n        }\r\n        else {\r\n            if (predicate === TemplateRef) {\r\n                if (tNode.type & 4 /* TNodeType.Container */) {\r\n                    this.matchTNodeWithReadOption(tView, tNode, -1);\r\n                }\r\n            }\r\n            else {\r\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\r\n            }\r\n        }\r\n    }\r\n    matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\r\n        if (nodeMatchIdx !== null) {\r\n            const read = this.metadata.read;\r\n            if (read !== null) {\r\n                if (read === ElementRef ||\r\n                    read === ViewContainerRef ||\r\n                    (read === TemplateRef && tNode.type & 4 /* TNodeType.Container */)) {\r\n                    this.addMatch(tNode.index, -2);\r\n                }\r\n                else {\r\n                    const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\r\n                    if (directiveOrProviderIdx !== null) {\r\n                        this.addMatch(tNode.index, directiveOrProviderIdx);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.addMatch(tNode.index, nodeMatchIdx);\r\n            }\r\n        }\r\n    }\r\n    addMatch(tNodeIdx, matchIdx) {\r\n        if (this.matches === null) {\r\n            this.matches = [tNodeIdx, matchIdx];\r\n        }\r\n        else {\r\n            this.matches.push(tNodeIdx, matchIdx);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Iterates over local names for a given node and returns directive index\r\n * (or -1 if a local name points to an element).\r\n *\r\n * @param tNode static data of a node to check\r\n * @param selector selector to match\r\n * @returns directive index, -1 or null if a selector didn't match any of the local names\r\n */\r\nfunction getIdxOfMatchingSelector(tNode, selector) {\r\n    const localNames = tNode.localNames;\r\n    if (localNames !== null) {\r\n        for (let i = 0; i < localNames.length; i += 2) {\r\n            if (localNames[i] === selector) {\r\n                return localNames[i + 1];\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction createResultByTNodeType(tNode, currentView) {\r\n    if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\r\n        return createElementRef(tNode, currentView);\r\n    }\r\n    else if (tNode.type & 4 /* TNodeType.Container */) {\r\n        return createTemplateRef(tNode, currentView);\r\n    }\r\n    return null;\r\n}\r\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\r\n    if (matchingIdx === -1) {\r\n        // if read token and / or strategy is not specified, detect it using appropriate tNode type\r\n        return createResultByTNodeType(tNode, lView);\r\n    }\r\n    else if (matchingIdx === -2) {\r\n        // read a special token from a node injector\r\n        return createSpecialToken(lView, tNode, read);\r\n    }\r\n    else {\r\n        // read a token\r\n        return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\r\n    }\r\n}\r\nfunction createSpecialToken(lView, tNode, read) {\r\n    if (read === ElementRef) {\r\n        return createElementRef(tNode, lView);\r\n    }\r\n    else if (read === TemplateRef) {\r\n        return createTemplateRef(tNode, lView);\r\n    }\r\n    else if (read === ViewContainerRef) {\r\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\r\n        return createContainerRef(tNode, lView);\r\n    }\r\n    else {\r\n        ngDevMode &&\r\n            throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\r\n    }\r\n}\r\n/**\r\n * A helper function that creates query results for a given view. This function is meant to do the\r\n * processing once and only once for a given view instance (a set of results for a given view\r\n * doesn't change).\r\n */\r\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\r\n    const lQuery = lView[QUERIES].queries[queryIndex];\r\n    if (lQuery.matches === null) {\r\n        const tViewData = tView.data;\r\n        const tQueryMatches = tQuery.matches;\r\n        const result = [];\r\n        for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {\r\n            const matchedNodeIdx = tQueryMatches[i];\r\n            if (matchedNodeIdx < 0) {\r\n                // we at the <ng-template> marker which might have results in views created based on this\r\n                // <ng-template> - those results will be in separate views though, so here we just leave\r\n                // null as a placeholder\r\n                result.push(null);\r\n            }\r\n            else {\r\n                ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\r\n                const tNode = tViewData[matchedNodeIdx];\r\n                result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\r\n            }\r\n        }\r\n        lQuery.matches = result;\r\n    }\r\n    return lQuery.matches;\r\n}\r\n/**\r\n * A helper function that collects (already materialized) query results from a tree of views,\r\n * starting with a provided LView.\r\n */\r\nfunction collectQueryResults(tView, lView, queryIndex, result) {\r\n    const tQuery = tView.queries.getByIndex(queryIndex);\r\n    const tQueryMatches = tQuery.matches;\r\n    if (tQueryMatches !== null) {\r\n        const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\r\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\r\n            const tNodeIdx = tQueryMatches[i];\r\n            if (tNodeIdx > 0) {\r\n                result.push(lViewResults[i / 2]);\r\n            }\r\n            else {\r\n                const childQueryIndex = tQueryMatches[i + 1];\r\n                const declarationLContainer = lView[-tNodeIdx];\r\n                ngDevMode && assertLContainer(declarationLContainer);\r\n                // collect matches for views inserted in this container\r\n                for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\r\n                    const embeddedLView = declarationLContainer[i];\r\n                    if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\r\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\r\n                    }\r\n                }\r\n                // collect matches for views created from this declaration container and inserted into\r\n                // different containers\r\n                if (declarationLContainer[MOVED_VIEWS] !== null) {\r\n                    const embeddedLViews = declarationLContainer[MOVED_VIEWS];\r\n                    for (let i = 0; i < embeddedLViews.length; i++) {\r\n                        const embeddedLView = embeddedLViews[i];\r\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadQueryInternal(lView, queryIndex) {\r\n    ngDevMode &&\r\n        assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\r\n    ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\r\n    return lView[QUERIES].queries[queryIndex].queryList;\r\n}\r\n/**\r\n * Creates a new instance of LQuery and returns its index in the collection of LQuery objects.\r\n *\r\n * @returns index in the collection of LQuery objects\r\n */\r\nfunction createLQuery(tView, lView, flags) {\r\n    const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\r\n    storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\r\n    const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;\r\n    return lQueries.push(new LQuery_(queryList)) - 1;\r\n}\r\nfunction createViewQuery(predicate, flags, read) {\r\n    ngDevMode && assertNumber(flags, 'Expecting flags');\r\n    const tView = getTView();\r\n    if (tView.firstCreatePass) {\r\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\r\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\r\n            tView.staticViewQueries = true;\r\n        }\r\n    }\r\n    return createLQuery(tView, getLView(), flags);\r\n}\r\nfunction createContentQuery(directiveIndex, predicate, flags, read) {\r\n    ngDevMode && assertNumber(flags, 'Expecting flags');\r\n    const tView = getTView();\r\n    if (tView.firstCreatePass) {\r\n        const tNode = getCurrentTNode();\r\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\r\n        saveContentQueryAndDirectiveIndex(tView, directiveIndex);\r\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\r\n            tView.staticContentQueries = true;\r\n        }\r\n    }\r\n    return createLQuery(tView, getLView(), flags);\r\n}\r\n/** Splits multiple selectors in the locator. */\r\nfunction splitQueryMultiSelectors(locator) {\r\n    return locator.split(',').map((s) => s.trim());\r\n}\r\nfunction createTQuery(tView, metadata, nodeIndex) {\r\n    if (tView.queries === null)\r\n        tView.queries = new TQueries_();\r\n    tView.queries.track(new TQuery_(metadata, nodeIndex));\r\n}\r\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\r\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\r\n    const lastSavedDirectiveIndex = tViewContentQueries.length\r\n        ? tViewContentQueries[tViewContentQueries.length - 1]\r\n        : -1;\r\n    if (directiveIndex !== lastSavedDirectiveIndex) {\r\n        tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\r\n    }\r\n}\r\nfunction getTQuery(tView, index) {\r\n    ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\r\n    return tView.queries.getByIndex(index);\r\n}\r\n/**\r\n * A helper function collecting results from all the views where a given query was active.\r\n * @param lView\r\n * @param queryIndex\r\n */\r\nfunction getQueryResults(lView, queryIndex) {\r\n    const tView = lView[TVIEW];\r\n    const tQuery = getTQuery(tView, queryIndex);\r\n    return tQuery.crossesNgTemplate\r\n        ? collectQueryResults(tView, lView, queryIndex, [])\r\n        : materializeViewResults(tView, lView, tQuery, queryIndex);\r\n}\r\n\r\n/**\r\n * A signal factory function in charge of creating a new computed signal capturing query\r\n * results. This centralized creation function is used by all types of queries (child / children,\r\n * required / optional).\r\n *\r\n * @param firstOnly indicates if all or only the first result should be returned\r\n * @param required indicates if at least one result is required\r\n * @returns a read-only signal with query results\r\n */\r\nfunction createQuerySignalFn(firstOnly, required, opts) {\r\n    let node;\r\n    const signalFn = createComputed(() => {\r\n        // A dedicated signal that increments its value every time a query changes its dirty status. By\r\n        // using this signal we can implement a query as computed and avoid creation of a specialized\r\n        // reactive node type. Please note that a query gets marked dirty under the following\r\n        // circumstances:\r\n        // - a view (where a query is active) finished its first creation pass;\r\n        // - a new view is inserted / deleted and it impacts query results.\r\n        node._dirtyCounter();\r\n        const value = refreshSignalQuery(node, firstOnly);\r\n        if (required && value === undefined) {\r\n            throw new RuntimeError(-951 /* RuntimeErrorCode.REQUIRED_QUERY_NO_VALUE */, ngDevMode && 'Child query result is required but no value is available.');\r\n        }\r\n        return value;\r\n    });\r\n    node = signalFn[SIGNAL];\r\n    node._dirtyCounter = signal(0);\r\n    node._flatValue = undefined;\r\n    if (ngDevMode) {\r\n        signalFn.toString = () => `[Query Signal]`;\r\n        node.debugName = opts?.debugName;\r\n    }\r\n    return signalFn;\r\n}\r\nfunction createSingleResultOptionalQuerySignalFn(opts) {\r\n    return createQuerySignalFn(/* firstOnly */ true, /* required */ false, opts);\r\n}\r\nfunction createSingleResultRequiredQuerySignalFn(opts) {\r\n    return createQuerySignalFn(/* firstOnly */ true, /* required */ true, opts);\r\n}\r\nfunction createMultiResultQuerySignalFn(opts) {\r\n    return createQuerySignalFn(/* firstOnly */ false, /* required */ false, opts);\r\n}\r\nfunction bindQueryToSignal(target, queryIndex) {\r\n    const node = target[SIGNAL];\r\n    node._lView = getLView();\r\n    node._queryIndex = queryIndex;\r\n    node._queryList = loadQueryInternal(node._lView, queryIndex);\r\n    node._queryList.onDirty(() => node._dirtyCounter.update((v) => v + 1));\r\n}\r\nfunction refreshSignalQuery(node, firstOnly) {\r\n    const lView = node._lView;\r\n    const queryIndex = node._queryIndex;\r\n    // There are 2 conditions under which we want to return \"empty\" results instead of the ones\r\n    // collected by a query:\r\n    //\r\n    // 1) a given query wasn't created yet (this is a period of time between the directive creation\r\n    // and execution of the query creation function) - in this case a query doesn't exist yet and we\r\n    // don't have any results to return.\r\n    //\r\n    // 2) we are in the process of constructing a view (the first\r\n    // creation pass didn't finish) and a query might have partial results, but we don't want to\r\n    // return those - instead we do delay results collection until all nodes had a chance of matching\r\n    // and we can present consistent, \"atomic\" (on a view level) results.\r\n    if (lView === undefined || queryIndex === undefined || lView[FLAGS] & 4 /* LViewFlags.CreationMode */) {\r\n        return (firstOnly ? undefined : EMPTY_ARRAY);\r\n    }\r\n    const queryList = loadQueryInternal(lView, queryIndex);\r\n    const results = getQueryResults(lView, queryIndex);\r\n    queryList.reset(results, unwrapElementRef);\r\n    if (firstOnly) {\r\n        return queryList.first;\r\n    }\r\n    else {\r\n        // TODO: remove access to the private _changesDetected field by abstracting / removing usage of\r\n        // QueryList in the signal-based queries (perf follow-up)\r\n        const resultChanged = queryList._changesDetected;\r\n        if (resultChanged || node._flatValue === undefined) {\r\n            return (node._flatValue = queryList.toArray());\r\n        }\r\n        return node._flatValue;\r\n    }\r\n}\r\n\r\n/**\r\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\r\n *\r\n * Example:\r\n * ```ts\r\n * @Component({\r\n *   selector: 'my-comp',\r\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\r\n * })\r\n * class MyComponent{\r\n * }\r\n *\r\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\r\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\r\n *\r\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\r\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\r\n *\r\n * // Use browser's `fetch()` function as the default resource resolution strategy.\r\n * resolveComponentResources(fetch).then(() => {\r\n *   // After resolution all URLs have been converted into `template` strings.\r\n *   renderComponent(MyComponent);\r\n * });\r\n *\r\n * ```\r\n *\r\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\r\n * to call this method outside JIT mode.\r\n *\r\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\r\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\r\n */\r\nfunction resolveComponentResources(resourceResolver) {\r\n    // Store all promises which are fetching the resources.\r\n    const componentResolved = [];\r\n    // Cache so that we don't fetch the same resource more than once.\r\n    const urlMap = new Map();\r\n    function cachedResourceResolve(url) {\r\n        let promise = urlMap.get(url);\r\n        if (!promise) {\r\n            const resp = resourceResolver(url);\r\n            urlMap.set(url, (promise = resp.then(unwrapResponse)));\r\n        }\r\n        return promise;\r\n    }\r\n    componentResourceResolutionQueue.forEach((component, type) => {\r\n        const promises = [];\r\n        if (component.templateUrl) {\r\n            promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\r\n                component.template = template;\r\n            }));\r\n        }\r\n        const styles = typeof component.styles === 'string' ? [component.styles] : component.styles || [];\r\n        component.styles = styles;\r\n        if (component.styleUrl && component.styleUrls?.length) {\r\n            throw new Error('@Component cannot define both `styleUrl` and `styleUrls`. ' +\r\n                'Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple');\r\n        }\r\n        else if (component.styleUrls?.length) {\r\n            const styleOffset = component.styles.length;\r\n            const styleUrls = component.styleUrls;\r\n            component.styleUrls.forEach((styleUrl, index) => {\r\n                styles.push(''); // pre-allocate array.\r\n                promises.push(cachedResourceResolve(styleUrl).then((style) => {\r\n                    styles[styleOffset + index] = style;\r\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\r\n                    if (styleUrls.length == 0) {\r\n                        component.styleUrls = undefined;\r\n                    }\r\n                }));\r\n            });\r\n        }\r\n        else if (component.styleUrl) {\r\n            promises.push(cachedResourceResolve(component.styleUrl).then((style) => {\r\n                styles.push(style);\r\n                component.styleUrl = undefined;\r\n            }));\r\n        }\r\n        const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\r\n        componentResolved.push(fullyResolved);\r\n    });\r\n    clearResolutionOfComponentResourcesQueue();\r\n    return Promise.all(componentResolved).then(() => undefined);\r\n}\r\nlet componentResourceResolutionQueue = new Map();\r\n// Track when existing ɵcmp for a Type is waiting on resources.\r\nconst componentDefPendingResolution = new Set();\r\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\r\n    if (componentNeedsResolution(metadata)) {\r\n        componentResourceResolutionQueue.set(type, metadata);\r\n        componentDefPendingResolution.add(type);\r\n    }\r\n}\r\nfunction isComponentDefPendingResolution(type) {\r\n    return componentDefPendingResolution.has(type);\r\n}\r\nfunction componentNeedsResolution(component) {\r\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\r\n        (component.styleUrls && component.styleUrls.length) ||\r\n        component.styleUrl);\r\n}\r\nfunction clearResolutionOfComponentResourcesQueue() {\r\n    const old = componentResourceResolutionQueue;\r\n    componentResourceResolutionQueue = new Map();\r\n    return old;\r\n}\r\nfunction restoreComponentResolutionQueue(queue) {\r\n    componentDefPendingResolution.clear();\r\n    queue.forEach((_, type) => componentDefPendingResolution.add(type));\r\n    componentResourceResolutionQueue = queue;\r\n}\r\nfunction isComponentResourceResolutionQueueEmpty() {\r\n    return componentResourceResolutionQueue.size === 0;\r\n}\r\nfunction unwrapResponse(response) {\r\n    return typeof response == 'string' ? response : response.text();\r\n}\r\nfunction componentDefResolved(type) {\r\n    componentDefPendingResolution.delete(type);\r\n}\r\n\r\n/**\r\n * Map of module-id to the corresponding NgModule.\r\n */\r\nconst modules = new Map();\r\n/**\r\n * Whether to check for duplicate NgModule registrations.\r\n *\r\n * This can be disabled for testing.\r\n */\r\nlet checkForDuplicateNgModules = true;\r\nfunction assertSameOrNotExisting(id, type, incoming) {\r\n    if (type && type !== incoming && checkForDuplicateNgModules) {\r\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\r\n    }\r\n}\r\n/**\r\n * Adds the given NgModule type to Angular's NgModule registry.\r\n *\r\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\r\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\r\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\r\n * fully resolved when it's registered.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction registerNgModuleType(ngModuleType, id) {\r\n    const existing = modules.get(id) || null;\r\n    assertSameOrNotExisting(id, existing, ngModuleType);\r\n    modules.set(id, ngModuleType);\r\n}\r\nfunction getRegisteredNgModuleType(id) {\r\n    return modules.get(id);\r\n}\r\n/**\r\n * Control whether the NgModule registration system enforces that each NgModule type registered has\r\n * a unique id.\r\n *\r\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\r\n * Angular's current API.\r\n */\r\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\r\n    checkForDuplicateNgModules = !allowDuplicates;\r\n}\r\n\r\n/**\r\n * Validation function invoked at runtime for each binding that might potentially\r\n * represent a security-sensitive attribute of an <iframe>.\r\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\r\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\r\n * of such attributes.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\r\n    const lView = getLView();\r\n    const tNode = getSelectedTNode();\r\n    const element = getNativeByTNode(tNode, lView);\r\n    // Restrict any dynamic bindings of security-sensitive attributes/properties\r\n    // on an <iframe> for security reasons.\r\n    if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\r\n        const iframe = element;\r\n        // Unset previously applied `src` and `srcdoc` if we come across a situation when\r\n        // a security-sensitive attribute is set later via an attribute/property binding.\r\n        iframe.src = '';\r\n        iframe.srcdoc = trustedHTMLFromString('');\r\n        // Also remove the <iframe> from the document.\r\n        nativeRemoveNode(lView[RENDERER], iframe);\r\n        const errorMessage = ngDevMode &&\r\n            `Angular has detected that the \\`${attrName}\\` was applied ` +\r\n                `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` +\r\n                `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` +\r\n                `as a static attribute only. \\n` +\r\n                `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` +\r\n                `in a template or in host bindings section.`;\r\n        throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\r\n    }\r\n    return attrValue;\r\n}\r\n\r\nconst markedFeatures = new Set();\r\n// tslint:disable:ban\r\n/**\r\n * A guarded `performance.mark` for feature marking.\r\n *\r\n * This method exists because while all supported browser and node.js version supported by Angular\r\n * support performance.mark API. This is not the case for other environments such as JSDOM and\r\n * Cloudflare workers.\r\n */\r\nfunction performanceMarkFeature(feature) {\r\n    if (markedFeatures.has(feature)) {\r\n        return;\r\n    }\r\n    markedFeatures.add(feature);\r\n    performance?.mark?.('mark_feature_usage', { detail: { feature } });\r\n}\r\n\r\n/**\r\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\r\n * Provides access to the `NgModule` instance and related objects.\r\n *\r\n * @publicApi\r\n */\r\nlet NgModuleRef$1 = class NgModuleRef {\r\n};\r\n/**\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\r\n * JIT mode. Angular provides APIs that accept NgModule classes directly (such as\r\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\r\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\r\n * using factory-based ones.\r\n */\r\nlet NgModuleFactory$1 = class NgModuleFactory {\r\n};\r\n\r\n/**\r\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\r\n *\r\n * @param ngModule NgModule class.\r\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\r\n *     not provided, `NullInjector` will be used instead.\r\n * @returns NgModuleRef that represents an NgModule instance.\r\n *\r\n * @publicApi\r\n */\r\nfunction createNgModule(ngModule, parentInjector) {\r\n    return new NgModuleRef(ngModule, parentInjector ?? null, []);\r\n}\r\n/**\r\n * The `createNgModule` function alias for backwards-compatibility.\r\n * Please avoid using it directly and use `createNgModule` instead.\r\n *\r\n * @deprecated Use `createNgModule` instead.\r\n */\r\nconst createNgModuleRef = createNgModule;\r\nclass NgModuleRef extends NgModuleRef$1 {\r\n    ngModuleType;\r\n    _parent;\r\n    // tslint:disable-next-line:require-internal-with-underscore\r\n    _bootstrapComponents = [];\r\n    _r3Injector;\r\n    instance;\r\n    destroyCbs = [];\r\n    // When bootstrapping a module we have a dependency graph that looks like this:\r\n    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\r\n    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\r\n    // circular dependency which will result in a runtime error, because the injector doesn't\r\n    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\r\n    // and providing it, rather than letting the injector resolve it.\r\n    componentFactoryResolver = new ComponentFactoryResolver(this);\r\n    constructor(ngModuleType, _parent, additionalProviders, runInjectorInitializers = true) {\r\n        super();\r\n        this.ngModuleType = ngModuleType;\r\n        this._parent = _parent;\r\n        const ngModuleDef = getNgModuleDef(ngModuleType);\r\n        ngDevMode &&\r\n            assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\r\n        this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\r\n        this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [\r\n            { provide: NgModuleRef$1, useValue: this },\r\n            {\r\n                provide: ComponentFactoryResolver$1,\r\n                useValue: this.componentFactoryResolver,\r\n            },\r\n            ...additionalProviders,\r\n        ], stringify(ngModuleType), new Set(['environment']));\r\n        // We need to resolve the injector types separately from the injector creation, because\r\n        // the module might be trying to use this ref in its constructor for DI which will cause a\r\n        // circular error that will eventually error out, because the injector isn't created yet.\r\n        if (runInjectorInitializers) {\r\n            this.resolveInjectorInitializers();\r\n        }\r\n    }\r\n    resolveInjectorInitializers() {\r\n        this._r3Injector.resolveInjectorInitializers();\r\n        this.instance = this._r3Injector.get(this.ngModuleType);\r\n    }\r\n    get injector() {\r\n        return this._r3Injector;\r\n    }\r\n    destroy() {\r\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\r\n        const injector = this._r3Injector;\r\n        !injector.destroyed && injector.destroy();\r\n        this.destroyCbs.forEach((fn) => fn());\r\n        this.destroyCbs = null;\r\n    }\r\n    onDestroy(callback) {\r\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\r\n        this.destroyCbs.push(callback);\r\n    }\r\n}\r\nclass NgModuleFactory extends NgModuleFactory$1 {\r\n    moduleType;\r\n    constructor(moduleType) {\r\n        super();\r\n        this.moduleType = moduleType;\r\n    }\r\n    create(parentInjector) {\r\n        return new NgModuleRef(this.moduleType, parentInjector, []);\r\n    }\r\n}\r\nfunction createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {\r\n    return new NgModuleRef(moduleType, parentInjector, additionalProviders, false);\r\n}\r\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\r\n    injector;\r\n    componentFactoryResolver = new ComponentFactoryResolver(this);\r\n    instance = null;\r\n    constructor(config) {\r\n        super();\r\n        const injector = new R3Injector([\r\n            ...config.providers,\r\n            { provide: NgModuleRef$1, useValue: this },\r\n            { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver },\r\n        ], config.parent || getNullInjector(), config.debugName, new Set(['environment']));\r\n        this.injector = injector;\r\n        if (config.runEnvironmentInitializers) {\r\n            injector.resolveInjectorInitializers();\r\n        }\r\n    }\r\n    destroy() {\r\n        this.injector.destroy();\r\n    }\r\n    onDestroy(callback) {\r\n        this.injector.onDestroy(callback);\r\n    }\r\n}\r\n/**\r\n * Create a new environment injector.\r\n *\r\n * @param providers An array of providers.\r\n * @param parent A parent environment injector.\r\n * @param debugName An optional name for this injector instance, which will be used in error\r\n *     messages.\r\n *\r\n * @publicApi\r\n */\r\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\r\n    const adapter = new EnvironmentNgModuleRefAdapter({\r\n        providers,\r\n        parent,\r\n        debugName,\r\n        runEnvironmentInitializers: true,\r\n    });\r\n    return adapter.injector;\r\n}\r\n\r\n/**\r\n * A service used by the framework to create instances of standalone injectors. Those injectors are\r\n * created on demand in case of dynamic component instantiation and contain ambient providers\r\n * collected from the imports graph rooted at a given standalone component.\r\n */\r\nclass StandaloneService {\r\n    _injector;\r\n    cachedInjectors = new Map();\r\n    constructor(_injector) {\r\n        this._injector = _injector;\r\n    }\r\n    getOrCreateStandaloneInjector(componentDef) {\r\n        if (!componentDef.standalone) {\r\n            return null;\r\n        }\r\n        if (!this.cachedInjectors.has(componentDef)) {\r\n            const providers = internalImportProvidersFrom(false, componentDef.type);\r\n            const standaloneInjector = providers.length > 0\r\n                ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`)\r\n                : null;\r\n            this.cachedInjectors.set(componentDef, standaloneInjector);\r\n        }\r\n        return this.cachedInjectors.get(componentDef);\r\n    }\r\n    ngOnDestroy() {\r\n        try {\r\n            for (const injector of this.cachedInjectors.values()) {\r\n                if (injector !== null) {\r\n                    injector.destroy();\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this.cachedInjectors.clear();\r\n        }\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: StandaloneService,\r\n        providedIn: 'environment',\r\n        factory: () => new StandaloneService(__inject(EnvironmentInjector)),\r\n    });\r\n}\r\n\r\n/**\r\n * Create a component definition object.\r\n *\r\n *\r\n * # Example\r\n * ```ts\r\n * class MyComponent {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ɵcmp = defineComponent({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdefineComponent(componentDefinition) {\r\n    return noSideEffects(() => {\r\n        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\r\n        // See the `initNgDevMode` docstring for more information.\r\n        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\r\n        const baseDef = getNgDirectiveDef(componentDefinition);\r\n        const def = {\r\n            ...baseDef,\r\n            decls: componentDefinition.decls,\r\n            vars: componentDefinition.vars,\r\n            template: componentDefinition.template,\r\n            consts: componentDefinition.consts || null,\r\n            ngContentSelectors: componentDefinition.ngContentSelectors,\r\n            onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\r\n            directiveDefs: null, // assigned in noSideEffects\r\n            pipeDefs: null, // assigned in noSideEffects\r\n            dependencies: (baseDef.standalone && componentDefinition.dependencies) || null,\r\n            getStandaloneInjector: baseDef.standalone\r\n                ? (parentInjector) => {\r\n                    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);\r\n                }\r\n                : null,\r\n            getExternalStyles: null,\r\n            signals: componentDefinition.signals ?? false,\r\n            data: componentDefinition.data || {},\r\n            encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\r\n            styles: componentDefinition.styles || EMPTY_ARRAY,\r\n            _: null,\r\n            schemas: componentDefinition.schemas || null,\r\n            tView: null,\r\n            id: '',\r\n        };\r\n        // TODO: Do we still need/want this ?\r\n        if (baseDef.standalone) {\r\n            performanceMarkFeature('NgStandalone');\r\n        }\r\n        initFeatures(def);\r\n        const dependencies = componentDefinition.dependencies;\r\n        def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */ false);\r\n        def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */ true);\r\n        def.id = getComponentId(def);\r\n        return def;\r\n    });\r\n}\r\nfunction extractDirectiveDef(type) {\r\n    return getComponentDef(type) || getDirectiveDef(type);\r\n}\r\nfunction nonNull(value) {\r\n    return value !== null;\r\n}\r\n/**\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdefineNgModule(def) {\r\n    return noSideEffects(() => {\r\n        const res = {\r\n            type: def.type,\r\n            bootstrap: def.bootstrap || EMPTY_ARRAY,\r\n            declarations: def.declarations || EMPTY_ARRAY,\r\n            imports: def.imports || EMPTY_ARRAY,\r\n            exports: def.exports || EMPTY_ARRAY,\r\n            transitiveCompileScopes: null,\r\n            schemas: def.schemas || null,\r\n            id: def.id || null,\r\n        };\r\n        return res;\r\n    });\r\n}\r\n/**\r\n * Converts binding objects from the `DirectiveDefinition` into more efficient\r\n * lookup dictionaries that are optimized for the framework runtime.\r\n *\r\n * This function converts inputs or output directive information into new objects\r\n * where the public name conveniently maps to the minified internal field name.\r\n *\r\n * For inputs, the input flags are additionally persisted into the new data structure,\r\n * so that those can be quickly retrieved when needed.\r\n *\r\n * e.g. for\r\n *\r\n * ```ts\r\n * class Comp {\r\n *   @Input()\r\n *   propName1: string;\r\n *\r\n *   @Input('publicName2')\r\n *   declaredPropName2: number;\r\n *\r\n *   inputSignal = input(3);\r\n * }\r\n * ```\r\n *\r\n * will be serialized as\r\n *\r\n * ```ts\r\n * {\r\n *   propName1: 'propName1',\r\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\r\n *   inputSignal: [InputFlags.SignalBased, 'inputSignal'],\r\n * }\r\n * ```\r\n *\r\n * which is than translated by the minifier as:\r\n *\r\n * ```ts\r\n * {\r\n *   minifiedPropName1: 'propName1',\r\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\r\n *   minifiedInputSignal: [InputFlags.SignalBased, 'inputSignal'],\r\n * }\r\n * ```\r\n *\r\n * becomes: (public name => minifiedName + isSignal if needed)\r\n *\r\n * ```ts\r\n * {\r\n *  'propName1': 'minifiedPropName1',\r\n *  'publicName2': 'minifiedPropName2',\r\n *  'inputSignal': ['minifiedInputSignal', InputFlags.SignalBased],\r\n * }\r\n * ```\r\n *\r\n * Optionally the function can take `declaredInputs` which will result\r\n * in: (public name => declared name)\r\n *\r\n * ```ts\r\n * {\r\n *  'propName1': 'propName1',\r\n *  'publicName2': 'declaredPropName2',\r\n *  'inputSignal': 'inputSignal',\r\n * }\r\n * ```\r\n *\r\n\r\n */\r\nfunction parseAndConvertInputsForDefinition(obj, declaredInputs) {\r\n    if (obj == null)\r\n        return EMPTY_OBJ;\r\n    const newLookup = {};\r\n    for (const minifiedKey in obj) {\r\n        if (obj.hasOwnProperty(minifiedKey)) {\r\n            const value = obj[minifiedKey];\r\n            let publicName;\r\n            let declaredName;\r\n            let inputFlags;\r\n            let transform;\r\n            if (Array.isArray(value)) {\r\n                inputFlags = value[0];\r\n                publicName = value[1];\r\n                declaredName = value[2] ?? publicName; // declared name might not be set to save bytes.\r\n                transform = value[3] || null;\r\n            }\r\n            else {\r\n                publicName = value;\r\n                declaredName = value;\r\n                inputFlags = InputFlags.None;\r\n                transform = null;\r\n            }\r\n            newLookup[publicName] = [minifiedKey, inputFlags, transform];\r\n            declaredInputs[publicName] = declaredName;\r\n        }\r\n    }\r\n    return newLookup;\r\n}\r\nfunction parseAndConvertOutputsForDefinition(obj) {\r\n    if (obj == null)\r\n        return EMPTY_OBJ;\r\n    const newLookup = {};\r\n    for (const minifiedKey in obj) {\r\n        if (obj.hasOwnProperty(minifiedKey)) {\r\n            newLookup[obj[minifiedKey]] = minifiedKey;\r\n        }\r\n    }\r\n    return newLookup;\r\n}\r\n/**\r\n * Create a directive definition object.\r\n *\r\n * # Example\r\n * ```ts\r\n * class MyDirective {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ɵdir = ɵɵdefineDirective({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdefineDirective(directiveDefinition) {\r\n    return noSideEffects(() => {\r\n        const def = getNgDirectiveDef(directiveDefinition);\r\n        initFeatures(def);\r\n        return def;\r\n    });\r\n}\r\n/**\r\n * Create a pipe definition object.\r\n *\r\n * # Example\r\n * ```ts\r\n * class MyPipe implements PipeTransform {\r\n *   // Generated by Angular Template Compiler\r\n *   static ɵpipe = definePipe({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @param pipeDef Pipe definition generated by the compiler\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdefinePipe(pipeDef) {\r\n    return {\r\n        type: pipeDef.type,\r\n        name: pipeDef.name,\r\n        factory: null,\r\n        pure: pipeDef.pure !== false,\r\n        standalone: pipeDef.standalone ?? true,\r\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null,\r\n    };\r\n}\r\nfunction getNgDirectiveDef(directiveDefinition) {\r\n    const declaredInputs = {};\r\n    return {\r\n        type: directiveDefinition.type,\r\n        providersResolver: null,\r\n        factory: null,\r\n        hostBindings: directiveDefinition.hostBindings || null,\r\n        hostVars: directiveDefinition.hostVars || 0,\r\n        hostAttrs: directiveDefinition.hostAttrs || null,\r\n        contentQueries: directiveDefinition.contentQueries || null,\r\n        declaredInputs: declaredInputs,\r\n        inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\r\n        exportAs: directiveDefinition.exportAs || null,\r\n        standalone: directiveDefinition.standalone ?? true,\r\n        signals: directiveDefinition.signals === true,\r\n        selectors: directiveDefinition.selectors || EMPTY_ARRAY,\r\n        viewQuery: directiveDefinition.viewQuery || null,\r\n        features: directiveDefinition.features || null,\r\n        setInput: null,\r\n        resolveHostDirectives: null,\r\n        hostDirectives: null,\r\n        inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),\r\n        outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),\r\n        debugInfo: null,\r\n    };\r\n}\r\nfunction initFeatures(definition) {\r\n    definition.features?.forEach((fn) => fn(definition));\r\n}\r\nfunction extractDefListOrFactory(dependencies, pipeDef) {\r\n    if (!dependencies) {\r\n        return null;\r\n    }\r\n    const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\r\n    return () => (typeof dependencies === 'function' ? dependencies() : dependencies)\r\n        .map((dep) => defExtractor(dep))\r\n        .filter(nonNull);\r\n}\r\n/**\r\n * A map that contains the generated component IDs and type.\r\n */\r\nconst GENERATED_COMP_IDS = new Map();\r\n/**\r\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\r\n * algorithm.\r\n */\r\nfunction getComponentId(componentDef) {\r\n    let hash = 0;\r\n    // For components with i18n in templates, the `consts` array is generated by the compiler\r\n    // as a function. If client and server bundles were produced with different minification\r\n    // configurations, the serializable contents of the function body would be different on\r\n    // the client and on the server. This might result in different ids generated. To avoid this\r\n    // issue, we do not take the `consts` contents into account if it's a function.\r\n    // See https://github.com/angular/angular/issues/58713.\r\n    const componentDefConsts = typeof componentDef.consts === 'function' ? '' : componentDef.consts;\r\n    // We cannot rely solely on the component selector as the same selector can be used in different\r\n    // modules.\r\n    //\r\n    // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\r\n    // component styles has no sourcemaps and browsers do.\r\n    //\r\n    // Example:\r\n    // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\r\n    // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\r\n    const hashSelectors = [\r\n        componentDef.selectors,\r\n        componentDef.ngContentSelectors,\r\n        componentDef.hostVars,\r\n        componentDef.hostAttrs,\r\n        componentDefConsts,\r\n        componentDef.vars,\r\n        componentDef.decls,\r\n        componentDef.encapsulation,\r\n        componentDef.standalone,\r\n        componentDef.signals,\r\n        componentDef.exportAs,\r\n        JSON.stringify(componentDef.inputs),\r\n        JSON.stringify(componentDef.outputs),\r\n        // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\r\n        // match in the server and browser bundles.\r\n        Object.getOwnPropertyNames(componentDef.type.prototype),\r\n        !!componentDef.contentQueries,\r\n        !!componentDef.viewQuery,\r\n    ];\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        // If client and server bundles were produced with different minification configurations,\r\n        // the serializable contents of the function body would be different on the client and on\r\n        // the server. Ensure that we do not accidentally use functions in component id computation.\r\n        for (const item of hashSelectors) {\r\n            assertNotEqual(typeof item, 'function', 'Internal error: attempting to use a function in component id computation logic.');\r\n        }\r\n    }\r\n    for (const char of hashSelectors.join('|')) {\r\n        hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\r\n    }\r\n    // Force positive number hash.\r\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\r\n    hash += 2147483647 + 1;\r\n    const compId = 'c' + hash;\r\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n        // Skip the check on the server since we can't guarantee the same component instance between\r\n        // requests. Note that we can't use DI to check if we're on the server, because the component\r\n        // hasn't been instantiated yet.\r\n        (typeof ngServerMode === 'undefined' || !ngServerMode)) {\r\n        if (GENERATED_COMP_IDS.has(compId)) {\r\n            const previousCompDefType = GENERATED_COMP_IDS.get(compId);\r\n            if (previousCompDefType !== componentDef.type) {\r\n                console.warn(formatRuntimeError(-912 /* RuntimeErrorCode.COMPONENT_ID_COLLISION */, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));\r\n            }\r\n        }\r\n        else {\r\n            GENERATED_COMP_IDS.set(compId, componentDef.type);\r\n        }\r\n    }\r\n    return compId;\r\n}\r\n\r\nfunction getSuperType(type) {\r\n    return Object.getPrototypeOf(type.prototype).constructor;\r\n}\r\n/**\r\n * Merges the definition from a super class to a sub class.\r\n * @param definition The definition that is a SubClass of another directive of component\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵInheritDefinitionFeature(definition) {\r\n    let superType = getSuperType(definition.type);\r\n    let shouldInheritFields = true;\r\n    const inheritanceChain = [definition];\r\n    while (superType) {\r\n        let superDef = undefined;\r\n        if (isComponentDef(definition)) {\r\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\r\n            superDef = superType.ɵcmp || superType.ɵdir;\r\n        }\r\n        else {\r\n            if (superType.ɵcmp) {\r\n                throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode &&\r\n                    `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\r\n            }\r\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\r\n            superDef = superType.ɵdir;\r\n        }\r\n        if (superDef) {\r\n            if (shouldInheritFields) {\r\n                inheritanceChain.push(superDef);\r\n                // Some fields in the definition may be empty, if there were no values to put in them that\r\n                // would've justified object creation. Unwrap them if necessary.\r\n                const writeableDef = definition;\r\n                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\r\n                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\r\n                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\r\n                // Merge hostBindings\r\n                const superHostBindings = superDef.hostBindings;\r\n                superHostBindings && inheritHostBindings(definition, superHostBindings);\r\n                // Merge queries\r\n                const superViewQuery = superDef.viewQuery;\r\n                const superContentQueries = superDef.contentQueries;\r\n                superViewQuery && inheritViewQuery(definition, superViewQuery);\r\n                superContentQueries && inheritContentQueries(definition, superContentQueries);\r\n                // Merge inputs and outputs\r\n                mergeInputsWithTransforms(definition, superDef);\r\n                fillProperties(definition.outputs, superDef.outputs);\r\n                // Merge animations metadata.\r\n                // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\r\n                if (isComponentDef(superDef) && superDef.data.animation) {\r\n                    // If super def is a Component, the `definition` is also a Component, since Directives can\r\n                    // not inherit Components (we throw an error above and cannot reach this code).\r\n                    const defData = definition.data;\r\n                    defData.animation = (defData.animation || []).concat(superDef.data.animation);\r\n                }\r\n            }\r\n            // Run parent features\r\n            const features = superDef.features;\r\n            if (features) {\r\n                for (let i = 0; i < features.length; i++) {\r\n                    const feature = features[i];\r\n                    if (feature && feature.ngInherit) {\r\n                        feature(definition);\r\n                    }\r\n                    // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\r\n                    // def already has all the necessary information inherited from its super class(es), so we\r\n                    // can stop merging fields from super classes. However we need to iterate through the\r\n                    // prototype chain to look for classes that might contain other \"features\" (like\r\n                    // NgOnChanges), which we should invoke for the original `definition`. We set the\r\n                    // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\r\n                    // logic and only invoking functions from the \"features\" list.\r\n                    if (feature === ɵɵInheritDefinitionFeature) {\r\n                        shouldInheritFields = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        superType = Object.getPrototypeOf(superType);\r\n    }\r\n    mergeHostAttrsAcrossInheritance(inheritanceChain);\r\n}\r\nfunction mergeInputsWithTransforms(target, source) {\r\n    for (const key in source.inputs) {\r\n        if (!source.inputs.hasOwnProperty(key)) {\r\n            continue;\r\n        }\r\n        if (target.inputs.hasOwnProperty(key)) {\r\n            continue;\r\n        }\r\n        const value = source.inputs[key];\r\n        if (value !== undefined) {\r\n            target.inputs[key] = value;\r\n            target.declaredInputs[key] = source.declaredInputs[key];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\r\n *\r\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\r\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\r\n * type.\r\n */\r\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\r\n    let hostVars = 0;\r\n    let hostAttrs = null;\r\n    // We process the inheritance order from the base to the leaves here.\r\n    for (let i = inheritanceChain.length - 1; i >= 0; i--) {\r\n        const def = inheritanceChain[i];\r\n        // For each `hostVars`, we need to add the superclass amount.\r\n        def.hostVars = hostVars += def.hostVars;\r\n        // for each `hostAttrs` we need to merge it with superclass.\r\n        def.hostAttrs = mergeHostAttrs(def.hostAttrs, (hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs)));\r\n    }\r\n}\r\nfunction maybeUnwrapEmpty(value) {\r\n    if (value === EMPTY_OBJ) {\r\n        return {};\r\n    }\r\n    else if (value === EMPTY_ARRAY) {\r\n        return [];\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\nfunction inheritViewQuery(definition, superViewQuery) {\r\n    const prevViewQuery = definition.viewQuery;\r\n    if (prevViewQuery) {\r\n        definition.viewQuery = (rf, ctx) => {\r\n            superViewQuery(rf, ctx);\r\n            prevViewQuery(rf, ctx);\r\n        };\r\n    }\r\n    else {\r\n        definition.viewQuery = superViewQuery;\r\n    }\r\n}\r\nfunction inheritContentQueries(definition, superContentQueries) {\r\n    const prevContentQueries = definition.contentQueries;\r\n    if (prevContentQueries) {\r\n        definition.contentQueries = (rf, ctx, directiveIndex) => {\r\n            superContentQueries(rf, ctx, directiveIndex);\r\n            prevContentQueries(rf, ctx, directiveIndex);\r\n        };\r\n    }\r\n    else {\r\n        definition.contentQueries = superContentQueries;\r\n    }\r\n}\r\nfunction inheritHostBindings(definition, superHostBindings) {\r\n    const prevHostBindings = definition.hostBindings;\r\n    if (prevHostBindings) {\r\n        definition.hostBindings = (rf, ctx) => {\r\n            superHostBindings(rf, ctx);\r\n            prevHostBindings(rf, ctx);\r\n        };\r\n    }\r\n    else {\r\n        definition.hostBindings = superHostBindings;\r\n    }\r\n}\r\n\r\n/**\r\n * Fields which exist on either directive or component definitions, and need to be copied from\r\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\r\n */\r\nconst COPY_DIRECTIVE_FIELDS = [\r\n    // The child class should use the providers of its parent.\r\n    'providersResolver',\r\n    // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\r\n    // as inputs, outputs, and host binding functions.\r\n];\r\n/**\r\n * Fields which exist only on component definitions, and need to be copied from parent to child\r\n * classes by the `ɵɵCopyDefinitionFeature`.\r\n *\r\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\r\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\r\n */\r\nconst COPY_COMPONENT_FIELDS = [\r\n    // The child class should use the template function of its parent, including all template\r\n    // semantics.\r\n    'template',\r\n    'decls',\r\n    'consts',\r\n    'vars',\r\n    'onPush',\r\n    'ngContentSelectors',\r\n    // The child class should use the CSS styles of its parent, including all styling semantics.\r\n    'styles',\r\n    'encapsulation',\r\n    // The child class should be checked by the runtime in the same way as its parent.\r\n    'schemas',\r\n];\r\n/**\r\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\r\n * definition.\r\n *\r\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\r\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\r\n * generates a skeleton definition on the child class, and applies this feature.\r\n *\r\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\r\n * including things like the component template function.\r\n *\r\n * @param definition The definition of a child class which inherits from a parent class with its\r\n * own definition.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵCopyDefinitionFeature(definition) {\r\n    let superType = getSuperType(definition.type);\r\n    let superDef = undefined;\r\n    if (isComponentDef(definition)) {\r\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\r\n        superDef = superType.ɵcmp;\r\n    }\r\n    else {\r\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\r\n        superDef = superType.ɵdir;\r\n    }\r\n    // Needed because `definition` fields are readonly.\r\n    const defAny = definition;\r\n    // Copy over any fields that apply to either directives or components.\r\n    for (const field of COPY_DIRECTIVE_FIELDS) {\r\n        defAny[field] = superDef[field];\r\n    }\r\n    if (isComponentDef(superDef)) {\r\n        // Copy over any component-specific fields.\r\n        for (const field of COPY_COMPONENT_FIELDS) {\r\n            defAny[field] = superDef[field];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This feature adds the host directives behavior to a directive definition by patching a\r\n * function onto it. The expectation is that the runtime will invoke the function during\r\n * directive matching.\r\n *\r\n * For example:\r\n * ```ts\r\n * class ComponentWithHostDirective {\r\n *   static ɵcmp = defineComponent({\r\n *    type: ComponentWithHostDirective,\r\n *    features: [ɵɵHostDirectivesFeature([\r\n *      SimpleHostDirective,\r\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\r\n *    ])]\r\n *  });\r\n * }\r\n * ```\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\r\n    const feature = (definition) => {\r\n        const isEager = Array.isArray(rawHostDirectives);\r\n        if (definition.hostDirectives === null) {\r\n            definition.resolveHostDirectives = resolveHostDirectives;\r\n            definition.hostDirectives = isEager\r\n                ? rawHostDirectives.map(createHostDirectiveDef)\r\n                : [rawHostDirectives];\r\n        }\r\n        else if (isEager) {\r\n            definition.hostDirectives.unshift(...rawHostDirectives.map(createHostDirectiveDef));\r\n        }\r\n        else {\r\n            definition.hostDirectives.unshift(rawHostDirectives);\r\n        }\r\n    };\r\n    feature.ngInherit = true;\r\n    return feature;\r\n}\r\n/**\r\n * Function that will be patched onto a definition to enable host directives. It is intended to\r\n * be called once during directive matching and is the same for all definitions.\r\n * @param matches Directives resolved through selector matching.\r\n */\r\nfunction resolveHostDirectives(matches) {\r\n    const allDirectiveDefs = [];\r\n    let hasComponent = false;\r\n    let hostDirectiveDefs = null;\r\n    let hostDirectiveRanges = null;\r\n    // Components are inserted at the front of the matches array so that their lifecycle\r\n    // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\r\n    // compatibility. This logic doesn't make sense with host directives, because it\r\n    // would allow the host directives to undo any overrides the host may have made.\r\n    // To handle this case, the host directives of components are inserted at the beginning\r\n    // of the array, followed by the component. As such, the insertion order is as follows:\r\n    // 1. Host directives belonging to the selector-matched component.\r\n    // 2. Selector-matched component.\r\n    // 3. Host directives belonging to selector-matched directives.\r\n    // 4. Selector-matched dir\r\n    for (let i = 0; i < matches.length; i++) {\r\n        const def = matches[i];\r\n        if (def.hostDirectives !== null) {\r\n            const start = allDirectiveDefs.length;\r\n            hostDirectiveDefs ??= new Map();\r\n            hostDirectiveRanges ??= new Map();\r\n            // TODO(pk): probably could return matches instead of taking in an array to fill in?\r\n            findHostDirectiveDefs(def, allDirectiveDefs, hostDirectiveDefs);\r\n            // Note that these indexes are within the offset by `directiveStart`. We can't do the\r\n            // offsetting here, because `directiveStart` hasn't been initialized on the TNode yet.\r\n            hostDirectiveRanges.set(def, [start, allDirectiveDefs.length - 1]);\r\n        }\r\n        // Component definition is always first and needs to be\r\n        // pushed early to maintain the correct ordering.\r\n        if (i === 0 && isComponentDef(def)) {\r\n            hasComponent = true;\r\n            allDirectiveDefs.push(def);\r\n        }\r\n    }\r\n    for (let i = hasComponent ? 1 : 0; i < matches.length; i++) {\r\n        allDirectiveDefs.push(matches[i]);\r\n    }\r\n    return [allDirectiveDefs, hostDirectiveDefs, hostDirectiveRanges];\r\n}\r\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\r\n    if (currentDef.hostDirectives !== null) {\r\n        for (const configOrFn of currentDef.hostDirectives) {\r\n            if (typeof configOrFn === 'function') {\r\n                const resolved = configOrFn();\r\n                for (const config of resolved) {\r\n                    trackHostDirectiveDef(createHostDirectiveDef(config), matchedDefs, hostDirectiveDefs);\r\n                }\r\n            }\r\n            else {\r\n                trackHostDirectiveDef(configOrFn, matchedDefs, hostDirectiveDefs);\r\n            }\r\n        }\r\n    }\r\n}\r\n/** Tracks a single host directive during directive matching. */\r\nfunction trackHostDirectiveDef(def, matchedDefs, hostDirectiveDefs) {\r\n    const hostDirectiveDef = getDirectiveDef(def.directive);\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        validateHostDirective(def, hostDirectiveDef);\r\n    }\r\n    // We need to patch the `declaredInputs` so that\r\n    // `ngOnChanges` can map the properties correctly.\r\n    patchDeclaredInputs(hostDirectiveDef.declaredInputs, def.inputs);\r\n    // Host directives execute before the host so that its host bindings can be overwritten.\r\n    findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\r\n    hostDirectiveDefs.set(hostDirectiveDef, def);\r\n    matchedDefs.push(hostDirectiveDef);\r\n}\r\n/** Creates a `HostDirectiveDef` from a used-defined host directive configuration. */\r\nfunction createHostDirectiveDef(config) {\r\n    return typeof config === 'function'\r\n        ? { directive: resolveForwardRef(config), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ }\r\n        : {\r\n            directive: resolveForwardRef(config.directive),\r\n            inputs: bindingArrayToMap(config.inputs),\r\n            outputs: bindingArrayToMap(config.outputs),\r\n        };\r\n}\r\n/**\r\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\r\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\r\n */\r\nfunction bindingArrayToMap(bindings) {\r\n    if (bindings === undefined || bindings.length === 0) {\r\n        return EMPTY_OBJ;\r\n    }\r\n    const result = {};\r\n    for (let i = 0; i < bindings.length; i += 2) {\r\n        result[bindings[i]] = bindings[i + 1];\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\r\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\r\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\r\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\r\n * minification.\r\n *\r\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\r\n * definition is declared. When a property is written to the directive instance, the\r\n * `NgOnChangesFeature` will try to remap the property name being written to using the\r\n * `declaredInputs`.\r\n *\r\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\r\n * won't contain the new alias that the input is available under. This function addresses the\r\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\r\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\r\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\r\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\r\n */\r\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\r\n    for (const publicName in exposedInputs) {\r\n        if (exposedInputs.hasOwnProperty(publicName)) {\r\n            const remappedPublicName = exposedInputs[publicName];\r\n            const privateName = declaredInputs[publicName];\r\n            // We *technically* shouldn't be able to hit this case because we can't have multiple\r\n            // inputs on the same property and we have validations against conflicting aliases in\r\n            // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\r\n            // with the wrong name so we have a non-user-friendly assertion here just in case.\r\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                declaredInputs.hasOwnProperty(remappedPublicName)) {\r\n                assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\r\n            }\r\n            declaredInputs[remappedPublicName] = privateName;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Verifies that the host directive has been configured correctly.\r\n * @param hostDirectiveConfig Host directive configuration object.\r\n * @param directiveDef Directive definition of the host directive.\r\n */\r\nfunction validateHostDirective(hostDirectiveConfig, directiveDef) {\r\n    const type = hostDirectiveConfig.directive;\r\n    if (directiveDef === null) {\r\n        if (getComponentDef(type) !== null) {\r\n            throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\r\n        }\r\n        throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` +\r\n            `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\r\n    }\r\n    if (!directiveDef.standalone) {\r\n        throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\r\n    }\r\n    validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\r\n    validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\r\n}\r\n/**\r\n * Checks that the host directive inputs/outputs configuration is valid.\r\n * @param bindingType Kind of binding that is being validated. Used in the error message.\r\n * @param def Definition of the host directive that is being validated against.\r\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\r\n */\r\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\r\n    const className = def.type.name;\r\n    const bindings = bindingType === 'input' ? def.inputs : def.outputs;\r\n    for (const publicName in hostDirectiveBindings) {\r\n        if (hostDirectiveBindings.hasOwnProperty(publicName)) {\r\n            if (!bindings.hasOwnProperty(publicName)) {\r\n                throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\r\n            }\r\n            const remappedPublicName = hostDirectiveBindings[publicName];\r\n            if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {\r\n                throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrs, localRefsIndex) {\r\n    ngDevMode && assertFirstCreatePass(tView);\r\n    const tViewConsts = tView.consts;\r\n    // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\r\n    const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, attrs || null);\r\n    if (getBindingsEnabled()) {\r\n        resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), findDirectiveDefMatches);\r\n    }\r\n    // Merge the template attrs last so that they have the highest priority.\r\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\r\n    registerPostOrderHooks(tView, tNode);\r\n    const embeddedTView = (tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts, null /* ssrId */));\r\n    if (tView.queries !== null) {\r\n        tView.queries.template(tView, tNode);\r\n        embeddedTView.queries = tView.queries.embeddedTView(tNode);\r\n    }\r\n    return tNode;\r\n}\r\n/**\r\n * Creates an LContainer for an embedded view.\r\n *\r\n * @param declarationLView LView in which the template was declared.\r\n * @param declarationTView TView in which the template wa declared.\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n */\r\nfunction declareTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, flags, localRefsIndex, localRefExtractor) {\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const tNode = declarationTView.firstCreatePass\r\n        ? templateFirstCreatePass(adjustedIndex, declarationTView, declarationLView, templateFn, decls, vars, tagName, attrs, localRefsIndex)\r\n        : declarationTView.data[adjustedIndex];\r\n    if (flags) {\r\n        tNode.flags |= flags;\r\n    }\r\n    setCurrentTNode(tNode, false);\r\n    const comment = _locateOrCreateContainerAnchor(declarationTView, declarationLView, tNode, index);\r\n    if (wasLastNodeCreated()) {\r\n        appendChild(declarationTView, declarationLView, comment, tNode);\r\n    }\r\n    attachPatchData(comment, declarationLView);\r\n    const lContainer = createLContainer(comment, declarationLView, comment, tNode);\r\n    declarationLView[adjustedIndex] = lContainer;\r\n    addToEndOfViewTree(declarationLView, lContainer);\r\n    // If hydration is enabled, looks up dehydrated views in the DOM\r\n    // using hydration annotation info and stores those views on LContainer.\r\n    // In client-only mode, this function is a noop.\r\n    populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);\r\n    if (isDirectiveHost(tNode)) {\r\n        createDirectivesInstances(declarationTView, declarationLView, tNode);\r\n    }\r\n    if (localRefsIndex != null) {\r\n        saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\r\n    }\r\n    return tNode;\r\n}\r\n/**\r\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\r\n *\r\n * <ng-template #foo>\r\n *    <div></div>\r\n * </ng-template>\r\n *\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const attrs = getConstant(tView.consts, attrsIndex);\r\n    declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, undefined, localRefsIndex, localRefExtractor);\r\n    return ɵɵtemplate;\r\n}\r\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\r\n/**\r\n * Regular creation mode for LContainers and their anchor (comment) nodes.\r\n */\r\nfunction createContainerAnchorImpl(tView, lView, tNode, index) {\r\n    lastNodeWasCreated(true);\r\n    return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\r\n}\r\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode for LContainers and their\r\n * anchor (comment) nodes.\r\n */\r\nfunction locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {\r\n    const hydrationInfo = lView[HYDRATION];\r\n    const isNodeCreationMode = !hydrationInfo ||\r\n        isInSkipHydrationBlock$1() ||\r\n        isDetachedByI18n(tNode) ||\r\n        isDisconnectedNode$1(hydrationInfo, index);\r\n    lastNodeWasCreated(isNodeCreationMode);\r\n    const ssrId = hydrationInfo?.data[TEMPLATES]?.[index] ?? null;\r\n    // Apply `ssrId` value to the underlying TView if it was not previously set.\r\n    //\r\n    // There might be situations when the same component is present in a template\r\n    // multiple times and some instances are opted-out of using hydration via\r\n    // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\r\n    // the `ssrId` might be `null` (if the first component is opted-out of hydration).\r\n    // The code below makes sure that the `ssrId` is applied to the TView if it's still\r\n    // `null` and verifies we never try to override it with a different value.\r\n    if (ssrId !== null && tNode.tView !== null) {\r\n        if (tNode.tView.ssrId === null) {\r\n            tNode.tView.ssrId = ssrId;\r\n        }\r\n        else {\r\n            ngDevMode &&\r\n                assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\r\n        }\r\n    }\r\n    // Regular creation mode.\r\n    if (isNodeCreationMode) {\r\n        return createContainerAnchorImpl(tView, lView);\r\n    }\r\n    // Hydration mode, looking up existing elements in DOM.\r\n    const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\r\n    ngDevMode && validateNodeExists(currentRNode, lView, tNode);\r\n    setSegmentHead(hydrationInfo, index, currentRNode);\r\n    const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\r\n    const comment = siblingAfter(viewContainerSize, currentRNode);\r\n    if (ngDevMode) {\r\n        validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\r\n        markRNodeAsClaimedByHydration(comment);\r\n    }\r\n    return comment;\r\n}\r\nfunction enableLocateOrCreateContainerAnchorImpl() {\r\n    _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\r\n}\r\n\r\n/**\r\n * Describes the state of defer block dependency loading.\r\n */\r\nvar DeferDependenciesLoadingState;\r\n(function (DeferDependenciesLoadingState) {\r\n    /** Initial state, dependency loading is not yet triggered */\r\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\r\n    /** Dependency loading is in progress */\r\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\r\n    /** Dependency loading has completed successfully */\r\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"COMPLETE\"] = 2] = \"COMPLETE\";\r\n    /** Dependency loading has failed */\r\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"FAILED\"] = 3] = \"FAILED\";\r\n})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));\r\n/** Slot index where `minimum` parameter value is stored. */\r\nconst MINIMUM_SLOT = 0;\r\n/** Slot index where `after` parameter value is stored. */\r\nconst LOADING_AFTER_SLOT = 1;\r\n/**\r\n * Describes the current state of this defer block instance.\r\n *\r\n * @publicApi\r\n */\r\nvar DeferBlockState;\r\n(function (DeferBlockState) {\r\n    /** The placeholder block content is rendered */\r\n    DeferBlockState[DeferBlockState[\"Placeholder\"] = 0] = \"Placeholder\";\r\n    /** The loading block content is rendered */\r\n    DeferBlockState[DeferBlockState[\"Loading\"] = 1] = \"Loading\";\r\n    /** The main content block content is rendered */\r\n    DeferBlockState[DeferBlockState[\"Complete\"] = 2] = \"Complete\";\r\n    /** The error block content is rendered */\r\n    DeferBlockState[DeferBlockState[\"Error\"] = 3] = \"Error\";\r\n})(DeferBlockState || (DeferBlockState = {}));\r\n/**\r\n * Describes the initial state of this defer block instance.\r\n *\r\n * Note: this state is internal only and *must* be represented\r\n * with a number lower than any value in the `DeferBlockState` enum.\r\n */\r\nvar DeferBlockInternalState;\r\n(function (DeferBlockInternalState) {\r\n    /** Initial state. Nothing is rendered yet. */\r\n    DeferBlockInternalState[DeferBlockInternalState[\"Initial\"] = -1] = \"Initial\";\r\n})(DeferBlockInternalState || (DeferBlockInternalState = {}));\r\nconst NEXT_DEFER_BLOCK_STATE = 0;\r\n// Note: it's *important* to keep the state in this slot, because this slot\r\n// is used by runtime logic to differentiate between LViews, LContainers and\r\n// other types (see `isLView` and `isLContainer` functions). In case of defer\r\n// blocks, this slot would always be a number.\r\nconst DEFER_BLOCK_STATE = 1;\r\nconst STATE_IS_FROZEN_UNTIL = 2;\r\nconst LOADING_AFTER_CLEANUP_FN = 3;\r\nconst TRIGGER_CLEANUP_FNS = 4;\r\nconst PREFETCH_TRIGGER_CLEANUP_FNS = 5;\r\nconst SSR_UNIQUE_ID = 6;\r\nconst SSR_BLOCK_STATE = 7;\r\nconst ON_COMPLETE_FNS = 8;\r\nconst HYDRATE_TRIGGER_CLEANUP_FNS = 9;\r\n/**\r\n * Options for configuring defer blocks behavior.\r\n * @publicApi\r\n */\r\nvar DeferBlockBehavior;\r\n(function (DeferBlockBehavior) {\r\n    /**\r\n     * Manual triggering mode for defer blocks. Provides control over when defer blocks render\r\n     * and which state they render.\r\n     */\r\n    DeferBlockBehavior[DeferBlockBehavior[\"Manual\"] = 0] = \"Manual\";\r\n    /**\r\n     * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.\r\n     * This is the default behavior in test environments.\r\n     */\r\n    DeferBlockBehavior[DeferBlockBehavior[\"Playthrough\"] = 1] = \"Playthrough\";\r\n})(DeferBlockBehavior || (DeferBlockBehavior = {}));\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Registers a cleanup function associated with a prefetching trigger\r\n * or a regular trigger of a defer block.\r\n */\r\nfunction storeTriggerCleanupFn(type, lDetails, cleanupFn) {\r\n    const key = getCleanupFnKeyByType(type);\r\n    if (lDetails[key] === null) {\r\n        lDetails[key] = [];\r\n    }\r\n    lDetails[key].push(cleanupFn);\r\n}\r\n/**\r\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\r\n */\r\nfunction invokeTriggerCleanupFns(type, lDetails) {\r\n    const key = getCleanupFnKeyByType(type);\r\n    const cleanupFns = lDetails[key];\r\n    if (cleanupFns !== null) {\r\n        for (const cleanupFn of cleanupFns) {\r\n            cleanupFn();\r\n        }\r\n        lDetails[key] = null;\r\n    }\r\n}\r\n/**\r\n * Invokes registered cleanup functions for prefetch, hydrate, and regular triggers.\r\n */\r\nfunction invokeAllTriggerCleanupFns(lDetails) {\r\n    invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\r\n    invokeTriggerCleanupFns(0 /* TriggerType.Regular */, lDetails);\r\n    invokeTriggerCleanupFns(2 /* TriggerType.Hydrate */, lDetails);\r\n}\r\nfunction getCleanupFnKeyByType(type) {\r\n    let key = TRIGGER_CLEANUP_FNS;\r\n    if (type === 1 /* TriggerType.Prefetch */) {\r\n        key = PREFETCH_TRIGGER_CLEANUP_FNS;\r\n    }\r\n    else if (type === 2 /* TriggerType.Hydrate */) {\r\n        key = HYDRATE_TRIGGER_CLEANUP_FNS;\r\n    }\r\n    return key;\r\n}\r\n\r\n/** Actions that are supported by the tracing framework. */\r\nvar TracingAction;\r\n(function (TracingAction) {\r\n    TracingAction[TracingAction[\"CHANGE_DETECTION\"] = 0] = \"CHANGE_DETECTION\";\r\n    TracingAction[TracingAction[\"AFTER_NEXT_RENDER\"] = 1] = \"AFTER_NEXT_RENDER\";\r\n})(TracingAction || (TracingAction = {}));\r\n/**\r\n * Injection token for a `TracingService`, optionally provided.\r\n */\r\nconst TracingService = new InjectionToken(ngDevMode ? 'TracingService' : '');\r\n\r\nconst SCHEDULE_IN_ROOT_ZONE_DEFAULT = false;\r\n\r\nclass EventEmitter_ extends Subject {\r\n    // tslint:disable-next-line:require-internal-with-underscore\r\n    __isAsync;\r\n    destroyRef = undefined;\r\n    pendingTasks = undefined;\r\n    constructor(isAsync = false) {\r\n        super();\r\n        this.__isAsync = isAsync;\r\n        // Attempt to retrieve a `DestroyRef` and `PendingTasks` optionally.\r\n        // For backwards compatibility reasons, this cannot be required.\r\n        if (isInInjectionContext()) {\r\n            // `DestroyRef` is optional because it is not available in all contexts.\r\n            // But it is useful to properly complete the `EventEmitter` if used with `outputToObservable`\r\n            // when the component/directive is destroyed. (See `outputToObservable` for more details.)\r\n            this.destroyRef = inject(DestroyRef, { optional: true }) ?? undefined;\r\n            this.pendingTasks = inject(PendingTasksInternal, { optional: true }) ?? undefined;\r\n        }\r\n    }\r\n    emit(value) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            super.next(value);\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n    subscribe(observerOrNext, error, complete) {\r\n        let nextFn = observerOrNext;\r\n        let errorFn = error || (() => null);\r\n        let completeFn = complete;\r\n        if (observerOrNext && typeof observerOrNext === 'object') {\r\n            const observer = observerOrNext;\r\n            nextFn = observer.next?.bind(observer);\r\n            errorFn = observer.error?.bind(observer);\r\n            completeFn = observer.complete?.bind(observer);\r\n        }\r\n        if (this.__isAsync) {\r\n            errorFn = this.wrapInTimeout(errorFn);\r\n            if (nextFn) {\r\n                nextFn = this.wrapInTimeout(nextFn);\r\n            }\r\n            if (completeFn) {\r\n                completeFn = this.wrapInTimeout(completeFn);\r\n            }\r\n        }\r\n        const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });\r\n        if (observerOrNext instanceof Subscription) {\r\n            observerOrNext.add(sink);\r\n        }\r\n        return sink;\r\n    }\r\n    wrapInTimeout(fn) {\r\n        return (value) => {\r\n            const taskId = this.pendingTasks?.add();\r\n            setTimeout(() => {\r\n                try {\r\n                    fn(value);\r\n                }\r\n                finally {\r\n                    if (taskId !== undefined) {\r\n                        this.pendingTasks?.remove(taskId);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n    }\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nconst EventEmitter = EventEmitter_;\r\n\r\n/**\r\n * Gets a scheduling function that runs the callback after the first of setTimeout and\r\n * requestAnimationFrame resolves.\r\n *\r\n * - `requestAnimationFrame` ensures that change detection runs ahead of a browser repaint.\r\n * This ensures that the create and update passes of a change detection always happen\r\n * in the same frame.\r\n * - When the browser is resource-starved, `rAF` can execute _before_ a `setTimeout` because\r\n * rendering is a very high priority process. This means that `setTimeout` cannot guarantee\r\n * same-frame create and update pass, when `setTimeout` is used to schedule the update phase.\r\n * - While `rAF` gives us the desirable same-frame updates, it has two limitations that\r\n * prevent it from being used alone. First, it does not run in background tabs, which would\r\n * prevent Angular from initializing an application when opened in a new tab (for example).\r\n * Second, repeated calls to requestAnimationFrame will execute at the refresh rate of the\r\n * hardware (~16ms for a 60Hz display). This would cause significant slowdown of tests that\r\n * are written with several updates and asserts in the form of \"update; await stable; assert;\".\r\n * - Both `setTimeout` and `rAF` are able to \"coalesce\" several events from a single user\r\n * interaction into a single change detection. Importantly, this reduces view tree traversals when\r\n * compared to an alternative timing mechanism like `queueMicrotask`, where change detection would\r\n * then be interleaves between each event.\r\n *\r\n * By running change detection after the first of `setTimeout` and `rAF` to execute, we get the\r\n * best of both worlds.\r\n *\r\n * @returns a function to cancel the scheduled callback\r\n */\r\nfunction scheduleCallbackWithRafRace(callback) {\r\n    let timeoutId;\r\n    let animationFrameId;\r\n    function cleanup() {\r\n        callback = noop;\r\n        try {\r\n            if (animationFrameId !== undefined && typeof cancelAnimationFrame === 'function') {\r\n                cancelAnimationFrame(animationFrameId);\r\n            }\r\n            if (timeoutId !== undefined) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        }\r\n        catch {\r\n            // Clearing/canceling can fail in tests due to the timing of functions being patched and unpatched\r\n            // Just ignore the errors - we protect ourselves from this issue by also making the callback a no-op.\r\n        }\r\n    }\r\n    timeoutId = setTimeout(() => {\r\n        callback();\r\n        cleanup();\r\n    });\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        animationFrameId = requestAnimationFrame(() => {\r\n            callback();\r\n            cleanup();\r\n        });\r\n    }\r\n    return () => cleanup();\r\n}\r\nfunction scheduleCallbackWithMicrotask(callback) {\r\n    queueMicrotask(() => callback());\r\n    return () => {\r\n        callback = noop;\r\n    };\r\n}\r\n\r\nclass AsyncStackTaggingZoneSpec {\r\n    createTask;\r\n    constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {\r\n        this.name = 'asyncStackTagging for ' + namePrefix;\r\n        this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\r\n    }\r\n    // ZoneSpec implementation below.\r\n    name;\r\n    onScheduleTask(delegate, _current, target, task) {\r\n        task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\r\n        return delegate.scheduleTask(target, task);\r\n    }\r\n    onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {\r\n        let ret;\r\n        if (task.consoleTask) {\r\n            ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\r\n        }\r\n        else {\r\n            ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\nconst isAngularZoneProperty = 'isAngularZone';\r\nconst angularZoneInstanceIdProperty = isAngularZoneProperty + '_ID';\r\nlet ngZoneInstanceId = 0;\r\n/**\r\n * An injectable service for executing work inside or outside of the Angular zone.\r\n *\r\n * The most common use of this service is to optimize performance when starting a work consisting of\r\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\r\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\r\n * can reenter the Angular zone via {@link #run}.\r\n *\r\n * <!-- TODO: add/fix links to:\r\n *   - docs explaining zones and the use of zones in Angular and change-detection\r\n *   - link to runOutsideAngular/run (throughout this file!)\r\n *   -->\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```ts\r\n * import {Component, NgZone} from '@angular/core';\r\n *\r\n * @Component({\r\n *   selector: 'ng-zone-demo',\r\n *   template: `\r\n *     <h2>Demo: NgZone</h2>\r\n *\r\n *     <p>Progress: {{progress}}%</p>\r\n *     @if(progress >= 100) {\r\n *        <p>Done processing {{label}} of Angular zone!</p>\r\n *     }\r\n *\r\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\r\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\r\n *   `,\r\n * })\r\n * export class NgZoneDemo {\r\n *   progress: number = 0;\r\n *   label: string;\r\n *\r\n *   constructor(private _ngZone: NgZone) {}\r\n *\r\n *   // Loop inside the Angular zone\r\n *   // so the UI DOES refresh after each setTimeout cycle\r\n *   processWithinAngularZone() {\r\n *     this.label = 'inside';\r\n *     this.progress = 0;\r\n *     this._increaseProgress(() => console.log('Inside Done!'));\r\n *   }\r\n *\r\n *   // Loop outside of the Angular zone\r\n *   // so the UI DOES NOT refresh after each setTimeout cycle\r\n *   processOutsideOfAngularZone() {\r\n *     this.label = 'outside';\r\n *     this.progress = 0;\r\n *     this._ngZone.runOutsideAngular(() => {\r\n *       this._increaseProgress(() => {\r\n *         // reenter the Angular zone and display done\r\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\r\n *       });\r\n *     });\r\n *   }\r\n *\r\n *   _increaseProgress(doneCallback: () => void) {\r\n *     this.progress += 1;\r\n *     console.log(`Current progress: ${this.progress}%`);\r\n *\r\n *     if (this.progress < 100) {\r\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\r\n *     } else {\r\n *       doneCallback();\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass NgZone {\r\n    hasPendingMacrotasks = false;\r\n    hasPendingMicrotasks = false;\r\n    /**\r\n     * Whether there are no outstanding microtasks or macrotasks.\r\n     */\r\n    isStable = true;\r\n    /**\r\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\r\n     */\r\n    onUnstable = new EventEmitter(false);\r\n    /**\r\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\r\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\r\n     * For this reason this event can fire multiple times per VM Turn.\r\n     */\r\n    onMicrotaskEmpty = new EventEmitter(false);\r\n    /**\r\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\r\n     * implies we are about to relinquish VM turn.\r\n     * This event gets called just once.\r\n     */\r\n    onStable = new EventEmitter(false);\r\n    /**\r\n     * Notifies that an error has been delivered.\r\n     */\r\n    onError = new EventEmitter(false);\r\n    constructor(options) {\r\n        const { enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false, shouldCoalesceRunChangeDetection = false, scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT, } = options;\r\n        if (typeof Zone == 'undefined') {\r\n            throw new RuntimeError(908 /* RuntimeErrorCode.MISSING_ZONEJS */, ngDevMode && `In this configuration Angular requires Zone.js`);\r\n        }\r\n        Zone.assertZonePatched();\r\n        const self = this;\r\n        self._nesting = 0;\r\n        self._outer = self._inner = Zone.current;\r\n        // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\r\n        // where the async operation is scheduled. For more details, refer\r\n        // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\r\n        // And we only import this AsyncStackTaggingZoneSpec in development mode,\r\n        // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\r\n        if (ngDevMode) {\r\n            self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\r\n        }\r\n        if (Zone['TaskTrackingZoneSpec']) {\r\n            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());\r\n        }\r\n        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\r\n            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\r\n        }\r\n        // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\r\n        // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\r\n        self.shouldCoalesceEventChangeDetection =\r\n            !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\r\n        self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\r\n        self.callbackScheduled = false;\r\n        self.scheduleInRootZone = scheduleInRootZone;\r\n        forkInnerZoneWithAngularBehavior(self);\r\n    }\r\n    /**\r\n      This method checks whether the method call happens within an Angular Zone instance.\r\n    */\r\n    static isInAngularZone() {\r\n        // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\r\n        return typeof Zone !== 'undefined' && Zone.current.get(isAngularZoneProperty) === true;\r\n    }\r\n    /**\r\n      Assures that the method is called within the Angular Zone, otherwise throws an error.\r\n    */\r\n    static assertInAngularZone() {\r\n        if (!NgZone.isInAngularZone()) {\r\n            throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to be in Angular Zone, but it is not!');\r\n        }\r\n    }\r\n    /**\r\n      Assures that the method is called outside of the Angular Zone, otherwise throws an error.\r\n    */\r\n    static assertNotInAngularZone() {\r\n        if (NgZone.isInAngularZone()) {\r\n            throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to not be in Angular Zone, but it is!');\r\n        }\r\n    }\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     */\r\n    run(fn, applyThis, applyArgs) {\r\n        return this._inner.run(fn, applyThis, applyArgs);\r\n    }\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n     * returned by the function.\r\n     *\r\n     * Running functions via `runTask` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     */\r\n    runTask(fn, applyThis, applyArgs, name) {\r\n        const zone = this._inner;\r\n        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\r\n        try {\r\n            return zone.runTask(task, applyThis, applyArgs);\r\n        }\r\n        finally {\r\n            zone.cancelTask(task);\r\n        }\r\n    }\r\n    /**\r\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n     * rethrown.\r\n     */\r\n    runGuarded(fn, applyThis, applyArgs) {\r\n        return this._inner.runGuarded(fn, applyThis, applyArgs);\r\n    }\r\n    /**\r\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n     * work that\r\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * outside of the Angular zone.\r\n     *\r\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\r\n     */\r\n    runOutsideAngular(fn) {\r\n        return this._outer.run(fn);\r\n    }\r\n}\r\nconst EMPTY_PAYLOAD = {};\r\nfunction checkStable(zone) {\r\n    // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\r\n    // re-entry. The case is:\r\n    //\r\n    // @Component({...})\r\n    // export class AppComponent {\r\n    // constructor(private ngZone: NgZone) {\r\n    //   this.ngZone.onStable.subscribe(() => {\r\n    //     this.ngZone.run(() => console.log('stable'););\r\n    //   });\r\n    // }\r\n    //\r\n    // The onStable subscriber run another function inside ngZone\r\n    // which causes `checkStable()` re-entry.\r\n    // But this fix causes some issues in g3, so this fix will be\r\n    // launched in another PR.\r\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\r\n        try {\r\n            zone._nesting++;\r\n            zone.onMicrotaskEmpty.emit(null);\r\n        }\r\n        finally {\r\n            zone._nesting--;\r\n            if (!zone.hasPendingMicrotasks) {\r\n                try {\r\n                    zone.runOutsideAngular(() => zone.onStable.emit(null));\r\n                }\r\n                finally {\r\n                    zone.isStable = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction delayChangeDetectionForEvents(zone) {\r\n    /**\r\n     * We also need to check _nesting here\r\n     * Consider the following case with shouldCoalesceRunChangeDetection = true\r\n     *\r\n     * ngZone.run(() => {});\r\n     * ngZone.run(() => {});\r\n     *\r\n     * We want the two `ngZone.run()` only trigger one change detection\r\n     * when shouldCoalesceRunChangeDetection is true.\r\n     * And because in this case, change detection run in async way(requestAnimationFrame),\r\n     * so we also need to check the _nesting here to prevent multiple\r\n     * change detections.\r\n     */\r\n    if (zone.isCheckStableRunning || zone.callbackScheduled) {\r\n        return;\r\n    }\r\n    zone.callbackScheduled = true;\r\n    function scheduleCheckStable() {\r\n        scheduleCallbackWithRafRace(() => {\r\n            zone.callbackScheduled = false;\r\n            updateMicroTaskStatus(zone);\r\n            zone.isCheckStableRunning = true;\r\n            checkStable(zone);\r\n            zone.isCheckStableRunning = false;\r\n        });\r\n    }\r\n    if (zone.scheduleInRootZone) {\r\n        Zone.root.run(() => {\r\n            scheduleCheckStable();\r\n        });\r\n    }\r\n    else {\r\n        zone._outer.run(() => {\r\n            scheduleCheckStable();\r\n        });\r\n    }\r\n    updateMicroTaskStatus(zone);\r\n}\r\nfunction forkInnerZoneWithAngularBehavior(zone) {\r\n    const delayChangeDetectionForEventsDelegate = () => {\r\n        delayChangeDetectionForEvents(zone);\r\n    };\r\n    const instanceId = ngZoneInstanceId++;\r\n    zone._inner = zone._inner.fork({\r\n        name: 'angular',\r\n        properties: {\r\n            [isAngularZoneProperty]: true,\r\n            [angularZoneInstanceIdProperty]: instanceId,\r\n            [angularZoneInstanceIdProperty + instanceId]: true,\r\n        },\r\n        onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\r\n            // Prevent triggering change detection when the flag is detected.\r\n            if (shouldBeIgnoredByZone(applyArgs)) {\r\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\r\n            }\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\r\n            }\r\n            finally {\r\n                if ((zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||\r\n                    zone.shouldCoalesceRunChangeDetection) {\r\n                    delayChangeDetectionForEventsDelegate();\r\n                }\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\r\n            }\r\n            finally {\r\n                if (zone.shouldCoalesceRunChangeDetection &&\r\n                    // Do not delay change detection when the task is the scheduler's tick.\r\n                    // We need to synchronously trigger the stability logic so that the\r\n                    // zone-based scheduler can prevent a duplicate ApplicationRef.tick\r\n                    // by first checking if the scheduler tick is running. This does seem a bit roundabout,\r\n                    // but we _do_ still want to trigger all the correct events when we exit the zone.run\r\n                    // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which\r\n                    // relies on these events happening after change detection runs).\r\n                    // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate\r\n                    // but is added here as well to prevent reads of applyArgs when not necessary\r\n                    !zone.callbackScheduled &&\r\n                    !isSchedulerTick(applyArgs)) {\r\n                    delayChangeDetectionForEventsDelegate();\r\n                }\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onHasTask: (delegate, current, target, hasTaskState) => {\r\n            delegate.hasTask(target, hasTaskState);\r\n            if (current === target) {\r\n                // We are only interested in hasTask events which originate from our zone\r\n                // (A child hasTask event is not interesting to us)\r\n                if (hasTaskState.change == 'microTask') {\r\n                    zone._hasPendingMicrotasks = hasTaskState.microTask;\r\n                    updateMicroTaskStatus(zone);\r\n                    checkStable(zone);\r\n                }\r\n                else if (hasTaskState.change == 'macroTask') {\r\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\r\n                }\r\n            }\r\n        },\r\n        onHandleError: (delegate, current, target, error) => {\r\n            delegate.handleError(target, error);\r\n            zone.runOutsideAngular(() => zone.onError.emit(error));\r\n            return false;\r\n        },\r\n    });\r\n}\r\nfunction updateMicroTaskStatus(zone) {\r\n    if (zone._hasPendingMicrotasks ||\r\n        ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&\r\n            zone.callbackScheduled === true)) {\r\n        zone.hasPendingMicrotasks = true;\r\n    }\r\n    else {\r\n        zone.hasPendingMicrotasks = false;\r\n    }\r\n}\r\nfunction onEnter(zone) {\r\n    zone._nesting++;\r\n    if (zone.isStable) {\r\n        zone.isStable = false;\r\n        zone.onUnstable.emit(null);\r\n    }\r\n}\r\nfunction onLeave(zone) {\r\n    zone._nesting--;\r\n    checkStable(zone);\r\n}\r\n/**\r\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\r\n * to framework to perform rendering.\r\n */\r\nclass NoopNgZone {\r\n    hasPendingMicrotasks = false;\r\n    hasPendingMacrotasks = false;\r\n    isStable = true;\r\n    onUnstable = new EventEmitter();\r\n    onMicrotaskEmpty = new EventEmitter();\r\n    onStable = new EventEmitter();\r\n    onError = new EventEmitter();\r\n    run(fn, applyThis, applyArgs) {\r\n        return fn.apply(applyThis, applyArgs);\r\n    }\r\n    runGuarded(fn, applyThis, applyArgs) {\r\n        return fn.apply(applyThis, applyArgs);\r\n    }\r\n    runOutsideAngular(fn) {\r\n        return fn();\r\n    }\r\n    runTask(fn, applyThis, applyArgs, name) {\r\n        return fn.apply(applyThis, applyArgs);\r\n    }\r\n}\r\nfunction shouldBeIgnoredByZone(applyArgs) {\r\n    return hasApplyArgsData(applyArgs, '__ignore_ng_zone__');\r\n}\r\nfunction isSchedulerTick(applyArgs) {\r\n    return hasApplyArgsData(applyArgs, '__scheduler_tick__');\r\n}\r\nfunction hasApplyArgsData(applyArgs, key) {\r\n    if (!Array.isArray(applyArgs)) {\r\n        return false;\r\n    }\r\n    // We should only ever get 1 arg passed through to invokeTask.\r\n    // Short circuit here incase that behavior changes.\r\n    if (applyArgs.length !== 1) {\r\n        return false;\r\n    }\r\n    return applyArgs[0]?.data?.[key] === true;\r\n}\r\nfunction getNgZone(ngZoneToUse = 'zone.js', options) {\r\n    if (ngZoneToUse === 'noop') {\r\n        return new NoopNgZone();\r\n    }\r\n    if (ngZoneToUse === 'zone.js') {\r\n        return new NgZone(options);\r\n    }\r\n    return ngZoneToUse;\r\n}\r\n\r\nclass AfterRenderManager {\r\n    impl = null;\r\n    execute() {\r\n        this.impl?.execute();\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: AfterRenderManager,\r\n        providedIn: 'root',\r\n        factory: () => new AfterRenderManager(),\r\n    });\r\n}\r\nconst AFTER_RENDER_PHASES = /* @__PURE__ **/ (() => [\r\n    0 /* AfterRenderPhase.EarlyRead */,\r\n    1 /* AfterRenderPhase.Write */,\r\n    2 /* AfterRenderPhase.MixedReadWrite */,\r\n    3 /* AfterRenderPhase.Read */,\r\n])();\r\nclass AfterRenderImpl {\r\n    ngZone = inject(NgZone);\r\n    scheduler = inject(ChangeDetectionScheduler);\r\n    errorHandler = inject(ErrorHandler, { optional: true });\r\n    /** Current set of active sequences. */\r\n    sequences = new Set();\r\n    /** Tracks registrations made during the current set of executions. */\r\n    deferredRegistrations = new Set();\r\n    /** Whether the `AfterRenderManager` is currently executing hooks. */\r\n    executing = false;\r\n    constructor() {\r\n        // Inject the tracing service to make sure it's initialized.\r\n        inject(TracingService, { optional: true });\r\n    }\r\n    /**\r\n     * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more\r\n     * might be scheduled.\r\n     */\r\n    execute() {\r\n        const hasSequencesToExecute = this.sequences.size > 0;\r\n        if (hasSequencesToExecute) {\r\n            profiler(16 /* ProfilerEvent.AfterRenderHooksStart */);\r\n        }\r\n        this.executing = true;\r\n        for (const phase of AFTER_RENDER_PHASES) {\r\n            for (const sequence of this.sequences) {\r\n                if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {\r\n                    continue;\r\n                }\r\n                try {\r\n                    sequence.pipelinedValue = this.ngZone.runOutsideAngular(() => this.maybeTrace(() => {\r\n                        const hookFn = sequence.hooks[phase];\r\n                        const value = hookFn(sequence.pipelinedValue);\r\n                        return value;\r\n                    }, sequence.snapshot));\r\n                }\r\n                catch (err) {\r\n                    sequence.erroredOrDestroyed = true;\r\n                    this.errorHandler?.handleError(err);\r\n                }\r\n            }\r\n        }\r\n        this.executing = false;\r\n        // Cleanup step to reset sequence state and also collect one-shot sequences for removal.\r\n        for (const sequence of this.sequences) {\r\n            sequence.afterRun();\r\n            if (sequence.once) {\r\n                this.sequences.delete(sequence);\r\n                // Destroy the sequence so its on destroy callbacks can be cleaned up\r\n                // immediately, instead of waiting until the injector is destroyed.\r\n                sequence.destroy();\r\n            }\r\n        }\r\n        for (const sequence of this.deferredRegistrations) {\r\n            this.sequences.add(sequence);\r\n        }\r\n        if (this.deferredRegistrations.size > 0) {\r\n            this.scheduler.notify(7 /* NotificationSource.RenderHook */);\r\n        }\r\n        this.deferredRegistrations.clear();\r\n        if (hasSequencesToExecute) {\r\n            profiler(17 /* ProfilerEvent.AfterRenderHooksEnd */);\r\n        }\r\n    }\r\n    register(sequence) {\r\n        const { view } = sequence;\r\n        if (view !== undefined) {\r\n            // Delay adding it to the manager, add it to the view instead.\r\n            (view[AFTER_RENDER_SEQUENCES_TO_ADD] ??= []).push(sequence);\r\n            // Mark the view for traversal to ensure we eventually schedule the afterNextRender.\r\n            markAncestorsForTraversal(view);\r\n            view[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\r\n        }\r\n        else if (!this.executing) {\r\n            this.addSequence(sequence);\r\n        }\r\n        else {\r\n            this.deferredRegistrations.add(sequence);\r\n        }\r\n    }\r\n    addSequence(sequence) {\r\n        this.sequences.add(sequence);\r\n        // Trigger an `ApplicationRef.tick()` if one is not already pending/running, because we have a\r\n        // new render hook that needs to run.\r\n        this.scheduler.notify(7 /* NotificationSource.RenderHook */);\r\n    }\r\n    unregister(sequence) {\r\n        if (this.executing && this.sequences.has(sequence)) {\r\n            // We can't remove an `AfterRenderSequence` in the middle of iteration.\r\n            // Instead, mark it as destroyed so it doesn't run any more, and mark it as one-shot so it'll\r\n            // be removed at the end of the current execution.\r\n            sequence.erroredOrDestroyed = true;\r\n            sequence.pipelinedValue = undefined;\r\n            sequence.once = true;\r\n        }\r\n        else {\r\n            // It's safe to directly remove this sequence.\r\n            this.sequences.delete(sequence);\r\n            this.deferredRegistrations.delete(sequence);\r\n        }\r\n    }\r\n    maybeTrace(fn, snapshot) {\r\n        // Only trace the execution if the snapshot is defined.\r\n        return snapshot ? snapshot.run(TracingAction.AFTER_NEXT_RENDER, fn) : fn();\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: AfterRenderImpl,\r\n        providedIn: 'root',\r\n        factory: () => new AfterRenderImpl(),\r\n    });\r\n}\r\nclass AfterRenderSequence {\r\n    impl;\r\n    hooks;\r\n    view;\r\n    once;\r\n    snapshot;\r\n    /**\r\n     * Whether this sequence errored or was destroyed during this execution, and hooks should no\r\n     * longer run for it.\r\n     */\r\n    erroredOrDestroyed = false;\r\n    /**\r\n     * The value returned by the last hook execution (if any), ready to be pipelined into the next\r\n     * one.\r\n     */\r\n    pipelinedValue = undefined;\r\n    unregisterOnDestroy;\r\n    constructor(impl, hooks, view, once, destroyRef, snapshot = null) {\r\n        this.impl = impl;\r\n        this.hooks = hooks;\r\n        this.view = view;\r\n        this.once = once;\r\n        this.snapshot = snapshot;\r\n        this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());\r\n    }\r\n    afterRun() {\r\n        this.erroredOrDestroyed = false;\r\n        this.pipelinedValue = undefined;\r\n        // Clear the tracing snapshot after the initial run. This snapshot only\r\n        // associates the initial run of the hook with the context that created it.\r\n        // Follow-up runs are independent of that initial context and have different\r\n        // triggers.\r\n        this.snapshot?.dispose();\r\n        this.snapshot = null;\r\n    }\r\n    destroy() {\r\n        this.impl.unregister(this);\r\n        this.unregisterOnDestroy?.();\r\n        const scheduled = this.view?.[AFTER_RENDER_SEQUENCES_TO_ADD];\r\n        if (scheduled) {\r\n            this.view[AFTER_RENDER_SEQUENCES_TO_ADD] = scheduled.filter((s) => s !== this);\r\n        }\r\n    }\r\n}\r\n\r\nfunction afterEveryRender(callbackOrSpec, options) {\r\n    ngDevMode &&\r\n        assertNotInReactiveContext(afterEveryRender, 'Call `afterEveryRender` outside of a reactive context. For example, schedule the render ' +\r\n            'callback inside the component constructor`.');\r\n    if (ngDevMode && !options?.injector) {\r\n        assertInInjectionContext(afterEveryRender);\r\n    }\r\n    const injector = options?.injector ?? inject(Injector);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        return NOOP_AFTER_RENDER_REF;\r\n    }\r\n    performanceMarkFeature('NgAfterRender');\r\n    return afterEveryRenderImpl(callbackOrSpec, injector, options, /* once */ false);\r\n}\r\nfunction afterNextRender(callbackOrSpec, options) {\r\n    if (ngDevMode && !options?.injector) {\r\n        assertInInjectionContext(afterNextRender);\r\n    }\r\n    const injector = options?.injector ?? inject(Injector);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        return NOOP_AFTER_RENDER_REF;\r\n    }\r\n    performanceMarkFeature('NgAfterNextRender');\r\n    return afterEveryRenderImpl(callbackOrSpec, injector, options, /* once */ true);\r\n}\r\nfunction getHooks(callbackOrSpec) {\r\n    if (callbackOrSpec instanceof Function) {\r\n        return [undefined, undefined, /* MixedReadWrite */ callbackOrSpec, undefined];\r\n    }\r\n    else {\r\n        return [\r\n            callbackOrSpec.earlyRead,\r\n            callbackOrSpec.write,\r\n            callbackOrSpec.mixedReadWrite,\r\n            callbackOrSpec.read,\r\n        ];\r\n    }\r\n}\r\n/**\r\n * Shared implementation for `afterEveryRender` and `afterNextRender`.\r\n */\r\nfunction afterEveryRenderImpl(callbackOrSpec, injector, options, once) {\r\n    const manager = injector.get(AfterRenderManager);\r\n    // Lazily initialize the handler implementation, if necessary. This is so that it can be\r\n    // tree-shaken if `afterEveryRender` and `afterNextRender` aren't used.\r\n    manager.impl ??= injector.get(AfterRenderImpl);\r\n    const tracing = injector.get(TracingService, null, { optional: true });\r\n    const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\r\n    const viewContext = injector.get(ViewContext, null, { optional: true });\r\n    const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec), viewContext?.view, once, destroyRef, tracing?.snapshot(null));\r\n    manager.impl.register(sequence);\r\n    return sequence;\r\n}\r\n/** `AfterRenderRef` that does nothing. */\r\nconst NOOP_AFTER_RENDER_REF = {\r\n    destroy() { },\r\n};\r\n\r\n/**\r\n * Calculates a data slot index for defer block info (either static or\r\n * instance-specific), given an index of a defer instruction.\r\n */\r\nfunction getDeferBlockDataIndex(deferBlockIndex) {\r\n    // Instance state is located at the *next* position\r\n    // after the defer block slot in an LView or TView.data.\r\n    return deferBlockIndex + 1;\r\n}\r\n/** Retrieves a defer block state from an LView, given a TNode that represents a block. */\r\nfunction getLDeferBlockDetails(lView, tNode) {\r\n    const tView = lView[TVIEW];\r\n    const slotIndex = getDeferBlockDataIndex(tNode.index);\r\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\r\n    return lView[slotIndex];\r\n}\r\n/** Stores a defer block instance state in LView. */\r\nfunction setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {\r\n    const tView = lView[TVIEW];\r\n    const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\r\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\r\n    lView[slotIndex] = lDetails;\r\n}\r\n/** Retrieves static info about a defer block, given a TView and a TNode that represents a block. */\r\nfunction getTDeferBlockDetails(tView, tNode) {\r\n    const slotIndex = getDeferBlockDataIndex(tNode.index);\r\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\r\n    return tView.data[slotIndex];\r\n}\r\n/** Stores a defer block static info in `TView.data`. */\r\nfunction setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {\r\n    const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\r\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\r\n    tView.data[slotIndex] = deferBlockConfig;\r\n}\r\nfunction getTemplateIndexForState(newState, hostLView, tNode) {\r\n    const tView = hostLView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    switch (newState) {\r\n        case DeferBlockState.Complete:\r\n            return tDetails.primaryTmplIndex;\r\n        case DeferBlockState.Loading:\r\n            return tDetails.loadingTmplIndex;\r\n        case DeferBlockState.Error:\r\n            return tDetails.errorTmplIndex;\r\n        case DeferBlockState.Placeholder:\r\n            return tDetails.placeholderTmplIndex;\r\n        default:\r\n            ngDevMode && throwError(`Unexpected defer block state: ${newState}`);\r\n            return null;\r\n    }\r\n}\r\n/**\r\n * Returns a minimum amount of time that a given state should be rendered for,\r\n * taking into account `minimum` parameter value. If the `minimum` value is\r\n * not specified - returns `null`.\r\n */\r\nfunction getMinimumDurationForState(tDetails, currentState) {\r\n    if (currentState === DeferBlockState.Placeholder) {\r\n        return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;\r\n    }\r\n    else if (currentState === DeferBlockState.Loading) {\r\n        return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;\r\n    }\r\n    return null;\r\n}\r\n/** Retrieves the value of the `after` parameter on the @loading block. */\r\nfunction getLoadingBlockAfter(tDetails) {\r\n    return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;\r\n}\r\n/**\r\n * Adds downloaded dependencies into a directive or a pipe registry,\r\n * making sure that a dependency doesn't yet exist in the registry.\r\n */\r\nfunction addDepsToRegistry(currentDeps, newDeps) {\r\n    if (!currentDeps || currentDeps.length === 0) {\r\n        return newDeps;\r\n    }\r\n    const currentDepSet = new Set(currentDeps);\r\n    for (const dep of newDeps) {\r\n        currentDepSet.add(dep);\r\n    }\r\n    // If `currentDeps` is the same length, there were no new deps and can\r\n    // return the original array.\r\n    return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);\r\n}\r\n/** Retrieves a TNode that represents main content of a defer block. */\r\nfunction getPrimaryBlockTNode(tView, tDetails) {\r\n    const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;\r\n    return getTNode(tView, adjustedIndex);\r\n}\r\n/**\r\n * Asserts whether all dependencies for a defer block are loaded.\r\n * Always run this function (in dev mode) before rendering a defer\r\n * block in completed state.\r\n */\r\nfunction assertDeferredDependenciesLoaded(tDetails) {\r\n    assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, 'Expecting all deferred dependencies to be loaded.');\r\n}\r\n/**\r\n * Determines if a given value matches the expected structure of a defer block\r\n *\r\n * We can safely rely on the primaryTmplIndex because every defer block requires\r\n * that a primary template exists. All the other template options are optional.\r\n */\r\nfunction isTDeferBlockDetails(value) {\r\n    return (value !== null &&\r\n        typeof value === 'object' &&\r\n        typeof value.primaryTmplIndex === 'number');\r\n}\r\n/**\r\n * Whether a given TNode represents a defer block.\r\n */\r\nfunction isDeferBlock(tView, tNode) {\r\n    let tDetails = null;\r\n    const slotIndex = getDeferBlockDataIndex(tNode.index);\r\n    // Check if a slot index is in the reasonable range.\r\n    // Note: we do `-1` on the right border, since defer block details are stored\r\n    // in the `n+1` slot, see `getDeferBlockDataIndex` for more info.\r\n    if (HEADER_OFFSET < slotIndex && slotIndex < tView.bindingStartIndex) {\r\n        tDetails = getTDeferBlockDetails(tView, tNode);\r\n    }\r\n    return !!tDetails && isTDeferBlockDetails(tDetails);\r\n}\r\n/**\r\n * Tracks debugging information about a trigger.\r\n * @param tView TView in which the trigger is declared.\r\n * @param tNode TNode on which the trigger is declared.\r\n * @param textRepresentation Text representation of the trigger to be used for debugging purposes.\r\n */\r\nfunction trackTriggerForDebugging(tView, tNode, textRepresentation) {\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    tDetails.debug ??= {};\r\n    tDetails.debug.triggers ??= new Set();\r\n    tDetails.debug.triggers.add(textRepresentation);\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Wrapper for onViewport trigger with angular specific Injector for resolving NgZone instance\r\n * and creating an IntersectionObserver which can run outside of Angular zone.\r\n * @param trigger Element that is the trigger.\r\n * @param callback Callback to be invoked when the trigger comes into the viewport.\r\n * @param injector Injector that can be used by the trigger to resolve DI tokens.\r\n */\r\nfunction onViewportWrapper(trigger, callback, injector) {\r\n    const ngZone = injector.get(NgZone);\r\n    return onViewport(trigger, () => ngZone.run(callback), () => ngZone.runOutsideAngular(() => createIntersectionObserver()));\r\n}\r\n/**\r\n * Helper function to get the LView in which a deferred block's trigger is rendered.\r\n * @param deferredHostLView LView in which the deferred block is defined.\r\n * @param deferredTNode TNode defining the deferred block.\r\n * @param walkUpTimes Number of times to go up in the view hierarchy to find the trigger's view.\r\n *   A negative value means that the trigger is inside the block's placeholder, while an undefined\r\n *   value means that the trigger is in the same LView as the deferred block.\r\n */\r\nfunction getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {\r\n    // The trigger is in the same view, we don't need to traverse.\r\n    if (walkUpTimes == null) {\r\n        return deferredHostLView;\r\n    }\r\n    // A positive value or zero means that the trigger is in a parent view.\r\n    if (walkUpTimes >= 0) {\r\n        return walkUpViews(walkUpTimes, deferredHostLView);\r\n    }\r\n    // If the value is negative, it means that the trigger is inside the placeholder.\r\n    const deferredContainer = deferredHostLView[deferredTNode.index];\r\n    ngDevMode && assertLContainer(deferredContainer);\r\n    const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;\r\n    // We need to null check, because the placeholder might not have been rendered yet.\r\n    if (ngDevMode && triggerLView !== null) {\r\n        const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);\r\n        const renderedState = lDetails[DEFER_BLOCK_STATE];\r\n        assertEqual(renderedState, DeferBlockState.Placeholder, 'Expected a placeholder to be rendered in this defer block.');\r\n        assertLView(triggerLView);\r\n    }\r\n    return triggerLView;\r\n}\r\n/**\r\n * Gets the element that a deferred block's trigger is pointing to.\r\n * @param triggerLView LView in which the trigger is defined.\r\n * @param triggerIndex Index at which the trigger element should've been rendered.\r\n */\r\nfunction getTriggerElement(triggerLView, triggerIndex) {\r\n    const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);\r\n    ngDevMode && assertElement(element);\r\n    return element;\r\n}\r\n/**\r\n * Registers a DOM-node based trigger.\r\n * @param initialLView LView in which the defer block is rendered.\r\n * @param tNode TNode representing the defer block.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to go up/down in the view hierarchy to find the trigger.\r\n * @param registerFn Function that will register the DOM events.\r\n * @param callback Callback to be invoked when the trigger receives the event that should render\r\n *     the deferred block.\r\n * @param type Trigger type to distinguish between regular and prefetch triggers.\r\n */\r\nfunction registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {\r\n    const injector = initialLView[INJECTOR];\r\n    const zone = injector.get(NgZone);\r\n    let poll;\r\n    function pollDomTrigger() {\r\n        // If the initial view was destroyed, we don't need to do anything.\r\n        if (isDestroyed(initialLView)) {\r\n            poll.destroy();\r\n            return;\r\n        }\r\n        const lDetails = getLDeferBlockDetails(initialLView, tNode);\r\n        const renderedState = lDetails[DEFER_BLOCK_STATE];\r\n        // If the block was loaded before the trigger was resolved, we don't need to do anything.\r\n        if (renderedState !== DeferBlockInternalState.Initial &&\r\n            renderedState !== DeferBlockState.Placeholder) {\r\n            poll.destroy();\r\n            return;\r\n        }\r\n        const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);\r\n        // Keep polling until we resolve the trigger's LView.\r\n        if (!triggerLView) {\r\n            // Keep polling.\r\n            return;\r\n        }\r\n        poll.destroy();\r\n        // It's possible that the trigger's view was destroyed before we resolved the trigger element.\r\n        if (isDestroyed(triggerLView)) {\r\n            return;\r\n        }\r\n        const element = getTriggerElement(triggerLView, triggerIndex);\r\n        const cleanup = registerFn(element, () => {\r\n            // `pollDomTrigger` runs outside the zone (because of `afterNextRender`) and registers its\r\n            // listeners outside the zone, so we jump back into the zone prior to running the callback.\r\n            zone.run(() => {\r\n                if (initialLView !== triggerLView) {\r\n                    removeLViewOnDestroy(triggerLView, cleanup);\r\n                }\r\n                callback();\r\n            });\r\n        }, injector);\r\n        // The trigger and deferred block might be in different LViews.\r\n        // For the main LView the cleanup would happen as a part of\r\n        // `storeTriggerCleanupFn` logic. For trigger LView we register\r\n        // a cleanup function there to remove event handlers in case an\r\n        // LView gets destroyed before a trigger is invoked.\r\n        if (initialLView !== triggerLView) {\r\n            storeLViewOnDestroy(triggerLView, cleanup);\r\n        }\r\n        storeTriggerCleanupFn(type, lDetails, cleanup);\r\n    }\r\n    // Begin polling for the trigger.\r\n    poll = afterEveryRender({ read: pollDomTrigger }, { injector });\r\n}\r\n\r\n/**\r\n * Helper function to schedule a callback to be invoked when a browser becomes idle.\r\n *\r\n * @param callback A function to be invoked when a browser becomes idle.\r\n * @param injector injector for the app\r\n */\r\nfunction onIdle(callback, injector) {\r\n    const scheduler = injector.get(IdleScheduler);\r\n    const cleanupFn = () => scheduler.remove(callback);\r\n    scheduler.add(callback);\r\n    return cleanupFn;\r\n}\r\n/**\r\n * Use shims for the `requestIdleCallback` and `cancelIdleCallback` functions for\r\n * environments where those functions are not available (e.g. Node.js and Safari).\r\n *\r\n * Note: we wrap the `requestIdleCallback` call into a function, so that it can be\r\n * overridden/mocked in test environment and picked up by the runtime code.\r\n */\r\nconst _requestIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? requestIdleCallback : setTimeout;\r\nconst _cancelIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\r\n/**\r\n * Helper service to schedule `requestIdleCallback`s for batches of defer blocks,\r\n * to avoid calling `requestIdleCallback` for each defer block (e.g. if\r\n * defer blocks are defined inside a for loop).\r\n */\r\nclass IdleScheduler {\r\n    // Indicates whether current callbacks are being invoked.\r\n    executingCallbacks = false;\r\n    // Currently scheduled idle callback id.\r\n    idleId = null;\r\n    // Set of callbacks to be invoked next.\r\n    current = new Set();\r\n    // Set of callbacks collected while invoking current set of callbacks.\r\n    // Those callbacks are scheduled for the next idle period.\r\n    deferred = new Set();\r\n    ngZone = inject(NgZone);\r\n    requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);\r\n    cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);\r\n    add(callback) {\r\n        const target = this.executingCallbacks ? this.deferred : this.current;\r\n        target.add(callback);\r\n        if (this.idleId === null) {\r\n            this.scheduleIdleCallback();\r\n        }\r\n    }\r\n    remove(callback) {\r\n        const { current, deferred } = this;\r\n        current.delete(callback);\r\n        deferred.delete(callback);\r\n        // If the last callback was removed and there is a pending\r\n        // idle callback - cancel it.\r\n        if (current.size === 0 && deferred.size === 0) {\r\n            this.cancelIdleCallback();\r\n        }\r\n    }\r\n    scheduleIdleCallback() {\r\n        const callback = () => {\r\n            this.cancelIdleCallback();\r\n            this.executingCallbacks = true;\r\n            for (const callback of this.current) {\r\n                callback();\r\n            }\r\n            this.current.clear();\r\n            this.executingCallbacks = false;\r\n            // If there are any callbacks added during an invocation\r\n            // of the current ones - make them \"current\" and schedule\r\n            // a new idle callback.\r\n            if (this.deferred.size > 0) {\r\n                for (const callback of this.deferred) {\r\n                    this.current.add(callback);\r\n                }\r\n                this.deferred.clear();\r\n                this.scheduleIdleCallback();\r\n            }\r\n        };\r\n        // Ensure that the callback runs in the NgZone since\r\n        // the `requestIdleCallback` is not currently patched by Zone.js.\r\n        this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));\r\n    }\r\n    cancelIdleCallback() {\r\n        if (this.idleId !== null) {\r\n            this.cancelIdleCallbackFn(this.idleId);\r\n            this.idleId = null;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.cancelIdleCallback();\r\n        this.current.clear();\r\n        this.deferred.clear();\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: IdleScheduler,\r\n        providedIn: 'root',\r\n        factory: () => new IdleScheduler(),\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a function that captures a provided delay.\r\n * Invoking the returned function schedules a trigger.\r\n */\r\nfunction onTimer(delay) {\r\n    return (callback, injector) => scheduleTimerTrigger(delay, callback, injector);\r\n}\r\n/**\r\n * Schedules a callback to be invoked after a given timeout.\r\n *\r\n * @param delay A number of ms to wait until firing a callback.\r\n * @param callback A function to be invoked after a timeout.\r\n * @param injector injector for the app.\r\n */\r\nfunction scheduleTimerTrigger(delay, callback, injector) {\r\n    const scheduler = injector.get(TimerScheduler);\r\n    const ngZone = injector.get(NgZone);\r\n    const cleanupFn = () => scheduler.remove(callback);\r\n    scheduler.add(delay, callback, ngZone);\r\n    return cleanupFn;\r\n}\r\n/**\r\n * Helper service to schedule `setTimeout`s for batches of defer blocks,\r\n * to avoid calling `setTimeout` for each defer block (e.g. if defer blocks\r\n * are created inside a for loop).\r\n */\r\nclass TimerScheduler {\r\n    // Indicates whether current callbacks are being invoked.\r\n    executingCallbacks = false;\r\n    // Currently scheduled `setTimeout` id.\r\n    timeoutId = null;\r\n    // When currently scheduled timer would fire.\r\n    invokeTimerAt = null;\r\n    // List of callbacks to be invoked.\r\n    // For each callback we also store a timestamp on when the callback\r\n    // should be invoked. We store timestamps and callback functions\r\n    // in a flat array to avoid creating new objects for each entry.\r\n    // [timestamp1, callback1, timestamp2, callback2, ...]\r\n    current = [];\r\n    // List of callbacks collected while invoking current set of callbacks.\r\n    // Those callbacks are added to the \"current\" queue at the end of\r\n    // the current callback invocation. The shape of this list is the same\r\n    // as the shape of the `current` list.\r\n    deferred = [];\r\n    add(delay, callback, ngZone) {\r\n        const target = this.executingCallbacks ? this.deferred : this.current;\r\n        this.addToQueue(target, Date.now() + delay, callback);\r\n        this.scheduleTimer(ngZone);\r\n    }\r\n    remove(callback) {\r\n        const { current, deferred } = this;\r\n        const callbackIndex = this.removeFromQueue(current, callback);\r\n        if (callbackIndex === -1) {\r\n            // Try cleaning up deferred queue only in case\r\n            // we didn't find a callback in the \"current\" queue.\r\n            this.removeFromQueue(deferred, callback);\r\n        }\r\n        // If the last callback was removed and there is a pending timeout - cancel it.\r\n        if (current.length === 0 && deferred.length === 0) {\r\n            this.clearTimeout();\r\n        }\r\n    }\r\n    addToQueue(target, invokeAt, callback) {\r\n        let insertAtIndex = target.length;\r\n        for (let i = 0; i < target.length; i += 2) {\r\n            const invokeQueuedCallbackAt = target[i];\r\n            if (invokeQueuedCallbackAt > invokeAt) {\r\n                // We've reached a first timer that is scheduled\r\n                // for a later time than what we are trying to insert.\r\n                // This is the location at which we need to insert,\r\n                // no need to iterate further.\r\n                insertAtIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        arrayInsert2(target, insertAtIndex, invokeAt, callback);\r\n    }\r\n    removeFromQueue(target, callback) {\r\n        let index = -1;\r\n        for (let i = 0; i < target.length; i += 2) {\r\n            const queuedCallback = target[i + 1];\r\n            if (queuedCallback === callback) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index > -1) {\r\n            // Remove 2 elements: a timestamp slot and\r\n            // the following slot with a callback function.\r\n            arraySplice(target, index, 2);\r\n        }\r\n        return index;\r\n    }\r\n    scheduleTimer(ngZone) {\r\n        const callback = () => {\r\n            this.clearTimeout();\r\n            this.executingCallbacks = true;\r\n            // Clone the current state of the queue, since it might be altered\r\n            // as we invoke callbacks.\r\n            const current = [...this.current];\r\n            // Invoke callbacks that were scheduled to run before the current time.\r\n            const now = Date.now();\r\n            for (let i = 0; i < current.length; i += 2) {\r\n                const invokeAt = current[i];\r\n                const callback = current[i + 1];\r\n                if (invokeAt <= now) {\r\n                    callback();\r\n                }\r\n                else {\r\n                    // We've reached a timer that should not be invoked yet.\r\n                    break;\r\n                }\r\n            }\r\n            // The state of the queue might've changed after callbacks invocation,\r\n            // run the cleanup logic based on the *current* state of the queue.\r\n            let lastCallbackIndex = -1;\r\n            for (let i = 0; i < this.current.length; i += 2) {\r\n                const invokeAt = this.current[i];\r\n                if (invokeAt <= now) {\r\n                    // Add +1 to account for a callback function that\r\n                    // goes after the timestamp in events array.\r\n                    lastCallbackIndex = i + 1;\r\n                }\r\n                else {\r\n                    // We've reached a timer that should not be invoked yet.\r\n                    break;\r\n                }\r\n            }\r\n            if (lastCallbackIndex >= 0) {\r\n                arraySplice(this.current, 0, lastCallbackIndex + 1);\r\n            }\r\n            this.executingCallbacks = false;\r\n            // If there are any callbacks added during an invocation\r\n            // of the current ones - move them over to the \"current\"\r\n            // queue.\r\n            if (this.deferred.length > 0) {\r\n                for (let i = 0; i < this.deferred.length; i += 2) {\r\n                    const invokeAt = this.deferred[i];\r\n                    const callback = this.deferred[i + 1];\r\n                    this.addToQueue(this.current, invokeAt, callback);\r\n                }\r\n                this.deferred.length = 0;\r\n            }\r\n            this.scheduleTimer(ngZone);\r\n        };\r\n        // Avoid running timer callbacks more than once per\r\n        // average frame duration. This is needed for better\r\n        // batching and to avoid kicking off excessive change\r\n        // detection cycles.\r\n        const FRAME_DURATION_MS = 16; // 1000ms / 60fps\r\n        if (this.current.length > 0) {\r\n            const now = Date.now();\r\n            // First element in the queue points at the timestamp\r\n            // of the first (earliest) event.\r\n            const invokeAt = this.current[0];\r\n            if (this.timeoutId === null ||\r\n                // Reschedule a timer in case a queue contains an item with\r\n                // an earlier timestamp and the delta is more than an average\r\n                // frame duration.\r\n                (this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS)) {\r\n                // There was a timeout already, but an earlier event was added\r\n                // into the queue. In this case we drop an old timer and setup\r\n                // a new one with an updated (smaller) timeout.\r\n                this.clearTimeout();\r\n                const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);\r\n                this.invokeTimerAt = invokeAt;\r\n                this.timeoutId = ngZone.runOutsideAngular(() => {\r\n                    return setTimeout(() => ngZone.run(callback), timeout);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    clearTimeout() {\r\n        if (this.timeoutId !== null) {\r\n            clearTimeout(this.timeoutId);\r\n            this.timeoutId = null;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.clearTimeout();\r\n        this.current.length = 0;\r\n        this.deferred.length = 0;\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: TimerScheduler,\r\n        providedIn: 'root',\r\n        factory: () => new TimerScheduler(),\r\n    });\r\n}\r\n\r\n/**\r\n * A service used by the framework to create and cache injector instances.\r\n *\r\n * This service is used to create a single injector instance for each defer\r\n * block definition, to avoid creating an injector for each defer block instance\r\n * of a certain type.\r\n */\r\nclass CachedInjectorService {\r\n    cachedInjectors = new Map();\r\n    getOrCreateInjector(key, parentInjector, providers, debugName) {\r\n        if (!this.cachedInjectors.has(key)) {\r\n            const injector = providers.length > 0\r\n                ? createEnvironmentInjector(providers, parentInjector, debugName)\r\n                : null;\r\n            this.cachedInjectors.set(key, injector);\r\n        }\r\n        return this.cachedInjectors.get(key);\r\n    }\r\n    ngOnDestroy() {\r\n        try {\r\n            for (const injector of this.cachedInjectors.values()) {\r\n                if (injector !== null) {\r\n                    injector.destroy();\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this.cachedInjectors.clear();\r\n        }\r\n    }\r\n    /** @nocollapse */\r\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ __defineInjectable({\r\n        token: CachedInjectorService,\r\n        providedIn: 'environment',\r\n        factory: () => new CachedInjectorService(),\r\n    });\r\n}\r\n\r\n/**\r\n * **INTERNAL**, avoid referencing it in application code.\r\n * *\r\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\r\n * implementation.\r\n *\r\n * This token is only injected in devMode\r\n */\r\nconst DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = \r\n/* @__PURE__ */ new InjectionToken('DEFER_BLOCK_DEPENDENCY_INTERCEPTOR');\r\n/**\r\n * **INTERNAL**, token used for configuring defer block behavior.\r\n */\r\nconst DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? 'DEFER_BLOCK_CONFIG' : '');\r\n/**\r\n * Checks whether there is a cached injector associated with a given defer block\r\n * declaration and returns if it exists. If there is no cached injector present -\r\n * creates a new injector and stores in the cache.\r\n */\r\nfunction getOrCreateEnvironmentInjector(parentInjector, tDetails, providers) {\r\n    return parentInjector\r\n        .get(CachedInjectorService)\r\n        .getOrCreateInjector(tDetails, parentInjector, providers, ngDevMode ? 'DeferBlock Injector' : '');\r\n}\r\n/** Injector Helpers */\r\n/**\r\n * Creates a new injector, which contains providers collected from dependencies (NgModules) of\r\n * defer-loaded components. This function detects different types of parent injectors and creates\r\n * a new injector based on that.\r\n */\r\nfunction createDeferBlockInjector(parentInjector, tDetails, providers) {\r\n    // Check if the parent injector is an instance of a `ChainedInjector`.\r\n    //\r\n    // In this case, we retain the shape of the injector and use a newly created\r\n    // `EnvironmentInjector` as a parent in the `ChainedInjector`. That is needed to\r\n    // make sure that the primary injector gets consulted first (since it's typically\r\n    // a NodeInjector) and `EnvironmentInjector` tree is consulted after that.\r\n    if (parentInjector instanceof ChainedInjector) {\r\n        const origInjector = parentInjector.injector;\r\n        // Guaranteed to be an environment injector\r\n        const parentEnvInjector = parentInjector.parentInjector;\r\n        const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\r\n        return new ChainedInjector(origInjector, envInjector);\r\n    }\r\n    const parentEnvInjector = parentInjector.get(EnvironmentInjector);\r\n    // If the `parentInjector` is *not* an `EnvironmentInjector` - we need to create\r\n    // a new `ChainedInjector` with the following setup:\r\n    //\r\n    //  - the provided `parentInjector` becomes a primary injector\r\n    //  - an existing (real) `EnvironmentInjector` becomes a parent injector for\r\n    //    a newly-created one, which contains extra providers\r\n    //\r\n    // So the final order in which injectors would be consulted in this case would look like this:\r\n    //\r\n    //  1. Provided `parentInjector`\r\n    //  2. Newly-created `EnvironmentInjector` with extra providers\r\n    //  3. `EnvironmentInjector` from the `parentInjector`\r\n    if (parentEnvInjector !== parentInjector) {\r\n        const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\r\n        return new ChainedInjector(parentInjector, envInjector);\r\n    }\r\n    // The `parentInjector` is an instance of an `EnvironmentInjector`.\r\n    // No need for special handling, we can use `parentInjector` as a\r\n    // parent injector directly.\r\n    return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);\r\n}\r\n/** Rendering Helpers */\r\n/**\r\n * Transitions a defer block to the new state. Updates the  necessary\r\n * data structures and renders corresponding block.\r\n *\r\n * @param newState New state that should be applied to the defer block.\r\n * @param tNode TNode that represents a defer block.\r\n * @param lContainer Represents an instance of a defer block.\r\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\r\n *   should be rendered immediately, even if they have `after` or `minimum` config\r\n *   options setup. This flag to needed for testing APIs to transition defer block\r\n *   between states via `DeferFixture.render` method.\r\n */\r\nfunction renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {\r\n    const hostLView = lContainer[PARENT];\r\n    const hostTView = hostLView[TVIEW];\r\n    // Check if this view is not destroyed. Since the loading process was async,\r\n    // the view might end up being destroyed by the time rendering happens.\r\n    if (isDestroyed(hostLView))\r\n        return;\r\n    // Make sure this TNode belongs to TView that represents host LView.\r\n    ngDevMode && assertTNodeForLView(tNode, hostLView);\r\n    const lDetails = getLDeferBlockDetails(hostLView, tNode);\r\n    ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\r\n    const currentState = lDetails[DEFER_BLOCK_STATE];\r\n    const ssrState = lDetails[SSR_BLOCK_STATE];\r\n    if (ssrState !== null && newState < ssrState) {\r\n        return; // trying to render a previous state, exit\r\n    }\r\n    if (isValidStateChange(currentState, newState) &&\r\n        isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {\r\n        const tDetails = getTDeferBlockDetails(hostTView, tNode);\r\n        // Skips scheduling on the server since it can delay the server response.\r\n        const needsScheduling = !skipTimerScheduling &&\r\n            (typeof ngServerMode === 'undefined' || !ngServerMode) &&\r\n            (getLoadingBlockAfter(tDetails) !== null ||\r\n                getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null ||\r\n                getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\r\n        if (ngDevMode && needsScheduling) {\r\n            assertDefined(applyDeferBlockStateWithSchedulingImpl, 'Expected scheduling function to be defined');\r\n        }\r\n        const applyStateFn = needsScheduling\r\n            ? applyDeferBlockStateWithSchedulingImpl\r\n            : applyDeferBlockState;\r\n        try {\r\n            applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\r\n        }\r\n        catch (error) {\r\n            handleUncaughtError(hostLView, error);\r\n        }\r\n    }\r\n}\r\nfunction findMatchingDehydratedViewForDeferBlock(lContainer, lDetails) {\r\n    const dehydratedViewIx = lContainer[DEHYDRATED_VIEWS]?.findIndex((view) => view.data[DEFER_BLOCK_STATE$1] === lDetails[DEFER_BLOCK_STATE]) ?? -1;\r\n    const dehydratedView = dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS][dehydratedViewIx] : null;\r\n    return { dehydratedView, dehydratedViewIx };\r\n}\r\n/**\r\n * Applies changes to the DOM to reflect a given state.\r\n */\r\nfunction applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {\r\n    profiler(20 /* ProfilerEvent.DeferBlockStateStart */);\r\n    const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\r\n    if (stateTmplIndex !== null) {\r\n        lDetails[DEFER_BLOCK_STATE] = newState;\r\n        const hostTView = hostLView[TVIEW];\r\n        const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\r\n        // The TNode that represents a template that will activated in the defer block\r\n        const activeBlockTNode = getTNode(hostTView, adjustedIndex);\r\n        // There is only 1 view that can be present in an LContainer that\r\n        // represents a defer block, so always refer to the first one.\r\n        const viewIndex = 0;\r\n        removeLViewFromLContainer(lContainer, viewIndex);\r\n        let injector;\r\n        if (newState === DeferBlockState.Complete) {\r\n            // When we render a defer block in completed state, there might be\r\n            // newly loaded standalone components used within the block, which may\r\n            // import NgModules with providers. In order to make those providers\r\n            // available for components declared in that NgModule, we create an instance\r\n            // of an environment injector to host those providers and pass this injector\r\n            // to the logic that creates a view.\r\n            const tDetails = getTDeferBlockDetails(hostTView, tNode);\r\n            const providers = tDetails.providers;\r\n            if (providers && providers.length > 0) {\r\n                injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);\r\n            }\r\n        }\r\n        const { dehydratedView, dehydratedViewIx } = findMatchingDehydratedViewForDeferBlock(lContainer, lDetails);\r\n        const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {\r\n            injector,\r\n            dehydratedView,\r\n        });\r\n        addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));\r\n        markViewDirty(embeddedLView, 2 /* NotificationSource.DeferBlockStateUpdate */);\r\n        if (dehydratedViewIx > -1) {\r\n            // Erase dehydrated view info in a given LContainer, so that the view is not\r\n            // removed later by post-hydration cleanup process (which iterates over all\r\n            // dehydrated views in component tree). This clears only the dehydrated view\r\n            // that was found for this render, which in most cases will be the only view.\r\n            // In the case that there was control flow that changed, there may be either\r\n            // more than one or the views would not match up due to the server rendered\r\n            // content being a different branch of the control flow.\r\n            lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);\r\n        }\r\n        if ((newState === DeferBlockState.Complete || newState === DeferBlockState.Error) &&\r\n            Array.isArray(lDetails[ON_COMPLETE_FNS])) {\r\n            for (const callback of lDetails[ON_COMPLETE_FNS]) {\r\n                callback();\r\n            }\r\n            lDetails[ON_COMPLETE_FNS] = null;\r\n        }\r\n    }\r\n    profiler(21 /* ProfilerEvent.DeferBlockStateEnd */);\r\n}\r\n/**\r\n * Extends the `applyDeferBlockState` with timer-based scheduling.\r\n * This function becomes available on a page if there are defer blocks\r\n * that use `after` or `minimum` parameters in the `@loading` or\r\n * `@placeholder` blocks.\r\n */\r\nfunction applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {\r\n    const now = Date.now();\r\n    const hostTView = hostLView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\r\n    if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\r\n        lDetails[STATE_IS_FROZEN_UNTIL] = null;\r\n        const loadingAfter = getLoadingBlockAfter(tDetails);\r\n        const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\r\n        if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\r\n            // Trying to render loading, but it has an `after` config,\r\n            // so schedule an update action after a timeout.\r\n            lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\r\n            const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);\r\n            lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\r\n        }\r\n        else {\r\n            // If we transition to a complete or an error state and there is a pending\r\n            // operation to render loading after a timeout - invoke a cleanup operation,\r\n            // which stops the timer.\r\n            if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\r\n                lDetails[LOADING_AFTER_CLEANUP_FN]();\r\n                lDetails[LOADING_AFTER_CLEANUP_FN] = null;\r\n                lDetails[NEXT_DEFER_BLOCK_STATE] = null;\r\n            }\r\n            applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\r\n            const duration = getMinimumDurationForState(tDetails, newState);\r\n            if (duration !== null) {\r\n                lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\r\n                scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // We are still rendering the previous state.\r\n        // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\r\n        // picked up once it's time to transition to the next state.\r\n        lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\r\n    }\r\n}\r\n/**\r\n * Schedules an update operation after a specified timeout.\r\n */\r\nfunction scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {\r\n    const callback = () => {\r\n        const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\r\n        lDetails[STATE_IS_FROZEN_UNTIL] = null;\r\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\r\n        if (nextState !== null) {\r\n            renderDeferBlockState(nextState, tNode, lContainer);\r\n        }\r\n    };\r\n    return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);\r\n}\r\n/**\r\n * Checks whether we can transition to the next state.\r\n *\r\n * We transition to the next state if the previous state was represented\r\n * with a number that is less than the next state. For example, if the current\r\n * state is \"loading\" (represented as `1`), we should not show a placeholder\r\n * (represented as `0`), but we can show a completed state (represented as `2`)\r\n * or an error state (represented as `3`).\r\n */\r\nfunction isValidStateChange(currentState, newState) {\r\n    return currentState < newState;\r\n}\r\n/** Utility function to render placeholder content (if present) */\r\nfunction renderPlaceholder(lView, tNode) {\r\n    const lContainer = lView[tNode.index];\r\n    ngDevMode && assertLContainer(lContainer);\r\n    renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\r\n}\r\n/**\r\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\r\n * based on the loading results.\r\n *\r\n * @param lContainer Represents an instance of a defer block.\r\n * @param tNode Represents defer block info shared across all instances.\r\n */\r\nfunction renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {\r\n    ngDevMode &&\r\n        assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\r\n    tDetails.loadingPromise.then(() => {\r\n        if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\r\n            ngDevMode && assertDeferredDependenciesLoaded(tDetails);\r\n            // Everything is loaded, show the primary block content\r\n            renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\r\n        }\r\n        else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\r\n            renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Reference to the timer-based scheduler implementation of defer block state\r\n * rendering method. It's used to make timer-based scheduling tree-shakable.\r\n * If `minimum` or `after` parameters are used, compiler generates an extra\r\n * argument for the `ɵɵdefer` instruction, which references a timer-based\r\n * implementation.\r\n */\r\nlet applyDeferBlockStateWithSchedulingImpl = null;\r\n/**\r\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\r\n * on the `@loading` or `@placeholder` blocks.\r\n */\r\nfunction ɵɵdeferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {\r\n    const tViewConsts = tView.consts;\r\n    if (placeholderConfigIndex != null) {\r\n        tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);\r\n    }\r\n    if (loadingConfigIndex != null) {\r\n        tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);\r\n    }\r\n    // Enable implementation that supports timer-based scheduling.\r\n    if (applyDeferBlockStateWithSchedulingImpl === null) {\r\n        applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\r\n    }\r\n}\r\n\r\n/**\r\n * The name of a field that Angular monkey-patches onto a component\r\n * class to store a function that loads defer-loadable dependencies\r\n * and applies metadata to a class.\r\n */\r\nconst ASYNC_COMPONENT_METADATA_FN = '__ngAsyncComponentMetadataFn__';\r\n/**\r\n * If a given component has unresolved async metadata - returns a reference\r\n * to a function that applies component metadata after resolving defer-loadable\r\n * dependencies. Otherwise - this function returns `null`.\r\n */\r\nfunction getAsyncClassMetadataFn(type) {\r\n    const componentClass = type; // cast to `any`, so that we can read a monkey-patched field\r\n    return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;\r\n}\r\n/**\r\n * Handles the process of applying metadata info to a component class in case\r\n * component template has defer blocks (thus some dependencies became deferrable).\r\n *\r\n * @param type Component class where metadata should be added\r\n * @param dependencyLoaderFn Function that loads dependencies\r\n * @param metadataSetterFn Function that forms a scope in which the `setClassMetadata` is invoked\r\n */\r\nfunction setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {\r\n    const componentClass = type; // cast to `any`, so that we can monkey-patch it\r\n    componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then((dependencies) => {\r\n        metadataSetterFn(...dependencies);\r\n        // Metadata is now set, reset field value to indicate that this component\r\n        // can by used/compiled synchronously.\r\n        componentClass[ASYNC_COMPONENT_METADATA_FN] = null;\r\n        return dependencies;\r\n    });\r\n    return componentClass[ASYNC_COMPONENT_METADATA_FN];\r\n}\r\n/**\r\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\r\n * on the type.\r\n *\r\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\r\n *\r\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\r\n * being tree-shaken away during production builds.\r\n */\r\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\r\n    return noSideEffects(() => {\r\n        const clazz = type;\r\n        if (decorators !== null) {\r\n            if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\r\n                clazz.decorators.push(...decorators);\r\n            }\r\n            else {\r\n                clazz.decorators = decorators;\r\n            }\r\n        }\r\n        if (ctorParameters !== null) {\r\n            // Rather than merging, clobber the existing parameters. If other projects exist which\r\n            // use tsickle-style annotations and reflect over them in the same way, this could\r\n            // cause issues, but that is vanishingly unlikely.\r\n            clazz.ctorParameters = ctorParameters;\r\n        }\r\n        if (propDecorators !== null) {\r\n            // The property decorator objects are merged as it is possible different fields have\r\n            // different decorator types. Decorators on individual fields are not merged, as it's\r\n            // also incredibly unlikely that a field will be decorated both with an Angular\r\n            // decorator and a non-Angular decorator that's also been downleveled.\r\n            if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\r\n                clazz.propDecorators = { ...clazz.propDecorators, ...propDecorators };\r\n            }\r\n            else {\r\n                clazz.propDecorators = propDecorators;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nclass Console {\r\n    log(message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(message);\r\n    }\r\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\r\n    warn(message) {\r\n        console.warn(message);\r\n    }\r\n    static ɵfac = function Console_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || Console)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: Console, factory: Console.ɵfac, providedIn: 'platform' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'platform' }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * These are the data structures that our framework injector profiler will fill with data in order\r\n * to support DI debugging APIs.\r\n *\r\n * resolverToTokenToDependencies: Maps an injector to a Map of tokens to an Array of\r\n * dependencies. Injector -> Token -> Dependencies This is used to support the\r\n * getDependenciesFromInjectable API, which takes in an injector and a token and returns it's\r\n * dependencies.\r\n *\r\n * resolverToProviders: Maps a DI resolver (an Injector or a TNode) to the providers configured\r\n * within it This is used to support the getInjectorProviders API, which takes in an injector and\r\n * returns the providers that it was configured with. Note that for the element injector case we\r\n * use the TNode instead of the LView as the DI resolver. This is because the registration of\r\n * providers happens only once per type of TNode. If an injector is created with an identical TNode,\r\n * the providers for that injector will not be reconfigured.\r\n *\r\n * standaloneInjectorToComponent: Maps the injector of a standalone component to the standalone\r\n * component that it is associated with. Used in the getInjectorProviders API, specificially in the\r\n * discovery of import paths for each provider. This is necessary because the imports array of a\r\n * standalone component is processed and configured in its standalone injector, but exists within\r\n * the component's definition. Because getInjectorProviders takes in an injector, if that injector\r\n * is the injector of a standalone component, we need to be able to discover the place where the\r\n * imports array is located (the component) in order to flatten the imports array within it to\r\n * discover all of it's providers.\r\n *\r\n *\r\n * All of these data structures are instantiated with WeakMaps. This will ensure that the presence\r\n * of any object in the keys of these maps does not prevent the garbage collector from collecting\r\n * those objects. Because of this property of WeakMaps, these data structures will never be the\r\n * source of a memory leak.\r\n *\r\n * An example of this advantage: When components are destroyed, we don't need to do\r\n * any additional work to remove that component from our mappings.\r\n *\r\n */\r\nclass DIDebugData {\r\n    resolverToTokenToDependencies = new WeakMap();\r\n    resolverToProviders = new WeakMap();\r\n    resolverToEffects = new WeakMap();\r\n    standaloneInjectorToComponent = new WeakMap();\r\n    reset() {\r\n        this.resolverToTokenToDependencies = new WeakMap();\r\n        this.resolverToProviders = new WeakMap();\r\n        this.standaloneInjectorToComponent = new WeakMap();\r\n    }\r\n}\r\nlet frameworkDIDebugData = new DIDebugData();\r\nfunction getFrameworkDIDebugData() {\r\n    return frameworkDIDebugData;\r\n}\r\n/**\r\n * Initalize default handling of injector events. This handling parses events\r\n * as they are emitted and constructs the data structures necessary to support\r\n * some of debug APIs.\r\n *\r\n * See handleInjectEvent, handleCreateEvent and handleProviderConfiguredEvent\r\n * for descriptions of each handler\r\n *\r\n * Supported APIs:\r\n *               - getDependenciesFromInjectable\r\n *               - getInjectorProviders\r\n */\r\nfunction setupFrameworkInjectorProfiler() {\r\n    frameworkDIDebugData.reset();\r\n    setInjectorProfiler(injectorProfilerEventHandler);\r\n}\r\nfunction injectorProfilerEventHandler(injectorProfilerEvent) {\r\n    const { context, type } = injectorProfilerEvent;\r\n    if (type === 0 /* InjectorProfilerEventType.Inject */) {\r\n        handleInjectEvent(context, injectorProfilerEvent.service);\r\n    }\r\n    else if (type === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\r\n        handleInstanceCreatedByInjectorEvent(context, injectorProfilerEvent.instance);\r\n    }\r\n    else if (type === 2 /* InjectorProfilerEventType.ProviderConfigured */) {\r\n        handleProviderConfiguredEvent(context, injectorProfilerEvent.providerRecord);\r\n    }\r\n    else if (type === 3 /* InjectorProfilerEventType.EffectCreated */) {\r\n        handleEffectCreatedEvent(context, injectorProfilerEvent.effect);\r\n    }\r\n}\r\nfunction handleEffectCreatedEvent(context, effect) {\r\n    const diResolver = getDIResolver(context.injector);\r\n    if (diResolver === null) {\r\n        throwError('An EffectCreated event must be run within an injection context.');\r\n    }\r\n    const { resolverToEffects } = frameworkDIDebugData;\r\n    if (!resolverToEffects.has(diResolver)) {\r\n        resolverToEffects.set(diResolver, []);\r\n    }\r\n    resolverToEffects.get(diResolver).push(effect);\r\n}\r\n/**\r\n *\r\n * Stores the injected service in frameworkDIDebugData.resolverToTokenToDependencies\r\n * based on it's injector and token.\r\n *\r\n * @param context InjectorProfilerContext the injection context that this event occurred in.\r\n * @param data InjectedService the service associated with this inject event.\r\n *\r\n */\r\nfunction handleInjectEvent(context, data) {\r\n    const diResolver = getDIResolver(context.injector);\r\n    if (diResolver === null) {\r\n        throwError('An Inject event must be run within an injection context.');\r\n    }\r\n    const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;\r\n    if (!diResolverToInstantiatedToken.has(diResolver)) {\r\n        diResolverToInstantiatedToken.set(diResolver, new WeakMap());\r\n    }\r\n    // if token is a primitive type, ignore this event. We do this because we cannot keep track of\r\n    // non-primitive tokens in WeakMaps since they are not garbage collectable.\r\n    if (!canBeHeldWeakly(context.token)) {\r\n        return;\r\n    }\r\n    const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);\r\n    if (!instantiatedTokenToDependencies.has(context.token)) {\r\n        instantiatedTokenToDependencies.set(context.token, []);\r\n    }\r\n    const { token, value, flags } = data;\r\n    assertDefined(context.token, 'Injector profiler context token is undefined.');\r\n    const dependencies = instantiatedTokenToDependencies.get(context.token);\r\n    assertDefined(dependencies, 'Could not resolve dependencies for token.');\r\n    if (context.injector instanceof NodeInjector) {\r\n        dependencies.push({ token, value, flags, injectedIn: getNodeInjectorContext(context.injector) });\r\n    }\r\n    else {\r\n        dependencies.push({ token, value, flags });\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns the LView and TNode associated with a NodeInjector. Returns undefined if the injector\r\n * is not a NodeInjector.\r\n *\r\n * @param injector\r\n * @returns {lView: LView, tNode: TNode}|undefined\r\n */\r\nfunction getNodeInjectorContext(injector) {\r\n    if (!(injector instanceof NodeInjector)) {\r\n        throwError('getNodeInjectorContext must be called with a NodeInjector');\r\n    }\r\n    const lView = getNodeInjectorLView(injector);\r\n    const tNode = getNodeInjectorTNode(injector);\r\n    if (tNode === null) {\r\n        return;\r\n    }\r\n    assertTNodeForLView(tNode, lView);\r\n    return { lView, tNode };\r\n}\r\n/**\r\n *\r\n * If the created instance is an instance of a standalone component, maps the injector to that\r\n * standalone component in frameworkDIDebugData.standaloneInjectorToComponent\r\n *\r\n * @param context InjectorProfilerContext the injection context that this event occurred in.\r\n * @param data InjectorCreatedInstance an object containing the instance that was just created\r\n *\r\n */\r\nfunction handleInstanceCreatedByInjectorEvent(context, data) {\r\n    const { value } = data;\r\n    // It might happen that a DI token is requested but there is no corresponding value.\r\n    // The InstanceCreatedByInjectorEvent will be still emitted in this case (to mirror the InjectorToCreateInstanceEvent) but we don't want to do any particular processing for those situations.\r\n    if (data.value == null) {\r\n        return;\r\n    }\r\n    if (getDIResolver(context.injector) === null) {\r\n        throwError('An InjectorCreatedInstance event must be run within an injection context.');\r\n    }\r\n    // if our value is an instance of a standalone component, map the injector of that standalone\r\n    // component to the component class. Otherwise, this event is a noop.\r\n    let standaloneComponent = undefined;\r\n    if (typeof value === 'object') {\r\n        standaloneComponent = value?.constructor;\r\n    }\r\n    // We want to also cover if `standaloneComponent === null` in addition to `undefined`\r\n    if (standaloneComponent == undefined || !isStandaloneComponent(standaloneComponent)) {\r\n        return;\r\n    }\r\n    const environmentInjector = context.injector.get(EnvironmentInjector, null, { optional: true });\r\n    // Standalone components should have an environment injector. If one cannot be\r\n    // found we may be in a test case for low level functionality that did not explicitly\r\n    // setup this injector. In those cases, we simply ignore this event.\r\n    if (environmentInjector === null) {\r\n        return;\r\n    }\r\n    const { standaloneInjectorToComponent } = frameworkDIDebugData;\r\n    // If our injector has already been mapped, as is the case\r\n    // when a standalone component imports another standalone component,\r\n    // we consider the original component (the component doing the importing)\r\n    // as the component connected to our injector.\r\n    if (standaloneInjectorToComponent.has(environmentInjector)) {\r\n        return;\r\n    }\r\n    // If our injector hasn't been mapped, then we map it to the standalone component\r\n    standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);\r\n}\r\nfunction isStandaloneComponent(value) {\r\n    const def = getComponentDef(value);\r\n    return !!def?.standalone;\r\n}\r\n/**\r\n *\r\n * Stores the emitted ProviderRecords from the InjectorProfilerEventType.ProviderConfigured\r\n * event in frameworkDIDebugData.resolverToProviders\r\n *\r\n * @param context InjectorProfilerContext the injection context that this event occurred in.\r\n * @param data ProviderRecord an object containing the instance that was just created\r\n *\r\n */\r\nfunction handleProviderConfiguredEvent(context, data) {\r\n    const { resolverToProviders } = frameworkDIDebugData;\r\n    let diResolver;\r\n    if (context?.injector instanceof NodeInjector) {\r\n        diResolver = getNodeInjectorTNode(context.injector);\r\n    }\r\n    else {\r\n        diResolver = context.injector;\r\n    }\r\n    if (diResolver === null) {\r\n        throwError('A ProviderConfigured event must be run within an injection context.');\r\n    }\r\n    if (!resolverToProviders.has(diResolver)) {\r\n        resolverToProviders.set(diResolver, []);\r\n    }\r\n    resolverToProviders.get(diResolver).push(data);\r\n}\r\nfunction getDIResolver(injector) {\r\n    let diResolver = null;\r\n    if (injector === undefined) {\r\n        return diResolver;\r\n    }\r\n    // We use the LView as the diResolver for NodeInjectors because they\r\n    // do not persist anywhere in the framework. They are simply wrappers around an LView and a TNode\r\n    // that do persist. Because of this, we rely on the LView of the NodeInjector in order to use\r\n    // as a concrete key to represent this injector. If we get the same LView back later, we know\r\n    // we're looking at the same injector.\r\n    if (injector instanceof NodeInjector) {\r\n        diResolver = getNodeInjectorLView(injector);\r\n    }\r\n    // Other injectors can be used a keys for a map because their instances\r\n    // persist\r\n    else {\r\n        diResolver = injector;\r\n    }\r\n    return diResolver;\r\n}\r\n// inspired by\r\n// https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-canbeheldweakly\r\nfunction canBeHeldWeakly(value) {\r\n    // we check for value !== null here because typeof null === 'object\r\n    return (value !== null &&\r\n        (typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol'));\r\n}\r\n\r\n/**\r\n * Marks a component for check (in case of OnPush components) and synchronously\r\n * performs change detection on the application this component belongs to.\r\n *\r\n * @param component Component to {@link /api/core/ChangeDetectorRef#markForCheck mark for check}\r\n *\r\n * @publicApi\r\n */\r\nfunction applyChanges(component) {\r\n    ngDevMode && assertDefined(component, 'component');\r\n    markViewDirty(getComponentViewByInstance(component), 3 /* NotificationSource.DebugApplyChanges */);\r\n    getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));\r\n}\r\n/**\r\n * Synchronously perform change detection on a component (and possibly its sub-components).\r\n *\r\n * This function triggers change detection in a synchronous way on a component.\r\n *\r\n * @param component The component which the change detection should be performed on.\r\n */\r\nfunction detectChanges(component) {\r\n    const view = getComponentViewByInstance(component);\r\n    view[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\r\n    detectChangesInternal(view);\r\n}\r\n\r\n/**\r\n * Retrieves all defer blocks in a given LView.\r\n *\r\n * @param lView lView with defer blocks\r\n * @param deferBlocks defer block aggregator array\r\n */\r\nfunction getDeferBlocks$1(lView, deferBlocks) {\r\n    const tView = lView[TVIEW];\r\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\r\n        if (isLContainer(lView[i])) {\r\n            const lContainer = lView[i];\r\n            // An LContainer may represent an instance of a defer block, in which case\r\n            // we store it as a result. Otherwise, keep iterating over LContainer views and\r\n            // look for defer blocks.\r\n            const isLast = i === tView.bindingStartIndex - 1;\r\n            if (!isLast) {\r\n                const tNode = tView.data[i];\r\n                const tDetails = getTDeferBlockDetails(tView, tNode);\r\n                if (isTDeferBlockDetails(tDetails)) {\r\n                    deferBlocks.push({ lContainer, lView, tNode, tDetails });\r\n                    // This LContainer represents a defer block, so we exit\r\n                    // this iteration and don't inspect views in this LContainer.\r\n                    continue;\r\n                }\r\n            }\r\n            // The host can be an `LView` if this is the container\r\n            // for a component that injects `ViewContainerRef`.\r\n            if (isLView(lContainer[HOST])) {\r\n                getDeferBlocks$1(lContainer[HOST], deferBlocks);\r\n            }\r\n            for (let j = CONTAINER_HEADER_OFFSET; j < lContainer.length; j++) {\r\n                getDeferBlocks$1(lContainer[j], deferBlocks);\r\n            }\r\n        }\r\n        else if (isLView(lView[i])) {\r\n            // This is a component, enter the `getDeferBlocks` recursively.\r\n            getDeferBlocks$1(lView[i], deferBlocks);\r\n        }\r\n    }\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Gets all of the `@defer` blocks that are present inside the specified DOM node.\r\n * @param node Node in which to look for `@defer` blocks.\r\n *\r\n * @publicApi\r\n */\r\nfunction getDeferBlocks(node) {\r\n    const results = [];\r\n    const lView = getLContext(node)?.lView;\r\n    if (lView) {\r\n        findDeferBlocks(node, lView, results);\r\n    }\r\n    return results;\r\n}\r\n/**\r\n * Finds all the `@defer` blocks inside a specific node and view.\r\n * @param node Node in which to search for blocks.\r\n * @param lView View within the node in which to search for blocks.\r\n * @param results Array to which to add blocks once they're found.\r\n */\r\nfunction findDeferBlocks(node, lView, results) {\r\n    const viewInjector = lView[INJECTOR];\r\n    const registry = viewInjector.get(DEHYDRATED_BLOCK_REGISTRY, null, { optional: true });\r\n    const blocks = [];\r\n    getDeferBlocks$1(lView, blocks);\r\n    const transferState = viewInjector.get(TransferState);\r\n    const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\r\n    for (const details of blocks) {\r\n        const native = getNativeByTNode(details.tNode, details.lView);\r\n        const lDetails = getLDeferBlockDetails(details.lView, details.tNode);\r\n        // The LView from `getLContext` might be the view the element is placed in.\r\n        // Filter out defer blocks that aren't inside the specified root node.\r\n        if (!node.contains(native)) {\r\n            continue;\r\n        }\r\n        const tDetails = details.tDetails;\r\n        const renderedLView = getRendererLView(details);\r\n        const rootNodes = [];\r\n        const hydrationState = inferHydrationState(tDetails, lDetails, registry);\r\n        if (renderedLView !== null) {\r\n            collectNativeNodes(renderedLView[TVIEW], renderedLView, renderedLView[TVIEW].firstChild, rootNodes);\r\n        }\r\n        else if (hydrationState === 'dehydrated') {\r\n            // We'll find the number of root nodes in the transfer state and\r\n            // collect that number of elements that precede the defer block comment node.\r\n            const deferId = lDetails[SSR_UNIQUE_ID];\r\n            const deferData = deferBlockParents[deferId];\r\n            const numberOfRootNodes = deferData[NUM_ROOT_NODES];\r\n            let collectedNodeCount = 0;\r\n            const deferBlockCommentNode = details.lContainer[NATIVE];\r\n            let currentNode = deferBlockCommentNode.previousSibling;\r\n            while (collectedNodeCount < numberOfRootNodes && currentNode) {\r\n                rootNodes.unshift(currentNode);\r\n                currentNode = currentNode.previousSibling;\r\n                collectedNodeCount++;\r\n            }\r\n        }\r\n        const data = {\r\n            state: stringifyState(lDetails[DEFER_BLOCK_STATE]),\r\n            incrementalHydrationState: hydrationState,\r\n            hasErrorBlock: tDetails.errorTmplIndex !== null,\r\n            loadingBlock: {\r\n                exists: tDetails.loadingTmplIndex !== null,\r\n                minimumTime: tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null,\r\n                afterTime: tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null,\r\n            },\r\n            placeholderBlock: {\r\n                exists: tDetails.placeholderTmplIndex !== null,\r\n                minimumTime: tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null,\r\n            },\r\n            triggers: tDetails.debug?.triggers ? Array.from(tDetails.debug.triggers).sort() : [],\r\n            rootNodes,\r\n        };\r\n        results.push(data);\r\n        // `getDeferBlocks` does not resolve nested defer blocks so we have to recurse manually.\r\n        if (renderedLView !== null) {\r\n            findDeferBlocks(node, renderedLView, results);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Turns the `DeferBlockState` into a string which is more readable than the enum form.\r\n *\r\n * @param lDetails Information about the\r\n * @returns\r\n */\r\nfunction stringifyState(state) {\r\n    switch (state) {\r\n        case DeferBlockState.Complete:\r\n            return 'complete';\r\n        case DeferBlockState.Loading:\r\n            return 'loading';\r\n        case DeferBlockState.Placeholder:\r\n            return 'placeholder';\r\n        case DeferBlockState.Error:\r\n            return 'error';\r\n        case DeferBlockInternalState.Initial:\r\n            return 'initial';\r\n        default:\r\n            throw new Error(`Unrecognized state ${state}`);\r\n    }\r\n}\r\n/**\r\n * Infers the hydration state of a specific defer block.\r\n * @param tDetails Static defer block information.\r\n * @param lDetails Instance defer block information.\r\n * @param registry Registry coordinating the hydration of defer blocks.\r\n */\r\nfunction inferHydrationState(tDetails, lDetails, registry) {\r\n    if (registry === null ||\r\n        lDetails[SSR_UNIQUE_ID] === null ||\r\n        tDetails.hydrateTriggers === null ||\r\n        tDetails.hydrateTriggers.has(7 /* DeferBlockTrigger.Never */)) {\r\n        return 'not-configured';\r\n    }\r\n    return registry.has(lDetails[SSR_UNIQUE_ID]) ? 'dehydrated' : 'hydrated';\r\n}\r\n/**\r\n * Gets the current LView that is rendered out in a defer block.\r\n * @param details Instance information about the block.\r\n */\r\nfunction getRendererLView(details) {\r\n    // Defer block containers can only ever contain one view.\r\n    // If they're empty, it means that nothing is rendered.\r\n    if (details.lContainer.length <= CONTAINER_HEADER_OFFSET) {\r\n        return null;\r\n    }\r\n    const lView = details.lContainer[CONTAINER_HEADER_OFFSET];\r\n    ngDevMode && assertLView(lView);\r\n    return lView;\r\n}\r\n\r\n/**\r\n * Discovers the dependencies of an injectable instance. Provides DI information about each\r\n * dependency that the injectable was instantiated with, including where they were provided from.\r\n *\r\n * @param injector An injector instance\r\n * @param token a DI token that was constructed by the given injector instance\r\n * @returns an object that contains the created instance of token as well as all of the dependencies\r\n * that it was instantiated with OR undefined if the token was not created within the given\r\n * injector.\r\n */\r\nfunction getDependenciesFromInjectable(injector, token) {\r\n    // First we check to see if the token given maps to an actual instance in the injector given.\r\n    // We use `self: true` because we only want to look at the injector we were given.\r\n    // We use `optional: true` because it's possible that the token we were given was never\r\n    // constructed by the injector we were given.\r\n    const instance = injector.get(token, null, { self: true, optional: true });\r\n    if (instance === null) {\r\n        throw new Error(`Unable to determine instance of ${token} in given injector`);\r\n    }\r\n    const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);\r\n    const resolutionPath = getInjectorResolutionPath(injector);\r\n    const dependencies = unformattedDependencies.map((dep) => {\r\n        // injectedIn contains private fields, so we omit it from the response\r\n        const formattedDependency = {\r\n            value: dep.value,\r\n        };\r\n        // convert injection flags to booleans\r\n        const flags = dep.flags;\r\n        formattedDependency.flags = {\r\n            optional: (8 /* InternalInjectFlags.Optional */ & flags) === 8 /* InternalInjectFlags.Optional */,\r\n            host: (1 /* InternalInjectFlags.Host */ & flags) === 1 /* InternalInjectFlags.Host */,\r\n            self: (2 /* InternalInjectFlags.Self */ & flags) === 2 /* InternalInjectFlags.Self */,\r\n            skipSelf: (4 /* InternalInjectFlags.SkipSelf */ & flags) === 4 /* InternalInjectFlags.SkipSelf */,\r\n        };\r\n        // find the injector that provided the dependency\r\n        for (let i = 0; i < resolutionPath.length; i++) {\r\n            const injectorToCheck = resolutionPath[i];\r\n            // if skipSelf is true we skip the first injector\r\n            if (i === 0 && formattedDependency.flags.skipSelf) {\r\n                continue;\r\n            }\r\n            // host only applies to NodeInjectors\r\n            if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {\r\n                break;\r\n            }\r\n            const instance = injectorToCheck.get(dep.token, null, {\r\n                self: true,\r\n                optional: true,\r\n            });\r\n            if (instance !== null) {\r\n                // if host flag is true we double check that we can get the service from the first element\r\n                // in the resolution path by using the host flag. This is done to make sure that we've found\r\n                // the correct providing injector, and not a node injector that is connected to our path via\r\n                // a router outlet.\r\n                if (formattedDependency.flags.host) {\r\n                    const firstInjector = resolutionPath[0];\r\n                    const lookupFromFirstInjector = firstInjector.get(dep.token, null, {\r\n                        ...formattedDependency.flags,\r\n                        optional: true,\r\n                    });\r\n                    if (lookupFromFirstInjector !== null) {\r\n                        formattedDependency.providedIn = injectorToCheck;\r\n                    }\r\n                    break;\r\n                }\r\n                formattedDependency.providedIn = injectorToCheck;\r\n                break;\r\n            }\r\n            // if self is true we stop after the first injector\r\n            if (i === 0 && formattedDependency.flags.self) {\r\n                break;\r\n            }\r\n        }\r\n        if (dep.token)\r\n            formattedDependency.token = dep.token;\r\n        return formattedDependency;\r\n    });\r\n    return { instance, dependencies };\r\n}\r\nfunction getDependenciesForTokenInInjector(token, injector) {\r\n    const { resolverToTokenToDependencies } = getFrameworkDIDebugData();\r\n    if (!(injector instanceof NodeInjector)) {\r\n        return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];\r\n    }\r\n    const lView = getNodeInjectorLView(injector);\r\n    const tokenDependencyMap = resolverToTokenToDependencies.get(lView);\r\n    const dependencies = tokenDependencyMap?.get(token) ?? [];\r\n    // In the NodeInjector case, all injections for every node are stored in the same lView.\r\n    // We use the injectedIn field of the dependency to filter out the dependencies that\r\n    // do not come from the same node as the instance we're looking at.\r\n    return dependencies.filter((dependency) => {\r\n        const dependencyNode = dependency.injectedIn?.tNode;\r\n        if (dependencyNode === undefined) {\r\n            return false;\r\n        }\r\n        const instanceNode = getNodeInjectorTNode(injector);\r\n        assertTNode(dependencyNode);\r\n        assertTNode(instanceNode);\r\n        return dependencyNode === instanceNode;\r\n    });\r\n}\r\n/**\r\n * Gets the class associated with an injector that contains a provider `imports` array in it's\r\n * definition\r\n *\r\n * For Module Injectors this returns the NgModule constructor.\r\n *\r\n * For Standalone injectors this returns the standalone component constructor.\r\n *\r\n * @param injector Injector an injector instance\r\n * @returns the constructor where the `imports` array that configures this injector is located\r\n */\r\nfunction getProviderImportsContainer(injector) {\r\n    const { standaloneInjectorToComponent } = getFrameworkDIDebugData();\r\n    // standalone components configure providers through a component def, so we have to\r\n    // use the standalone component associated with this injector if Injector represents\r\n    // a standalone components EnvironmentInjector\r\n    if (standaloneInjectorToComponent.has(injector)) {\r\n        return standaloneInjectorToComponent.get(injector);\r\n    }\r\n    // Module injectors configure providers through their NgModule def, so we use the\r\n    // injector to lookup its NgModuleRef and through that grab its instance\r\n    const defTypeRef = injector.get(NgModuleRef$1, null, { self: true, optional: true });\r\n    // If we can't find an associated imports container, return null.\r\n    // This could be the case if this function is called with an R3Injector that does not represent\r\n    // a standalone component or NgModule.\r\n    if (defTypeRef === null) {\r\n        return null;\r\n    }\r\n    // In standalone applications, the root environment injector created by bootstrapApplication\r\n    // may have no associated \"instance\".\r\n    if (defTypeRef.instance === null) {\r\n        return null;\r\n    }\r\n    return defTypeRef.instance.constructor;\r\n}\r\n/**\r\n * Gets the providers configured on a NodeInjector\r\n *\r\n * @param injector A NodeInjector instance\r\n * @returns ProviderRecord[] an array of objects representing the providers configured on this\r\n *     injector\r\n */\r\nfunction getNodeInjectorProviders(injector) {\r\n    const diResolver = getNodeInjectorTNode(injector);\r\n    const { resolverToProviders } = getFrameworkDIDebugData();\r\n    return resolverToProviders.get(diResolver) ?? [];\r\n}\r\n/**\r\n * Gets a mapping of providers configured on an injector to their import paths\r\n *\r\n * ModuleA -> imports ModuleB\r\n * ModuleB -> imports ModuleC\r\n * ModuleB -> provides MyServiceA\r\n * ModuleC -> provides MyServiceB\r\n *\r\n * getProviderImportPaths(ModuleA)\r\n * > Map(2) {\r\n *   MyServiceA => [ModuleA, ModuleB]\r\n *   MyServiceB => [ModuleA, ModuleB, ModuleC]\r\n *  }\r\n *\r\n * @param providerImportsContainer constructor of class that contains an `imports` array in it's\r\n *     definition\r\n * @returns A Map object that maps providers to an array of constructors representing it's import\r\n *     path\r\n *\r\n */\r\nfunction getProviderImportPaths(providerImportsContainer) {\r\n    const providerToPath = new Map();\r\n    const visitedContainers = new Set();\r\n    const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);\r\n    walkProviderTree(providerImportsContainer, visitor, [], new Set());\r\n    return providerToPath;\r\n}\r\n/**\r\n *\r\n * Higher order function that returns a visitor for WalkProviderTree\r\n *\r\n * Takes in a Map and Set to keep track of the providers and containers\r\n * visited, so that we can discover the import paths of these providers\r\n * during the traversal.\r\n *\r\n * This visitor takes advantage of the fact that walkProviderTree performs a\r\n * postorder traversal of the provider tree for the passed in container. Because postorder\r\n * traversal recursively processes subtrees from leaf nodes until the traversal reaches the root,\r\n * we write a visitor that constructs provider import paths in reverse.\r\n *\r\n *\r\n * We use the visitedContainers set defined outside this visitor\r\n * because we want to run some logic only once for\r\n * each container in the tree. That logic can be described as:\r\n *\r\n *\r\n * 1. for each discovered_provider and discovered_path in the incomplete provider paths we've\r\n * already discovered\r\n * 2. get the first container in discovered_path\r\n * 3. if that first container is in the imports array of the container we're visiting\r\n *    Then the container we're visiting is also in the import path of discovered_provider, so we\r\n *    unshift discovered_path with the container we're currently visiting\r\n *\r\n *\r\n * Example Run:\r\n * ```\r\n *                 ┌──────────┐\r\n *                 │containerA│\r\n *      ┌─imports-─┤          ├──imports─┐\r\n *      │          │  provA   │          │\r\n *      │          │  provB   │          │\r\n *      │          └──────────┘          │\r\n *      │                                │\r\n *     ┌▼─────────┐             ┌────────▼─┐\r\n *     │containerB│             │containerC│\r\n *     │          │             │          │\r\n *     │  provD   │             │  provF   │\r\n *     │  provE   │             │  provG   │\r\n *     └──────────┘             └──────────┘\r\n * ```\r\n *\r\n * Each step of the traversal,\r\n *\r\n * ```\r\n * visitor(provD, containerB)\r\n * providerToPath === Map { provD => [containerB] }\r\n * visitedContainers === Set { containerB }\r\n *\r\n * visitor(provE, containerB)\r\n * providerToPath === Map { provD => [containerB], provE => [containerB] }\r\n * visitedContainers === Set { containerB }\r\n *\r\n * visitor(provF, containerC)\r\n * providerToPath === Map { provD => [containerB], provE => [containerB], provF => [containerC] }\r\n * visitedContainers === Set { containerB, containerC }\r\n *\r\n * visitor(provG, containerC)\r\n * providerToPath === Map {\r\n *   provD => [containerB], provE => [containerB], provF => [containerC], provG => [containerC]\r\n * }\r\n * visitedContainers === Set { containerB, containerC }\r\n *\r\n * visitor(provA, containerA)\r\n * providerToPath === Map {\r\n *   provD => [containerA, containerB],\r\n *   provE => [containerA, containerB],\r\n *   provF => [containerA, containerC],\r\n *   provG => [containerA, containerC],\r\n *   provA => [containerA]\r\n * }\r\n * visitedContainers === Set { containerB, containerC, containerA }\r\n *\r\n * visitor(provB, containerA)\r\n * providerToPath === Map {\r\n *   provD => [containerA, containerB],\r\n *   provE => [containerA, containerB],\r\n *   provF => [containerA, containerC],\r\n *   provG => [containerA, containerC],\r\n *   provA => [containerA]\r\n *   provB => [containerA]\r\n * }\r\n * visitedContainers === Set { containerB, containerC, containerA }\r\n * ```\r\n *\r\n * @param providerToPath Map map of providers to paths that this function fills\r\n * @param visitedContainers Set a set to keep track of the containers we've already visited\r\n * @return function(provider SingleProvider, container: Type<unknown> | InjectorType<unknown>) =>\r\n *     void\r\n */\r\nfunction walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {\r\n    return (provider, container) => {\r\n        // If the provider is not already in the providerToPath map,\r\n        // add an entry with the provider as the key and an array containing the current container as\r\n        // the value\r\n        if (!providerToPath.has(provider)) {\r\n            providerToPath.set(provider, [container]);\r\n        }\r\n        // This block will run exactly once for each container in the import tree.\r\n        // This is where we run the logic to check the imports array of the current\r\n        // container to see if it's the next container in the path for our currently\r\n        // discovered providers.\r\n        if (!visitedContainers.has(container)) {\r\n            // Iterate through the providers we've already seen\r\n            for (const prov of providerToPath.keys()) {\r\n                const existingImportPath = providerToPath.get(prov);\r\n                let containerDef = getInjectorDef(container);\r\n                if (!containerDef) {\r\n                    const ngModule = container.ngModule;\r\n                    containerDef = getInjectorDef(ngModule);\r\n                }\r\n                if (!containerDef) {\r\n                    return;\r\n                }\r\n                const lastContainerAddedToPath = existingImportPath[0];\r\n                let isNextStepInPath = false;\r\n                deepForEach(containerDef.imports, (moduleImport) => {\r\n                    if (isNextStepInPath) {\r\n                        return;\r\n                    }\r\n                    isNextStepInPath =\r\n                        moduleImport.ngModule === lastContainerAddedToPath ||\r\n                            moduleImport === lastContainerAddedToPath;\r\n                    if (isNextStepInPath) {\r\n                        providerToPath.get(prov)?.unshift(container);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        visitedContainers.add(container);\r\n    };\r\n}\r\n/**\r\n * Gets the providers configured on an EnvironmentInjector\r\n *\r\n * @param injector EnvironmentInjector\r\n * @returns an array of objects representing the providers of the given injector\r\n */\r\nfunction getEnvironmentInjectorProviders(injector) {\r\n    const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];\r\n    // platform injector has no provider imports container so can we skip trying to\r\n    // find import paths\r\n    if (isPlatformInjector(injector)) {\r\n        return providerRecordsWithoutImportPaths;\r\n    }\r\n    const providerImportsContainer = getProviderImportsContainer(injector);\r\n    if (providerImportsContainer === null) {\r\n        // We assume that if an environment injector exists without an associated provider imports\r\n        // container, it was created without such a container. Some examples cases where this could\r\n        // happen:\r\n        // - The root injector of a standalone application\r\n        // - A router injector created by using the providers array in a lazy loaded route\r\n        // - A manually created injector that is attached to the injector tree\r\n        // Since each of these cases has no provider container, there is no concept of import paths,\r\n        // so we can simply return the provider records.\r\n        return providerRecordsWithoutImportPaths;\r\n    }\r\n    const providerToPath = getProviderImportPaths(providerImportsContainer);\r\n    const providerRecords = [];\r\n    for (const providerRecord of providerRecordsWithoutImportPaths) {\r\n        const provider = providerRecord.provider;\r\n        // Ignore these special providers for now until we have a cleaner way of\r\n        // determing when they are provided by the framework vs provided by the user.\r\n        const token = provider.provide;\r\n        if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {\r\n            continue;\r\n        }\r\n        let importPath = providerToPath.get(provider) ?? [];\r\n        const def = getComponentDef(providerImportsContainer);\r\n        const isStandaloneComponent = !!def?.standalone;\r\n        // We prepend the component constructor in the standalone case\r\n        // because walkProviderTree does not visit this constructor during it's traversal\r\n        if (isStandaloneComponent) {\r\n            importPath = [providerImportsContainer, ...importPath];\r\n        }\r\n        providerRecords.push({ ...providerRecord, importPath });\r\n    }\r\n    return providerRecords;\r\n}\r\nfunction isPlatformInjector(injector) {\r\n    return injector instanceof R3Injector && injector.scopes.has('platform');\r\n}\r\n/**\r\n * Gets the providers configured on an injector.\r\n *\r\n * @param injector the injector to lookup the providers of\r\n * @returns ProviderRecord[] an array of objects representing the providers of the given injector\r\n */\r\nfunction getInjectorProviders(injector) {\r\n    if (injector instanceof NodeInjector) {\r\n        return getNodeInjectorProviders(injector);\r\n    }\r\n    else if (injector instanceof EnvironmentInjector) {\r\n        return getEnvironmentInjectorProviders(injector);\r\n    }\r\n    throwError('getInjectorProviders only supports NodeInjector and EnvironmentInjector');\r\n}\r\n/**\r\n *\r\n * Given an injector, this function will return\r\n * an object containing the type and source of the injector.\r\n *\r\n * |              | type        | source                                                      |\r\n * |--------------|-------------|-------------------------------------------------------------|\r\n * | NodeInjector | element     | DOM element that created this injector                      |\r\n * | R3Injector   | environment | `injector.source`                                           |\r\n * | NullInjector | null        | null                                                        |\r\n *\r\n * @param injector the Injector to get metadata for\r\n * @returns an object containing the type and source of the given injector. If the injector metadata\r\n *     cannot be determined, returns null.\r\n */\r\nfunction getInjectorMetadata(injector) {\r\n    if (injector instanceof NodeInjector) {\r\n        const lView = getNodeInjectorLView(injector);\r\n        const tNode = getNodeInjectorTNode(injector);\r\n        assertTNodeForLView(tNode, lView);\r\n        return { type: 'element', source: getNativeByTNode(tNode, lView) };\r\n    }\r\n    if (injector instanceof R3Injector) {\r\n        return { type: 'environment', source: injector.source ?? null };\r\n    }\r\n    if (injector instanceof NullInjector) {\r\n        return { type: 'null', source: null };\r\n    }\r\n    return null;\r\n}\r\nfunction getInjectorResolutionPath(injector) {\r\n    const resolutionPath = [injector];\r\n    getInjectorResolutionPathHelper(injector, resolutionPath);\r\n    return resolutionPath;\r\n}\r\nfunction getInjectorResolutionPathHelper(injector, resolutionPath) {\r\n    const parent = getInjectorParent(injector);\r\n    // if getInjectorParent can't find a parent, then we've either reached the end\r\n    // of the path, or we need to move from the Element Injector tree to the\r\n    // module injector tree using the first injector in our path as the connection point.\r\n    if (parent === null) {\r\n        if (injector instanceof NodeInjector) {\r\n            const firstInjector = resolutionPath[0];\r\n            if (firstInjector instanceof NodeInjector) {\r\n                const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);\r\n                if (moduleInjector === null) {\r\n                    throwError('NodeInjector must have some connection to the module injector tree');\r\n                }\r\n                resolutionPath.push(moduleInjector);\r\n                getInjectorResolutionPathHelper(moduleInjector, resolutionPath);\r\n            }\r\n            return resolutionPath;\r\n        }\r\n    }\r\n    else {\r\n        resolutionPath.push(parent);\r\n        getInjectorResolutionPathHelper(parent, resolutionPath);\r\n    }\r\n    return resolutionPath;\r\n}\r\n/**\r\n * Gets the parent of an injector.\r\n *\r\n * This function is not able to make the jump from the Element Injector Tree to the Module\r\n * injector tree. This is because the \"parent\" (the next step in the reoslution path)\r\n * of a root NodeInjector is dependent on which NodeInjector ancestor initiated\r\n * the DI lookup. See getInjectorResolutionPath for a function that can make this jump.\r\n *\r\n * In the below diagram:\r\n * ```ts\r\n * getInjectorParent(NodeInjectorB)\r\n *  > NodeInjectorA\r\n * getInjectorParent(NodeInjectorA) // or getInjectorParent(getInjectorParent(NodeInjectorB))\r\n *  > null // cannot jump to ModuleInjector tree\r\n * ```\r\n *\r\n * ```\r\n *                ┌───────┐                ┌───────────────────┐\r\n *    ┌───────────┤ModuleA├───Injector────►│EnvironmentInjector│\r\n *    │           └───┬───┘                └───────────────────┘\r\n *    │               │\r\n *    │           bootstraps\r\n *    │               │\r\n *    │               │\r\n *    │          ┌────▼─────┐                 ┌─────────────┐\r\n * declares      │ComponentA├────Injector────►│NodeInjectorA│\r\n *    │          └────┬─────┘                 └─────▲───────┘\r\n *    │               │                             │\r\n *    │            renders                        parent\r\n *    │               │                             │\r\n *    │          ┌────▼─────┐                 ┌─────┴───────┐\r\n *    └─────────►│ComponentB├────Injector────►│NodeInjectorB│\r\n *               └──────────┘                 └─────────────┘\r\n *```\r\n *\r\n * @param injector an Injector to get the parent of\r\n * @returns Injector the parent of the given injector\r\n */\r\nfunction getInjectorParent(injector) {\r\n    if (injector instanceof R3Injector) {\r\n        return injector.parent;\r\n    }\r\n    let tNode;\r\n    let lView;\r\n    if (injector instanceof NodeInjector) {\r\n        tNode = getNodeInjectorTNode(injector);\r\n        lView = getNodeInjectorLView(injector);\r\n    }\r\n    else if (injector instanceof NullInjector) {\r\n        return null;\r\n    }\r\n    else if (injector instanceof ChainedInjector) {\r\n        return injector.parentInjector;\r\n    }\r\n    else {\r\n        throwError('getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector');\r\n    }\r\n    const parentLocation = getParentInjectorLocation(tNode, lView);\r\n    if (hasParentInjector(parentLocation)) {\r\n        const parentInjectorIndex = getParentInjectorIndex(parentLocation);\r\n        const parentLView = getParentInjectorView(parentLocation, lView);\r\n        const parentTView = parentLView[TVIEW];\r\n        const parentTNode = parentTView.data[parentInjectorIndex + 8 /* NodeInjectorOffset.TNODE */];\r\n        return new NodeInjector(parentTNode, parentLView);\r\n    }\r\n    else {\r\n        const chainedInjector = lView[INJECTOR];\r\n        // Case where chainedInjector.injector is an OutletInjector and chainedInjector.injector.parent\r\n        // is a NodeInjector.\r\n        // todo(aleksanderbodurri): ideally nothing in packages/core should deal\r\n        // directly with router concerns. Refactor this so that we can make the jump from\r\n        // NodeInjector -> OutletInjector -> NodeInjector\r\n        // without explicitly relying on types contracts from packages/router\r\n        const injectorParent = chainedInjector.injector?.parent;\r\n        if (injectorParent instanceof NodeInjector) {\r\n            return injectorParent;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Gets the module injector of a NodeInjector.\r\n *\r\n * @param injector NodeInjector to get module injector of\r\n * @returns Injector representing module injector of the given NodeInjector\r\n */\r\nfunction getModuleInjectorOfNodeInjector(injector) {\r\n    let lView;\r\n    if (injector instanceof NodeInjector) {\r\n        lView = getNodeInjectorLView(injector);\r\n    }\r\n    else {\r\n        throwError('getModuleInjectorOfNodeInjector must be called with a NodeInjector');\r\n    }\r\n    const inj = lView[INJECTOR];\r\n    const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;\r\n    if (!moduleInjector) {\r\n        throwError('NodeInjector must have some connection to the module injector tree');\r\n    }\r\n    return moduleInjector;\r\n}\r\n\r\nfunction isComputedNode(node) {\r\n    return node.kind === 'computed';\r\n}\r\nfunction isTemplateEffectNode(node) {\r\n    return node.kind === 'template';\r\n}\r\nfunction isEffectNode(node) {\r\n    return node.kind === 'effect';\r\n}\r\nfunction isSignalNode(node) {\r\n    return node.kind === 'signal';\r\n}\r\n/**\r\n *\r\n * @param injector\r\n * @returns Template consumer of given NodeInjector\r\n */\r\nfunction getTemplateConsumer(injector) {\r\n    const tNode = getNodeInjectorTNode(injector);\r\n    assertTNode(tNode);\r\n    const lView = getNodeInjectorLView(injector);\r\n    assertLView(lView);\r\n    const templateLView = lView[tNode.index];\r\n    if (isLView(templateLView)) {\r\n        return templateLView[REACTIVE_TEMPLATE_CONSUMER] ?? null;\r\n    }\r\n    return null;\r\n}\r\nfunction getNodesAndEdgesFromSignalMap(signalMap) {\r\n    const nodes = Array.from(signalMap.keys());\r\n    const debugSignalGraphNodes = [];\r\n    const edges = [];\r\n    for (const [consumer, producers] of signalMap.entries()) {\r\n        const consumerIndex = nodes.indexOf(consumer);\r\n        // collect node\r\n        if (isComputedNode(consumer) || isSignalNode(consumer)) {\r\n            debugSignalGraphNodes.push({\r\n                label: consumer.debugName,\r\n                value: consumer.value,\r\n                kind: consumer.kind,\r\n            });\r\n        }\r\n        else if (isTemplateEffectNode(consumer)) {\r\n            debugSignalGraphNodes.push({\r\n                label: consumer.debugName ?? consumer.lView?.[HOST]?.tagName?.toLowerCase?.(),\r\n                kind: consumer.kind,\r\n            });\r\n        }\r\n        else if (isEffectNode(consumer)) {\r\n            debugSignalGraphNodes.push({\r\n                label: consumer.debugName,\r\n                kind: consumer.kind,\r\n            });\r\n        }\r\n        else {\r\n            debugSignalGraphNodes.push({\r\n                label: consumer.debugName,\r\n                kind: consumer.kind,\r\n            });\r\n        }\r\n        // collect edges for node\r\n        for (const producer of producers) {\r\n            edges.push({ consumer: consumerIndex, producer: nodes.indexOf(producer) });\r\n        }\r\n    }\r\n    return { nodes: debugSignalGraphNodes, edges };\r\n}\r\nfunction extractEffectsFromInjector(injector) {\r\n    let diResolver = injector;\r\n    if (injector instanceof NodeInjector) {\r\n        const lView = getNodeInjectorLView(injector);\r\n        diResolver = lView;\r\n    }\r\n    const resolverToEffects = getFrameworkDIDebugData().resolverToEffects;\r\n    const effects = resolverToEffects.get(diResolver) ?? [];\r\n    return effects.map((effect) => effect[SIGNAL]);\r\n}\r\nfunction extractSignalNodesAndEdgesFromRoots(nodes, signalDependenciesMap = new Map()) {\r\n    for (const node of nodes) {\r\n        if (signalDependenciesMap.has(node)) {\r\n            continue;\r\n        }\r\n        const producerNodes = (node.producerNode ?? []);\r\n        signalDependenciesMap.set(node, producerNodes);\r\n        extractSignalNodesAndEdgesFromRoots(producerNodes, signalDependenciesMap);\r\n    }\r\n    return signalDependenciesMap;\r\n}\r\n/**\r\n * Returns a debug representation of the signal graph for the given injector.\r\n *\r\n * Currently only supports element injectors. Starts by discovering the consumer nodes\r\n * and then traverses their producer nodes to build the signal graph.\r\n *\r\n * @param injector The injector to get the signal graph for.\r\n * @returns A debug representation of the signal graph.\r\n * @throws If the injector is an environment injector.\r\n */\r\nfunction getSignalGraph(injector) {\r\n    let templateConsumer = null;\r\n    if (!(injector instanceof NodeInjector) && !(injector instanceof R3Injector)) {\r\n        return throwError('getSignalGraph must be called with a NodeInjector or R3Injector');\r\n    }\r\n    if (injector instanceof NodeInjector) {\r\n        templateConsumer = getTemplateConsumer(injector);\r\n    }\r\n    const nonTemplateEffectNodes = extractEffectsFromInjector(injector);\r\n    const signalNodes = templateConsumer\r\n        ? [templateConsumer, ...nonTemplateEffectNodes]\r\n        : nonTemplateEffectNodes;\r\n    const signalDependenciesMap = extractSignalNodesAndEdgesFromRoots(signalNodes);\r\n    return getNodesAndEdgesFromSignalMap(signalDependenciesMap);\r\n}\r\n\r\nlet changeDetectionRuns = 0;\r\nlet changeDetectionSyncRuns = 0;\r\nlet counter = 0;\r\nconst eventsStack = [];\r\nfunction measureStart(startEvent) {\r\n    eventsStack.push([startEvent, counter]);\r\n    console.timeStamp('Event_' + startEvent + '_' + counter++);\r\n}\r\nfunction measureEnd(startEvent, entryName, color) {\r\n    const top = eventsStack.pop();\r\n    assertDefined(top, 'Profiling error: could not find start event entry ' + startEvent);\r\n    assertEqual(top[0], startEvent, `Profiling error: expected to see ${startEvent} event but got ${top[0]}`);\r\n    console.timeStamp(entryName, 'Event_' + top[0] + '_' + top[1], undefined, '\\u{1F170}\\uFE0F Angular', undefined, color);\r\n}\r\nconst chromeDevToolsInjectorProfiler = (event) => {\r\n    const eventType = event.type;\r\n    if (eventType === 4 /* InjectorProfilerEventType.InjectorToCreateInstanceEvent */) {\r\n        measureStart(100 /* ProfilerDIEvent.InjectorToCreateInstanceEvent */);\r\n    }\r\n    else if (eventType === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\r\n        const token = event.context.token;\r\n        measureEnd(100 /* ProfilerDIEvent.InjectorToCreateInstanceEvent */, getProviderTokenMeasureName(token), 'tertiary-dark');\r\n    }\r\n};\r\nconst devToolsProfiler = (event, instance, eventFn) => {\r\n    switch (event) {\r\n        case 8 /* ProfilerEvent.BootstrapApplicationStart */:\r\n        case 10 /* ProfilerEvent.BootstrapComponentStart */:\r\n        case 12 /* ProfilerEvent.ChangeDetectionStart */:\r\n        case 14 /* ProfilerEvent.ChangeDetectionSyncStart */:\r\n        case 16 /* ProfilerEvent.AfterRenderHooksStart */:\r\n        case 18 /* ProfilerEvent.ComponentStart */:\r\n        case 20 /* ProfilerEvent.DeferBlockStateStart */:\r\n        case 22 /* ProfilerEvent.DynamicComponentStart */:\r\n        case 0 /* ProfilerEvent.TemplateCreateStart */:\r\n        case 4 /* ProfilerEvent.LifecycleHookStart */:\r\n        case 2 /* ProfilerEvent.TemplateUpdateStart */:\r\n        case 24 /* ProfilerEvent.HostBindingsUpdateStart */:\r\n        case 6 /* ProfilerEvent.OutputStart */: {\r\n            measureStart(event);\r\n            break;\r\n        }\r\n        case 9 /* ProfilerEvent.BootstrapApplicationEnd */: {\r\n            measureEnd(8 /* ProfilerEvent.BootstrapApplicationStart */, 'Bootstrap application', 'primary-dark');\r\n            break;\r\n        }\r\n        case 11 /* ProfilerEvent.BootstrapComponentEnd */: {\r\n            measureEnd(10 /* ProfilerEvent.BootstrapComponentStart */, 'Bootstrap component', 'primary-dark');\r\n            break;\r\n        }\r\n        case 13 /* ProfilerEvent.ChangeDetectionEnd */: {\r\n            changeDetectionSyncRuns = 0;\r\n            measureEnd(12 /* ProfilerEvent.ChangeDetectionStart */, 'Change detection ' + changeDetectionRuns++, 'primary-dark');\r\n            break;\r\n        }\r\n        case 15 /* ProfilerEvent.ChangeDetectionSyncEnd */: {\r\n            measureEnd(14 /* ProfilerEvent.ChangeDetectionSyncStart */, 'Synchronization ' + changeDetectionSyncRuns++, 'primary');\r\n            break;\r\n        }\r\n        case 17 /* ProfilerEvent.AfterRenderHooksEnd */: {\r\n            measureEnd(16 /* ProfilerEvent.AfterRenderHooksStart */, 'After render hooks', 'primary');\r\n            break;\r\n        }\r\n        case 19 /* ProfilerEvent.ComponentEnd */: {\r\n            const typeName = getComponentMeasureName(instance);\r\n            measureEnd(18 /* ProfilerEvent.ComponentStart */, typeName, 'primary-light');\r\n            break;\r\n        }\r\n        case 21 /* ProfilerEvent.DeferBlockStateEnd */: {\r\n            measureEnd(20 /* ProfilerEvent.DeferBlockStateStart */, 'Defer block', 'primary-dark');\r\n            break;\r\n        }\r\n        case 23 /* ProfilerEvent.DynamicComponentEnd */: {\r\n            measureEnd(22 /* ProfilerEvent.DynamicComponentStart */, 'Dynamic component creation', 'primary-dark');\r\n            break;\r\n        }\r\n        case 3 /* ProfilerEvent.TemplateUpdateEnd */: {\r\n            measureEnd(2 /* ProfilerEvent.TemplateUpdateStart */, stringifyForError(eventFn) + ' (update)', 'secondary-dark');\r\n            break;\r\n        }\r\n        case 1 /* ProfilerEvent.TemplateCreateEnd */: {\r\n            measureEnd(0 /* ProfilerEvent.TemplateCreateStart */, stringifyForError(eventFn) + ' (create)', 'secondary');\r\n            break;\r\n        }\r\n        case 25 /* ProfilerEvent.HostBindingsUpdateEnd */: {\r\n            measureEnd(24 /* ProfilerEvent.HostBindingsUpdateStart */, 'HostBindings', 'secondary-dark');\r\n            break;\r\n        }\r\n        case 5 /* ProfilerEvent.LifecycleHookEnd */: {\r\n            const typeName = getComponentMeasureName(instance);\r\n            measureEnd(4 /* ProfilerEvent.LifecycleHookStart */, `${typeName}:${stringifyForError(eventFn)}`, 'tertiary');\r\n            break;\r\n        }\r\n        case 7 /* ProfilerEvent.OutputEnd */: {\r\n            measureEnd(6 /* ProfilerEvent.OutputStart */, stringifyForError(eventFn), 'tertiary-light');\r\n            break;\r\n        }\r\n        default: {\r\n            throw new Error('Unexpected profiling event type: ' + event);\r\n        }\r\n    }\r\n};\r\nfunction getComponentMeasureName(instance) {\r\n    return instance.constructor.name;\r\n}\r\nfunction getProviderTokenMeasureName(token) {\r\n    if (isTypeProvider(token)) {\r\n        return token.name;\r\n    }\r\n    else if (token.provide != null) {\r\n        return getProviderTokenMeasureName(token.provide);\r\n    }\r\n    return token.toString();\r\n}\r\n/**\r\n * Start listening to the Angular's internal performance-related events and route those to the Chrome DevTools performance panel.\r\n * This enables Angular-specific data visualization when recording a performance profile directly in the Chrome DevTools.\r\n *\r\n * Note: integration is enabled in the development mode only, this operation is noop in the production mode.\r\n *\r\n * @experimental\r\n *\r\n * @returns a function that can be invoked to stop sending profiling data.\r\n */\r\nfunction enableProfiling() {\r\n    performanceMarkFeature('Chrome DevTools profiling');\r\n    if (typeof ngDevMode !== 'undefined' && ngDevMode) {\r\n        const removeInjectorProfiler = setInjectorProfiler(chromeDevToolsInjectorProfiler);\r\n        const removeProfiler = setProfiler(devToolsProfiler);\r\n        return () => {\r\n            removeInjectorProfiler();\r\n            removeProfiler();\r\n        };\r\n    }\r\n    return () => { };\r\n}\r\n\r\n/// <reference path=\"../../../../goog.d.ts\" />\r\n/**\r\n * This file introduces series of globally accessible debug tools\r\n * to allow for the Angular debugging story to function.\r\n *\r\n * To see this in action run the following command:\r\n *\r\n *   bazel run //packages/core/test/bundling/todo:devserver\r\n *\r\n *  Then load `localhost:5432` and start using the console tools.\r\n */\r\n/**\r\n * This value reflects the property on the window where the dev\r\n * tools are patched (window.ng).\r\n * */\r\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\r\nconst globalUtilsFunctions = {\r\n    /**\r\n     * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon\r\n     * in application's code. The contract of those functions might be changed in any release and/or a\r\n     * function can be removed completely.\r\n     */\r\n    'ɵgetDependenciesFromInjectable': getDependenciesFromInjectable,\r\n    'ɵgetInjectorProviders': getInjectorProviders,\r\n    'ɵgetInjectorResolutionPath': getInjectorResolutionPath,\r\n    'ɵgetInjectorMetadata': getInjectorMetadata,\r\n    'ɵsetProfiler': setProfiler,\r\n    'ɵgetSignalGraph': getSignalGraph,\r\n    'ɵgetDeferBlocks': getDeferBlocks,\r\n    'getDirectiveMetadata': getDirectiveMetadata$1,\r\n    'getComponent': getComponent,\r\n    'getContext': getContext,\r\n    'getListeners': getListeners,\r\n    'getOwningComponent': getOwningComponent,\r\n    'getHostElement': getHostElement,\r\n    'getInjector': getInjector,\r\n    'getRootComponents': getRootComponents,\r\n    'getDirectives': getDirectives,\r\n    'applyChanges': applyChanges,\r\n    'isSignal': isSignal,\r\n    'enableProfiling': enableProfiling,\r\n};\r\nlet _published = false;\r\n/**\r\n * Publishes a collection of default debug tools onto`window.ng`.\r\n *\r\n * These functions are available globally when Angular is in development\r\n * mode and are automatically stripped away from prod mode is on.\r\n */\r\nfunction publishDefaultGlobalUtils$1() {\r\n    if (!_published) {\r\n        _published = true;\r\n        if (typeof window !== 'undefined') {\r\n            // Only configure the injector profiler when running in the browser.\r\n            setupFrameworkInjectorProfiler();\r\n        }\r\n        for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {\r\n            publishGlobalUtil(methodName, method);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Publishes the given function to `window.ng` so that it can be\r\n * used from the browser console when an application is not in production.\r\n */\r\nfunction publishGlobalUtil(name, fn) {\r\n    publishUtil(name, fn);\r\n}\r\n/**\r\n * Publishes the given function to `window.ng` from package other than @angular/core\r\n * So that it can be used from the browser console when an application is not in production.\r\n */\r\nfunction publishExternalGlobalUtil(name, fn) {\r\n    publishUtil(name, fn);\r\n}\r\nfunction publishUtil(name, fn) {\r\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\r\n        // Note: we can't export `ng` when using closure enhanced optimization as:\r\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\r\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\r\n        //   for typings for AngularJS (via `goog.provide('ng....')`).\r\n        const w = _global;\r\n        ngDevMode && assertDefined(fn, 'function not defined');\r\n        w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};\r\n        w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn;\r\n    }\r\n}\r\n\r\n/**\r\n * Internal injection token that can used to access an instance of a Testability class.\r\n *\r\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\r\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\r\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\r\n * should be available, this token is used to add a provider that references the `Testability`\r\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\r\n */\r\nconst TESTABILITY = new InjectionToken('');\r\n/**\r\n * Internal injection token to retrieve Testability getter class instance.\r\n */\r\nconst TESTABILITY_GETTER = new InjectionToken('');\r\n/**\r\n * The Testability service provides testing hooks that can be accessed from\r\n * the browser.\r\n *\r\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\r\n * instantiate Testability by default (in both development and production modes).\r\n *\r\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\r\n * included by default. You can include it into your applications by getting the list of necessary\r\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\r\n * `options.providers` array. Example:\r\n *\r\n * ```ts\r\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\r\n *\r\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass Testability {\r\n    _ngZone;\r\n    registry;\r\n    _isZoneStable = true;\r\n    _callbacks = [];\r\n    _taskTrackingZone = null;\r\n    _destroyRef;\r\n    constructor(_ngZone, registry, testabilityGetter) {\r\n        this._ngZone = _ngZone;\r\n        this.registry = registry;\r\n        // Attempt to retrieve a `DestroyRef` optionally.\r\n        // For backwards compatibility reasons, this cannot be required.\r\n        if (isInInjectionContext()) {\r\n            this._destroyRef = inject(DestroyRef, { optional: true }) ?? undefined;\r\n        }\r\n        // If there was no Testability logic registered in the global scope\r\n        // before, register the current testability getter as a global one.\r\n        if (!_testabilityGetter) {\r\n            setTestabilityGetter(testabilityGetter);\r\n            testabilityGetter.addToWindow(registry);\r\n        }\r\n        this._watchAngularEvents();\r\n        _ngZone.run(() => {\r\n            this._taskTrackingZone =\r\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\r\n        });\r\n    }\r\n    _watchAngularEvents() {\r\n        const onUnstableSubscription = this._ngZone.onUnstable.subscribe({\r\n            next: () => {\r\n                this._isZoneStable = false;\r\n            },\r\n        });\r\n        const onStableSubscription = this._ngZone.runOutsideAngular(() => this._ngZone.onStable.subscribe({\r\n            next: () => {\r\n                NgZone.assertNotInAngularZone();\r\n                queueMicrotask(() => {\r\n                    this._isZoneStable = true;\r\n                    this._runCallbacksIfReady();\r\n                });\r\n            },\r\n        }));\r\n        this._destroyRef?.onDestroy(() => {\r\n            onUnstableSubscription.unsubscribe();\r\n            onStableSubscription.unsubscribe();\r\n        });\r\n    }\r\n    /**\r\n     * Whether an associated application is stable\r\n     */\r\n    isStable() {\r\n        return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;\r\n    }\r\n    _runCallbacksIfReady() {\r\n        if (this.isStable()) {\r\n            // Schedules the call backs in a new frame so that it is always async.\r\n            queueMicrotask(() => {\r\n                while (this._callbacks.length !== 0) {\r\n                    let cb = this._callbacks.pop();\r\n                    clearTimeout(cb.timeoutId);\r\n                    cb.doneCb();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // Still not stable, send updates.\r\n            let pending = this.getPendingTasks();\r\n            this._callbacks = this._callbacks.filter((cb) => {\r\n                if (cb.updateCb && cb.updateCb(pending)) {\r\n                    clearTimeout(cb.timeoutId);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n    }\r\n    getPendingTasks() {\r\n        if (!this._taskTrackingZone) {\r\n            return [];\r\n        }\r\n        // Copy the tasks data so that we don't leak tasks.\r\n        return this._taskTrackingZone.macroTasks.map((t) => {\r\n            return {\r\n                source: t.source,\r\n                // From TaskTrackingZone:\r\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\r\n                creationLocation: t.creationLocation,\r\n                data: t.data,\r\n            };\r\n        });\r\n    }\r\n    addCallback(cb, timeout, updateCb) {\r\n        let timeoutId = -1;\r\n        if (timeout && timeout > 0) {\r\n            timeoutId = setTimeout(() => {\r\n                this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\r\n                cb();\r\n            }, timeout);\r\n        }\r\n        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\r\n    }\r\n    /**\r\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n     *\r\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\r\n     *    whichever comes first.\r\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n     *    specified, whenStable() will wait forever.\r\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n     *    and no further updates will be issued.\r\n     */\r\n    whenStable(doneCb, timeout, updateCb) {\r\n        if (updateCb && !this._taskTrackingZone) {\r\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\r\n                'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\r\n        }\r\n        this.addCallback(doneCb, timeout, updateCb);\r\n        this._runCallbacksIfReady();\r\n    }\r\n    /**\r\n     * Registers an application with a testability hook so that it can be tracked.\r\n     * @param token token of application, root element\r\n     *\r\n     * @internal\r\n     */\r\n    registerApplication(token) {\r\n        this.registry.registerApplication(token, this);\r\n    }\r\n    /**\r\n     * Unregisters an application.\r\n     * @param token token of application, root element\r\n     *\r\n     * @internal\r\n     */\r\n    unregisterApplication(token) {\r\n        this.registry.unregisterApplication(token);\r\n    }\r\n    /**\r\n     * Find providers by name\r\n     * @param using The root element to search from\r\n     * @param provider The name of binding variable\r\n     * @param exactMatch Whether using exactMatch\r\n     */\r\n    findProviders(using, provider, exactMatch) {\r\n        // TODO(juliemr): implement.\r\n        return [];\r\n    }\r\n    static ɵfac = function Testability_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || Testability)(__inject(NgZone), __inject(TestabilityRegistry), __inject(TESTABILITY_GETTER)); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: Testability, factory: Testability.ɵfac });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\r\n        type: Injectable\r\n    }], () => [{ type: NgZone }, { type: TestabilityRegistry }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [TESTABILITY_GETTER]\r\n            }] }], null); })();\r\n/**\r\n * A global registry of {@link Testability} instances for specific elements.\r\n * @publicApi\r\n */\r\nclass TestabilityRegistry {\r\n    /** @internal */\r\n    _applications = new Map();\r\n    /**\r\n     * Registers an application with a testability hook so that it can be tracked\r\n     * @param token token of application, root element\r\n     * @param testability Testability hook\r\n     */\r\n    registerApplication(token, testability) {\r\n        this._applications.set(token, testability);\r\n    }\r\n    /**\r\n     * Unregisters an application.\r\n     * @param token token of application, root element\r\n     */\r\n    unregisterApplication(token) {\r\n        this._applications.delete(token);\r\n    }\r\n    /**\r\n     * Unregisters all applications\r\n     */\r\n    unregisterAllApplications() {\r\n        this._applications.clear();\r\n    }\r\n    /**\r\n     * Get a testability hook associated with the application\r\n     * @param elem root element\r\n     */\r\n    getTestability(elem) {\r\n        return this._applications.get(elem) || null;\r\n    }\r\n    /**\r\n     * Get all registered testabilities\r\n     */\r\n    getAllTestabilities() {\r\n        return Array.from(this._applications.values());\r\n    }\r\n    /**\r\n     * Get all registered applications(root elements)\r\n     */\r\n    getAllRootElements() {\r\n        return Array.from(this._applications.keys());\r\n    }\r\n    /**\r\n     * Find testability of a node in the Tree\r\n     * @param elem node\r\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\r\n     * current node\r\n     */\r\n    findTestabilityInTree(elem, findInAncestors = true) {\r\n        return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\r\n    }\r\n    static ɵfac = function TestabilityRegistry_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || TestabilityRegistry)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: TestabilityRegistry, factory: TestabilityRegistry.ɵfac, providedIn: 'platform' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'platform' }]\r\n    }], null, null); })();\r\n/**\r\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\r\n * @publicApi\r\n */\r\nfunction setTestabilityGetter(getter) {\r\n    _testabilityGetter = getter;\r\n}\r\nlet _testabilityGetter;\r\n\r\n/**\r\n * Determine if the argument is shaped like a Promise\r\n */\r\nfunction isPromise(obj) {\r\n    // allow any Promise/A+ compliant thenable.\r\n    // It's up to the caller to ensure that obj.then conforms to the spec\r\n    return !!obj && typeof obj.then === 'function';\r\n}\r\n/**\r\n * Determine if the argument is a Subscribable\r\n */\r\nfunction isSubscribable(obj) {\r\n    return !!obj && typeof obj.subscribe === 'function';\r\n}\r\n\r\n/**\r\n * A DI token that you can use to provide\r\n * one or more initialization functions.\r\n *\r\n * The provided functions are injected at application startup and executed during\r\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\r\n * does not complete until the Promise is resolved or the Observable is completed.\r\n *\r\n * You can, for example, create a factory function that loads language data\r\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\r\n * The function is executed during the application bootstrap process,\r\n * and the needed data is available on startup.\r\n *\r\n * Note that the provided initializer is run in the injection context.\r\n *\r\n * @deprecated from v19.0.0, use provideAppInitializer instead\r\n *\r\n * @see {@link ApplicationInitStatus}\r\n * @see {@link provideAppInitializer}\r\n *\r\n * @usageNotes\r\n *\r\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\r\n * and a function returning a promise.\r\n * ### Example with NgModule-based application\r\n * ```ts\r\n *  function initializeApp(): Promise<any> {\r\n *    const http = inject(HttpClient);\r\n *    return firstValueFrom(\r\n *      http\r\n *        .get(\"https://someUrl.com/api/user\")\r\n *        .pipe(tap(user => { ... }))\r\n *    );\r\n *  }\r\n *\r\n *  @NgModule({\r\n *   imports: [BrowserModule],\r\n *   declarations: [AppComponent],\r\n *   bootstrap: [AppComponent],\r\n *   providers: [{\r\n *     provide: APP_INITIALIZER,\r\n *     useValue: initializeApp,\r\n *     multi: true,\r\n *    }]\r\n *   })\r\n *  export class AppModule {}\r\n * ```\r\n *\r\n * ### Example with standalone application\r\n * ```ts\r\n * function initializeApp() {\r\n *   const http = inject(HttpClient);\r\n *   return firstValueFrom(\r\n *     http\r\n *       .get(\"https://someUrl.com/api/user\")\r\n *       .pipe(tap(user => { ... }))\r\n *   );\r\n * }\r\n *\r\n * bootstrapApplication(App, {\r\n *   providers: [\r\n *     provideHttpClient(),\r\n *     {\r\n *       provide: APP_INITIALIZER,\r\n *       useValue: initializeApp,\r\n *       multi: true,\r\n *     },\r\n *   ],\r\n * });\r\n\r\n * ```\r\n *\r\n *\r\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\r\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\r\n * demo purposes to illustrate how the factory function can work with other providers available\r\n * through DI.\r\n *\r\n * ### Example with NgModule-based application\r\n * ```ts\r\n * function initializeApp() {\r\n *   const http = inject(HttpClient);\r\n *   return firstValueFrom(\r\n *     http\r\n *       .get(\"https://someUrl.com/api/user\")\r\n *       .pipe(tap(user => { ... }))\r\n *   );\r\n * }\r\n *\r\n * @NgModule({\r\n *   imports: [BrowserModule, HttpClientModule],\r\n *   declarations: [AppComponent],\r\n *   bootstrap: [AppComponent],\r\n *   providers: [{\r\n *     provide: APP_INITIALIZER,\r\n *     useValue: initializeApp,\r\n *     multi: true,\r\n *   }]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n *\r\n * ### Example with standalone application\r\n * ```ts\r\n * function initializeApp() {\r\n *   const http = inject(HttpClient);\r\n *   return firstValueFrom(\r\n *     http\r\n *       .get(\"https://someUrl.com/api/user\")\r\n *       .pipe(tap(user => { ... }))\r\n *   );\r\n * }\r\n *\r\n * bootstrapApplication(App, {\r\n *   providers: [\r\n *     provideHttpClient(),\r\n *     {\r\n *       provide: APP_INITIALIZER,\r\n *       useValue: initializeApp,\r\n *       multi: true,\r\n *     },\r\n *   ],\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nconst APP_INITIALIZER = new InjectionToken(ngDevMode ? 'Application Initializer' : '');\r\n/**\r\n * @description\r\n * The provided function is injected at application startup and executed during\r\n * app initialization. If the function returns a Promise or an Observable, initialization\r\n * does not complete until the Promise is resolved or the Observable is completed.\r\n *\r\n * You can, for example, create a function that loads language data\r\n * or an external configuration, and provide that function using `provideAppInitializer()`.\r\n * The function is executed during the application bootstrap process,\r\n * and the needed data is available on startup.\r\n *\r\n * Note that the provided initializer is run in the injection context.\r\n *\r\n * Previously, this was achieved using the `APP_INITIALIZER` token which is now deprecated.\r\n *\r\n * @see {@link APP_INITIALIZER}\r\n *\r\n * @usageNotes\r\n * The following example illustrates how to configure an initialization function using\r\n * `provideAppInitializer()`\r\n * ```ts\r\n * bootstrapApplication(App, {\r\n *   providers: [\r\n *     provideAppInitializer(() => {\r\n *       const http = inject(HttpClient);\r\n *       return firstValueFrom(\r\n *         http\r\n *           .get(\"https://someUrl.com/api/user\")\r\n *           .pipe(tap(user => { ... }))\r\n *       );\r\n *     }),\r\n *     provideHttpClient(),\r\n *   ],\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction provideAppInitializer(initializerFn) {\r\n    return makeEnvironmentProviders([\r\n        {\r\n            provide: APP_INITIALIZER,\r\n            multi: true,\r\n            useValue: initializerFn,\r\n        },\r\n    ]);\r\n}\r\n/**\r\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\r\n *\r\n * @publicApi\r\n */\r\nclass ApplicationInitStatus {\r\n    // Using non null assertion, these fields are defined below\r\n    // within the `new Promise` callback (synchronously).\r\n    resolve;\r\n    reject;\r\n    initialized = false;\r\n    done = false;\r\n    donePromise = new Promise((res, rej) => {\r\n        this.resolve = res;\r\n        this.reject = rej;\r\n    });\r\n    appInits = inject(APP_INITIALIZER, { optional: true }) ?? [];\r\n    injector = inject(Injector);\r\n    constructor() {\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\r\n            throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_INITIALIZER` token value ' +\r\n                `(expected an array, but got ${typeof this.appInits}). ` +\r\n                'Please check that the `APP_INITIALIZER` token is configured as a ' +\r\n                '`multi: true` provider.');\r\n        }\r\n    }\r\n    /** @internal */\r\n    runInitializers() {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        const asyncInitPromises = [];\r\n        for (const appInits of this.appInits) {\r\n            const initResult = runInInjectionContext(this.injector, appInits);\r\n            if (isPromise(initResult)) {\r\n                asyncInitPromises.push(initResult);\r\n            }\r\n            else if (isSubscribable(initResult)) {\r\n                const observableAsPromise = new Promise((resolve, reject) => {\r\n                    initResult.subscribe({ complete: resolve, error: reject });\r\n                });\r\n                asyncInitPromises.push(observableAsPromise);\r\n            }\r\n        }\r\n        const complete = () => {\r\n            // @ts-expect-error overwriting a readonly\r\n            this.done = true;\r\n            this.resolve();\r\n        };\r\n        Promise.all(asyncInitPromises)\r\n            .then(() => {\r\n            complete();\r\n        })\r\n            .catch((e) => {\r\n            this.reject(e);\r\n        });\r\n        if (asyncInitPromises.length === 0) {\r\n            complete();\r\n        }\r\n        this.initialized = true;\r\n    }\r\n    static ɵfac = function ApplicationInitStatus_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || ApplicationInitStatus)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: ApplicationInitStatus, factory: ApplicationInitStatus.ɵfac, providedIn: 'root' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], () => [], null); })();\r\n\r\n/**\r\n * A DI token that provides a set of callbacks to\r\n * be called for every component that is bootstrapped.\r\n *\r\n * Each callback must take a `ComponentRef` instance and return nothing.\r\n *\r\n * `(componentRef: ComponentRef) => void`\r\n *\r\n * @publicApi\r\n */\r\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken(ngDevMode ? 'appBootstrapListener' : '');\r\nfunction publishDefaultGlobalUtils() {\r\n    ngDevMode && publishDefaultGlobalUtils$1();\r\n}\r\n/**\r\n * Sets the error for an invalid write to a signal to be an Angular `RuntimeError`.\r\n */\r\nfunction publishSignalConfiguration() {\r\n    setThrowInvalidWriteToSignalError(() => {\r\n        let errorMessage = '';\r\n        if (ngDevMode) {\r\n            const activeConsumer = getActiveConsumer();\r\n            errorMessage =\r\n                activeConsumer && isReactiveLViewConsumer(activeConsumer)\r\n                    ? 'Writing to signals is not allowed while Angular renders the template (eg. interpolations)'\r\n                    : 'Writing to signals is not allowed in a `computed`';\r\n        }\r\n        throw new RuntimeError(600 /* RuntimeErrorCode.SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT */, errorMessage);\r\n    });\r\n}\r\nfunction isBoundToModule(cf) {\r\n    return cf.isBoundToModule;\r\n}\r\n/**\r\n * A token for third-party components that can register themselves with NgProbe.\r\n *\r\n * @deprecated\r\n * @publicApi\r\n */\r\nclass NgProbeToken {\r\n    name;\r\n    token;\r\n    constructor(name, token) {\r\n        this.name = name;\r\n        this.token = token;\r\n    }\r\n}\r\n/** Maximum number of times ApplicationRef will refresh all attached views in a single tick. */\r\nconst MAXIMUM_REFRESH_RERUNS = 10;\r\nfunction optionsReducer(dst, objs) {\r\n    if (Array.isArray(objs)) {\r\n        return objs.reduce(optionsReducer, dst);\r\n    }\r\n    return { ...dst, ...objs };\r\n}\r\n/**\r\n * A reference to an Angular application running on a page.\r\n *\r\n * @usageNotes\r\n * ### isStable examples and caveats\r\n *\r\n * Note two important points about `isStable`, demonstrated in the examples below:\r\n * - the application will never be stable if you start any kind\r\n * of recurrent asynchronous task when the application starts\r\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\r\n * or using RxJS operators like `interval`);\r\n * - the `isStable` Observable runs outside of the Angular zone.\r\n *\r\n * Let's imagine that you start a recurrent task\r\n * (here incrementing a counter, using RxJS `interval`),\r\n * and at the same time subscribe to `isStable`.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef) {\r\n *   appRef.isStable.pipe(\r\n *      filter(stable => stable)\r\n *   ).subscribe(() => console.log('App is stable now');\r\n *   interval(1000).subscribe(counter => console.log(counter));\r\n * }\r\n * ```\r\n * In this example, `isStable` will never emit `true`,\r\n * and the trace \"App is stable now\" will never get logged.\r\n *\r\n * If you want to execute something when the app is stable,\r\n * you have to wait for the application to be stable\r\n * before starting your polling process.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     tap(stable => console.log('App is stable now')),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => console.log(counter));\r\n * }\r\n * ```\r\n * In this example, the trace \"App is stable now\" will be logged\r\n * and then the counter starts incrementing every second.\r\n *\r\n * Note also that this Observable runs outside of the Angular zone,\r\n * which means that the code in the subscription\r\n * to this Observable will not trigger the change detection.\r\n *\r\n * Let's imagine that instead of logging the counter value,\r\n * you update a field of your component\r\n * and display it in its template.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => this.value = counter);\r\n * }\r\n * ```\r\n * As the `isStable` Observable runs outside the zone,\r\n * the `value` field will be updated properly,\r\n * but the template will not be refreshed!\r\n *\r\n * You'll have to manually trigger the change detection to update the template.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => {\r\n *     this.value = counter;\r\n *     cd.detectChanges();\r\n *   });\r\n * }\r\n * ```\r\n *\r\n * Or make the subscription callback run inside the zone.\r\n *\r\n * ```ts\r\n * constructor(appRef: ApplicationRef, zone: NgZone) {\r\n *   appRef.isStable.pipe(\r\n *     first(stable => stable),\r\n *     switchMap(() => interval(1000))\r\n *   ).subscribe(counter => zone.run(() => this.value = counter));\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass ApplicationRef {\r\n    /** @internal */\r\n    _runningTick = false;\r\n    _destroyed = false;\r\n    _destroyListeners = [];\r\n    /** @internal */\r\n    _views = [];\r\n    internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\r\n    afterRenderManager = inject(AfterRenderManager);\r\n    zonelessEnabled = inject(ZONELESS_ENABLED);\r\n    rootEffectScheduler = inject(EffectScheduler);\r\n    /**\r\n     * Current dirty state of the application across a number of dimensions (views, afterRender hooks,\r\n     * etc).\r\n     *\r\n     * A flag set here means that `tick()` will attempt to resolve the dirtiness when executed.\r\n     *\r\n     * @internal\r\n     */\r\n    dirtyFlags = 0 /* ApplicationRefDirtyFlags.None */;\r\n    /**\r\n     * Most recent snapshot from the `TracingService`, if any.\r\n     *\r\n     * This snapshot attempts to capture the context when `tick()` was first\r\n     * scheduled. It then runs wrapped in this context.\r\n     *\r\n     * @internal\r\n     */\r\n    tracingSnapshot = null;\r\n    // Needed for ComponentFixture temporarily during migration of autoDetect behavior\r\n    // Eventually the hostView of the fixture should just attach to ApplicationRef.\r\n    allTestViews = new Set();\r\n    autoDetectTestViews = new Set();\r\n    includeAllTestViews = false;\r\n    /** @internal */\r\n    afterTick = new Subject();\r\n    /** @internal */\r\n    get allViews() {\r\n        return [\r\n            ...(this.includeAllTestViews ? this.allTestViews : this.autoDetectTestViews).keys(),\r\n            ...this._views,\r\n        ];\r\n    }\r\n    /**\r\n     * Indicates whether this instance was destroyed.\r\n     */\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    /**\r\n     * Get a list of component types registered to this application.\r\n     * This list is populated even before the component is created.\r\n     */\r\n    componentTypes = [];\r\n    /**\r\n     * Get a list of components registered to this application.\r\n     */\r\n    components = [];\r\n    internalPendingTask = inject(PendingTasksInternal);\r\n    /**\r\n     * Returns an Observable that indicates when the application is stable or unstable.\r\n     */\r\n    get isStable() {\r\n        // This is a getter because it might be invoked after the application has been destroyed.\r\n        return this.internalPendingTask.hasPendingTasksObservable.pipe(map((pending) => !pending));\r\n    }\r\n    constructor() {\r\n        // Inject the tracing service to initialize it.\r\n        inject(TracingService, { optional: true });\r\n    }\r\n    /**\r\n     * @returns A promise that resolves when the application becomes stable\r\n     */\r\n    whenStable() {\r\n        let subscription;\r\n        return new Promise((resolve) => {\r\n            subscription = this.isStable.subscribe({\r\n                next: (stable) => {\r\n                    if (stable) {\r\n                        resolve();\r\n                    }\r\n                },\r\n            });\r\n        }).finally(() => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n    _injector = inject(EnvironmentInjector);\r\n    _rendererFactory = null;\r\n    /**\r\n     * The `EnvironmentInjector` used to create this application.\r\n     */\r\n    get injector() {\r\n        return this._injector;\r\n    }\r\n    /**\r\n     * Bootstrap a component onto the element identified by its selector or, optionally, to a\r\n     * specified element.\r\n     *\r\n     * @usageNotes\r\n     * ### Bootstrap process\r\n     *\r\n     * When bootstrapping a component, Angular mounts it onto a target DOM element\r\n     * and kicks off automatic change detection. The target DOM element can be\r\n     * provided using the `rootSelectorOrNode` argument.\r\n     *\r\n     * If the target DOM element is not provided, Angular tries to find one on a page\r\n     * using the `selector` of the component that is being bootstrapped\r\n     * (first matched element is used).\r\n     *\r\n     * ### Example\r\n     *\r\n     * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\r\n     * but it requires us to know the component while writing the application code.\r\n     *\r\n     * Imagine a situation where we have to wait for an API call to decide about the component to\r\n     * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\r\n     * dynamically bootstrap a component.\r\n     *\r\n     * {@example core/ts/platform/platform.ts region='componentSelector'}\r\n     *\r\n     * Optionally, a component can be mounted onto a DOM element that does not match the\r\n     * selector of the bootstrapped component.\r\n     *\r\n     * In the following example, we are providing a CSS selector to match the target element.\r\n     *\r\n     * {@example core/ts/platform/platform.ts region='cssSelector'}\r\n     *\r\n     * While in this example, we are providing reference to a DOM node.\r\n     *\r\n     * {@example core/ts/platform/platform.ts region='domNode'}\r\n     */\r\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\r\n        return this.bootstrapImpl(componentOrFactory, rootSelectorOrNode);\r\n    }\r\n    bootstrapImpl(componentOrFactory, rootSelectorOrNode, injector = Injector.NULL) {\r\n        const ngZone = this._injector.get(NgZone);\r\n        return ngZone.run(() => {\r\n            profiler(10 /* ProfilerEvent.BootstrapComponentStart */);\r\n            (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\r\n            const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;\r\n            const initStatus = this._injector.get(ApplicationInitStatus);\r\n            if (!initStatus.done) {\r\n                let errorMessage = '';\r\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                    const standalone = !isComponentFactory && isStandalone(componentOrFactory);\r\n                    errorMessage =\r\n                        'Cannot bootstrap as there are still asynchronous initializers running.' +\r\n                            (standalone\r\n                                ? ''\r\n                                : ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\r\n                }\r\n                throw new RuntimeError(405 /* RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING */, errorMessage);\r\n            }\r\n            let componentFactory;\r\n            if (isComponentFactory) {\r\n                componentFactory = componentOrFactory;\r\n            }\r\n            else {\r\n                const resolver = this._injector.get(ComponentFactoryResolver$1);\r\n                componentFactory = resolver.resolveComponentFactory(componentOrFactory);\r\n            }\r\n            this.componentTypes.push(componentFactory.componentType);\r\n            // Create a factory associated with the current module if it's not bound to some other\r\n            const ngModule = isBoundToModule(componentFactory)\r\n                ? undefined\r\n                : this._injector.get(NgModuleRef$1);\r\n            const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\r\n            const compRef = componentFactory.create(injector, [], selectorOrNode, ngModule);\r\n            const nativeElement = compRef.location.nativeElement;\r\n            const testability = compRef.injector.get(TESTABILITY, null);\r\n            testability?.registerApplication(nativeElement);\r\n            compRef.onDestroy(() => {\r\n                this.detachView(compRef.hostView);\r\n                remove(this.components, compRef);\r\n                testability?.unregisterApplication(nativeElement);\r\n            });\r\n            this._loadComponent(compRef);\r\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                const _console = this._injector.get(Console);\r\n                _console.log(`Angular is running in development mode.`);\r\n            }\r\n            profiler(11 /* ProfilerEvent.BootstrapComponentEnd */, compRef);\r\n            return compRef;\r\n        });\r\n    }\r\n    /**\r\n     * Invoke this method to explicitly process change detection and its side-effects.\r\n     *\r\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n     * further changes are detected. If additional changes are picked up during this second cycle,\r\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n     * pass.\r\n     * In this case, Angular throws an error, since an Angular application can only have one change\r\n     * detection pass during which all change detection must complete.\r\n     */\r\n    tick() {\r\n        if (!this.zonelessEnabled) {\r\n            this.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\r\n        }\r\n        this._tick();\r\n    }\r\n    /** @internal */\r\n    _tick() {\r\n        profiler(12 /* ProfilerEvent.ChangeDetectionStart */);\r\n        if (this.tracingSnapshot !== null) {\r\n            // Ensure we always run `tickImpl()` in the context of the most recent snapshot,\r\n            // if one exists. Snapshots may be reference counted by the implementation so\r\n            // we want to ensure that if we request a snapshot that we use it.\r\n            this.tracingSnapshot.run(TracingAction.CHANGE_DETECTION, this.tickImpl);\r\n        }\r\n        else {\r\n            this.tickImpl();\r\n        }\r\n    }\r\n    tickImpl = () => {\r\n        (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\r\n        if (this._runningTick) {\r\n            throw new RuntimeError(101 /* RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK */, ngDevMode && 'ApplicationRef.tick is called recursively');\r\n        }\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            this._runningTick = true;\r\n            this.synchronize();\r\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                for (let view of this.allViews) {\r\n                    view.checkNoChanges();\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._runningTick = false;\r\n            this.tracingSnapshot?.dispose();\r\n            this.tracingSnapshot = null;\r\n            setActiveConsumer(prevConsumer);\r\n            this.afterTick.next();\r\n            profiler(13 /* ProfilerEvent.ChangeDetectionEnd */);\r\n        }\r\n    };\r\n    /**\r\n     * Performs the core work of synchronizing the application state with the UI, resolving any\r\n     * pending dirtiness (potentially in a loop).\r\n     */\r\n    synchronize() {\r\n        if (this._rendererFactory === null && !this._injector.destroyed) {\r\n            this._rendererFactory = this._injector.get(RendererFactory2, null, { optional: true });\r\n        }\r\n        let runs = 0;\r\n        while (this.dirtyFlags !== 0 /* ApplicationRefDirtyFlags.None */ && runs++ < MAXIMUM_REFRESH_RERUNS) {\r\n            profiler(14 /* ProfilerEvent.ChangeDetectionSyncStart */);\r\n            this.synchronizeOnce();\r\n            profiler(15 /* ProfilerEvent.ChangeDetectionSyncEnd */);\r\n        }\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {\r\n            throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode &&\r\n                'Infinite change detection while refreshing application views. ' +\r\n                    'Ensure views are not calling `markForCheck` on every template execution or ' +\r\n                    'that afterRender hooks always mark views for check.');\r\n        }\r\n    }\r\n    /**\r\n     * Perform a single synchronization pass.\r\n     */\r\n    synchronizeOnce() {\r\n        // First, process any dirty root effects.\r\n        if (this.dirtyFlags & 16 /* ApplicationRefDirtyFlags.RootEffects */) {\r\n            this.dirtyFlags &= ~16 /* ApplicationRefDirtyFlags.RootEffects */;\r\n            this.rootEffectScheduler.flush();\r\n        }\r\n        // First check dirty views, if there are any.\r\n        let ranDetectChanges = false;\r\n        if (this.dirtyFlags & 7 /* ApplicationRefDirtyFlags.ViewTreeAny */) {\r\n            // Change detection on views starts in targeted mode (only check components if they're\r\n            // marked as dirty) unless global checking is specifically requested via APIs like\r\n            // `ApplicationRef.tick()` and the `NgZone` integration.\r\n            const useGlobalCheck = Boolean(this.dirtyFlags & 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */);\r\n            // Clear the view-related dirty flags.\r\n            this.dirtyFlags &= ~7 /* ApplicationRefDirtyFlags.ViewTreeAny */;\r\n            // Set the AfterRender bit, as we're checking views and will need to run afterRender hooks.\r\n            this.dirtyFlags |= 8 /* ApplicationRefDirtyFlags.AfterRender */;\r\n            // Check all potentially dirty views.\r\n            for (let { _lView } of this.allViews) {\r\n                // When re-checking, only check views which actually need it.\r\n                if (!useGlobalCheck && !requiresRefreshOrTraversal(_lView)) {\r\n                    continue;\r\n                }\r\n                const mode = useGlobalCheck && !this.zonelessEnabled\r\n                    ? // Global mode includes `CheckAlways` views.\r\n                        0 /* ChangeDetectionMode.Global */\r\n                    : // Only refresh views with the `RefreshView` flag or views is a changed signal\r\n                        1 /* ChangeDetectionMode.Targeted */;\r\n                detectChangesInternal(_lView, mode);\r\n                ranDetectChanges = true;\r\n            }\r\n            // If `markForCheck()` was called during view checking, it will have set the `ViewTreeCheck`\r\n            // flag. We clear the flag here because, for backwards compatibility, `markForCheck()`\r\n            // during view checking doesn't cause the view to be re-checked.\r\n            this.dirtyFlags &= ~4 /* ApplicationRefDirtyFlags.ViewTreeCheck */;\r\n            // Check if any views are still dirty after checking and we need to loop back.\r\n            this.syncDirtyFlagsWithViews();\r\n            if (this.dirtyFlags &\r\n                (7 /* ApplicationRefDirtyFlags.ViewTreeAny */ | 16 /* ApplicationRefDirtyFlags.RootEffects */)) {\r\n                // If any views or effects are still dirty after checking, loop back before running render\r\n                // hooks.\r\n                return;\r\n            }\r\n        }\r\n        if (!ranDetectChanges) {\r\n            // If we skipped refreshing views above, there might still be unflushed animations\r\n            // because we never called `detectChangesInternal` on the views.\r\n            this._rendererFactory?.begin?.();\r\n            this._rendererFactory?.end?.();\r\n        }\r\n        // Even if there were no dirty views, afterRender hooks might still be dirty.\r\n        if (this.dirtyFlags & 8 /* ApplicationRefDirtyFlags.AfterRender */) {\r\n            this.dirtyFlags &= ~8 /* ApplicationRefDirtyFlags.AfterRender */;\r\n            this.afterRenderManager.execute();\r\n            // afterRender hooks might influence dirty flags.\r\n        }\r\n        this.syncDirtyFlagsWithViews();\r\n    }\r\n    /**\r\n     * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`\r\n     * accordingly, with two potential behaviors:\r\n     *\r\n     * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.\r\n     *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the\r\n     *    view was marked as needing updating.\r\n     *\r\n     *    TODO(alxhub): figure out if this behavior is still needed for edge cases.\r\n     *\r\n     * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This\r\n     *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't\r\n     *    reachable through traversal from our roots (e.g. it's detached from the CD tree).\r\n     */\r\n    syncDirtyFlagsWithViews() {\r\n        if (this.allViews.some(({ _lView }) => requiresRefreshOrTraversal(_lView))) {\r\n            // If after running all afterRender callbacks new views are dirty, ensure we loop back.\r\n            this.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\r\n            return;\r\n        }\r\n        else {\r\n            // Even though this flag may be set, none of _our_ views require traversal, and so the\r\n            // `ApplicationRef` doesn't require any repeated checking.\r\n            this.dirtyFlags &= ~7 /* ApplicationRefDirtyFlags.ViewTreeAny */;\r\n        }\r\n    }\r\n    /**\r\n     * Attaches a view so that it will be dirty checked.\r\n     * The view will be automatically detached when it is destroyed.\r\n     * This will throw if the view is already attached to a ViewContainer.\r\n     */\r\n    attachView(viewRef) {\r\n        (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\r\n        const view = viewRef;\r\n        this._views.push(view);\r\n        view.attachToAppRef(this);\r\n    }\r\n    /**\r\n     * Detaches a view from dirty checking again.\r\n     */\r\n    detachView(viewRef) {\r\n        (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\r\n        const view = viewRef;\r\n        remove(this._views, view);\r\n        view.detachFromAppRef();\r\n    }\r\n    _loadComponent(componentRef) {\r\n        this.attachView(componentRef.hostView);\r\n        try {\r\n            this.tick();\r\n        }\r\n        catch (e) {\r\n            this.internalErrorHandler(e);\r\n        }\r\n        this.components.push(componentRef);\r\n        // Get the listeners lazily to prevent DI cycles.\r\n        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\r\n        if (ngDevMode && !Array.isArray(listeners)) {\r\n            throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' +\r\n                `(expected an array, but got ${typeof listeners}). ` +\r\n                'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' +\r\n                '`multi: true` provider.');\r\n        }\r\n        listeners.forEach((listener) => listener(componentRef));\r\n    }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        if (this._destroyed)\r\n            return;\r\n        try {\r\n            // Call all the lifecycle hooks.\r\n            this._destroyListeners.forEach((listener) => listener());\r\n            // Destroy all registered views.\r\n            this._views.slice().forEach((view) => view.destroy());\r\n        }\r\n        finally {\r\n            // Indicate that this instance is destroyed.\r\n            this._destroyed = true;\r\n            // Release all references.\r\n            this._views = [];\r\n            this._destroyListeners = [];\r\n        }\r\n    }\r\n    /**\r\n     * Registers a listener to be called when an instance is destroyed.\r\n     *\r\n     * @param callback A callback function to add as a listener.\r\n     * @returns A function which unregisters a listener.\r\n     */\r\n    onDestroy(callback) {\r\n        (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\r\n        this._destroyListeners.push(callback);\r\n        return () => remove(this._destroyListeners, callback);\r\n    }\r\n    /**\r\n     * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\r\n     * will destroy the associated environment injectors as well as all the bootstrapped components\r\n     * with their views.\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            throw new RuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\r\n        }\r\n        const injector = this._injector;\r\n        // Check that this injector instance supports destroy operation.\r\n        if (injector.destroy && !injector.destroyed) {\r\n            // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\r\n            // hook, which invokes the remaining cleanup actions.\r\n            injector.destroy();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the number of attached views.\r\n     */\r\n    get viewCount() {\r\n        return this._views.length;\r\n    }\r\n    static ɵfac = function ApplicationRef_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || ApplicationRef)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: ApplicationRef, factory: ApplicationRef.ɵfac, providedIn: 'root' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], () => [], null); })();\r\nfunction warnIfDestroyed(destroyed) {\r\n    if (destroyed) {\r\n        console.warn(formatRuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, 'This instance of the `ApplicationRef` has already been destroyed.'));\r\n    }\r\n}\r\nfunction remove(list, el) {\r\n    const index = list.indexOf(el);\r\n    if (index > -1) {\r\n        list.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * Schedules triggering of a defer block for `on idle` and `on timer` conditions.\r\n */\r\nfunction scheduleDelayedTrigger(scheduleFn) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    renderPlaceholder(lView, tNode);\r\n    // Exit early to avoid invoking `scheduleFn`, which would\r\n    // add `setTimeout` call and potentially delay serialization\r\n    // on the server unnecessarily.\r\n    if (!shouldTriggerDeferBlock(0 /* TriggerType.Regular */, lView))\r\n        return;\r\n    const injector = lView[INJECTOR];\r\n    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n    const cleanupFn = scheduleFn(() => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), injector);\r\n    storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, cleanupFn);\r\n}\r\n/**\r\n * Schedules prefetching for `on idle` and `on timer` triggers.\r\n *\r\n * @param scheduleFn A function that does the scheduling.\r\n */\r\nfunction scheduleDelayedPrefetching(scheduleFn, trigger) {\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode)\r\n        return;\r\n    const lView = getLView();\r\n    const injector = lView[INJECTOR];\r\n    // Only trigger the scheduled trigger on the browser\r\n    // since we don't want to delay the server response.\r\n    const tNode = getCurrentTNode();\r\n    const tView = lView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\r\n        const lDetails = getLDeferBlockDetails(lView, tNode);\r\n        const prefetch = () => triggerPrefetching(tDetails, lView, tNode);\r\n        const cleanupFn = scheduleFn(prefetch, injector);\r\n        storeTriggerCleanupFn(1 /* TriggerType.Prefetch */, lDetails, cleanupFn);\r\n    }\r\n}\r\n/**\r\n * Schedules hydration triggering of a defer block for `on idle` and `on timer` conditions.\r\n */\r\nfunction scheduleDelayedHydrating(scheduleFn, lView, tNode) {\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode)\r\n        return;\r\n    // Only trigger the scheduled trigger on the browser\r\n    // since we don't want to delay the server response.\r\n    const injector = lView[INJECTOR];\r\n    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n    const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\r\n    ngDevMode && assertSsrIdDefined(ssrUniqueId);\r\n    const cleanupFn = scheduleFn(() => triggerHydrationFromBlockName(injector, ssrUniqueId), injector);\r\n    storeTriggerCleanupFn(2 /* TriggerType.Hydrate */, lDetails, cleanupFn);\r\n}\r\n/**\r\n * Trigger prefetching of dependencies for a defer block.\r\n *\r\n * @param tDetails Static information about this defer block.\r\n * @param lView LView of a host view.\r\n * @param tNode TNode that represents a defer block.\r\n */\r\nfunction triggerPrefetching(tDetails, lView, tNode) {\r\n    triggerResourceLoading(tDetails, lView, tNode);\r\n}\r\n/**\r\n * Trigger loading of defer block dependencies if the process hasn't started yet.\r\n *\r\n * @param tDetails Static information about this defer block.\r\n * @param lView LView of a host view.\r\n */\r\nfunction triggerResourceLoading(tDetails, lView, tNode) {\r\n    const injector = lView[INJECTOR];\r\n    const tView = lView[TVIEW];\r\n    if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {\r\n        // If the loading status is different from initial one, it means that\r\n        // the loading of dependencies is in progress and there is nothing to do\r\n        // in this function. All details can be obtained from the `tDetails` object.\r\n        return tDetails.loadingPromise ?? Promise.resolve();\r\n    }\r\n    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n    const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);\r\n    // Switch from NOT_STARTED -> IN_PROGRESS state.\r\n    tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;\r\n    // Prefetching is triggered, cleanup all registered prefetch triggers.\r\n    invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\r\n    let dependenciesFn = tDetails.dependencyResolverFn;\r\n    if (ngDevMode) {\r\n        // Check if dependency function interceptor is configured.\r\n        const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {\r\n            optional: true,\r\n        });\r\n        if (deferDependencyInterceptor) {\r\n            dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);\r\n        }\r\n    }\r\n    // Indicate that an application is not stable and has a pending task.\r\n    const removeTask = injector.get(PendingTasks).add();\r\n    // The `dependenciesFn` might be `null` when all dependencies within\r\n    // a given defer block were eagerly referenced elsewhere in a file,\r\n    // thus no dynamic `import()`s were produced.\r\n    if (!dependenciesFn) {\r\n        tDetails.loadingPromise = Promise.resolve().then(() => {\r\n            tDetails.loadingPromise = null;\r\n            tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\r\n            removeTask();\r\n        });\r\n        return tDetails.loadingPromise;\r\n    }\r\n    // Start downloading of defer block dependencies.\r\n    tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {\r\n        let failed = false;\r\n        const directiveDefs = [];\r\n        const pipeDefs = [];\r\n        for (const result of results) {\r\n            if (result.status === 'fulfilled') {\r\n                const dependency = result.value;\r\n                const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);\r\n                if (directiveDef) {\r\n                    directiveDefs.push(directiveDef);\r\n                }\r\n                else {\r\n                    const pipeDef = getPipeDef$1(dependency);\r\n                    if (pipeDef) {\r\n                        pipeDefs.push(pipeDef);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                failed = true;\r\n                break;\r\n            }\r\n        }\r\n        if (failed) {\r\n            tDetails.loadingState = DeferDependenciesLoadingState.FAILED;\r\n            if (tDetails.errorTmplIndex === null) {\r\n                const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : '';\r\n                const error = new RuntimeError(-750 /* RuntimeErrorCode.DEFER_LOADING_FAILED */, ngDevMode &&\r\n                    'Loading dependencies for `@defer` block failed, ' +\r\n                        `but no \\`@error\\` block was configured${templateLocation}. ` +\r\n                        'Consider using the `@error` block to render an error state.');\r\n                handleUncaughtError(lView, error);\r\n            }\r\n        }\r\n        else {\r\n            tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\r\n            // Update directive and pipe registries to add newly downloaded dependencies.\r\n            const primaryBlockTView = primaryBlockTNode.tView;\r\n            if (directiveDefs.length > 0) {\r\n                primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);\r\n                // Extract providers from all NgModules imported by standalone components\r\n                // used within this defer block.\r\n                const directiveTypes = directiveDefs.map((def) => def.type);\r\n                const providers = internalImportProvidersFrom(false, ...directiveTypes);\r\n                tDetails.providers = providers;\r\n            }\r\n            if (pipeDefs.length > 0) {\r\n                primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);\r\n            }\r\n        }\r\n    });\r\n    return tDetails.loadingPromise.finally(() => {\r\n        // Loading is completed, we no longer need the loading Promise\r\n        // and a pending task should also be removed.\r\n        tDetails.loadingPromise = null;\r\n        removeTask();\r\n    });\r\n}\r\n/**\r\n * Defines whether we should proceed with triggering a given defer block.\r\n */\r\nfunction shouldTriggerDeferBlock(triggerType, lView) {\r\n    // prevents triggering regular triggers when on the server.\r\n    if (triggerType === 0 /* TriggerType.Regular */ && typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        return false;\r\n    }\r\n    // prevents triggering in the case of a test run with manual defer block configuration.\r\n    const injector = lView[INJECTOR];\r\n    const config = injector.get(DEFER_BLOCK_CONFIG, null, { optional: true });\r\n    if (config?.behavior === DeferBlockBehavior.Manual) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Attempts to trigger loading of defer block dependencies.\r\n * If the block is already in a loading, completed or an error state -\r\n * no additional actions are taken.\r\n */\r\nfunction triggerDeferBlock(triggerType, lView, tNode) {\r\n    const tView = lView[TVIEW];\r\n    const lContainer = lView[tNode.index];\r\n    ngDevMode && assertLContainer(lContainer);\r\n    if (!shouldTriggerDeferBlock(triggerType, lView))\r\n        return;\r\n    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    // Defer block is triggered, cleanup all registered trigger functions.\r\n    invokeAllTriggerCleanupFns(lDetails);\r\n    switch (tDetails.loadingState) {\r\n        case DeferDependenciesLoadingState.NOT_STARTED:\r\n            renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\r\n            triggerResourceLoading(tDetails, lView, tNode);\r\n            // The `loadingState` might have changed to \"loading\".\r\n            if (tDetails.loadingState ===\r\n                DeferDependenciesLoadingState.IN_PROGRESS) {\r\n                renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\r\n            }\r\n            break;\r\n        case DeferDependenciesLoadingState.IN_PROGRESS:\r\n            renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\r\n            renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\r\n            break;\r\n        case DeferDependenciesLoadingState.COMPLETE:\r\n            ngDevMode && assertDeferredDependenciesLoaded(tDetails);\r\n            renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\r\n            break;\r\n        case DeferDependenciesLoadingState.FAILED:\r\n            renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\r\n            break;\r\n        default:\r\n            if (ngDevMode) {\r\n                throwError('Unknown defer block state');\r\n            }\r\n    }\r\n}\r\n/**\r\n * The core mechanism for incremental hydration. This triggers or\r\n * queues hydration for all the blocks in the tree that need to be hydrated\r\n * and keeps track of all those blocks that were hydrated along the way.\r\n *\r\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\r\n * as a result of an event replay (via JsAction). When hydration is invoked from\r\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\r\n * events.\r\n */\r\nasync function triggerHydrationFromBlockName(injector, blockName, replayQueuedEventsFn) {\r\n    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\r\n    // Make sure we don't hydrate/trigger the same thing multiple times\r\n    if (blocksBeingHydrated.has(blockName)) {\r\n        return;\r\n    }\r\n    // Trigger resource loading and hydration for the blocks in the queue in the order of highest block\r\n    // to lowest block. Once a block has finished resource loading, after next render fires after hydration\r\n    // finishes. The new block will have its defer instruction called and will be in the registry.\r\n    // Due to timing related to potential nested control flow, this has to be scheduled after the next render.\r\n    const { parentBlockPromise, hydrationQueue } = getParentBlockHydrationQueue(blockName, injector);\r\n    if (hydrationQueue.length === 0)\r\n        return;\r\n    // It's possible that the hydrationQueue topmost item is actually in the process of hydrating and has\r\n    // a promise already. In that case, we don't want to destroy that promise and queue it again.\r\n    if (parentBlockPromise !== null) {\r\n        hydrationQueue.shift();\r\n    }\r\n    // The hydrating map in the registry prevents re-triggering hydration for a block that's already in\r\n    // the hydration queue. Here we generate promises for each of the blocks about to be hydrated\r\n    populateHydratingStateForQueue(dehydratedBlockRegistry, hydrationQueue);\r\n    // We await this after populating the hydration state so we can prevent re-triggering hydration for\r\n    // the same blocks while this promise is being awaited.\r\n    if (parentBlockPromise !== null) {\r\n        await parentBlockPromise;\r\n    }\r\n    const topmostParentBlock = hydrationQueue[0];\r\n    if (dehydratedBlockRegistry.has(topmostParentBlock)) {\r\n        // the topmost parent block is already in the registry and we can proceed\r\n        // with hydration.\r\n        await triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);\r\n    }\r\n    else {\r\n        // the topmost parent block is not yet in the registry, which may mean\r\n        // a lazy loaded route, a control flow branch was taken, a route has\r\n        // been navigated, etc. So we need to queue up the hydration process\r\n        // so that it can be finished after the top block has had its defer\r\n        // instruction executed.\r\n        dehydratedBlockRegistry.awaitParentBlock(topmostParentBlock, async () => await triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn));\r\n    }\r\n}\r\n/**\r\n * The core mechanism for incremental hydration. This triggers\r\n * hydration for all the blocks in the tree that need to be hydrated\r\n * and keeps track of all those blocks that were hydrated along the way.\r\n *\r\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\r\n * as a result of an event replay (via JsAction). When hydration is invoked from\r\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\r\n * events.\r\n */\r\nasync function triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn) {\r\n    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\r\n    // Indicate that we have some pending async work.\r\n    const pendingTasks = injector.get(PendingTasksInternal);\r\n    const taskId = pendingTasks.add();\r\n    // Actually do the triggering and hydration of the queue of blocks\r\n    for (let blockQueueIdx = 0; blockQueueIdx < hydrationQueue.length; blockQueueIdx++) {\r\n        const dehydratedBlockId = hydrationQueue[blockQueueIdx];\r\n        const dehydratedDeferBlock = dehydratedBlockRegistry.get(dehydratedBlockId);\r\n        if (dehydratedDeferBlock != null) {\r\n            // trigger the block resources and await next render for hydration. This should result\r\n            // in the next block ɵɵdefer instruction being called and that block being added to the dehydrated registry.\r\n            await triggerResourceLoadingForHydration(dehydratedDeferBlock);\r\n            await nextRender(injector);\r\n            // if the content has changed since server rendering, we need to check for the expected block\r\n            // being in the registry or if errors occurred. In that case, we need to clean up the remaining expected\r\n            // content that won't be rendered or fetched.\r\n            if (deferBlockHasErrored(dehydratedDeferBlock)) {\r\n                // Either the expected block has not yet had its ɵɵdefer instruction called or the block errored out when fetching\r\n                // resources. In the former case, either we're hydrating too soon or the client and server differ. In both cases,\r\n                // we need to clean up child content and promises.\r\n                removeDehydratedViewList(dehydratedDeferBlock);\r\n                cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\r\n                break;\r\n            }\r\n            // The defer block has not errored and we've finished fetching resources and rendering.\r\n            // At this point it is safe to resolve the hydration promise.\r\n            blocksBeingHydrated.get(dehydratedBlockId).resolve();\r\n        }\r\n        else {\r\n            // The expected block has not yet had its ɵɵdefer instruction called. This is likely due to content changing between\r\n            // client and server. We need to clean up the dehydrated DOM in the container since it no longer is valid.\r\n            cleanupParentContainer(blockQueueIdx, hydrationQueue, dehydratedBlockRegistry);\r\n            cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\r\n            break;\r\n        }\r\n    }\r\n    const lastBlockName = hydrationQueue[hydrationQueue.length - 1];\r\n    // Await hydration completion for the last block.\r\n    await blocksBeingHydrated.get(lastBlockName)?.promise;\r\n    // All async work is done, remove the taskId from the registry.\r\n    pendingTasks.remove(taskId);\r\n    // Replay any queued events, if any exist and the replay operation was requested.\r\n    if (replayQueuedEventsFn) {\r\n        replayQueuedEventsFn(hydrationQueue);\r\n    }\r\n    // Cleanup after hydration of all affected defer blocks.\r\n    cleanupHydratedDeferBlocks(dehydratedBlockRegistry.get(lastBlockName), hydrationQueue, dehydratedBlockRegistry, injector.get(ApplicationRef));\r\n}\r\nfunction deferBlockHasErrored(deferBlock) {\r\n    return (getLDeferBlockDetails(deferBlock.lView, deferBlock.tNode)[DEFER_BLOCK_STATE] ===\r\n        DeferBlockState.Error);\r\n}\r\n/**\r\n * Clean up the parent container of a block where content changed between server and client.\r\n * The parent of a block going through `triggerHydrationFromBlockName` will contain the\r\n * dehydrated content that needs to be cleaned up. So we have to do the clean up from that location\r\n * in the tree.\r\n */\r\nfunction cleanupParentContainer(currentBlockIdx, hydrationQueue, dehydratedBlockRegistry) {\r\n    // If a parent block exists, it's in the hydration queue in front of the current block.\r\n    const parentDeferBlockIdx = currentBlockIdx - 1;\r\n    const parentDeferBlock = parentDeferBlockIdx > -1\r\n        ? dehydratedBlockRegistry.get(hydrationQueue[parentDeferBlockIdx])\r\n        : null;\r\n    if (parentDeferBlock) {\r\n        cleanupLContainer(parentDeferBlock.lContainer);\r\n    }\r\n}\r\nfunction cleanupRemainingHydrationQueue(hydrationQueue, dehydratedBlockRegistry) {\r\n    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\r\n    for (const dehydratedBlockId in hydrationQueue) {\r\n        blocksBeingHydrated.get(dehydratedBlockId)?.reject();\r\n    }\r\n    dehydratedBlockRegistry.cleanup(hydrationQueue);\r\n}\r\n/**\r\n * Generates a new promise for every defer block in the hydrating queue\r\n */\r\nfunction populateHydratingStateForQueue(registry, queue) {\r\n    for (let blockId of queue) {\r\n        registry.hydrating.set(blockId, Promise.withResolvers());\r\n    }\r\n}\r\n// Waits for the next render cycle to complete\r\nfunction nextRender(injector) {\r\n    return new Promise((resolveFn) => afterNextRender(resolveFn, { injector }));\r\n}\r\nasync function triggerResourceLoadingForHydration(dehydratedBlock) {\r\n    const { tNode, lView } = dehydratedBlock;\r\n    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n    return new Promise((resolve) => {\r\n        onDeferBlockCompletion(lDetails, resolve);\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    });\r\n}\r\n/**\r\n * Registers cleanup functions for a defer block when the block has finished\r\n * fetching and rendering\r\n */\r\nfunction onDeferBlockCompletion(lDetails, callback) {\r\n    if (!Array.isArray(lDetails[ON_COMPLETE_FNS])) {\r\n        lDetails[ON_COMPLETE_FNS] = [];\r\n    }\r\n    lDetails[ON_COMPLETE_FNS].push(callback);\r\n}\r\n/**\r\n * Determines whether specific trigger types should be attached during an instruction firing\r\n * to ensure the proper triggers for a given type are used.\r\n */\r\nfunction shouldAttachTrigger(triggerType, lView, tNode) {\r\n    if (triggerType === 0 /* TriggerType.Regular */) {\r\n        return shouldAttachRegularTrigger(lView, tNode);\r\n    }\r\n    else if (triggerType === 2 /* TriggerType.Hydrate */) {\r\n        return !shouldAttachRegularTrigger(lView, tNode);\r\n    }\r\n    // TriggerType.Prefetch is active only on the client\r\n    return !(typeof ngServerMode !== 'undefined' && ngServerMode);\r\n}\r\n/** Whether a given defer block has `hydrate` triggers. */\r\nfunction hasHydrateTriggers(flags) {\r\n    return (flags != null &&\r\n        (flags & 1 /* TDeferDetailsFlags.HasHydrateTriggers */) === 1 /* TDeferDetailsFlags.HasHydrateTriggers */);\r\n}\r\n/**\r\n * Defines whether a regular trigger logic (e.g. \"on viewport\") should be attached\r\n * to a defer block. This function defines a condition, which mutually excludes\r\n * `deferOn*` and `deferHydrateOn*` triggers, to make sure only one of the trigger\r\n * types is active for a block with the current state.\r\n */\r\nfunction shouldAttachRegularTrigger(lView, tNode) {\r\n    const injector = lView[INJECTOR];\r\n    const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\r\n    const incrementalHydrationEnabled = isIncrementalHydrationEnabled(injector);\r\n    const _hasHydrateTriggers = hasHydrateTriggers(tDetails.flags);\r\n    // On the server:\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // Regular triggers are activated on the server when:\r\n        //  - Either Incremental Hydration is *not* enabled\r\n        //  - Or Incremental Hydration is enabled, but a given block doesn't have \"hydrate\" triggers\r\n        return !incrementalHydrationEnabled || !_hasHydrateTriggers;\r\n    }\r\n    // On the client:\r\n    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n    const wasServerSideRendered = lDetails[SSR_UNIQUE_ID] !== null;\r\n    if (_hasHydrateTriggers && wasServerSideRendered && incrementalHydrationEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Retrives a Defer Block's list of hydration triggers\r\n */\r\nfunction getHydrateTriggers(tView, tNode) {\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    return (tDetails.hydrateTriggers ??= new Map());\r\n}\r\n/**\r\n * Loops through all defer block summaries and ensures all the blocks triggers are\r\n * properly initialized\r\n */\r\nfunction processAndInitTriggers(injector, blockData, nodes) {\r\n    const idleElements = [];\r\n    const timerElements = [];\r\n    const viewportElements = [];\r\n    const immediateElements = [];\r\n    for (let [blockId, blockSummary] of blockData) {\r\n        const commentNode = nodes.get(blockId);\r\n        if (commentNode !== undefined) {\r\n            const numRootNodes = blockSummary.data[NUM_ROOT_NODES];\r\n            let currentNode = commentNode;\r\n            for (let i = 0; i < numRootNodes; i++) {\r\n                currentNode = currentNode.previousSibling;\r\n                if (currentNode.nodeType !== Node.ELEMENT_NODE) {\r\n                    continue;\r\n                }\r\n                const elementTrigger = { el: currentNode, blockName: blockId };\r\n                // hydrate\r\n                if (blockSummary.hydrate.idle) {\r\n                    idleElements.push(elementTrigger);\r\n                }\r\n                if (blockSummary.hydrate.immediate) {\r\n                    immediateElements.push(elementTrigger);\r\n                }\r\n                if (blockSummary.hydrate.timer !== null) {\r\n                    elementTrigger.delay = blockSummary.hydrate.timer;\r\n                    timerElements.push(elementTrigger);\r\n                }\r\n                if (blockSummary.hydrate.viewport) {\r\n                    viewportElements.push(elementTrigger);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setIdleTriggers(injector, idleElements);\r\n    setImmediateTriggers(injector, immediateElements);\r\n    setViewportTriggers(injector, viewportElements);\r\n    setTimerTriggers(injector, timerElements);\r\n}\r\nfunction setIdleTriggers(injector, elementTriggers) {\r\n    for (const elementTrigger of elementTriggers) {\r\n        const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n        const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\r\n        const cleanupFn = onIdle(onInvoke, injector);\r\n        registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\r\n    }\r\n}\r\nfunction setViewportTriggers(injector, elementTriggers) {\r\n    if (elementTriggers.length > 0) {\r\n        const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n        for (let elementTrigger of elementTriggers) {\r\n            const cleanupFn = onViewportWrapper(elementTrigger.el, () => triggerHydrationFromBlockName(injector, elementTrigger.blockName), injector);\r\n            registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\r\n        }\r\n    }\r\n}\r\nfunction setTimerTriggers(injector, elementTriggers) {\r\n    for (const elementTrigger of elementTriggers) {\r\n        const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n        const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\r\n        const timerFn = onTimer(elementTrigger.delay);\r\n        const cleanupFn = timerFn(onInvoke, injector);\r\n        registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\r\n    }\r\n}\r\nfunction setImmediateTriggers(injector, elementTriggers) {\r\n    for (const elementTrigger of elementTriggers) {\r\n        // Note: we intentionally avoid awaiting each call and instead kick off\r\n        // the hydration process simultaneously for all defer blocks with this trigger;\r\n        triggerHydrationFromBlockName(injector, elementTrigger.blockName);\r\n    }\r\n}\r\n\r\n/**\r\n * Indicates whether we've already produced a warning,\r\n * prevents the logic from producing it multiple times.\r\n */\r\nlet _hmrWarningProduced = false;\r\n/**\r\n * Logs a message into the console to indicate that `@defer` block\r\n * dependencies are loaded eagerly when the HMR mode is enabled.\r\n */\r\nfunction logHmrWarning(injector) {\r\n    if (!_hmrWarningProduced) {\r\n        _hmrWarningProduced = true;\r\n        const console = injector.get(Console);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(formatRuntimeError(-751 /* RuntimeErrorCode.DEFER_IN_HMR_MODE */, 'Angular has detected that this application contains `@defer` blocks ' +\r\n            'and the hot module replacement (HMR) mode is enabled. All `@defer` ' +\r\n            'block dependencies will be loaded eagerly.'));\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for defer blocks.\r\n *\r\n * @param index Index of the `defer` instruction.\r\n * @param primaryTmplIndex Index of the template with the primary block content.\r\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\r\n * @param loadingTmplIndex Index of the template with the loading block content.\r\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\r\n * @param errorTmplIndex Index of the template with the error block content.\r\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\r\n *     block.\r\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\r\n *     placeholder block.\r\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\r\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\r\n * @param flags A set of flags to define a particular behavior (e.g. to indicate that\r\n *              hydrate triggers are present and regular triggers should be deactivated\r\n *              in certain scenarios).\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdefer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling, flags) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const tNode = declareTemplate(lView, tView, index, null, 0, 0);\r\n    const injector = lView[INJECTOR];\r\n    if (tView.firstCreatePass) {\r\n        performanceMarkFeature('NgDefer');\r\n        if (ngDevMode) {\r\n            if (typeof ngHmrMode !== 'undefined' && ngHmrMode) {\r\n                logHmrWarning(injector);\r\n            }\r\n            if (hasHydrateTriggers(flags)) {\r\n                assertIncrementalHydrationIsConfigured(injector);\r\n            }\r\n        }\r\n        const tDetails = {\r\n            primaryTmplIndex,\r\n            loadingTmplIndex: loadingTmplIndex ?? null,\r\n            placeholderTmplIndex: placeholderTmplIndex ?? null,\r\n            errorTmplIndex: errorTmplIndex ?? null,\r\n            placeholderBlockConfig: null,\r\n            loadingBlockConfig: null,\r\n            dependencyResolverFn: dependencyResolverFn ?? null,\r\n            loadingState: DeferDependenciesLoadingState.NOT_STARTED,\r\n            loadingPromise: null,\r\n            providers: null,\r\n            hydrateTriggers: null,\r\n            debug: null,\r\n            flags: flags ?? 0 /* TDeferDetailsFlags.Default */,\r\n        };\r\n        enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\r\n        setTDeferBlockDetails(tView, adjustedIndex, tDetails);\r\n    }\r\n    const lContainer = lView[adjustedIndex];\r\n    // If hydration is enabled, looks up dehydrated views in the DOM\r\n    // using hydration annotation info and stores those views on LContainer.\r\n    // In client-only mode, this function is a noop.\r\n    populateDehydratedViewsInLContainer(lContainer, tNode, lView);\r\n    let ssrBlockState = null;\r\n    let ssrUniqueId = null;\r\n    if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {\r\n        const info = lContainer[DEHYDRATED_VIEWS][0].data;\r\n        ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;\r\n        ssrBlockState = info[DEFER_BLOCK_STATE$1];\r\n    }\r\n    // Init instance-specific defer details and store it.\r\n    const lDetails = [\r\n        null, // NEXT_DEFER_BLOCK_STATE\r\n        DeferBlockInternalState.Initial, // DEFER_BLOCK_STATE\r\n        null, // STATE_IS_FROZEN_UNTIL\r\n        null, // LOADING_AFTER_CLEANUP_FN\r\n        null, // TRIGGER_CLEANUP_FNS\r\n        null, // PREFETCH_TRIGGER_CLEANUP_FNS\r\n        ssrUniqueId, // SSR_UNIQUE_ID\r\n        ssrBlockState, // SSR_BLOCK_STATE\r\n        null, // ON_COMPLETE_FNS\r\n        null, // HYDRATE_TRIGGER_CLEANUP_FNS\r\n    ];\r\n    setLDeferBlockDetails(lView, adjustedIndex, lDetails);\r\n    let registry = null;\r\n    if (ssrUniqueId !== null) {\r\n        // Store this defer block in the registry, to have an access to\r\n        // internal data structures from hydration runtime code.\r\n        registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\r\n        registry.add(ssrUniqueId, { lView, tNode, lContainer });\r\n    }\r\n    const onLViewDestroy = () => {\r\n        invokeAllTriggerCleanupFns(lDetails);\r\n        if (ssrUniqueId !== null) {\r\n            registry?.cleanup([ssrUniqueId]);\r\n        }\r\n    };\r\n    // When defer block is triggered - unsubscribe from LView destroy cleanup.\r\n    storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, () => removeLViewOnDestroy(lView, onLViewDestroy));\r\n    storeLViewOnDestroy(lView, onLViewDestroy);\r\n}\r\n/**\r\n * Loads defer block dependencies when a trigger value becomes truthy.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferWhen(rawValue) {\r\n    const lView = getLView();\r\n    const tNode = getSelectedTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'when <expression>');\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, rawValue)) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            const value = Boolean(rawValue); // handle truthy or falsy values\r\n            const lDetails = getLDeferBlockDetails(lView, tNode);\r\n            const renderedState = lDetails[DEFER_BLOCK_STATE];\r\n            if (value === false && renderedState === DeferBlockInternalState.Initial) {\r\n                // If nothing is rendered yet, render a placeholder (if defined).\r\n                renderPlaceholder(lView, tNode);\r\n            }\r\n            else if (value === true &&\r\n                (renderedState === DeferBlockInternalState.Initial ||\r\n                    renderedState === DeferBlockState.Placeholder)) {\r\n                triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode);\r\n            }\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Prefetches the deferred content when a value becomes truthy.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchWhen(rawValue) {\r\n    const lView = getLView();\r\n    const tNode = getSelectedTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch when <expression>');\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, rawValue)) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            const value = Boolean(rawValue); // handle truthy or falsy values\r\n            const tView = lView[TVIEW];\r\n            const tNode = getSelectedTNode();\r\n            const tDetails = getTDeferBlockDetails(tView, tNode);\r\n            if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\r\n                // If loading has not been started yet, trigger it now.\r\n                triggerPrefetching(tDetails, lView, tNode);\r\n            }\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Hydrates the deferred content when a value becomes truthy.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateWhen(rawValue) {\r\n    const lView = getLView();\r\n    const tNode = getSelectedTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate when <expression>');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    // TODO(incremental-hydration): audit all defer instructions to reduce unnecessary work by\r\n    // moving function calls inside their relevant control flow blocks\r\n    const bindingIndex = nextBindingIndex();\r\n    const tView = getTView();\r\n    const hydrateTriggers = getHydrateTriggers(tView, tNode);\r\n    hydrateTriggers.set(6 /* DeferBlockTrigger.When */, null);\r\n    if (bindingUpdated(lView, bindingIndex, rawValue)) {\r\n        if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n            // We are on the server and SSR for defer blocks is enabled.\r\n            triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n        }\r\n        else {\r\n            const injector = lView[INJECTOR];\r\n            const prevConsumer = setActiveConsumer(null);\r\n            try {\r\n                const value = Boolean(rawValue); // handle truthy or falsy values\r\n                if (value === true) {\r\n                    // The `when` condition has changed to `true`, trigger defer block loading\r\n                    // if the block is either in initial (nothing is rendered) or a placeholder\r\n                    // state.\r\n                    const lDetails = getLDeferBlockDetails(lView, tNode);\r\n                    const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\r\n                    ngDevMode && assertSsrIdDefined(ssrUniqueId);\r\n                    triggerHydrationFromBlockName(injector, ssrUniqueId);\r\n                }\r\n            }\r\n            finally {\r\n                setActiveConsumer(prevConsumer);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Specifies that hydration never occurs.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateNever() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate never');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(7 /* DeferBlockTrigger.Never */, null);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // We are on the server and SSR for defer blocks is enabled.\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n}\r\n/**\r\n * Sets up logic to handle the `on idle` deferred trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferOnIdle() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'on idle');\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    scheduleDelayedTrigger(onIdle);\r\n}\r\n/**\r\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchOnIdle() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on idle');\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    scheduleDelayedPrefetching(onIdle);\r\n}\r\n/**\r\n * Sets up logic to handle the `on idle` deferred trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateOnIdle() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on idle');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(0 /* DeferBlockTrigger.Idle */, null);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // We are on the server and SSR for defer blocks is enabled.\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n    else {\r\n        scheduleDelayedHydrating(onIdle, lView, tNode);\r\n    }\r\n}\r\n/**\r\n * Sets up logic to handle the `on immediate` deferred trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferOnImmediate() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'on immediate');\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    // Render placeholder block only if loading template is not present and we're on\r\n    // the client to avoid content flickering, since it would be immediately replaced\r\n    // by the loading block.\r\n    const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\r\n    if (tDetails.loadingTmplIndex === null) {\r\n        renderPlaceholder(lView, tNode);\r\n    }\r\n    triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode);\r\n}\r\n/**\r\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchOnImmediate() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on immediate');\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    const tView = lView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\r\n        triggerResourceLoading(tDetails, lView, tNode);\r\n    }\r\n}\r\n/**\r\n * Sets up logic to handle the `on immediate` hydrate trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateOnImmediate() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on immediate');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(1 /* DeferBlockTrigger.Immediate */, null);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n    else {\r\n        const injector = lView[INJECTOR];\r\n        const lDetails = getLDeferBlockDetails(lView, tNode);\r\n        const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\r\n        ngDevMode && assertSsrIdDefined(ssrUniqueId);\r\n        triggerHydrationFromBlockName(injector, ssrUniqueId);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `on timer` deferred trigger.\r\n * @param delay Amount of time to wait before loading the content.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferOnTimer(delay) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    scheduleDelayedTrigger(onTimer(delay));\r\n}\r\n/**\r\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\r\n * @param delay Amount of time to wait before prefetching the content.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchOnTimer(delay) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    scheduleDelayedPrefetching(onTimer(delay));\r\n}\r\n/**\r\n * Creates runtime data structures for the `on timer` hydrate trigger.\r\n * @param delay Amount of time to wait before loading the content.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateOnTimer(delay) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(5 /* DeferBlockTrigger.Timer */, { delay });\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // We are on the server and SSR for defer blocks is enabled.\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n    else {\r\n        scheduleDelayedHydrating(onTimer(delay), lView, tNode);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `on hover` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferOnHover(triggerIndex, walkUpTimes) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `on hover${walkUpTimes === -1 ? '' : '(<target>)'}`);\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    renderPlaceholder(lView, tNode);\r\n    // Avoid adding event listeners when this instruction is invoked on the server.\r\n    if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\r\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchOnHover(triggerIndex, walkUpTimes) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on hover${walkUpTimes === -1 ? '' : '(<target>)'}`);\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    const tView = lView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\r\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `on hover` hydrate trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateOnHover() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on hover');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(4 /* DeferBlockTrigger.Hover */, null);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // We are on the server and SSR for defer blocks is enabled.\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n    // The actual triggering of hydration on hover is handled by JSAction in\r\n    // event_replay.ts.\r\n}\r\n/**\r\n * Creates runtime data structures for the `on interaction` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferOnInteraction(triggerIndex, walkUpTimes) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`);\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    renderPlaceholder(lView, tNode);\r\n    // Avoid adding event listeners when this instruction is invoked on the server.\r\n    if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\r\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchOnInteraction(triggerIndex, walkUpTimes) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`);\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    const tView = lView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\r\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `on interaction` hydrate trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateOnInteraction() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on interaction');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(3 /* DeferBlockTrigger.Interaction */, null);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // We are on the server and SSR for defer blocks is enabled.\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n    // The actual triggering of hydration on interaction is handled by JSAction in\r\n    // event_replay.ts.\r\n}\r\n/**\r\n * Creates runtime data structures for the `on viewport` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferOnViewport(triggerIndex, walkUpTimes) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`);\r\n    }\r\n    if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode))\r\n        return;\r\n    renderPlaceholder(lView, tNode);\r\n    // Avoid adding event listeners when this instruction is invoked on the server.\r\n    if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\r\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewportWrapper, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\r\n * @param triggerIndex Index at which to find the trigger element.\r\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferPrefetchOnViewport(triggerIndex, walkUpTimes) {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`);\r\n    }\r\n    if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode))\r\n        return;\r\n    const tView = lView[TVIEW];\r\n    const tDetails = getTDeferBlockDetails(tView, tNode);\r\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\r\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewportWrapper, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\r\n    }\r\n}\r\n/**\r\n * Creates runtime data structures for the `on viewport` hydrate trigger.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeferHydrateOnViewport() {\r\n    const lView = getLView();\r\n    const tNode = getCurrentTNode();\r\n    if (ngDevMode) {\r\n        trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on viewport');\r\n    }\r\n    if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode))\r\n        return;\r\n    const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\r\n    hydrateTriggers.set(2 /* DeferBlockTrigger.Viewport */, null);\r\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\r\n        // We are on the server and SSR for defer blocks is enabled.\r\n        triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\r\n    }\r\n    // The actual triggering of hydration on viewport happens in triggering.ts,\r\n    // since these instructions won't exist for dehydrated content.\r\n}\r\n\r\n/**\r\n * Updates the value of or removes a bound attribute on an Element.\r\n *\r\n * Used in the case of `[attr.title]=\"value\"`\r\n *\r\n * @param name name The name of the attribute.\r\n * @param value value The attribute is removed when value is `null` or `undefined`.\r\n *                  Otherwise the attribute value is set to the stringified value.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @param namespace Optional namespace to use when setting the attribute.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\r\n    const lView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, value)) {\r\n        const tView = getTView();\r\n        const tNode = getSelectedTNode();\r\n        elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\r\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\r\n    }\r\n    return ɵɵattribute;\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Instruction that returns the component instance in which the current instruction is executing.\r\n * This is a constant-time version of `nextContent` for the case where we know that we need the\r\n * component instance specifically, rather than the context of a particular template.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵcomponentInstance() {\r\n    const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];\r\n    ngDevMode && assertDefined(instance, 'Expected component instance to be defined');\r\n    return instance;\r\n}\r\n\r\n/**\r\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\r\n * is an adapter class that makes it possible to work with different internal data structures,\r\n * regardless of the actual values of the incoming collection.\r\n */\r\nclass LiveCollection {\r\n    destroy(item) {\r\n        // noop by default\r\n    }\r\n    updateValue(index, value) {\r\n        // noop by default\r\n    }\r\n    // operations below could be implemented on top of the operations defined so far, but having\r\n    // them explicitly allow clear expression of intent and potentially more performant\r\n    // implementations\r\n    swap(index1, index2) {\r\n        const startIdx = Math.min(index1, index2);\r\n        const endIdx = Math.max(index1, index2);\r\n        const endItem = this.detach(endIdx);\r\n        if (endIdx - startIdx > 1) {\r\n            const startItem = this.detach(startIdx);\r\n            this.attach(startIdx, endItem);\r\n            this.attach(endIdx, startItem);\r\n        }\r\n        else {\r\n            this.attach(startIdx, endItem);\r\n        }\r\n    }\r\n    move(prevIndex, newIdx) {\r\n        this.attach(newIdx, this.detach(prevIndex));\r\n    }\r\n}\r\nfunction valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {\r\n    if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\r\n        // matching and no value identity to update\r\n        return 1;\r\n    }\r\n    else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\r\n        // matching but requires value identity update\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\nfunction recordDuplicateKeys(keyToIdx, key, idx) {\r\n    const idxSoFar = keyToIdx.get(key);\r\n    if (idxSoFar !== undefined) {\r\n        idxSoFar.add(idx);\r\n    }\r\n    else {\r\n        keyToIdx.set(key, new Set([idx]));\r\n    }\r\n}\r\n/**\r\n * The live collection reconciliation algorithm that perform various in-place operations, so it\r\n * reflects the content of the new (incoming) collection.\r\n *\r\n * The reconciliation algorithm has 2 code paths:\r\n * - \"fast\" path that don't require any memory allocation;\r\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\r\n * collect additional information about the live collection.\r\n * It might happen that the algorithm switches between the two modes in question in a single\r\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\r\n *\r\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\r\n * length of the live collection and m is the length of the incoming collection). Given the problem\r\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\r\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\r\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\r\n * certain situations.\r\n *\r\n * @param liveCollection the current, live collection;\r\n * @param newCollection the new, incoming collection;\r\n * @param trackByFn key generation function that determines equality between items in the life and\r\n *     incoming collection;\r\n */\r\nfunction reconcile(liveCollection, newCollection, trackByFn) {\r\n    let detachedItems = undefined;\r\n    let liveKeysInTheFuture = undefined;\r\n    let liveStartIdx = 0;\r\n    let liveEndIdx = liveCollection.length - 1;\r\n    const duplicateKeys = ngDevMode ? new Map() : undefined;\r\n    if (Array.isArray(newCollection)) {\r\n        let newEndIdx = newCollection.length - 1;\r\n        while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\r\n            // compare from the beginning\r\n            const liveStartValue = liveCollection.at(liveStartIdx);\r\n            const newStartValue = newCollection[liveStartIdx];\r\n            if (ngDevMode) {\r\n                recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newStartValue), liveStartIdx);\r\n            }\r\n            const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);\r\n            if (isStartMatching !== 0) {\r\n                if (isStartMatching < 0) {\r\n                    liveCollection.updateValue(liveStartIdx, newStartValue);\r\n                }\r\n                liveStartIdx++;\r\n                continue;\r\n            }\r\n            // compare from the end\r\n            // TODO(perf): do _all_ the matching from the end\r\n            const liveEndValue = liveCollection.at(liveEndIdx);\r\n            const newEndValue = newCollection[newEndIdx];\r\n            if (ngDevMode) {\r\n                recordDuplicateKeys(duplicateKeys, trackByFn(newEndIdx, newEndValue), newEndIdx);\r\n            }\r\n            const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);\r\n            if (isEndMatching !== 0) {\r\n                if (isEndMatching < 0) {\r\n                    liveCollection.updateValue(liveEndIdx, newEndValue);\r\n                }\r\n                liveEndIdx--;\r\n                newEndIdx--;\r\n                continue;\r\n            }\r\n            // Detect swap and moves:\r\n            const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\r\n            const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\r\n            const newStartKey = trackByFn(liveStartIdx, newStartValue);\r\n            if (Object.is(newStartKey, liveEndKey)) {\r\n                const newEndKey = trackByFn(newEndIdx, newEndValue);\r\n                // detect swap on both ends;\r\n                if (Object.is(newEndKey, liveStartKey)) {\r\n                    liveCollection.swap(liveStartIdx, liveEndIdx);\r\n                    liveCollection.updateValue(liveEndIdx, newEndValue);\r\n                    newEndIdx--;\r\n                    liveEndIdx--;\r\n                }\r\n                else {\r\n                    // the new item is the same as the live item with the end pointer - this is a move forward\r\n                    // to an earlier index;\r\n                    liveCollection.move(liveEndIdx, liveStartIdx);\r\n                }\r\n                liveCollection.updateValue(liveStartIdx, newStartValue);\r\n                liveStartIdx++;\r\n                continue;\r\n            }\r\n            // Fallback to the slow path: we need to learn more about the content of the live and new\r\n            // collections.\r\n            detachedItems ??= new UniqueValueMultiKeyMap();\r\n            liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\r\n            // Check if I'm inserting a previously detached item: if so, attach it here\r\n            if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\r\n                liveCollection.updateValue(liveStartIdx, newStartValue);\r\n                liveStartIdx++;\r\n                liveEndIdx++;\r\n            }\r\n            else if (!liveKeysInTheFuture.has(newStartKey)) {\r\n                // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\r\n                const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\r\n                liveCollection.attach(liveStartIdx, newItem);\r\n                liveStartIdx++;\r\n                liveEndIdx++;\r\n            }\r\n            else {\r\n                // We know that the new item exists later on in old collection but we don't know its index\r\n                // and as the consequence can't move it (don't know where to find it). Detach the old item,\r\n                // hoping that it unlocks the fast path again.\r\n                detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\r\n                liveEndIdx--;\r\n            }\r\n        }\r\n        // Final cleanup steps:\r\n        // - more items in the new collection => insert\r\n        while (liveStartIdx <= newEndIdx) {\r\n            createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);\r\n            liveStartIdx++;\r\n        }\r\n    }\r\n    else if (newCollection != null) {\r\n        // iterable - immediately fallback to the slow path\r\n        const newCollectionIterator = newCollection[Symbol.iterator]();\r\n        let newIterationResult = newCollectionIterator.next();\r\n        while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\r\n            const liveValue = liveCollection.at(liveStartIdx);\r\n            const newValue = newIterationResult.value;\r\n            if (ngDevMode) {\r\n                recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newValue), liveStartIdx);\r\n            }\r\n            const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);\r\n            if (isStartMatching !== 0) {\r\n                // found a match - move on, but update value\r\n                if (isStartMatching < 0) {\r\n                    liveCollection.updateValue(liveStartIdx, newValue);\r\n                }\r\n                liveStartIdx++;\r\n                newIterationResult = newCollectionIterator.next();\r\n            }\r\n            else {\r\n                detachedItems ??= new UniqueValueMultiKeyMap();\r\n                liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\r\n                // Check if I'm inserting a previously detached item: if so, attach it here\r\n                const newKey = trackByFn(liveStartIdx, newValue);\r\n                if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\r\n                    liveCollection.updateValue(liveStartIdx, newValue);\r\n                    liveStartIdx++;\r\n                    liveEndIdx++;\r\n                    newIterationResult = newCollectionIterator.next();\r\n                }\r\n                else if (!liveKeysInTheFuture.has(newKey)) {\r\n                    liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\r\n                    liveStartIdx++;\r\n                    liveEndIdx++;\r\n                    newIterationResult = newCollectionIterator.next();\r\n                }\r\n                else {\r\n                    // it is a move forward - detach the current item without advancing in collections\r\n                    const liveKey = trackByFn(liveStartIdx, liveValue);\r\n                    detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\r\n                    liveEndIdx--;\r\n                }\r\n            }\r\n        }\r\n        // this is a new item as we run out of the items in the old collection - create or attach a\r\n        // previously detached one\r\n        while (!newIterationResult.done) {\r\n            createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);\r\n            newIterationResult = newCollectionIterator.next();\r\n        }\r\n    }\r\n    // Cleanups common to the array and iterable:\r\n    // - more items in the live collection => delete starting from the end;\r\n    while (liveStartIdx <= liveEndIdx) {\r\n        liveCollection.destroy(liveCollection.detach(liveEndIdx--));\r\n    }\r\n    // - destroy items that were detached but never attached again.\r\n    detachedItems?.forEach((item) => {\r\n        liveCollection.destroy(item);\r\n    });\r\n    // report duplicate keys (dev mode only)\r\n    if (ngDevMode) {\r\n        let duplicatedKeysMsg = [];\r\n        for (const [key, idxSet] of duplicateKeys) {\r\n            if (idxSet.size > 1) {\r\n                const idx = [...idxSet].sort((a, b) => a - b);\r\n                for (let i = 1; i < idx.length; i++) {\r\n                    duplicatedKeysMsg.push(`key \"${stringifyForError(key)}\" at index \"${idx[i - 1]}\" and \"${idx[i]}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (duplicatedKeysMsg.length > 0) {\r\n            const message = formatRuntimeError(-955 /* RuntimeErrorCode.LOOP_TRACK_DUPLICATE_KEYS */, 'The provided track expression resulted in duplicated keys for a given collection. ' +\r\n                'Adjust the tracking expression such that it uniquely identifies all the items in the collection. ' +\r\n                'Duplicated keys were: \\n' +\r\n                duplicatedKeysMsg.join(', \\n') +\r\n                '.');\r\n            console.warn(message);\r\n        }\r\n    }\r\n}\r\nfunction attachPreviouslyDetached(prevCollection, detachedItems, index, key) {\r\n    if (detachedItems !== undefined && detachedItems.has(key)) {\r\n        prevCollection.attach(index, detachedItems.get(key));\r\n        detachedItems.delete(key);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {\r\n    if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\r\n        const newItem = liveCollection.create(index, value);\r\n        liveCollection.attach(index, newItem);\r\n    }\r\n    else {\r\n        liveCollection.updateValue(index, value);\r\n    }\r\n}\r\nfunction initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {\r\n    const keys = new Set();\r\n    for (let i = start; i <= end; i++) {\r\n        keys.add(trackByFn(i, liveCollection.at(i)));\r\n    }\r\n    return keys;\r\n}\r\n/**\r\n * A specific, partial implementation of the Map interface with the following characteristics:\r\n * - allows multiple values for a given key;\r\n * - maintain FIFO order for multiple values corresponding to a given key;\r\n * - assumes that all values are unique.\r\n *\r\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\r\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\r\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\r\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\r\n * values (in the entire collection) are unique.\r\n */\r\nclass UniqueValueMultiKeyMap {\r\n    // A map from a key to the first value corresponding to this key.\r\n    kvMap = new Map();\r\n    // A map that acts as a linked list of values - each value maps to the next value in this \"linked\r\n    // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\r\n    // there are no duplicated values.\r\n    _vMap = undefined;\r\n    has(key) {\r\n        return this.kvMap.has(key);\r\n    }\r\n    delete(key) {\r\n        if (!this.has(key))\r\n            return false;\r\n        const value = this.kvMap.get(key);\r\n        if (this._vMap !== undefined && this._vMap.has(value)) {\r\n            this.kvMap.set(key, this._vMap.get(value));\r\n            this._vMap.delete(value);\r\n        }\r\n        else {\r\n            this.kvMap.delete(key);\r\n        }\r\n        return true;\r\n    }\r\n    get(key) {\r\n        return this.kvMap.get(key);\r\n    }\r\n    set(key, value) {\r\n        if (this.kvMap.has(key)) {\r\n            let prevValue = this.kvMap.get(key);\r\n            // Note: we don't use `assertNotSame`, because the value needs to be stringified even if\r\n            // there is no error which can freeze the browser for large values (see #58509).\r\n            if (ngDevMode && prevValue === value) {\r\n                throw new Error(`Detected a duplicated value ${value} for the key ${key}`);\r\n            }\r\n            if (this._vMap === undefined) {\r\n                this._vMap = new Map();\r\n            }\r\n            const vMap = this._vMap;\r\n            while (vMap.has(prevValue)) {\r\n                prevValue = vMap.get(prevValue);\r\n            }\r\n            vMap.set(prevValue, value);\r\n        }\r\n        else {\r\n            this.kvMap.set(key, value);\r\n        }\r\n    }\r\n    forEach(cb) {\r\n        for (let [key, value] of this.kvMap) {\r\n            cb(value, key);\r\n            if (this._vMap !== undefined) {\r\n                const vMap = this._vMap;\r\n                while (vMap.has(value)) {\r\n                    value = vMap.get(value);\r\n                    cb(value, key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an LContainer for an ng-template representing a root node\r\n * of control flow (@if, @switch). We use this to explicitly set\r\n * flags on the TNode created to identify which nodes are in control\r\n * flow or starting control flow for hydration identification and\r\n * cleanup timing.\r\n *\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵconditionalCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\r\n    performanceMarkFeature('NgControlFlow');\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const attrs = getConstant(tView.consts, attrsIndex);\r\n    declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 256 /* TNodeFlags.isControlFlowStart */, localRefsIndex, localRefExtractor);\r\n    return ɵɵconditionalBranchCreate;\r\n}\r\n/**\r\n * Creates an LContainer for an ng-template representing a branch\r\n * of control flow (@else, @case, @default). We use this to explicitly\r\n * set flags on the TNode created to identify which nodes are in\r\n * control flow or starting control flow for hydration identification\r\n * and cleanup timing.\r\n *\r\n * @param index The index of the container in the data array\r\n * @param templateFn Inline template\r\n * @param decls The number of nodes, local refs, and pipes for this template\r\n * @param vars The number of bindings for this template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param localRefs Index of the local references in the `consts` array.\r\n * @param localRefExtractor A function which extracts local-refs values from the template.\r\n *        Defaults to the current element associated with the local-ref.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵconditionalBranchCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\r\n    performanceMarkFeature('NgControlFlow');\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const attrs = getConstant(tView.consts, attrsIndex);\r\n    declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 512 /* TNodeFlags.isInControlFlow */, localRefsIndex, localRefExtractor);\r\n    return ɵɵconditionalBranchCreate;\r\n}\r\n/**\r\n * The conditional instruction represents the basic building block on the runtime side to support\r\n * built-in \"if\" and \"switch\". On the high level this instruction is responsible for adding and\r\n * removing views selected by a conditional expression.\r\n *\r\n * @param matchingTemplateIndex Index of a template TNode representing a conditional view to be\r\n *     inserted; -1 represents a special case when there is no view to insert.\r\n * @param contextValue Value that should be exposed as the context of the conditional.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵconditional(matchingTemplateIndex, contextValue) {\r\n    performanceMarkFeature('NgControlFlow');\r\n    const hostLView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    const prevMatchingTemplateIndex = hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;\r\n    const prevContainer = prevMatchingTemplateIndex !== -1\r\n        ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex)\r\n        : undefined;\r\n    const viewInContainerIdx = 0;\r\n    if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {\r\n        const prevConsumer = setActiveConsumer(null);\r\n        try {\r\n            // The index of the view to show changed - remove the previously displayed one\r\n            // (it is a noop if there are no active views in a container).\r\n            if (prevContainer !== undefined) {\r\n                removeLViewFromLContainer(prevContainer, viewInContainerIdx);\r\n            }\r\n            // Index -1 is a special case where none of the conditions evaluates to\r\n            // a truthy value and as the consequence we've got no view to show.\r\n            if (matchingTemplateIndex !== -1) {\r\n                const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;\r\n                const nextContainer = getLContainer(hostLView, nextLContainerIndex);\r\n                const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);\r\n                const dehydratedView = findAndReconcileMatchingDehydratedViews(nextContainer, templateTNode, hostLView);\r\n                const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {\r\n                    dehydratedView,\r\n                });\r\n                addLViewToLContainer(nextContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));\r\n            }\r\n        }\r\n        finally {\r\n            setActiveConsumer(prevConsumer);\r\n        }\r\n    }\r\n    else if (prevContainer !== undefined) {\r\n        // We might keep displaying the same template but the actual value of the expression could have\r\n        // changed - re-bind in context.\r\n        const lView = getLViewFromLContainer(prevContainer, viewInContainerIdx);\r\n        if (lView !== undefined) {\r\n            lView[CONTEXT] = contextValue;\r\n        }\r\n    }\r\n}\r\nclass RepeaterContext {\r\n    lContainer;\r\n    $implicit;\r\n    $index;\r\n    constructor(lContainer, $implicit, $index) {\r\n        this.lContainer = lContainer;\r\n        this.$implicit = $implicit;\r\n        this.$index = $index;\r\n    }\r\n    get $count() {\r\n        return this.lContainer.length - CONTAINER_HEADER_OFFSET;\r\n    }\r\n}\r\n/**\r\n * A built-in trackBy function used for situations where users specified collection index as a\r\n * tracking expression. Having this function body in the runtime avoids unnecessary code generation.\r\n *\r\n * @param index\r\n * @returns\r\n */\r\nfunction ɵɵrepeaterTrackByIndex(index) {\r\n    return index;\r\n}\r\n/**\r\n * A built-in trackBy function used for situations where users specified collection item reference\r\n * as a tracking expression. Having this function body in the runtime avoids unnecessary code\r\n * generation.\r\n *\r\n * @param index\r\n * @returns\r\n */\r\nfunction ɵɵrepeaterTrackByIdentity(_, value) {\r\n    return value;\r\n}\r\nclass RepeaterMetadata {\r\n    hasEmptyBlock;\r\n    trackByFn;\r\n    liveCollection;\r\n    constructor(hasEmptyBlock, trackByFn, liveCollection) {\r\n        this.hasEmptyBlock = hasEmptyBlock;\r\n        this.trackByFn = trackByFn;\r\n        this.liveCollection = liveCollection;\r\n    }\r\n}\r\n/**\r\n * The repeaterCreate instruction runs in the creation part of the template pass and initializes\r\n * internal data structures required by the update pass of the built-in repeater logic. Repeater\r\n * metadata are allocated in the data part of LView with the following layout:\r\n * - LView[HEADER_OFFSET + index] - metadata\r\n * - LView[HEADER_OFFSET + index + 1] - reference to a template function rendering an item\r\n * - LView[HEADER_OFFSET + index + 2] - optional reference to a template function rendering an empty\r\n * block\r\n *\r\n * @param index Index at which to store the metadata of the repeater.\r\n * @param templateFn Reference to the template of the main repeater block.\r\n * @param decls The number of nodes, local refs, and pipes for the main block.\r\n * @param vars The number of bindings for the main block.\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrsIndex Index of template attributes in the `consts` array.\r\n * @param trackByFn Reference to the tracking function.\r\n * @param trackByUsesComponentInstance Whether the tracking function has any references to the\r\n *  component instance. If it doesn't, we can avoid rebinding it.\r\n * @param emptyTemplateFn Reference to the template function of the empty block.\r\n * @param emptyDecls The number of nodes, local refs, and pipes for the empty block.\r\n * @param emptyVars The number of bindings for the empty block.\r\n * @param emptyTagName The name of the empty block container element, if applicable\r\n * @param emptyAttrsIndex Index of the empty block template attributes in the `consts` array.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵrepeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {\r\n    performanceMarkFeature('NgControlFlow');\r\n    ngDevMode &&\r\n        assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const hasEmptyBlock = emptyTemplateFn !== undefined;\r\n    const hostLView = getLView();\r\n    const boundTrackBy = trackByUsesComponentInstance\r\n        ? // We only want to bind when necessary, because it produces a\r\n            // new function. For pure functions it's not necessary.\r\n            trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])\r\n        : trackByFn;\r\n    const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);\r\n    hostLView[HEADER_OFFSET + index] = metadata;\r\n    declareTemplate(lView, tView, index + 1, templateFn, decls, vars, tagName, getConstant(tView.consts, attrsIndex), 256 /* TNodeFlags.isControlFlowStart */);\r\n    if (hasEmptyBlock) {\r\n        ngDevMode &&\r\n            assertDefined(emptyDecls, 'Missing number of declarations for the empty repeater block.');\r\n        ngDevMode &&\r\n            assertDefined(emptyVars, 'Missing number of bindings for the empty repeater block.');\r\n        declareTemplate(lView, tView, index + 2, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, getConstant(tView.consts, emptyAttrsIndex), 512 /* TNodeFlags.isInControlFlow */);\r\n    }\r\n}\r\nfunction isViewExpensiveToRecreate(lView) {\r\n    // assumption: anything more than a text node with a binding is considered \"expensive\"\r\n    return lView.length - HEADER_OFFSET > 2;\r\n}\r\nclass OperationsCounter {\r\n    created = 0;\r\n    destroyed = 0;\r\n    reset() {\r\n        this.created = 0;\r\n        this.destroyed = 0;\r\n    }\r\n    recordCreate() {\r\n        this.created++;\r\n    }\r\n    recordDestroy() {\r\n        this.destroyed++;\r\n    }\r\n    /**\r\n     * A method indicating if the entire collection was re-created as part of the reconciliation pass.\r\n     * Used to warn developers about the usage of a tracking function that might result in excessive\r\n     * amount of view creation / destroy operations.\r\n     *\r\n     * @returns boolean value indicating if a live collection was re-created\r\n     */\r\n    wasReCreated(collectionLen) {\r\n        return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;\r\n    }\r\n}\r\nclass LiveCollectionLContainerImpl extends LiveCollection {\r\n    lContainer;\r\n    hostLView;\r\n    templateTNode;\r\n    operationsCounter = ngDevMode ? new OperationsCounter() : undefined;\r\n    /**\r\n     Property indicating if indexes in the repeater context need to be updated following the live\r\n     collection changes. Index updates are necessary if and only if views are inserted / removed in\r\n     the middle of LContainer. Adds and removals at the end don't require index updates.\r\n   */\r\n    needsIndexUpdate = false;\r\n    constructor(lContainer, hostLView, templateTNode) {\r\n        super();\r\n        this.lContainer = lContainer;\r\n        this.hostLView = hostLView;\r\n        this.templateTNode = templateTNode;\r\n    }\r\n    get length() {\r\n        return this.lContainer.length - CONTAINER_HEADER_OFFSET;\r\n    }\r\n    at(index) {\r\n        return this.getLView(index)[CONTEXT].$implicit;\r\n    }\r\n    attach(index, lView) {\r\n        const dehydratedView = lView[HYDRATION];\r\n        this.needsIndexUpdate ||= index !== this.length;\r\n        addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));\r\n    }\r\n    detach(index) {\r\n        this.needsIndexUpdate ||= index !== this.length - 1;\r\n        return detachExistingView(this.lContainer, index);\r\n    }\r\n    create(index, value) {\r\n        const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);\r\n        const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), { dehydratedView });\r\n        this.operationsCounter?.recordCreate();\r\n        return embeddedLView;\r\n    }\r\n    destroy(lView) {\r\n        destroyLView(lView[TVIEW], lView);\r\n        this.operationsCounter?.recordDestroy();\r\n    }\r\n    updateValue(index, value) {\r\n        this.getLView(index)[CONTEXT].$implicit = value;\r\n    }\r\n    reset() {\r\n        this.needsIndexUpdate = false;\r\n        this.operationsCounter?.reset();\r\n    }\r\n    updateIndexes() {\r\n        if (this.needsIndexUpdate) {\r\n            for (let i = 0; i < this.length; i++) {\r\n                this.getLView(i)[CONTEXT].$index = i;\r\n            }\r\n        }\r\n    }\r\n    getLView(index) {\r\n        return getExistingLViewFromLContainer(this.lContainer, index);\r\n    }\r\n}\r\n/**\r\n * The repeater instruction does update-time diffing of a provided collection (against the\r\n * collection seen previously) and maps changes in the collection to views structure (by adding,\r\n * removing or moving views as needed).\r\n * @param collection - the collection instance to be checked for changes\r\n * @codeGenApi\r\n */\r\nfunction ɵɵrepeater(collection) {\r\n    const prevConsumer = setActiveConsumer(null);\r\n    const metadataSlotIdx = getSelectedIndex();\r\n    try {\r\n        const hostLView = getLView();\r\n        const hostTView = hostLView[TVIEW];\r\n        const metadata = hostLView[metadataSlotIdx];\r\n        const containerIndex = metadataSlotIdx + 1;\r\n        const lContainer = getLContainer(hostLView, containerIndex);\r\n        if (metadata.liveCollection === undefined) {\r\n            const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);\r\n            metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);\r\n        }\r\n        else {\r\n            metadata.liveCollection.reset();\r\n        }\r\n        const liveCollection = metadata.liveCollection;\r\n        reconcile(liveCollection, collection, metadata.trackByFn);\r\n        // Warn developers about situations where the entire collection was re-created as part of the\r\n        // reconciliation pass. Note that this warning might be \"overreacting\" and report cases where\r\n        // the collection re-creation is the intended behavior. Still, the assumption is that most of\r\n        // the time it is undesired.\r\n        if (ngDevMode &&\r\n            metadata.trackByFn === ɵɵrepeaterTrackByIdentity &&\r\n            liveCollection.operationsCounter?.wasReCreated(liveCollection.length) &&\r\n            isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))) {\r\n            const message = formatRuntimeError(-956 /* RuntimeErrorCode.LOOP_TRACK_RECREATE */, `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. ` +\r\n                'This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. ' +\r\n                'Please review the \"track expression\" and make sure that it uniquely identifies items in a collection.');\r\n            console.warn(message);\r\n        }\r\n        // moves in the container might caused context's index to get out of order, re-adjust if needed\r\n        liveCollection.updateIndexes();\r\n        // handle empty blocks\r\n        if (metadata.hasEmptyBlock) {\r\n            const bindingIndex = nextBindingIndex();\r\n            const isCollectionEmpty = liveCollection.length === 0;\r\n            if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {\r\n                const emptyTemplateIndex = metadataSlotIdx + 2;\r\n                const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);\r\n                if (isCollectionEmpty) {\r\n                    const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);\r\n                    const dehydratedView = findAndReconcileMatchingDehydratedViews(lContainerForEmpty, emptyTemplateTNode, hostLView);\r\n                    const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, undefined, { dehydratedView });\r\n                    addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));\r\n                }\r\n                else {\r\n                    // we know that an ssrId was generated for the empty template, but\r\n                    // we were unable to match it to a dehydrated view earlier, which\r\n                    // means that we may have changed branches between server and client.\r\n                    // We'll need to find and remove the stale empty template view.\r\n                    if (hostTView.firstUpdatePass) {\r\n                        removeDehydratedViews(lContainerForEmpty);\r\n                    }\r\n                    removeLViewFromLContainer(lContainerForEmpty, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        setActiveConsumer(prevConsumer);\r\n    }\r\n}\r\nfunction getLContainer(lView, index) {\r\n    const lContainer = lView[index];\r\n    ngDevMode && assertLContainer(lContainer);\r\n    return lContainer;\r\n}\r\nfunction detachExistingView(lContainer, index) {\r\n    const existingLView = detachView(lContainer, index);\r\n    ngDevMode && assertLView(existingLView);\r\n    return existingLView;\r\n}\r\nfunction getExistingLViewFromLContainer(lContainer, index) {\r\n    const existingLView = getLViewFromLContainer(lContainer, index);\r\n    ngDevMode && assertLView(existingLView);\r\n    return existingLView;\r\n}\r\nfunction getExistingTNode(tView, index) {\r\n    const tNode = getTNode(tView, index);\r\n    ngDevMode && assertTNode(tNode);\r\n    return tNode;\r\n}\r\n\r\n/**\r\n * Update a property on a selected element.\r\n *\r\n * Operates on the element selected by index via the {@link select} instruction.\r\n *\r\n * If the property name also exists as an input property on one of the element's directives,\r\n * the component property will be set instead of the element property. This check must\r\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\r\n *\r\n * @param propName Name of property. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @returns This function returns itself so that it may be chained\r\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵproperty(propName, value, sanitizer) {\r\n    const lView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, value)) {\r\n        const tView = getTView();\r\n        const tNode = getSelectedTNode();\r\n        setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\r\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\r\n    }\r\n    return ɵɵproperty;\r\n}\r\n/**\r\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\r\n * directive input.\r\n */\r\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\r\n    // We support both 'class' and `className` hence the fallback.\r\n    setAllInputsForProperty(tNode, tView, lView, isClassBased ? 'class' : 'style', value);\r\n}\r\n\r\n/**\r\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\r\n *\r\n * @param index Index of the element in the LView array\r\n * @param name Name of the DOM Node\r\n * @param attrsIndex Index of the element's attributes in the `consts` array.\r\n * @param localRefsIndex Index of the element's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * Attributes and localRefs are passed as an array of strings where elements with an even index\r\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\r\n * ['id', 'warning5', 'class', 'alert']\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const adjustedIndex = HEADER_OFFSET + index;\r\n    ngDevMode &&\r\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\r\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\r\n    const renderer = lView[RENDERER];\r\n    const tNode = tView.firstCreatePass\r\n        ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex)\r\n        : tView.data[adjustedIndex];\r\n    const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);\r\n    lView[adjustedIndex] = native;\r\n    const hasDirectives = isDirectiveHost(tNode);\r\n    if (ngDevMode && tView.firstCreatePass) {\r\n        validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\r\n    }\r\n    setCurrentTNode(tNode, true);\r\n    setupStaticAttributes(renderer, native, tNode);\r\n    if (!isDetachedByI18n(tNode) && wasLastNodeCreated()) {\r\n        // In the i18n case, the translation may have removed this element, so only add it if it is not\r\n        // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\r\n        appendChild(tView, lView, native, tNode);\r\n    }\r\n    // any immediate children of a component or template container must be pre-emptively\r\n    // monkey-patched with the component view data so that the element can be inspected\r\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\r\n    if (getElementDepthCount() === 0 || hasDirectives) {\r\n        attachPatchData(native, lView);\r\n    }\r\n    increaseElementDepthCount();\r\n    if (hasDirectives) {\r\n        createDirectivesInstances(tView, lView, tNode);\r\n        executeContentQueries(tView, tNode, lView);\r\n    }\r\n    if (localRefsIndex !== null) {\r\n        saveResolvedLocalsInData(lView, tNode);\r\n    }\r\n    return ɵɵelementStart;\r\n}\r\n/**\r\n * Mark the end of the element.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵelementEnd() {\r\n    let currentTNode = getCurrentTNode();\r\n    ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\r\n    if (isCurrentTNodeParent()) {\r\n        setCurrentTNodeAsNotParent();\r\n    }\r\n    else {\r\n        ngDevMode && assertHasParent(getCurrentTNode());\r\n        currentTNode = currentTNode.parent;\r\n        setCurrentTNode(currentTNode, false);\r\n    }\r\n    const tNode = currentTNode;\r\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\r\n    if (isSkipHydrationRootTNode(tNode)) {\r\n        leaveSkipHydrationBlock();\r\n    }\r\n    decreaseElementDepthCount();\r\n    const tView = getTView();\r\n    if (tView.firstCreatePass) {\r\n        elementEndFirstCreatePass(tView, tNode);\r\n    }\r\n    if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\r\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\r\n    }\r\n    if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\r\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\r\n    }\r\n    return ɵɵelementEnd;\r\n}\r\n/**\r\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\r\n *\r\n * @param index Index of the element in the data array\r\n * @param name Name of the DOM Node\r\n * @param attrsIndex Index of the element's attributes in the `consts` array.\r\n * @param localRefsIndex Index of the element's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\r\n    ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\r\n    ɵɵelementEnd();\r\n    return ɵɵelement;\r\n}\r\nlet _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {\r\n    lastNodeWasCreated(true);\r\n    return createElementNode(renderer, name, getNamespace());\r\n};\r\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode of element nodes.\r\n */\r\nfunction locateOrCreateElementNodeImpl(tView, lView, tNode, renderer, name, index) {\r\n    const hydrationInfo = lView[HYDRATION];\r\n    const isNodeCreationMode = !hydrationInfo ||\r\n        isInSkipHydrationBlock$1() ||\r\n        isDetachedByI18n(tNode) ||\r\n        isDisconnectedNode$1(hydrationInfo, index);\r\n    lastNodeWasCreated(isNodeCreationMode);\r\n    // Regular creation mode.\r\n    if (isNodeCreationMode) {\r\n        return createElementNode(renderer, name, getNamespace());\r\n    }\r\n    // Hydration mode, looking up an existing element in DOM.\r\n    const native = locateNextRNode(hydrationInfo, tView, lView, tNode);\r\n    ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);\r\n    ngDevMode && markRNodeAsClaimedByHydration(native);\r\n    // This element might also be an anchor of a view container.\r\n    if (getSerializedContainerViews(hydrationInfo, index)) {\r\n        // Important note: this element acts as an anchor, but it's **not** a part\r\n        // of the embedded view, so we start the segment **after** this element, taking\r\n        // a reference to the next sibling. For example, the following template:\r\n        // `<div #vcrTarget>` is represented in the DOM as `<div></div>...<!--container-->`,\r\n        // so while processing a `<div>` instruction, point to the next sibling as a\r\n        // start of a segment.\r\n        ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);\r\n        setSegmentHead(hydrationInfo, index, native.nextSibling);\r\n    }\r\n    // Checks if the skip hydration attribute is present during hydration so we know to\r\n    // skip attempting to hydrate this block. We check both TNode and RElement for an\r\n    // attribute: the RElement case is needed for i18n cases, when we add it to host\r\n    // elements during the annotation phase (after all internal data structures are setup).\r\n    if (hydrationInfo &&\r\n        (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {\r\n        if (isComponentHost(tNode)) {\r\n            enterSkipHydrationBlock(tNode);\r\n            // Since this isn't hydratable, we need to empty the node\r\n            // so there's no duplicate content after render\r\n            clearElementContents(native);\r\n            ngDevMode && markRNodeAsSkippedByHydration(native);\r\n        }\r\n        else if (ngDevMode) {\r\n            // If this is not a component host, throw an error.\r\n            // Hydration can be skipped on per-component basis only.\r\n            throw invalidSkipHydrationHost(native);\r\n        }\r\n    }\r\n    return native;\r\n}\r\nfunction enableLocateOrCreateElementNodeImpl() {\r\n    _locateOrCreateElementNode = locateOrCreateElementNodeImpl;\r\n}\r\n\r\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\r\n    const tViewConsts = tView.consts;\r\n    const attrs = getConstant(tViewConsts, attrsIndex);\r\n    const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\r\n    // While ng-container doesn't necessarily support styling, we use the style context to identify\r\n    // and execute directives on the ng-container.\r\n    if (attrs !== null) {\r\n        computeStaticStyling(tNode, attrs, true);\r\n    }\r\n    const localRefs = getConstant(tViewConsts, localRefsIndex);\r\n    if (getBindingsEnabled()) {\r\n        resolveDirectives(tView, lView, tNode, localRefs, findDirectiveDefMatches);\r\n    }\r\n    // Merge the template attrs last so that they have the highest priority.\r\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\r\n    if (tView.queries !== null) {\r\n        tView.queries.elementStart(tView, tNode);\r\n    }\r\n    return tNode;\r\n}\r\n/**\r\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\r\n * The instruction must later be followed by `elementContainerEnd()` call.\r\n *\r\n * @param index Index of the element in the LView array\r\n * @param attrsIndex Index of the container attributes in the `consts` array.\r\n * @param localRefsIndex Index of the container's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\r\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\r\n * matching purposes and setting initial inputs of directives.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\r\n    ngDevMode &&\r\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\r\n    const tNode = tView.firstCreatePass\r\n        ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex)\r\n        : tView.data[adjustedIndex];\r\n    setCurrentTNode(tNode, true);\r\n    const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);\r\n    lView[adjustedIndex] = comment;\r\n    if (wasLastNodeCreated()) {\r\n        appendChild(tView, lView, comment, tNode);\r\n    }\r\n    attachPatchData(comment, lView);\r\n    if (isDirectiveHost(tNode)) {\r\n        createDirectivesInstances(tView, lView, tNode);\r\n        executeContentQueries(tView, tNode, lView);\r\n    }\r\n    if (localRefsIndex != null) {\r\n        saveResolvedLocalsInData(lView, tNode);\r\n    }\r\n    return ɵɵelementContainerStart;\r\n}\r\n/**\r\n * Mark the end of the <ng-container>.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵelementContainerEnd() {\r\n    let currentTNode = getCurrentTNode();\r\n    const tView = getTView();\r\n    if (isCurrentTNodeParent()) {\r\n        setCurrentTNodeAsNotParent();\r\n    }\r\n    else {\r\n        ngDevMode && assertHasParent(currentTNode);\r\n        currentTNode = currentTNode.parent;\r\n        setCurrentTNode(currentTNode, false);\r\n    }\r\n    ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\r\n    if (tView.firstCreatePass) {\r\n        registerPostOrderHooks(tView, currentTNode);\r\n        if (isContentQueryHost(currentTNode)) {\r\n            tView.queries.elementEnd(currentTNode);\r\n        }\r\n    }\r\n    return ɵɵelementContainerEnd;\r\n}\r\n/**\r\n * Creates an empty logical container using {@link elementContainerStart}\r\n * and {@link elementContainerEnd}\r\n *\r\n * @param index Index of the element in the LView array\r\n * @param attrsIndex Index of the container attributes in the `consts` array.\r\n * @param localRefsIndex Index of the container's local references in the `consts` array.\r\n * @returns This function returns itself so that it may be chained.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\r\n    ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\r\n    ɵɵelementContainerEnd();\r\n    return ɵɵelementContainer;\r\n}\r\nlet _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {\r\n    lastNodeWasCreated(true);\r\n    return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\r\n};\r\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode of comment nodes that\r\n * represent <ng-container>'s anchor.\r\n */\r\nfunction locateOrCreateElementContainerNode(tView, lView, tNode, index) {\r\n    let comment;\r\n    const hydrationInfo = lView[HYDRATION];\r\n    const isNodeCreationMode = !hydrationInfo ||\r\n        isInSkipHydrationBlock$1() ||\r\n        isDisconnectedNode$1(hydrationInfo, index) ||\r\n        isDetachedByI18n(tNode);\r\n    lastNodeWasCreated(isNodeCreationMode);\r\n    // Regular creation mode.\r\n    if (isNodeCreationMode) {\r\n        return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\r\n    }\r\n    // Hydration mode, looking up existing elements in DOM.\r\n    const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\r\n    ngDevMode && validateNodeExists(currentRNode, lView, tNode);\r\n    const ngContainerSize = getNgContainerSize(hydrationInfo, index);\r\n    ngDevMode &&\r\n        assertNumber(ngContainerSize, 'Unexpected state: hydrating an <ng-container>, ' + 'but no hydration info is available.');\r\n    setSegmentHead(hydrationInfo, index, currentRNode);\r\n    comment = siblingAfter(ngContainerSize, currentRNode);\r\n    if (ngDevMode) {\r\n        validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\r\n        markRNodeAsClaimedByHydration(comment);\r\n    }\r\n    return comment;\r\n}\r\nfunction enableLocateOrCreateElementContainerNodeImpl() {\r\n    _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;\r\n}\r\n\r\n/**\r\n * Returns the current OpaqueViewState instance.\r\n *\r\n * Used in conjunction with the restoreView() instruction to save a snapshot\r\n * of the current view and restore it when listeners are invoked. This allows\r\n * walking the declaration view tree in listeners to get vars from parent views.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵgetCurrentView() {\r\n    return getLView();\r\n}\r\n\r\n/**\r\n * Update a DOM property on an element.\r\n *\r\n * @param propName Name of property..\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @returns This function returns itself so that it may be chained\r\n *  (e.g. `domProperty('name', ctx.name)('title', ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdomProperty(propName, value, sanitizer) {\r\n    const lView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, value)) {\r\n        const tView = getTView();\r\n        const tNode = getSelectedTNode();\r\n        setDomProperty(tNode, lView, propName, value, lView[RENDERER], sanitizer);\r\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\r\n    }\r\n    return ɵɵdomProperty;\r\n}\r\n// TODO(crisbeto): try to fold this into `domProperty`. Main difference is the renderer.\r\n/**\r\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\r\n *\r\n * This instruction is for compatibility purposes and is designed to ensure that a\r\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\r\n * the component's renderer. Normally all host bindings are evaluated with the parent\r\n * component's renderer, but, in the case of animation @triggers, they need to be\r\n * evaluated with the sub component's renderer (because that's where the animation\r\n * triggers are defined).\r\n *\r\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\r\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\r\n *\r\n * @param index The index of the element to update in the data array\r\n * @param propName Name of property. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\r\n    const lView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, value)) {\r\n        const tView = getTView();\r\n        const tNode = getSelectedTNode();\r\n        const currentDef = getCurrentDirectiveDef(tView.data);\r\n        const renderer = loadComponentRenderer(currentDef, tNode, lView);\r\n        setDomProperty(tNode, lView, propName, value, renderer, sanitizer);\r\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\r\n    }\r\n    return ɵɵsyntheticHostProperty;\r\n}\r\n\r\n// THIS CODE IS GENERATED - DO NOT MODIFY.\r\nconst u = undefined;\r\nfunction plural(val) {\r\n    const i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\r\n    if (i === 1 && v === 0)\r\n        return 1;\r\n    return 5;\r\n}\r\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\r\n\r\n/**\r\n * This const is used to store the locale data registered with `registerLocaleData`\r\n */\r\nlet LOCALE_DATA = {};\r\n/**\r\n * Register locale data to be used internally by Angular. See the\r\n * [\"I18n guide\"](guide/i18n/format-data-locale) to know how to import additional locale\r\n * data.\r\n *\r\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\r\n */\r\nfunction registerLocaleData(data, localeId, extraData) {\r\n    if (typeof localeId !== 'string') {\r\n        extraData = localeId;\r\n        localeId = data[LocaleDataIndex.LocaleId];\r\n    }\r\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\r\n    LOCALE_DATA[localeId] = data;\r\n    if (extraData) {\r\n        LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\r\n    }\r\n}\r\n/**\r\n * Finds the locale data for a given locale.\r\n *\r\n * @param locale The locale code.\r\n * @returns The locale data.\r\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\r\n */\r\nfunction findLocaleData(locale) {\r\n    const normalizedLocale = normalizeLocale(locale);\r\n    let match = getLocaleData(normalizedLocale);\r\n    if (match) {\r\n        return match;\r\n    }\r\n    // let's try to find a parent locale\r\n    const parentLocale = normalizedLocale.split('-')[0];\r\n    match = getLocaleData(parentLocale);\r\n    if (match) {\r\n        return match;\r\n    }\r\n    if (parentLocale === 'en') {\r\n        return localeEn;\r\n    }\r\n    throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\r\n}\r\n/**\r\n * Retrieves the default currency code for the given locale.\r\n *\r\n * The default is defined as the first currency which is still in use.\r\n *\r\n * @param locale The code of the locale whose currency code we want.\r\n * @returns The code of the default currency for the given locale.\r\n *\r\n */\r\nfunction getLocaleCurrencyCode(locale) {\r\n    const data = findLocaleData(locale);\r\n    return data[LocaleDataIndex.CurrencyCode] || null;\r\n}\r\n/**\r\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\r\n * for a given locale.\r\n * @param locale A locale code for the locale format rules to use.\r\n * @returns The plural function for the locale.\r\n * @see {@link NgPlural}\r\n * @see [Internationalization (i18n) Guide](guide/i18n)\r\n */\r\nfunction getLocalePluralCase(locale) {\r\n    const data = findLocaleData(locale);\r\n    return data[LocaleDataIndex.PluralCase];\r\n}\r\n/**\r\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\r\n * or from the global `ng.common.locale`.\r\n */\r\nfunction getLocaleData(normalizedLocale) {\r\n    if (!(normalizedLocale in LOCALE_DATA)) {\r\n        LOCALE_DATA[normalizedLocale] =\r\n            _global.ng &&\r\n                _global.ng.common &&\r\n                _global.ng.common.locales &&\r\n                _global.ng.common.locales[normalizedLocale];\r\n    }\r\n    return LOCALE_DATA[normalizedLocale];\r\n}\r\n/**\r\n * Helper function to remove all the locale data from `LOCALE_DATA`.\r\n */\r\nfunction unregisterAllLocaleData() {\r\n    LOCALE_DATA = {};\r\n}\r\n/**\r\n * Index of each type of locale data from the locale data array\r\n */\r\nvar LocaleDataIndex;\r\n(function (LocaleDataIndex) {\r\n    LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\r\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\r\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\r\n    LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\r\n    LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\r\n    LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\r\n    LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\r\n    LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\r\n    LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\r\n    LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\r\n    LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\r\n    LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\r\n    LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\r\n    LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\r\n    LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\r\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\r\n    LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\r\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\r\n    LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\r\n    LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\r\n    LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\r\n    LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\r\n})(LocaleDataIndex || (LocaleDataIndex = {}));\r\n/**\r\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\r\n */\r\nfunction normalizeLocale(locale) {\r\n    return locale.toLowerCase().replace(/_/g, '-');\r\n}\r\n\r\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\r\n/**\r\n * Returns the plural case based on the locale\r\n */\r\nfunction getPluralCase(value, locale) {\r\n    const plural = getLocalePluralCase(locale)(parseInt(value, 10));\r\n    const result = pluralMapping[plural];\r\n    return result !== undefined ? result : 'other';\r\n}\r\n/**\r\n * The locale id that the application is using by default (for translations and ICU expressions).\r\n */\r\nconst DEFAULT_LOCALE_ID = 'en-US';\r\n/**\r\n * USD currency code that the application uses by default for CurrencyPipe when no\r\n * DEFAULT_CURRENCY_CODE is provided.\r\n */\r\nconst USD_CURRENCY_CODE = 'USD';\r\n\r\n/**\r\n * Marks that the next string is an element name.\r\n *\r\n * See `I18nMutateOpCodes` documentation.\r\n */\r\nconst ELEMENT_MARKER = {\r\n    marker: 'element',\r\n};\r\n/**\r\n * Marks that the next string is comment text need for ICU.\r\n *\r\n * See `I18nMutateOpCodes` documentation.\r\n */\r\nconst ICU_MARKER = {\r\n    marker: 'ICU',\r\n};\r\n/**\r\n * See `I18nCreateOpCodes`\r\n */\r\nvar I18nCreateOpCode;\r\n(function (I18nCreateOpCode) {\r\n    /**\r\n     * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\r\n     * `COMMENT`.\r\n     */\r\n    I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\r\n    /**\r\n     * Should the node be appended to parent immediately after creation.\r\n     */\r\n    I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\r\n    /**\r\n     * If set the node should be comment (rather than a text) node.\r\n     */\r\n    I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\r\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\r\n\r\n/**\r\n * The locale id that the application is currently using (for translations and ICU expressions).\r\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\r\n * but is now defined as a global value.\r\n */\r\nlet LOCALE_ID$1 = DEFAULT_LOCALE_ID;\r\n/**\r\n * Sets the locale id that will be used for translations and ICU expressions.\r\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\r\n * but is now defined as a global value.\r\n *\r\n * @param localeId\r\n */\r\nfunction setLocaleId(localeId) {\r\n    ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);\r\n    if (typeof localeId === 'string') {\r\n        LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');\r\n    }\r\n}\r\n/**\r\n * Gets the locale id that will be used for translations and ICU expressions.\r\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\r\n * but is now defined as a global value.\r\n */\r\nfunction getLocaleId() {\r\n    return LOCALE_ID$1;\r\n}\r\n\r\n/**\r\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\r\n *\r\n * This is used to efficiently update expressions in i18n only when the corresponding input has\r\n * changed.\r\n *\r\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\r\n * 2) There are 32 bits allowed in JS.\r\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\r\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\r\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\r\n * so in practice it should not be an issue.)\r\n */\r\nlet changeMask = 0b0;\r\n/**\r\n * Keeps track of which bit needs to be updated in `changeMask`\r\n *\r\n * This value gets incremented on every call to `ɵɵi18nExp`\r\n */\r\nlet changeMaskCounter = 0;\r\n/**\r\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\r\n *\r\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\r\n *\r\n * @param hasChange did `ɵɵi18nExp` detect a change.\r\n */\r\nfunction setMaskBit(hasChange) {\r\n    if (hasChange) {\r\n        changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\r\n    }\r\n    changeMaskCounter++;\r\n}\r\nfunction applyI18n(tView, lView, index) {\r\n    if (changeMaskCounter > 0) {\r\n        ngDevMode && assertDefined(tView, `tView should be defined`);\r\n        const tI18n = tView.data[index];\r\n        // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\r\n        const updateOpCodes = Array.isArray(tI18n)\r\n            ? tI18n\r\n            : tI18n.update;\r\n        const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\r\n        applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\r\n    }\r\n    // Reset changeMask & maskBit to default for the next update cycle\r\n    changeMask = 0b0;\r\n    changeMaskCounter = 0;\r\n}\r\nfunction createNodeWithoutHydration(lView, textOrName, nodeType) {\r\n    const renderer = lView[RENDERER];\r\n    switch (nodeType) {\r\n        case Node.COMMENT_NODE:\r\n            return createCommentNode(renderer, textOrName);\r\n        case Node.TEXT_NODE:\r\n            return createTextNode(renderer, textOrName);\r\n        case Node.ELEMENT_NODE:\r\n            return createElementNode(renderer, textOrName, null);\r\n    }\r\n}\r\nlet _locateOrCreateNode = (lView, index, textOrName, nodeType) => {\r\n    lastNodeWasCreated(true);\r\n    return createNodeWithoutHydration(lView, textOrName, nodeType);\r\n};\r\nfunction locateOrCreateNodeImpl(lView, index, textOrName, nodeType) {\r\n    const hydrationInfo = lView[HYDRATION];\r\n    const noOffsetIndex = index - HEADER_OFFSET;\r\n    const isNodeCreationMode = !isI18nHydrationSupportEnabled() ||\r\n        !hydrationInfo ||\r\n        isInSkipHydrationBlock$1() ||\r\n        isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\r\n    lastNodeWasCreated(isNodeCreationMode);\r\n    if (isNodeCreationMode) {\r\n        return createNodeWithoutHydration(lView, textOrName, nodeType);\r\n    }\r\n    const native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);\r\n    // TODO: Improve error handling\r\n    //\r\n    // Other hydration paths use validateMatchingNode() in order to provide\r\n    // detailed information in development mode about the expected DOM.\r\n    // However, not every node in an i18n block has a TNode. Instead, we\r\n    // need to be able to use the AST to generate a similar message.\r\n    ngDevMode && assertDefined(native, 'expected native element');\r\n    ngDevMode && assertEqual(native.nodeType, nodeType, 'expected matching nodeType');\r\n    ngDevMode &&\r\n        nodeType === Node.ELEMENT_NODE &&\r\n        assertEqual(native.tagName.toLowerCase(), textOrName.toLowerCase(), 'expecting matching tagName');\r\n    ngDevMode && markRNodeAsClaimedByHydration(native);\r\n    return native;\r\n}\r\nfunction enableLocateOrCreateI18nNodeImpl() {\r\n    _locateOrCreateNode = locateOrCreateNodeImpl;\r\n}\r\n/**\r\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\r\n *\r\n * Creates text (and comment) nodes which are internationalized.\r\n *\r\n * @param lView Current lView\r\n * @param createOpCodes Set of op-codes to apply\r\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\r\n *     a root node.\r\n * @param insertInFrontOf DOM node that should be used as an anchor.\r\n */\r\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\r\n    const renderer = lView[RENDERER];\r\n    for (let i = 0; i < createOpCodes.length; i++) {\r\n        const opCode = createOpCodes[i++];\r\n        const text = createOpCodes[i];\r\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\r\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\r\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\r\n        let rNode = lView[index];\r\n        let lastNodeWasCreated = false;\r\n        if (rNode === null) {\r\n            // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\r\n            // case which was already instantiated, no need to create new DOM nodes.\r\n            rNode = lView[index] = _locateOrCreateNode(lView, index, text, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);\r\n            lastNodeWasCreated = wasLastNodeCreated();\r\n        }\r\n        if (appendNow && parentRNode !== null && lastNodeWasCreated) {\r\n            nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Apply `I18nMutateOpCodes` OpCodes.\r\n *\r\n * @param tView Current `TView`\r\n * @param mutableOpCodes Mutable OpCodes to process\r\n * @param lView Current `LView`\r\n * @param anchorRNode place where the i18n node should be inserted.\r\n */\r\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\r\n    ngDevMode && assertDomNode(anchorRNode);\r\n    const renderer = lView[RENDERER];\r\n    // `rootIdx` represents the node into which all inserts happen.\r\n    let rootIdx = null;\r\n    // `rootRNode` represents the real node into which we insert. This can be different from\r\n    // `lView[rootIdx]` if we have projection.\r\n    //  - null we don't have a parent (as can be the case in when we are inserting into a root of\r\n    //    LView which has no parent.)\r\n    //  - `RElement` The element representing the root after taking projection into account.\r\n    let rootRNode;\r\n    for (let i = 0; i < mutableOpCodes.length; i++) {\r\n        const opCode = mutableOpCodes[i];\r\n        if (typeof opCode == 'string') {\r\n            const textNodeIndex = mutableOpCodes[++i];\r\n            if (lView[textNodeIndex] === null) {\r\n                ngDevMode && assertIndexInRange(lView, textNodeIndex);\r\n                lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);\r\n            }\r\n        }\r\n        else if (typeof opCode == 'number') {\r\n            switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\r\n                case 0 /* IcuCreateOpCode.AppendChild */:\r\n                    const parentIdx = getParentFromIcuCreateOpCode(opCode);\r\n                    if (rootIdx === null) {\r\n                        // The first operation should save the `rootIdx` because the first operation\r\n                        // must insert into the root. (Only subsequent operations can insert into a dynamic\r\n                        // parent)\r\n                        rootIdx = parentIdx;\r\n                        rootRNode = renderer.parentNode(anchorRNode);\r\n                    }\r\n                    let insertInFrontOf;\r\n                    let parentRNode;\r\n                    if (parentIdx === rootIdx) {\r\n                        insertInFrontOf = anchorRNode;\r\n                        parentRNode = rootRNode;\r\n                    }\r\n                    else {\r\n                        insertInFrontOf = null;\r\n                        parentRNode = unwrapRNode(lView[parentIdx]);\r\n                    }\r\n                    // FIXME(misko): Refactor with `processI18nText`\r\n                    if (parentRNode !== null) {\r\n                        // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\r\n                        // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\r\n                        // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\r\n                        // get picked up and added.\r\n                        ngDevMode && assertDomNode(parentRNode);\r\n                        const refIdx = getRefFromIcuCreateOpCode(opCode);\r\n                        ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\r\n                        // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\r\n                        // which can't have components.\r\n                        const child = lView[refIdx];\r\n                        ngDevMode && assertDomNode(child);\r\n                        nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\r\n                        const tIcu = getTIcu(tView, refIdx);\r\n                        if (tIcu !== null && typeof tIcu === 'object') {\r\n                            // If we just added a comment node which has ICU then that ICU may have already been\r\n                            // rendered and therefore we need to re-add it here.\r\n                            ngDevMode && assertTIcu(tIcu);\r\n                            const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\r\n                            if (caseIndex !== null) {\r\n                                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1 /* IcuCreateOpCode.Attr */:\r\n                    const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\r\n                    const attrName = mutableOpCodes[++i];\r\n                    const attrValue = mutableOpCodes[++i];\r\n                    // This code is used for ICU expressions only, since we don't support\r\n                    // directives/components in ICUs, we don't need to worry about inputs here\r\n                    setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\r\n                    break;\r\n                default:\r\n                    if (ngDevMode) {\r\n                        throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\r\n                    }\r\n            }\r\n        }\r\n        else {\r\n            switch (opCode) {\r\n                case ICU_MARKER:\r\n                    const commentValue = mutableOpCodes[++i];\r\n                    const commentNodeIndex = mutableOpCodes[++i];\r\n                    if (lView[commentNodeIndex] === null) {\r\n                        ngDevMode &&\r\n                            assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\r\n                        ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\r\n                        const commentRNode = (lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE));\r\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\r\n                        attachPatchData(commentRNode, lView);\r\n                    }\r\n                    break;\r\n                case ELEMENT_MARKER:\r\n                    const tagName = mutableOpCodes[++i];\r\n                    const elementNodeIndex = mutableOpCodes[++i];\r\n                    if (lView[elementNodeIndex] === null) {\r\n                        ngDevMode &&\r\n                            assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\r\n                        ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\r\n                        const elementRNode = (lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE));\r\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\r\n                        attachPatchData(elementRNode, lView);\r\n                    }\r\n                    break;\r\n                default:\r\n                    ngDevMode &&\r\n                        throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Apply `I18nUpdateOpCodes` OpCodes\r\n *\r\n * @param tView Current `TView`\r\n * @param lView Current `LView`\r\n * @param updateOpCodes OpCodes to process\r\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\r\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\r\n *     `bindingsStartIndex`)\r\n */\r\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\r\n    for (let i = 0; i < updateOpCodes.length; i++) {\r\n        // bit code to check if we should apply the next update\r\n        const checkBit = updateOpCodes[i];\r\n        // Number of opCodes to skip until next set of update codes\r\n        const skipCodes = updateOpCodes[++i];\r\n        if (checkBit & changeMask) {\r\n            // The value has been updated since last checked\r\n            let value = '';\r\n            for (let j = i + 1; j <= i + skipCodes; j++) {\r\n                const opCode = updateOpCodes[j];\r\n                if (typeof opCode == 'string') {\r\n                    value += opCode;\r\n                }\r\n                else if (typeof opCode == 'number') {\r\n                    if (opCode < 0) {\r\n                        // Negative opCode represent `i18nExp` values offset.\r\n                        value += renderStringify(lView[bindingsStartIndex - opCode]);\r\n                    }\r\n                    else {\r\n                        const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\r\n                        switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\r\n                            case 1 /* I18nUpdateOpCode.Attr */:\r\n                                const propName = updateOpCodes[++j];\r\n                                const sanitizeFn = updateOpCodes[++j];\r\n                                const tNodeOrTagName = tView.data[nodeIndex];\r\n                                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\r\n                                if (typeof tNodeOrTagName === 'string') {\r\n                                    // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\r\n                                    // not have TNode), in which case we know that there are no directives, and hence\r\n                                    // we use attribute setting.\r\n                                    setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\r\n                                }\r\n                                else {\r\n                                    setPropertyAndInputs(tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn);\r\n                                }\r\n                                break;\r\n                            case 0 /* I18nUpdateOpCode.Text */:\r\n                                const rText = lView[nodeIndex];\r\n                                rText !== null && updateTextNode(lView[RENDERER], rText, value);\r\n                                break;\r\n                            case 2 /* I18nUpdateOpCode.IcuSwitch */:\r\n                                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\r\n                                break;\r\n                            case 3 /* I18nUpdateOpCode.IcuUpdate */:\r\n                                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const opCode = updateOpCodes[i + 1];\r\n            if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\r\n                // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\r\n                // we still need to execute `icuUpdateCase` because the case has changed recently due to\r\n                // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\r\n                // pairs.)\r\n                const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\r\n                const tIcu = getTIcu(tView, nodeIndex);\r\n                const currentIndex = lView[tIcu.currentCaseLViewIndex];\r\n                if (currentIndex < 0) {\r\n                    applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\r\n                }\r\n            }\r\n        }\r\n        i += skipCodes;\r\n    }\r\n}\r\n/**\r\n * Apply OpCodes associated with updating an existing ICU.\r\n *\r\n * @param tView Current `TView`\r\n * @param tIcu Current `TIcu`\r\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\r\n * @param lView Current `LView`\r\n */\r\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\r\n    ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\r\n    let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\r\n    if (activeCaseIndex !== null) {\r\n        let mask = changeMask;\r\n        if (activeCaseIndex < 0) {\r\n            // Clear the flag.\r\n            // Negative number means that the ICU was freshly created and we need to force the update.\r\n            activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\r\n            // -1 is same as all bits on, which simulates creation since it marks all bits dirty\r\n            mask = -1;\r\n        }\r\n        applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\r\n    }\r\n}\r\n/**\r\n * Apply OpCodes associated with switching a case on ICU.\r\n *\r\n * This involves tearing down existing case and than building up a new case.\r\n *\r\n * @param tView Current `TView`\r\n * @param tIcu Current `TIcu`\r\n * @param lView Current `LView`\r\n * @param value Value of the case to update to.\r\n */\r\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\r\n    // Rebuild a new case for this ICU\r\n    const caseIndex = getCaseIndex(tIcu, value);\r\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\r\n    if (activeCaseIndex !== caseIndex) {\r\n        applyIcuSwitchCaseRemove(tView, tIcu, lView);\r\n        lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\r\n        if (caseIndex !== null) {\r\n            // Add the nodes for the new case\r\n            const anchorRNode = lView[tIcu.anchorIdx];\r\n            if (anchorRNode) {\r\n                ngDevMode && assertDomNode(anchorRNode);\r\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\r\n            }\r\n            claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Apply OpCodes associated with tearing ICU case.\r\n *\r\n * This involves tearing down existing case and than building up a new case.\r\n *\r\n * @param tView Current `TView`\r\n * @param tIcu Current `TIcu`\r\n * @param lView Current `LView`\r\n */\r\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\r\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\r\n    if (activeCaseIndex !== null) {\r\n        const removeCodes = tIcu.remove[activeCaseIndex];\r\n        for (let i = 0; i < removeCodes.length; i++) {\r\n            const nodeOrIcuIndex = removeCodes[i];\r\n            if (nodeOrIcuIndex > 0) {\r\n                // Positive numbers are `RNode`s.\r\n                const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\r\n                rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\r\n            }\r\n            else {\r\n                // Negative numbers are ICUs\r\n                applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the index of the current case of an ICU expression depending on the main binding value\r\n *\r\n * @param icuExpression\r\n * @param bindingValue The value of the main binding used by this ICU expression\r\n */\r\nfunction getCaseIndex(icuExpression, bindingValue) {\r\n    let index = icuExpression.cases.indexOf(bindingValue);\r\n    if (index === -1) {\r\n        switch (icuExpression.type) {\r\n            case 1 /* IcuType.plural */: {\r\n                const resolvedCase = getPluralCase(bindingValue, getLocaleId());\r\n                index = icuExpression.cases.indexOf(resolvedCase);\r\n                if (index === -1 && resolvedCase !== 'other') {\r\n                    index = icuExpression.cases.indexOf('other');\r\n                }\r\n                break;\r\n            }\r\n            case 0 /* IcuType.select */: {\r\n                index = icuExpression.cases.indexOf('other');\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return index === -1 ? null : index;\r\n}\r\n\r\n/**\r\n * Converts `I18nCreateOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\r\n * This function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nCreateOpCodes` if attached as a method.\r\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\r\n */\r\nfunction i18nCreateOpCodesToString(opcodes) {\r\n    const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\r\n    let lines = [];\r\n    for (let i = 0; i < createOpCodes.length; i++) {\r\n        const opCode = createOpCodes[i++];\r\n        const text = createOpCodes[i];\r\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\r\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\r\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\r\n        lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\r\n        if (appendNow) {\r\n            lines.push(`parent.appendChild(lView[${index}]);`);\r\n        }\r\n    }\r\n    return lines;\r\n}\r\n/**\r\n * Converts `I18nUpdateOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\r\n * This function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nUpdateOpCodes` if attached as a method.\r\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\r\n */\r\nfunction i18nUpdateOpCodesToString(opcodes) {\r\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\r\n    let lines = [];\r\n    function consumeOpCode(value) {\r\n        const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\r\n        const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\r\n        switch (opCode) {\r\n            case 0 /* I18nUpdateOpCode.Text */:\r\n                return `(lView[${ref}] as Text).textContent = $$$`;\r\n            case 1 /* I18nUpdateOpCode.Attr */:\r\n                const attrName = parser.consumeString();\r\n                const sanitizationFn = parser.consumeFunction();\r\n                const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\r\n                return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\r\n            case 2 /* I18nUpdateOpCode.IcuSwitch */:\r\n                return `icuSwitchCase(${ref}, $$$)`;\r\n            case 3 /* I18nUpdateOpCode.IcuUpdate */:\r\n                return `icuUpdateCase(${ref})`;\r\n        }\r\n        throw new Error('unexpected OpCode');\r\n    }\r\n    while (parser.hasMore()) {\r\n        let mask = parser.consumeNumber();\r\n        let size = parser.consumeNumber();\r\n        const end = parser.i + size;\r\n        const statements = [];\r\n        let statement = '';\r\n        while (parser.i < end) {\r\n            let value = parser.consumeNumberOrString();\r\n            if (typeof value === 'string') {\r\n                statement += value;\r\n            }\r\n            else if (value < 0) {\r\n                // Negative numbers are ref indexes\r\n                // Here `i` refers to current binding index. It is to signify that the value is relative,\r\n                // rather than absolute.\r\n                statement += '${lView[i' + value + ']}';\r\n            }\r\n            else {\r\n                // Positive numbers are operations.\r\n                const opCodeText = consumeOpCode(value);\r\n                statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\r\n                statement = '';\r\n            }\r\n        }\r\n        lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\r\n    }\r\n    return lines;\r\n}\r\n/**\r\n * Converts `I18nCreateOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\r\n * function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nCreateOpCodes` if attached as a method.\r\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\r\n */\r\nfunction icuCreateOpCodesToString(opcodes) {\r\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\r\n    let lines = [];\r\n    function consumeOpCode(opCode) {\r\n        const parent = getParentFromIcuCreateOpCode(opCode);\r\n        const ref = getRefFromIcuCreateOpCode(opCode);\r\n        switch (getInstructionFromIcuCreateOpCode(opCode)) {\r\n            case 0 /* IcuCreateOpCode.AppendChild */:\r\n                return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\r\n            case 1 /* IcuCreateOpCode.Attr */:\r\n                return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\r\n        }\r\n        throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\r\n    }\r\n    let lastRef = -1;\r\n    while (parser.hasMore()) {\r\n        let value = parser.consumeNumberStringOrMarker();\r\n        if (value === ICU_MARKER) {\r\n            const text = parser.consumeString();\r\n            lastRef = parser.consumeNumber();\r\n            lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\r\n        }\r\n        else if (value === ELEMENT_MARKER) {\r\n            const text = parser.consumeString();\r\n            lastRef = parser.consumeNumber();\r\n            lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\r\n        }\r\n        else if (typeof value === 'string') {\r\n            lastRef = parser.consumeNumber();\r\n            lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\r\n        }\r\n        else if (typeof value === 'number') {\r\n            const line = consumeOpCode(value);\r\n            line && lines.push(line);\r\n        }\r\n        else {\r\n            throw new Error('Unexpected value');\r\n        }\r\n    }\r\n    return lines;\r\n}\r\n/**\r\n * Converts `I18nRemoveOpCodes` array into a human readable format.\r\n *\r\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\r\n * function provides a human readable view of the opcodes. This is useful when debugging the\r\n * application as well as writing more readable tests.\r\n *\r\n * @param this `I18nRemoveOpCodes` if attached as a method.\r\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\r\n */\r\nfunction i18nRemoveOpCodesToString(opcodes) {\r\n    const removeCodes = opcodes || (Array.isArray(this) ? this : []);\r\n    let lines = [];\r\n    for (let i = 0; i < removeCodes.length; i++) {\r\n        const nodeOrIcuIndex = removeCodes[i];\r\n        if (nodeOrIcuIndex > 0) {\r\n            // Positive numbers are `RNode`s.\r\n            lines.push(`remove(lView[${nodeOrIcuIndex}])`);\r\n        }\r\n        else {\r\n            // Negative numbers are ICUs\r\n            lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\r\n        }\r\n    }\r\n    return lines;\r\n}\r\nclass OpCodeParser {\r\n    i = 0;\r\n    codes;\r\n    constructor(codes) {\r\n        this.codes = codes;\r\n    }\r\n    hasMore() {\r\n        return this.i < this.codes.length;\r\n    }\r\n    consumeNumber() {\r\n        let value = this.codes[this.i++];\r\n        assertNumber(value, 'expecting number in OpCode');\r\n        return value;\r\n    }\r\n    consumeString() {\r\n        let value = this.codes[this.i++];\r\n        assertString(value, 'expecting string in OpCode');\r\n        return value;\r\n    }\r\n    consumeFunction() {\r\n        let value = this.codes[this.i++];\r\n        if (value === null || typeof value === 'function') {\r\n            return value;\r\n        }\r\n        throw new Error('expecting function in OpCode');\r\n    }\r\n    consumeNumberOrString() {\r\n        let value = this.codes[this.i++];\r\n        if (typeof value === 'string') {\r\n            return value;\r\n        }\r\n        assertNumber(value, 'expecting number or string in OpCode');\r\n        return value;\r\n    }\r\n    consumeNumberStringOrMarker() {\r\n        let value = this.codes[this.i++];\r\n        if (typeof value === 'string' ||\r\n            typeof value === 'number' ||\r\n            value == ICU_MARKER ||\r\n            value == ELEMENT_MARKER) {\r\n            return value;\r\n        }\r\n        assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\r\n        return value;\r\n    }\r\n}\r\n\r\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\r\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\r\nconst NESTED_ICU = /�(\\d+)�/;\r\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\r\nconst MARKER = `�`;\r\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\r\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\r\n/**\r\n * Angular uses the special entity &ngsp; as a placeholder for non-removable space.\r\n * It's replaced by the 0xE500 PUA (Private Use Areas) unicode character and later on replaced by a\r\n * space.\r\n * We are re-implementing the same idea since translations might contain this special character.\r\n */\r\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\r\nfunction replaceNgsp(value) {\r\n    return value.replace(NGSP_UNICODE_REGEXP, ' ');\r\n}\r\n/**\r\n * Patch a `debug` property getter on top of the existing object.\r\n *\r\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\r\n *\r\n * @param obj Object to patch\r\n * @param debugGetter Getter returning a value to patch\r\n */\r\nfunction attachDebugGetter(obj, debugGetter) {\r\n    if (ngDevMode) {\r\n        Object.defineProperty(obj, 'debug', { get: debugGetter, enumerable: false });\r\n    }\r\n    else {\r\n        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\r\n    }\r\n}\r\n/**\r\n * Create dynamic nodes from i18n translation block.\r\n *\r\n * - Text nodes are created synchronously\r\n * - TNodes are linked into tree lazily\r\n *\r\n * @param tView Current `TView`\r\n * @parentTNodeIndex index to the parent TNode of this i18n block\r\n * @param lView Current `LView`\r\n * @param index Index of `ɵɵi18nStart` instruction.\r\n * @param message Message to translate.\r\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\r\n *     `ngIf`) (-1 otherwise)\r\n */\r\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\r\n    const rootTNode = getCurrentParentTNode();\r\n    const createOpCodes = [];\r\n    const updateOpCodes = [];\r\n    const existingTNodeStack = [[]];\r\n    const astStack = [[]];\r\n    if (ngDevMode) {\r\n        attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\r\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\r\n    }\r\n    message = getTranslationForTemplate(message, subTemplateIndex);\r\n    const msgParts = replaceNgsp(message).split(PH_REGEXP);\r\n    for (let i = 0; i < msgParts.length; i++) {\r\n        let value = msgParts[i];\r\n        if ((i & 1) === 0) {\r\n            // Even indexes are text (including bindings & ICU expressions)\r\n            const parts = i18nParseTextIntoPartsAndICU(value);\r\n            for (let j = 0; j < parts.length; j++) {\r\n                let part = parts[j];\r\n                if ((j & 1) === 0) {\r\n                    // `j` is odd therefore `part` is string\r\n                    const text = part;\r\n                    ngDevMode && assertString(text, 'Parsed ICU part should be string');\r\n                    if (text !== '') {\r\n                        i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\r\n                    }\r\n                }\r\n                else {\r\n                    // `j` is Even therefor `part` is an `ICUExpression`\r\n                    const icuExpression = part;\r\n                    // Verify that ICU expression has the right shape. Translations might contain invalid\r\n                    // constructions (while original messages were correct), so ICU parsing at runtime may\r\n                    // not succeed (thus `icuExpression` remains a string).\r\n                    // Note: we intentionally retain the error here by not using `ngDevMode`, because\r\n                    // the value can change based on the locale and users aren't guaranteed to hit\r\n                    // an invalid string while they're developing.\r\n                    if (typeof icuExpression !== 'object') {\r\n                        throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\r\n                    }\r\n                    const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\r\n                    const icuNodeIndex = icuContainerTNode.index;\r\n                    ngDevMode &&\r\n                        assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\r\n                    icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Odd indexes are placeholders (elements and sub-templates)\r\n            // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\r\n            const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\r\n            const type = value.charCodeAt(isClosing ? 1 : 0);\r\n            ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\r\n            const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\r\n            if (isClosing) {\r\n                existingTNodeStack.shift();\r\n                astStack.shift();\r\n                setCurrentTNode(getCurrentParentTNode(), false);\r\n            }\r\n            else {\r\n                const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\r\n                existingTNodeStack.unshift([]);\r\n                setCurrentTNode(tNode, true);\r\n                const placeholderNode = {\r\n                    kind: 2 /* I18nNodeKind.PLACEHOLDER */,\r\n                    index,\r\n                    children: [],\r\n                    type: type === 35 /* CharCode.HASH */ ? 0 /* I18nPlaceholderType.ELEMENT */ : 1 /* I18nPlaceholderType.SUBTEMPLATE */,\r\n                };\r\n                astStack[0].push(placeholderNode);\r\n                astStack.unshift(placeholderNode.children);\r\n            }\r\n        }\r\n    }\r\n    tView.data[index] = {\r\n        create: createOpCodes,\r\n        update: updateOpCodes,\r\n        ast: astStack[0],\r\n        parentTNodeIndex,\r\n    };\r\n}\r\n/**\r\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\r\n *\r\n * @param tView Current `TView` needed to allocate space in i18n range.\r\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\r\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\r\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\r\n * @param lView Current `LView` needed to allocate space in i18n range.\r\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\r\n * @param text Text to be added when the `Text` or `Comment` node will be created.\r\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\r\n */\r\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\r\n    const i18nNodeIdx = allocExpando(tView, lView, 1, null);\r\n    let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\r\n    let parentTNode = getCurrentParentTNode();\r\n    if (rootTNode === parentTNode) {\r\n        // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\r\n        // (there is no parent), but in some circumstances (because we are inconsistent about how we set\r\n        // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\r\n        parentTNode = null;\r\n    }\r\n    if (parentTNode === null) {\r\n        // If we don't have a parent that means that we can eagerly add nodes.\r\n        // If we have a parent than these nodes can't be added now (as the parent has not been created\r\n        // yet) and instead the `parentTNode` is responsible for adding it. See\r\n        // `TNode.insertBeforeIndex`\r\n        opCode |= I18nCreateOpCode.APPEND_EAGERLY;\r\n    }\r\n    if (isICU) {\r\n        opCode |= I18nCreateOpCode.COMMENT;\r\n        ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\r\n    }\r\n    createOpCodes.push(opCode, text === null ? '' : text);\r\n    // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\r\n    // bindings are.\r\n    const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? (ngDevMode ? '{{?}}' : '') : text, null);\r\n    addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\r\n    const tNodeIdx = tNode.index;\r\n    setCurrentTNode(tNode, false /* Text nodes are self closing */);\r\n    if (parentTNode !== null && rootTNode !== parentTNode) {\r\n        // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\r\n        // We have to make sure to add ourselves to the parent.\r\n        setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\r\n    }\r\n    return tNode;\r\n}\r\n/**\r\n * Processes text node in i18n block.\r\n *\r\n * Text nodes can have:\r\n * - Create instruction in `createOpCodes` for creating the text node.\r\n * - Allocate spec for text node in i18n range of `LView`\r\n * - If contains binding:\r\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\r\n *    - populate `updateOpCodes` with update instructions.\r\n *\r\n * @param tView Current `TView`\r\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\r\n *     be added as part of the `i18nStart` instruction or as part of the\r\n *     `TNode.insertBeforeIndex`.\r\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\r\n * @param createOpCodes Location where the creation OpCodes will be stored.\r\n * @param lView Current `LView`\r\n * @param text The translated text (which may contain binding)\r\n */\r\nfunction i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\r\n    const hasBinding = text.match(BINDING_REGEXP);\r\n    const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\r\n    const index = tNode.index;\r\n    if (hasBinding) {\r\n        generateBindingUpdateOpCodes(updateOpCodes, text, index, null, 0, null);\r\n    }\r\n    ast.push({ kind: 0 /* I18nNodeKind.TEXT */, index });\r\n}\r\n/**\r\n * See `i18nAttributes` above.\r\n */\r\nfunction i18nAttributesFirstPass(tView, index, values) {\r\n    const previousElement = getCurrentTNode();\r\n    const previousElementIndex = previousElement.index;\r\n    const updateOpCodes = [];\r\n    if (ngDevMode) {\r\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\r\n    }\r\n    if (tView.firstCreatePass && tView.data[index] === null) {\r\n        for (let i = 0; i < values.length; i += 2) {\r\n            const attrName = values[i];\r\n            const message = values[i + 1];\r\n            if (message !== '') {\r\n                // Check if attribute value contains an ICU and throw an error if that's the case.\r\n                // ICUs in element attributes are not supported.\r\n                // Note: we intentionally retain the error here by not using `ngDevMode`, because\r\n                // the `value` can change based on the locale and users aren't guaranteed to hit\r\n                // an invalid string while they're developing.\r\n                if (ICU_REGEXP.test(message)) {\r\n                    throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\r\n                }\r\n                // i18n attributes that hit this code path are guaranteed to have bindings, because\r\n                // the compiler treats static i18n attributes as regular attribute bindings.\r\n                // Since this may not be the first i18n attribute on this element we need to pass in how\r\n                // many previous bindings there have already been.\r\n                generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\r\n            }\r\n        }\r\n        tView.data[index] = updateOpCodes;\r\n    }\r\n}\r\n/**\r\n * Generate the OpCodes to update the bindings of a string.\r\n *\r\n * @param updateOpCodes Place where the update opcodes will be stored.\r\n * @param str The string containing the bindings.\r\n * @param destinationNode Index of the destination node which will receive the binding.\r\n * @param attrName Name of the attribute, if the string belongs to an attribute.\r\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\r\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\r\n * @returns The mask value for these bindings\r\n */\r\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\r\n    ngDevMode &&\r\n        assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\r\n    const maskIndex = updateOpCodes.length; // Location of mask\r\n    const sizeIndex = maskIndex + 1; // location of size for skipping\r\n    updateOpCodes.push(null, null); // Alloc space for mask and size\r\n    const startIndex = maskIndex + 2; // location of first allocation.\r\n    if (ngDevMode) {\r\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\r\n    }\r\n    const textParts = str.split(BINDING_REGEXP);\r\n    let mask = 0;\r\n    for (let j = 0; j < textParts.length; j++) {\r\n        const textValue = textParts[j];\r\n        if (j & 1) {\r\n            // Odd indexes are bindings\r\n            const bindingIndex = bindingStart + parseInt(textValue, 10);\r\n            updateOpCodes.push(-1 - bindingIndex);\r\n            mask = mask | toMaskBit(bindingIndex);\r\n        }\r\n        else if (textValue !== '') {\r\n            // Even indexes are text\r\n            updateOpCodes.push(textValue);\r\n        }\r\n    }\r\n    updateOpCodes.push((destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */) |\r\n        (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\r\n    if (attrName) {\r\n        updateOpCodes.push(attrName, sanitizeFn);\r\n    }\r\n    updateOpCodes[maskIndex] = mask;\r\n    updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\r\n    return mask;\r\n}\r\n/**\r\n * Count the number of bindings in the given `opCodes`.\r\n *\r\n * It could be possible to speed this up, by passing the number of bindings found back from\r\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\r\n * complexity in the code and/or transient objects to be created.\r\n *\r\n * Since this function is only called once when the template is instantiated, is trivial in the\r\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\r\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\r\n */\r\nfunction countBindings(opCodes) {\r\n    let count = 0;\r\n    for (let i = 0; i < opCodes.length; i++) {\r\n        const opCode = opCodes[i];\r\n        // Bindings are negative numbers.\r\n        if (typeof opCode === 'number' && opCode < 0) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n/**\r\n * Convert binding index to mask bit.\r\n *\r\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\r\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\r\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\r\n * case is that we will execute binding code more often than necessary. (penalty of performance)\r\n */\r\nfunction toMaskBit(bindingIndex) {\r\n    return 1 << Math.min(bindingIndex, 31);\r\n}\r\n/**\r\n * Removes everything inside the sub-templates of a message.\r\n */\r\nfunction removeInnerTemplateTranslation(message) {\r\n    let match;\r\n    let res = '';\r\n    let index = 0;\r\n    let inTemplate = false;\r\n    let tagMatched;\r\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\r\n        if (!inTemplate) {\r\n            res += message.substring(index, match.index + match[0].length);\r\n            tagMatched = match[1];\r\n            inTemplate = true;\r\n        }\r\n        else {\r\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\r\n                index = match.index;\r\n                inTemplate = false;\r\n            }\r\n        }\r\n    }\r\n    ngDevMode &&\r\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\r\n    res += message.slice(index);\r\n    return res;\r\n}\r\n/**\r\n * Extracts a part of a message and removes the rest.\r\n *\r\n * This method is used for extracting a part of the message associated with a template. A\r\n * translated message can span multiple templates.\r\n *\r\n * Example:\r\n * ```html\r\n * <div i18n>Translate <span *ngIf>me</span>!</div>\r\n * ```\r\n *\r\n * @param message The message to crop\r\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\r\n * external template and removes all sub-templates.\r\n */\r\nfunction getTranslationForTemplate(message, subTemplateIndex) {\r\n    if (isRootTemplateMessage(subTemplateIndex)) {\r\n        // We want the root template message, ignore all sub-templates\r\n        return removeInnerTemplateTranslation(message);\r\n    }\r\n    else {\r\n        // We want a specific sub-template\r\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\r\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\r\n        return removeInnerTemplateTranslation(message.substring(start, end));\r\n    }\r\n}\r\n/**\r\n * Generate the OpCodes for ICU expressions.\r\n *\r\n * @param icuExpression\r\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\r\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\r\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\r\n */\r\nfunction icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\r\n    ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\r\n    let bindingMask = 0;\r\n    const tIcu = {\r\n        type: icuExpression.type,\r\n        currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\r\n        anchorIdx,\r\n        cases: [],\r\n        create: [],\r\n        remove: [],\r\n        update: [],\r\n    };\r\n    addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\r\n    setTIcu(tView, anchorIdx, tIcu);\r\n    const values = icuExpression.values;\r\n    const cases = [];\r\n    for (let i = 0; i < values.length; i++) {\r\n        // Each value is an array of strings & other ICU expressions\r\n        const valueArr = values[i];\r\n        const nestedIcus = [];\r\n        for (let j = 0; j < valueArr.length; j++) {\r\n            const value = valueArr[j];\r\n            if (typeof value !== 'string') {\r\n                // It is an nested ICU expression\r\n                const icuIndex = nestedIcus.push(value) - 1;\r\n                // Replace nested ICU expression by a comment node\r\n                valueArr[j] = `<!--�${icuIndex}�-->`;\r\n            }\r\n        }\r\n        const caseAst = [];\r\n        cases.push(caseAst);\r\n        bindingMask =\r\n            parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\r\n    }\r\n    if (bindingMask) {\r\n        addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\r\n    }\r\n    ast.push({\r\n        kind: 3 /* I18nNodeKind.ICU */,\r\n        index: anchorIdx,\r\n        cases,\r\n        currentCaseLViewIndex: tIcu.currentCaseLViewIndex,\r\n    });\r\n}\r\n/**\r\n * Parses text containing an ICU expression and produces a JSON object for it.\r\n * Original code from closure library, modified for Angular.\r\n *\r\n * @param pattern Text containing an ICU expression that needs to be parsed.\r\n *\r\n */\r\nfunction parseICUBlock(pattern) {\r\n    const cases = [];\r\n    const values = [];\r\n    let icuType = 1 /* IcuType.plural */;\r\n    let mainBinding = 0;\r\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\r\n        if (type === 'select') {\r\n            icuType = 0 /* IcuType.select */;\r\n        }\r\n        else {\r\n            icuType = 1 /* IcuType.plural */;\r\n        }\r\n        mainBinding = parseInt(binding.slice(1), 10);\r\n        return '';\r\n    });\r\n    const parts = i18nParseTextIntoPartsAndICU(pattern);\r\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\r\n    for (let pos = 0; pos < parts.length;) {\r\n        let key = parts[pos++].trim();\r\n        if (icuType === 1 /* IcuType.plural */) {\r\n            // Key can be \"=x\", we just want \"x\"\r\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\r\n        }\r\n        if (key.length) {\r\n            cases.push(key);\r\n        }\r\n        const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\r\n        if (cases.length > values.length) {\r\n            values.push(blocks);\r\n        }\r\n    }\r\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\r\n    return { type: icuType, mainBinding: mainBinding, cases, values };\r\n}\r\n/**\r\n * Breaks pattern into strings and top level {...} blocks.\r\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\r\n * into keys and cases. Original code from closure library, modified for Angular.\r\n *\r\n * @param pattern (sub)Pattern to be broken.\r\n * @returns An `Array<string|IcuExpression>` where:\r\n *   - odd positions: `string` => text between ICU expressions\r\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\r\n */\r\nfunction i18nParseTextIntoPartsAndICU(pattern) {\r\n    if (!pattern) {\r\n        return [];\r\n    }\r\n    let prevPos = 0;\r\n    const braceStack = [];\r\n    const results = [];\r\n    const braces = /[{}]/g;\r\n    // lastIndex doesn't get set to 0 so we have to.\r\n    braces.lastIndex = 0;\r\n    let match;\r\n    while ((match = braces.exec(pattern))) {\r\n        const pos = match.index;\r\n        if (match[0] == '}') {\r\n            braceStack.pop();\r\n            if (braceStack.length == 0) {\r\n                // End of the block.\r\n                const block = pattern.substring(prevPos, pos);\r\n                if (ICU_BLOCK_REGEXP.test(block)) {\r\n                    results.push(parseICUBlock(block));\r\n                }\r\n                else {\r\n                    results.push(block);\r\n                }\r\n                prevPos = pos + 1;\r\n            }\r\n        }\r\n        else {\r\n            if (braceStack.length == 0) {\r\n                const substring = pattern.substring(prevPos, pos);\r\n                results.push(substring);\r\n                prevPos = pos + 1;\r\n            }\r\n            braceStack.push('{');\r\n        }\r\n    }\r\n    const substring = pattern.substring(prevPos);\r\n    results.push(substring);\r\n    return results;\r\n}\r\n/**\r\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\r\n *\r\n */\r\nfunction parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\r\n    const create = [];\r\n    const remove = [];\r\n    const update = [];\r\n    if (ngDevMode) {\r\n        attachDebugGetter(create, icuCreateOpCodesToString);\r\n        attachDebugGetter(remove, i18nRemoveOpCodesToString);\r\n        attachDebugGetter(update, i18nUpdateOpCodesToString);\r\n    }\r\n    tIcu.cases.push(caseName);\r\n    tIcu.create.push(create);\r\n    tIcu.remove.push(remove);\r\n    tIcu.update.push(update);\r\n    const inertBodyHelper = getInertBodyHelper(getDocument());\r\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\r\n    ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\r\n    const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\r\n    if (inertRootNode) {\r\n        return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nfunction walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\r\n    let bindingMask = 0;\r\n    let currentNode = parentNode.firstChild;\r\n    while (currentNode) {\r\n        const newIndex = allocExpando(tView, lView, 1, null);\r\n        switch (currentNode.nodeType) {\r\n            case Node.ELEMENT_NODE:\r\n                const element = currentNode;\r\n                const tagName = element.tagName.toLowerCase();\r\n                if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\r\n                    addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\r\n                    tView.data[newIndex] = tagName;\r\n                    const elAttrs = element.attributes;\r\n                    for (let i = 0; i < elAttrs.length; i++) {\r\n                        const attr = elAttrs.item(i);\r\n                        const lowerAttrName = attr.name.toLowerCase();\r\n                        const hasBinding = !!attr.value.match(BINDING_REGEXP);\r\n                        // we assume the input string is safe, unless it's using a binding\r\n                        if (hasBinding) {\r\n                            if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\r\n                                if (URI_ATTRS[lowerAttrName]) {\r\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\r\n                                }\r\n                                else {\r\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\r\n                                }\r\n                            }\r\n                            else {\r\n                                ngDevMode &&\r\n                                    console.warn(`WARNING: ignoring unsafe attribute value ` +\r\n                                        `${lowerAttrName} on element ${tagName} ` +\r\n                                        `(see ${XSS_SECURITY_URL})`);\r\n                            }\r\n                        }\r\n                        else {\r\n                            addCreateAttribute(create, newIndex, attr);\r\n                        }\r\n                    }\r\n                    const elementNode = {\r\n                        kind: 1 /* I18nNodeKind.ELEMENT */,\r\n                        index: newIndex,\r\n                        children: [],\r\n                    };\r\n                    ast.push(elementNode);\r\n                    // Parse the children of this node (if any)\r\n                    bindingMask =\r\n                        walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\r\n                    addRemoveNode(remove, newIndex, depth);\r\n                }\r\n                break;\r\n            case Node.TEXT_NODE:\r\n                const value = currentNode.textContent || '';\r\n                const hasBinding = value.match(BINDING_REGEXP);\r\n                addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\r\n                addRemoveNode(remove, newIndex, depth);\r\n                if (hasBinding) {\r\n                    bindingMask =\r\n                        generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\r\n                }\r\n                ast.push({\r\n                    kind: 0 /* I18nNodeKind.TEXT */,\r\n                    index: newIndex,\r\n                });\r\n                break;\r\n            case Node.COMMENT_NODE:\r\n                // Check if the comment node is a placeholder for a nested ICU\r\n                const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\r\n                if (isNestedIcu) {\r\n                    const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\r\n                    const icuExpression = nestedIcus[nestedIcuIndex];\r\n                    // Create the comment node that will anchor the ICU expression\r\n                    addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\r\n                    icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\r\n                    addRemoveNestedIcu(remove, newIndex, depth);\r\n                }\r\n                break;\r\n        }\r\n        currentNode = currentNode.nextSibling;\r\n    }\r\n    return bindingMask;\r\n}\r\nfunction addRemoveNode(remove, index, depth) {\r\n    if (depth === 0) {\r\n        remove.push(index);\r\n    }\r\n}\r\nfunction addRemoveNestedIcu(remove, index, depth) {\r\n    if (depth === 0) {\r\n        remove.push(~index); // remove ICU at `index`\r\n        remove.push(index); // remove ICU comment at `index`\r\n    }\r\n}\r\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\r\n    update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, (index << 2 /* I18nUpdateOpCode.SHIFT_REF */) | 2 /* I18nUpdateOpCode.IcuSwitch */);\r\n}\r\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\r\n    update.push(bindingMask, 1, (index << 2 /* I18nUpdateOpCode.SHIFT_REF */) | 3 /* I18nUpdateOpCode.IcuUpdate */);\r\n}\r\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\r\n    if (marker !== null) {\r\n        create.push(marker);\r\n    }\r\n    create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\r\n}\r\nfunction addCreateAttribute(create, newIndex, attr) {\r\n    create.push((newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */) | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\r\n}\r\n\r\n// i18nPostprocess consts\r\nconst ROOT_TEMPLATE_ID = 0;\r\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\r\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\r\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\r\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\r\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\r\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\r\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\r\n/**\r\n * Handles message string post-processing for internationalization.\r\n *\r\n * Handles message string post-processing by transforming it from intermediate\r\n * format (that might contain some markers that we need to replace) to the final\r\n * form, consumable by i18nStart instruction. Post processing steps include:\r\n *\r\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\r\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\r\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\r\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\r\n *    in case multiple ICUs have the same placeholder name\r\n *\r\n * @param message Raw translation string for post processing\r\n * @param replacements Set of replacements that should be applied\r\n *\r\n * @returns Transformed string that can be consumed by i18nStart instruction\r\n *\r\n * @codeGenApi\r\n */\r\nfunction i18nPostprocess(message, replacements = {}) {\r\n    /**\r\n     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\r\n     *\r\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\r\n     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\r\n     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\r\n     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\r\n     * front of �#6�. The post processing step restores the right order by keeping track of the\r\n     * template id stack and looks for placeholders that belong to the currently active template.\r\n     */\r\n    let result = message;\r\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\r\n        const matches = {};\r\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\r\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\r\n            const content = phs || tmpl;\r\n            const placeholders = matches[content] || [];\r\n            if (!placeholders.length) {\r\n                content.split('|').forEach((placeholder) => {\r\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\r\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\r\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\r\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\r\n                });\r\n                matches[content] = placeholders;\r\n            }\r\n            if (!placeholders.length) {\r\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\r\n            }\r\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\r\n            let idx = 0;\r\n            // find placeholder index that matches current template id\r\n            for (let i = 0; i < placeholders.length; i++) {\r\n                if (placeholders[i][0] === currentTemplateId) {\r\n                    idx = i;\r\n                    break;\r\n                }\r\n            }\r\n            // update template id stack based on the current tag extracted\r\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\r\n            if (isCloseTemplateTag) {\r\n                templateIdsStack.pop();\r\n            }\r\n            else if (currentTemplateId !== templateId) {\r\n                templateIdsStack.push(templateId);\r\n            }\r\n            // remove processed tag from the list\r\n            placeholders.splice(idx, 1);\r\n            return placeholder;\r\n        });\r\n    }\r\n    // return current result if no replacements specified\r\n    if (!Object.keys(replacements).length) {\r\n        return result;\r\n    }\r\n    /**\r\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\r\n     */\r\n    result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\r\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\r\n    });\r\n    /**\r\n     * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\r\n     */\r\n    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\r\n        return replacements.hasOwnProperty(key) ? replacements[key] : match;\r\n    });\r\n    /**\r\n     * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\r\n     * multiple ICUs have the same placeholder name\r\n     */\r\n    result = result.replace(PP_ICUS_REGEXP, (match, key) => {\r\n        if (replacements.hasOwnProperty(key)) {\r\n            const list = replacements[key];\r\n            if (!list.length) {\r\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\r\n            }\r\n            return list.shift();\r\n        }\r\n        return match;\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * Marks a block of text as translatable.\r\n *\r\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\r\n * The translation `message` is the value which is locale specific. The translation string may\r\n * contain placeholders which associate inner elements and sub-templates within the translation.\r\n *\r\n * The translation `message` placeholders are:\r\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\r\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\r\n *   `block` that matches the sub-template in which it was declared.\r\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\r\n *   and end of DOM element that were embedded in the original translation block. The placeholder\r\n *   `index` points to the element index in the template instructions set. An optional `block` that\r\n *   matches the sub-template in which it was declared.\r\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\r\n *   split up and translated separately in each angular template function. The `index` points to the\r\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\r\n *\r\n * @param index A unique index of the translation in the static block.\r\n * @param messageIndex An index of the translation message from the `def.consts` array.\r\n * @param subTemplateIndex Optional sub-template index in the `message`.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\r\n    const tView = getTView();\r\n    const lView = getLView();\r\n    const adjustedIndex = HEADER_OFFSET + index;\r\n    ngDevMode && assertDefined(tView, `tView should be defined`);\r\n    const message = getConstant(tView.consts, messageIndex);\r\n    const parentTNode = getCurrentParentTNode();\r\n    if (tView.firstCreatePass) {\r\n        i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\r\n    }\r\n    // Set a flag that this LView has i18n blocks.\r\n    // The flag is later used to determine whether this component should\r\n    // be hydrated (currently hydration is not supported for i18n blocks).\r\n    if (tView.type === 2 /* TViewType.Embedded */) {\r\n        // Annotate host component's LView (not embedded view's LView),\r\n        // since hydration can be skipped on per-component basis only.\r\n        const componentLView = lView[DECLARATION_COMPONENT_VIEW];\r\n        componentLView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\r\n    }\r\n    else {\r\n        lView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\r\n    }\r\n    const tI18n = tView.data[adjustedIndex];\r\n    const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\r\n    const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\r\n    // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\r\n    // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\r\n    const insertInFrontOf = parentTNode && parentTNode.type & 8 /* TNodeType.ElementContainer */ ? lView[parentTNode.index] : null;\r\n    prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);\r\n    applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\r\n    setInI18nBlock(true);\r\n}\r\n/**\r\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\r\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18nEnd() {\r\n    setInI18nBlock(false);\r\n}\r\n/**\r\n *\r\n * Use this instruction to create a translation block that doesn't contain any placeholder.\r\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\r\n *\r\n * The translation `message` is the value which is locale specific. The translation string may\r\n * contain placeholders which associate inner elements and sub-templates within the translation.\r\n *\r\n * The translation `message` placeholders are:\r\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\r\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\r\n *   `block` that matches the sub-template in which it was declared.\r\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\r\n *   and end of DOM element that were embedded in the original translation block. The placeholder\r\n *   `index` points to the element index in the template instructions set. An optional `block` that\r\n *   matches the sub-template in which it was declared.\r\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\r\n *   split up and translated separately in each angular template function. The `index` points to the\r\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\r\n *\r\n * @param index A unique index of the translation in the static block.\r\n * @param messageIndex An index of the translation message from the `def.consts` array.\r\n * @param subTemplateIndex Optional sub-template index in the `message`.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\r\n    ɵɵi18nStart(index, messageIndex, subTemplateIndex);\r\n    ɵɵi18nEnd();\r\n}\r\n/**\r\n * Marks a list of attributes as translatable.\r\n *\r\n * @param index A unique index in the static block\r\n * @param values\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18nAttributes(index, attrsIndex) {\r\n    const tView = getTView();\r\n    ngDevMode && assertDefined(tView, `tView should be defined`);\r\n    const attrs = getConstant(tView.consts, attrsIndex);\r\n    i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\r\n}\r\n/**\r\n * Stores the values of the bindings during each update cycle in order to determine if we need to\r\n * update the translated nodes.\r\n *\r\n * @param value The binding's value\r\n * @returns This function returns itself so that it may be chained\r\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18nExp(value) {\r\n    const lView = getLView();\r\n    setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\r\n    return ɵɵi18nExp;\r\n}\r\n/**\r\n * Updates a translation block or an i18n attribute when the bindings have changed.\r\n *\r\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\r\n * (i18n attribute) on which it should update the content.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18nApply(index) {\r\n    applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\r\n}\r\n/**\r\n * Handles message string post-processing for internationalization.\r\n *\r\n * Handles message string post-processing by transforming it from intermediate\r\n * format (that might contain some markers that we need to replace) to the final\r\n * form, consumable by i18nStart instruction. Post processing steps include:\r\n *\r\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\r\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\r\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\r\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\r\n *    in case multiple ICUs have the same placeholder name\r\n *\r\n * @param message Raw translation string for post processing\r\n * @param replacements Set of replacements that should be applied\r\n *\r\n * @returns Transformed string that can be consumed by i18nStart instruction\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\r\n    return i18nPostprocess(message, replacements);\r\n}\r\n\r\n/**\r\n * Adds an event listener to the current node.\r\n *\r\n * If an output exists on one of the node's directives, it also subscribes to the output\r\n * and saves the subscription for later cleanup.\r\n *\r\n * @param eventName Name of the event\r\n * @param listenerFn The function to be called when event emits\r\n * @param eventTargetResolver Function that returns global target information in case this listener\r\n * should be attached to a global object like window, document or body\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵlistener(eventName, listenerFn, eventTargetResolver) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const tNode = getCurrentTNode();\r\n    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\r\n    return ɵɵlistener;\r\n}\r\n/**\r\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\r\n *\r\n * This instruction is for compatibility purposes and is designed to ensure that a\r\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\r\n * in the component's renderer. Normally all host listeners are evaluated with the\r\n * parent component's renderer, but, in the case of animation @triggers, they need\r\n * to be evaluated with the sub component's renderer (because that's where the\r\n * animation triggers are defined).\r\n *\r\n * Do not use this instruction as a replacement for `listener`. This instruction\r\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\r\n *\r\n * @param eventName Name of the event\r\n * @param listenerFn The function to be called when event emits\r\n * @param useCapture Whether or not to use capture in event listener\r\n * @param eventTargetResolver Function that returns global target information in case this listener\r\n * should be attached to a global object like window, document or body\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\r\n    const tNode = getCurrentTNode();\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const currentDef = getCurrentDirectiveDef(tView.data);\r\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\r\n    listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\r\n    return ɵɵsyntheticHostListener;\r\n}\r\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\r\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\r\n    let processOutputs = true;\r\n    let wrappedListener = null;\r\n    // Adding a native event listener is applicable when:\r\n    // - The corresponding TNode represents a DOM element.\r\n    // - The event target has a resolver (usually resulting in a global object,\r\n    //   such as `window` or `document`).\r\n    if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\r\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\r\n        const hasCoalescedDomEvent = listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, listenerFn, wrappedListener);\r\n        // Context: https://github.com/angular/angular/pull/30144\r\n        if (hasCoalescedDomEvent) {\r\n            processOutputs = false;\r\n        }\r\n    }\r\n    if (processOutputs) {\r\n        const outputConfig = tNode.outputs?.[eventName];\r\n        const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];\r\n        if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {\r\n            for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {\r\n                const index = hostDirectiveOutputConfig[i];\r\n                const lookupName = hostDirectiveOutputConfig[i + 1];\r\n                wrappedListener ??= wrapListener(tNode, lView, listenerFn);\r\n                listenToOutput(tNode, lView, index, lookupName, eventName, wrappedListener);\r\n            }\r\n        }\r\n        if (outputConfig && outputConfig.length) {\r\n            for (const index of outputConfig) {\r\n                wrappedListener ??= wrapListener(tNode, lView, listenerFn);\r\n                listenToOutput(tNode, lView, index, eventName, eventName, wrappedListener);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\r\n * Will get the next level up if level is not specified.\r\n *\r\n * This is used to save contexts of parent views so they can be bound in embedded views, or\r\n * in conjunction with reference() to bind a ref from a parent view.\r\n *\r\n * @param level The relative level of the view from which to grab context compared to contextVewData\r\n * @returns context\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵnextContext(level = 1) {\r\n    return nextContextImpl(level);\r\n}\r\n\r\n/**\r\n * Checks a given node against matching projection slots and returns the\r\n * determined slot index. Returns \"null\" if no slot matched the given node.\r\n *\r\n * This function takes into account the parsed ngProjectAs selector from the\r\n * node's attributes. If present, it will check whether the ngProjectAs selector\r\n * matches any of the projection slot selectors.\r\n */\r\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\r\n    let wildcardNgContentIndex = null;\r\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\r\n    for (let i = 0; i < projectionSlots.length; i++) {\r\n        const slotValue = projectionSlots[i];\r\n        // The last wildcard projection slot should match all nodes which aren't matching\r\n        // any selector. This is necessary to be backwards compatible with view engine.\r\n        if (slotValue === '*') {\r\n            wildcardNgContentIndex = i;\r\n            continue;\r\n        }\r\n        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\r\n        // to the list of selectors, otherwise we fall back to matching against the node.\r\n        if (ngProjectAsAttrVal === null\r\n            ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true)\r\n            : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\r\n            return i; // first matching selector \"captures\" a given node\r\n        }\r\n    }\r\n    return wildcardNgContentIndex;\r\n}\r\n/**\r\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\r\n * It takes all the selectors from the entire component's template and decides where\r\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\r\n * backed by a selector).\r\n *\r\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\r\n * un-parsed form.\r\n *\r\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\r\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\r\n *\r\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\r\n * drawbacks:\r\n * - having only a textual form would require runtime parsing of CSS selectors;\r\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\r\n * template author).\r\n *\r\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\r\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\r\n *        all nodes which do not match any selector. If not specified, a single wildcard\r\n *        selector projection slot will be defined.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵprojectionDef(projectionSlots) {\r\n    const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\r\n    if (!componentNode.projection) {\r\n        // If no explicit projection slots are defined, fall back to a single\r\n        // projection slot with the wildcard selector.\r\n        const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\r\n        const projectionHeads = (componentNode.projection = newArray(numProjectionSlots, null));\r\n        const tails = projectionHeads.slice();\r\n        let componentChild = componentNode.child;\r\n        while (componentChild !== null) {\r\n            // Do not project let declarations so they don't occupy a slot.\r\n            if (componentChild.type !== 128 /* TNodeType.LetDeclaration */) {\r\n                const slotIndex = projectionSlots\r\n                    ? matchingProjectionSlotIndex(componentChild, projectionSlots)\r\n                    : 0;\r\n                if (slotIndex !== null) {\r\n                    if (tails[slotIndex]) {\r\n                        tails[slotIndex].projectionNext = componentChild;\r\n                    }\r\n                    else {\r\n                        projectionHeads[slotIndex] = componentChild;\r\n                    }\r\n                    tails[slotIndex] = componentChild;\r\n                }\r\n            }\r\n            componentChild = componentChild.next;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\r\n * to the projectionDef instruction.\r\n *\r\n * @param nodeIndex Index of the projection node.\r\n * @param selectorIndex Index of the slot selector.\r\n *  - 0 when the selector is `*` (or unspecified as this is the default value),\r\n *  - 1 based index of the selector from the {@link projectionDef}\r\n * @param attrs Static attributes set on the `ng-content` node.\r\n * @param fallbackTemplateFn Template function with fallback content.\r\n *   Will be rendered if the slot is empty at runtime.\r\n * @param fallbackDecls Number of declarations in the fallback template.\r\n * @param fallbackVars Number of variables in the fallback template.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs, fallbackTemplateFn, fallbackDecls, fallbackVars) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;\r\n    // Fallback content needs to be declared no matter whether the slot is empty since different\r\n    // instances of the component may or may not insert it. Also it needs to be declare *before*\r\n    // the projection node in order to work correctly with hydration.\r\n    if (fallbackIndex !== null) {\r\n        declareTemplate(lView, tView, fallbackIndex, fallbackTemplateFn, fallbackDecls, fallbackVars, null, attrs);\r\n    }\r\n    const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\r\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\r\n    if (tProjectionNode.projection === null) {\r\n        tProjectionNode.projection = selectorIndex;\r\n    }\r\n    // `<ng-content>` has no content. Even if there's fallback\r\n    // content, the fallback is shown next to it.\r\n    setCurrentTNodeAsNotParent();\r\n    const hydrationInfo = lView[HYDRATION];\r\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\r\n    const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST];\r\n    const isEmpty = componentHostNode.projection[tProjectionNode.projection] === null;\r\n    if (isEmpty && fallbackIndex !== null) {\r\n        insertFallbackContent(lView, tView, fallbackIndex);\r\n    }\r\n    else if (isNodeCreationMode && !isDetachedByI18n(tProjectionNode)) {\r\n        // re-distribution of projectable nodes is stored on a component's view level\r\n        applyProjection(tView, lView, tProjectionNode);\r\n    }\r\n}\r\n/** Inserts the fallback content of a projection slot. Assumes there's no projected content. */\r\nfunction insertFallbackContent(lView, tView, fallbackIndex) {\r\n    const adjustedIndex = HEADER_OFFSET + fallbackIndex;\r\n    const fallbackTNode = tView.data[adjustedIndex];\r\n    const fallbackLContainer = lView[adjustedIndex];\r\n    ngDevMode && assertTNode(fallbackTNode);\r\n    ngDevMode && assertLContainer(fallbackLContainer);\r\n    const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView.ssrId);\r\n    const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, undefined, {\r\n        dehydratedView,\r\n    });\r\n    addLViewToLContainer(fallbackLContainer, fallbackLView, 0, shouldAddViewToDom(fallbackTNode, dehydratedView));\r\n}\r\n\r\n/**\r\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\r\n * refresh).\r\n *\r\n * @param directiveIndex Current directive index\r\n * @param predicate The type for which the query will search\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n * @returns QueryList<T>\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\r\n    createContentQuery(directiveIndex, predicate, flags, read);\r\n}\r\n/**\r\n * Creates a new view query by initializing internal data structures.\r\n *\r\n * @param predicate The type for which the query will search\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵviewQuery(predicate, flags, read) {\r\n    createViewQuery(predicate, flags, read);\r\n}\r\n/**\r\n * Refreshes a query by combining matches from all active views and removing matches from deleted\r\n * views.\r\n *\r\n * @returns `true` if a query got dirty during change detection or if this is a static query\r\n * resolving in creation mode, `false` otherwise.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵqueryRefresh(queryList) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const queryIndex = getCurrentQueryIndex();\r\n    setCurrentQueryIndex(queryIndex + 1);\r\n    const tQuery = getTQuery(tView, queryIndex);\r\n    if (queryList.dirty &&\r\n        isCreationMode(lView) ===\r\n            ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */)) {\r\n        if (tQuery.matches === null) {\r\n            queryList.reset([]);\r\n        }\r\n        else {\r\n            const result = getQueryResults(lView, queryIndex);\r\n            queryList.reset(result, unwrapElementRef);\r\n            queryList.notifyOnChanges();\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Loads a QueryList corresponding to the current view or content query.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵloadQuery() {\r\n    return loadQueryInternal(getLView(), getCurrentQueryIndex());\r\n}\r\n\r\n/**\r\n * Creates a new content query and binds it to a signal created by an authoring function.\r\n *\r\n * @param directiveIndex Current directive index\r\n * @param target The target signal to which the query should be bound\r\n * @param predicate The type for which the query will search\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵcontentQuerySignal(directiveIndex, target, predicate, flags, read) {\r\n    bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));\r\n}\r\n/**\r\n * Creates a new view query by initializing internal data structures and binding a new query to the\r\n * target signal.\r\n *\r\n * @param target The target signal to assign the query results to.\r\n * @param predicate The type or label that should match a given query\r\n * @param flags Flags associated with the query\r\n * @param read What to save in the query\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵviewQuerySignal(target, predicate, flags, read) {\r\n    bindQueryToSignal(target, createViewQuery(predicate, flags, read));\r\n}\r\n/**\r\n * Advances the current query index by a specified offset.\r\n *\r\n * Adjusting the current query index is necessary in cases where a given directive has a mix of\r\n * zone-based and signal-based queries. The signal-based queries don't require tracking of the\r\n * current index (those are refreshed on demand and not during change detection) so this instruction\r\n * is only necessary for backward-compatibility.\r\n *\r\n * @param index offset to apply to the current query index (defaults to 1)\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵqueryAdvance(indexOffset = 1) {\r\n    setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);\r\n}\r\n\r\n/**\r\n * Retrieves a local reference from the current contextViewData.\r\n *\r\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\r\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\r\n *\r\n * @param index The index of the local ref in contextViewData.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵreference(index) {\r\n    const contextLView = getContextLView();\r\n    return load(contextLView, HEADER_OFFSET + index);\r\n}\r\n\r\nfunction toTStylingRange(prev, next) {\r\n    ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\r\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\r\n    return ((prev << 17 /* StylingRange.PREV_SHIFT */) | (next << 2 /* StylingRange.NEXT_SHIFT */));\r\n}\r\nfunction getTStylingRangePrev(tStylingRange) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    return (tStylingRange >> 17 /* StylingRange.PREV_SHIFT */) & 32767 /* StylingRange.UNSIGNED_MASK */;\r\n}\r\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\r\n}\r\nfunction setTStylingRangePrev(tStylingRange, previous) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\r\n    return ((tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */) |\r\n        (previous << 17 /* StylingRange.PREV_SHIFT */));\r\n}\r\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    return (tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */);\r\n}\r\nfunction getTStylingRangeNext(tStylingRange) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\r\n}\r\nfunction setTStylingRangeNext(tStylingRange, next) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\r\n    return ((tStylingRange & ~131068 /* StylingRange.NEXT_MASK */) | //\r\n        (next << 2 /* StylingRange.NEXT_SHIFT */));\r\n}\r\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\r\n}\r\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\r\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\r\n    return (tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */);\r\n}\r\n\r\n/**\r\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\r\n * list of styles and compute the duplicate flag.\r\n *\r\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\r\n *\r\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\r\n * the head/tail of the template portion of the styles.\r\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\r\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\r\n *\r\n * @param tData The `TData` to insert into.\r\n * @param tNode `TNode` associated with the styling element.\r\n * @param tStylingKey See `TStylingKey`.\r\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\r\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\r\n *               template.)\r\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\r\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\r\n */\r\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\r\n    ngDevMode && assertFirstUpdatePass(getTView());\r\n    let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\r\n    let tmplHead = getTStylingRangePrev(tBindings);\r\n    let tmplTail = getTStylingRangeNext(tBindings);\r\n    tData[index] = tStylingKeyWithStatic;\r\n    let isKeyDuplicateOfStatic = false;\r\n    let tStylingKey;\r\n    if (Array.isArray(tStylingKeyWithStatic)) {\r\n        // We are case when the `TStylingKey` contains static fields as well.\r\n        const staticKeyValueArray = tStylingKeyWithStatic;\r\n        tStylingKey = staticKeyValueArray[1]; // unwrap.\r\n        // We need to check if our key is present in the static so that we can mark it as duplicate.\r\n        if (tStylingKey === null ||\r\n            keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\r\n            // tStylingKey is present in the statics, need to mark it as duplicate.\r\n            isKeyDuplicateOfStatic = true;\r\n        }\r\n    }\r\n    else {\r\n        tStylingKey = tStylingKeyWithStatic;\r\n    }\r\n    if (isHostBinding) {\r\n        // We are inserting host bindings\r\n        // If we don't have template bindings then `tail` is 0.\r\n        const hasTemplateBindings = tmplTail !== 0;\r\n        // This is important to know because that means that the `head` can't point to the first\r\n        // template bindings (there are none.) Instead the head points to the tail of the template.\r\n        if (hasTemplateBindings) {\r\n            // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\r\n            const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\r\n            tData[index + 1] = toTStylingRange(previousNode, tmplHead);\r\n            // if a host binding has already been registered, we need to update the next of that host\r\n            // binding to point to this one\r\n            if (previousNode !== 0) {\r\n                // We need to update the template-tail value to point to us.\r\n                tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\r\n            }\r\n            // The \"previous\" of the template binding head should point to this host binding\r\n            tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\r\n        }\r\n        else {\r\n            tData[index + 1] = toTStylingRange(tmplHead, 0);\r\n            // if a host binding has already been registered, we need to update the next of that host\r\n            // binding to point to this one\r\n            if (tmplHead !== 0) {\r\n                // We need to update the template-tail value to point to us.\r\n                tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\r\n            }\r\n            // if we don't have template, the head points to template-tail, and needs to be advanced.\r\n            tmplHead = index;\r\n        }\r\n    }\r\n    else {\r\n        // We are inserting in template section.\r\n        // We need to set this binding's \"previous\" to the current template tail\r\n        tData[index + 1] = toTStylingRange(tmplTail, 0);\r\n        ngDevMode &&\r\n            assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\r\n        if (tmplHead === 0) {\r\n            tmplHead = index;\r\n        }\r\n        else {\r\n            // We need to update the previous value \"next\" to point to this binding\r\n            tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\r\n        }\r\n        tmplTail = index;\r\n    }\r\n    // Now we need to update / compute the duplicates.\r\n    // Starting with our location search towards head (least priority)\r\n    if (isKeyDuplicateOfStatic) {\r\n        tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\r\n    }\r\n    markDuplicates(tData, tStylingKey, index, true);\r\n    markDuplicates(tData, tStylingKey, index, false);\r\n    markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\r\n    tBindings = toTStylingRange(tmplHead, tmplTail);\r\n    if (isClassBinding) {\r\n        tNode.classBindings = tBindings;\r\n    }\r\n    else {\r\n        tNode.styleBindings = tBindings;\r\n    }\r\n}\r\n/**\r\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\r\n *\r\n * @param tNode `TNode` where the residual is stored.\r\n * @param tStylingKey `TStylingKey` to store.\r\n * @param tData `TData` associated with the current `LView`.\r\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\r\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\r\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\r\n */\r\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\r\n    const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\r\n    if (residual != null /* or undefined */ &&\r\n        typeof tStylingKey == 'string' &&\r\n        keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\r\n        // We have duplicate in the residual so mark ourselves as duplicate.\r\n        tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\r\n    }\r\n}\r\n/**\r\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\r\n * `TStyleValue`.\r\n *\r\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\r\n * with it set to `false` to search both the previous as well as next items in the list.\r\n *\r\n * No duplicate case\r\n * ```\r\n *   [style.color]\r\n *   [style.width.px] <<- index\r\n *   [style.height.px]\r\n * ```\r\n *\r\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\r\n * duplicates because `width` is not found in any other part of the linked list.\r\n *\r\n * Duplicate case\r\n * ```\r\n *   [style.color]\r\n *   [style.width.em]\r\n *   [style.width.px] <<- index\r\n * ```\r\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\r\n * because `width` is found in the chain.\r\n *\r\n * Map case 1\r\n * ```\r\n *   [style.width.px]\r\n *   [style.color]\r\n *   [style]  <<- index\r\n * ```\r\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\r\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\r\n *\r\n * Map case 2\r\n * ```\r\n *   [style]\r\n *   [style.width.px]\r\n *   [style.color]  <<- index\r\n * ```\r\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\r\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\r\n * `width`.\r\n *\r\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\r\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\r\n *        the linked list.\r\n * @param index Starting location in the linked list to search from\r\n * @param isPrevDir Direction.\r\n *        - `true` for previous (lower priority);\r\n *        - `false` for next (higher priority).\r\n */\r\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir) {\r\n    const tStylingAtIndex = tData[index + 1];\r\n    const isMap = tStylingKey === null;\r\n    let cursor = isPrevDir\r\n        ? getTStylingRangePrev(tStylingAtIndex)\r\n        : getTStylingRangeNext(tStylingAtIndex);\r\n    let foundDuplicate = false;\r\n    // We keep iterating as long as we have a cursor\r\n    // AND either:\r\n    // - we found what we are looking for, OR\r\n    // - we are a map in which case we have to continue searching even after we find what we were\r\n    //   looking for since we are a wild card and everything needs to be flipped to duplicate.\r\n    while (cursor !== 0 && (foundDuplicate === false || isMap)) {\r\n        ngDevMode && assertIndexInRange(tData, cursor);\r\n        const tStylingValueAtCursor = tData[cursor];\r\n        const tStyleRangeAtCursor = tData[cursor + 1];\r\n        if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\r\n            foundDuplicate = true;\r\n            tData[cursor + 1] = isPrevDir\r\n                ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor)\r\n                : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\r\n        }\r\n        cursor = isPrevDir\r\n            ? getTStylingRangePrev(tStyleRangeAtCursor)\r\n            : getTStylingRangeNext(tStyleRangeAtCursor);\r\n    }\r\n    if (foundDuplicate) {\r\n        // if we found a duplicate, than mark ourselves.\r\n        tData[index + 1] = isPrevDir\r\n            ? setTStylingRangePrevDuplicate(tStylingAtIndex)\r\n            : setTStylingRangeNextDuplicate(tStylingAtIndex);\r\n    }\r\n}\r\n/**\r\n * Determines if two `TStylingKey`s are a match.\r\n *\r\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\r\n * `TStylingKey` has a match.\r\n *\r\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\r\n * - `color`\r\n *    - `color`    // Match another color\r\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\r\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\r\n *    - `['', null, 'other', true]`       // wrapped `null` so match\r\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\r\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\r\n *\r\n * @param tStylingKeyCursor\r\n * @param tStylingKey\r\n */\r\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\r\n    ngDevMode &&\r\n        assertNotEqual(Array.isArray(tStylingKey), true, \"Expected that 'tStylingKey' has been unwrapped\");\r\n    if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that\r\n        // location so we must assume that we have a match.\r\n        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it\r\n        // contains a match.\r\n        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\r\n    ) {\r\n        return true;\r\n    }\r\n    else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\r\n        // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\r\n        // statics and we need to check those as well.\r\n        return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\r\n    }\r\n    return false;\r\n}\r\n\r\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\r\nconst parserState = {\r\n    textEnd: 0,\r\n    key: 0,\r\n    keyEnd: 0,\r\n    value: 0,\r\n    valueEnd: 0,\r\n};\r\n/**\r\n * Retrieves the last parsed `key` of style.\r\n * @param text the text to substring the key from.\r\n */\r\nfunction getLastParsedKey(text) {\r\n    return text.substring(parserState.key, parserState.keyEnd);\r\n}\r\n/**\r\n * Retrieves the last parsed `value` of style.\r\n * @param text the text to substring the key from.\r\n */\r\nfunction getLastParsedValue(text) {\r\n    return text.substring(parserState.value, parserState.valueEnd);\r\n}\r\n/**\r\n * Initializes `className` string for parsing and parses the first token.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\r\n *   const key = getLastParsedKey();\r\n *   ...\r\n * }\r\n * ```\r\n * @param text `className` to parse\r\n * @returns index where the next invocation of `parseClassNameNext` should resume.\r\n */\r\nfunction parseClassName(text) {\r\n    resetParserState(text);\r\n    return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\r\n}\r\n/**\r\n * Parses next `className` token.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\r\n *   const key = getLastParsedKey();\r\n *   ...\r\n * }\r\n * ```\r\n *\r\n * @param text `className` to parse\r\n * @param index where the parsing should resume.\r\n * @returns index where the next invocation of `parseClassNameNext` should resume.\r\n */\r\nfunction parseClassNameNext(text, index) {\r\n    const end = parserState.textEnd;\r\n    if (end === index) {\r\n        return -1;\r\n    }\r\n    index = parserState.keyEnd = consumeClassToken(text, (parserState.key = index), end);\r\n    return consumeWhitespace(text, index, end);\r\n}\r\n/**\r\n * Initializes `cssText` string for parsing and parses the first key/values.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\r\n *   const key = getLastParsedKey();\r\n *   const value = getLastParsedValue();\r\n *   ...\r\n * }\r\n * ```\r\n * @param text `cssText` to parse\r\n * @returns index where the next invocation of `parseStyleNext` should resume.\r\n */\r\nfunction parseStyle(text) {\r\n    resetParserState(text);\r\n    return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\r\n}\r\n/**\r\n * Parses the next `cssText` key/values.\r\n *\r\n * This function is intended to be used in this format:\r\n * ```ts\r\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\r\n *   const key = getLastParsedKey();\r\n *   const value = getLastParsedValue();\r\n *   ...\r\n * }\r\n *\r\n * @param text `cssText` to parse\r\n * @param index where the parsing should resume.\r\n * @returns index where the next invocation of `parseStyleNext` should resume.\r\n */\r\nfunction parseStyleNext(text, startIndex) {\r\n    const end = parserState.textEnd;\r\n    let index = (parserState.key = consumeWhitespace(text, startIndex, end));\r\n    if (end === index) {\r\n        // we reached an end so just quit\r\n        return -1;\r\n    }\r\n    index = parserState.keyEnd = consumeStyleKey(text, index, end);\r\n    index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\r\n    index = parserState.value = consumeWhitespace(text, index, end);\r\n    index = parserState.valueEnd = consumeStyleValue(text, index, end);\r\n    return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\r\n}\r\n/**\r\n * Reset the global state of the styling parser.\r\n * @param text The styling text to parse.\r\n */\r\nfunction resetParserState(text) {\r\n    parserState.key = 0;\r\n    parserState.keyEnd = 0;\r\n    parserState.value = 0;\r\n    parserState.valueEnd = 0;\r\n    parserState.textEnd = text.length;\r\n}\r\n/**\r\n * Returns index of next non-whitespace character.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\r\n *          that location.)\r\n */\r\nfunction consumeWhitespace(text, startIndex, endIndex) {\r\n    while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\r\n        startIndex++;\r\n    }\r\n    return startIndex;\r\n}\r\n/**\r\n * Returns index of last char in class token.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after last char in class token.\r\n */\r\nfunction consumeClassToken(text, startIndex, endIndex) {\r\n    while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\r\n        startIndex++;\r\n    }\r\n    return startIndex;\r\n}\r\n/**\r\n * Consumes all of the characters belonging to style key and token.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after last style key character.\r\n */\r\nfunction consumeStyleKey(text, startIndex, endIndex) {\r\n    let ch;\r\n    while (startIndex < endIndex &&\r\n        ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ ||\r\n            ch === 95 /* CharCode.UNDERSCORE */ ||\r\n            ((ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */) ||\r\n            (ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */))) {\r\n        startIndex++;\r\n    }\r\n    return startIndex;\r\n}\r\n/**\r\n * Consumes all whitespace and the separator `:` after the style key.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after separator and surrounding whitespace.\r\n */\r\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\r\n    startIndex = consumeWhitespace(text, startIndex, endIndex);\r\n    if (startIndex < endIndex) {\r\n        if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\r\n            malformedStyleError(text, String.fromCharCode(separator), startIndex);\r\n        }\r\n        startIndex++;\r\n    }\r\n    return startIndex;\r\n}\r\n/**\r\n * Consumes style value honoring `url()` and `\"\"` text.\r\n *\r\n * @param text Text to scan\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after last style value character.\r\n */\r\nfunction consumeStyleValue(text, startIndex, endIndex) {\r\n    let ch1 = -1; // 1st previous character\r\n    let ch2 = -1; // 2nd previous character\r\n    let ch3 = -1; // 3rd previous character\r\n    let i = startIndex;\r\n    let lastChIndex = i;\r\n    while (i < endIndex) {\r\n        const ch = text.charCodeAt(i++);\r\n        if (ch === 59 /* CharCode.SEMI_COLON */) {\r\n            return lastChIndex;\r\n        }\r\n        else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\r\n            lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\r\n        }\r\n        else if (startIndex === i - 4 && // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\r\n            ch3 === 85 /* CharCode.U */ &&\r\n            ch2 === 82 /* CharCode.R */ &&\r\n            ch1 === 76 /* CharCode.L */ &&\r\n            ch === 40 /* CharCode.OPEN_PAREN */) {\r\n            lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\r\n        }\r\n        else if (ch > 32 /* CharCode.SPACE */) {\r\n            // if we have a non-whitespace character then capture its location\r\n            lastChIndex = i;\r\n        }\r\n        ch3 = ch2;\r\n        ch2 = ch1;\r\n        ch1 = ch & -33 /* CharCode.UPPER_CASE */;\r\n    }\r\n    return lastChIndex;\r\n}\r\n/**\r\n * Consumes all of the quoted characters.\r\n *\r\n * @param text Text to scan\r\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\r\n * @param startIndex Starting index of character where the scan should start.\r\n * @param endIndex Ending index of character where the scan should end.\r\n * @returns Index after quoted characters.\r\n */\r\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\r\n    let ch1 = -1; // 1st previous character\r\n    let index = startIndex;\r\n    while (index < endIndex) {\r\n        const ch = text.charCodeAt(index++);\r\n        if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\r\n            return index;\r\n        }\r\n        if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\r\n            // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\r\n            // quotation. (It should not assume that the last `\"` is escaped.)\r\n            ch1 = 0;\r\n        }\r\n        else {\r\n            ch1 = ch;\r\n        }\r\n    }\r\n    throw ngDevMode\r\n        ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex)\r\n        : new Error();\r\n}\r\nfunction malformedStyleError(text, expecting, index) {\r\n    ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\r\n    throw throwError(`Malformed style at location ${index} in string '` +\r\n        text.substring(0, index) +\r\n        '[>>' +\r\n        text.substring(index, index + 1) +\r\n        '<<]' +\r\n        text.slice(index + 1) +\r\n        `'. Expecting '${expecting}'.`);\r\n}\r\n\r\n/**\r\n * Update a style binding on an element with the provided value.\r\n *\r\n * If the style value is falsy then it will be removed from the element\r\n * (or assigned a different value depending if there are any styles placed\r\n * on the element with `styleMap` or any static styles that are\r\n * present from when the element was created with `styling`).\r\n *\r\n * Note that the styling element is updated as part of `stylingApply`.\r\n *\r\n * @param prop A valid CSS property.\r\n * @param value New value to write (`null` or an empty string to remove).\r\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\r\n *\r\n * Note that this will apply the provided style value to the host element if this function is called\r\n * within a host binding function.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵstyleProp(prop, value, suffix) {\r\n    checkStylingProperty(prop, value, suffix, false);\r\n    return ɵɵstyleProp;\r\n}\r\n/**\r\n * Update a class binding on an element with the provided value.\r\n *\r\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\r\n * therefore, the class binding itself must already be allocated using\r\n * `styling` within the creation block.\r\n *\r\n * @param prop A valid CSS class (only one).\r\n * @param value A true/false value which will turn the class on or off.\r\n *\r\n * Note that this will apply the provided class value to the host element if this function\r\n * is called within a host binding function.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵclassProp(className, value) {\r\n    checkStylingProperty(className, value, null, true);\r\n    return ɵɵclassProp;\r\n}\r\n/**\r\n * Update style bindings using an object literal on an element.\r\n *\r\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\r\n * When styles are applied to the element they will then be updated with respect to\r\n * any styles/classes set via `styleProp`. If any styles are set to falsy\r\n * then they will be removed from the element.\r\n *\r\n * Note that the styling instruction will not be applied until `stylingApply` is called.\r\n *\r\n * @param styles A key/value style map of the styles that will be applied to the given element.\r\n *        Any missing styles (that have already been applied to the element beforehand) will be\r\n *        removed (unset) from the element's styling.\r\n *\r\n * Note that this will apply the provided styleMap value to the host element if this function\r\n * is called within a host binding.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵstyleMap(styles) {\r\n    checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\r\n}\r\n/**\r\n * Parse text as style and add values to KeyValueArray.\r\n *\r\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\r\n * needed. It is only referenced from `ɵɵstyleMap`.\r\n *\r\n * @param keyValueArray KeyValueArray to add parsed values to.\r\n * @param text text to parse.\r\n */\r\nfunction styleStringParser(keyValueArray, text) {\r\n    for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\r\n        styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\r\n    }\r\n}\r\n/**\r\n * Update class bindings using an object literal or class-string on an element.\r\n *\r\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\r\n * When classes are applied to the element they will then be updated with\r\n * respect to any styles/classes set via `classProp`. If any\r\n * classes are set to falsy then they will be removed from the element.\r\n *\r\n * Note that the styling instruction will not be applied until `stylingApply` is called.\r\n * Note that this will the provided classMap value to the host element if this function is called\r\n * within a host binding.\r\n *\r\n * @param classes A key/value map or string of CSS classes that will be added to the\r\n *        given element. Any missing classes (that have already been applied to the element\r\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵclassMap(classes) {\r\n    checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\r\n}\r\n/**\r\n * Parse text as class and add values to KeyValueArray.\r\n *\r\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\r\n * needed. It is only referenced from `ɵɵclassMap`.\r\n *\r\n * @param keyValueArray KeyValueArray to add parsed values to.\r\n * @param text text to parse.\r\n */\r\nfunction classStringParser(keyValueArray, text) {\r\n    for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\r\n        keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\r\n    }\r\n}\r\n/**\r\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\r\n *\r\n * @param prop property name.\r\n * @param value binding value.\r\n * @param suffix suffix for the property (e.g. `em` or `px`)\r\n * @param isClassBased `true` if `class` change (`false` if `style`)\r\n */\r\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    // Styling instructions use 2 slots per binding.\r\n    // 1. one for the value / TStylingKey\r\n    // 2. one for the intermittent-value / TStylingRange\r\n    const bindingIndex = incrementBindingIndex(2);\r\n    if (tView.firstUpdatePass) {\r\n        stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\r\n    }\r\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\r\n        const tNode = tView.data[getSelectedIndex()];\r\n        updateStyling(tView, tNode, lView, lView[RENDERER], prop, (lView[bindingIndex + 1] = normalizeSuffix(value, suffix)), isClassBased, bindingIndex);\r\n    }\r\n}\r\n/**\r\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\r\n *\r\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\r\n *        function so that `style` can be processed. This is done for tree shaking purposes.\r\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\r\n *        have different parsers.)\r\n * @param value bound value from application\r\n * @param isClassBased `true` if `class` change (`false` if `style`)\r\n */\r\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\r\n    const tView = getTView();\r\n    const bindingIndex = incrementBindingIndex(2);\r\n    if (tView.firstUpdatePass) {\r\n        stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\r\n    }\r\n    const lView = getLView();\r\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\r\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\r\n        // if so as not to read unnecessarily.\r\n        const tNode = tView.data[getSelectedIndex()];\r\n        if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\r\n            if (ngDevMode) {\r\n                // verify that if we are shadowing then `TData` is appropriately marked so that we skip\r\n                // processing this binding in styling resolution.\r\n                const tStylingKey = tView.data[bindingIndex];\r\n                assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, \"Styling linked list shadow input should be marked as 'false'\");\r\n            }\r\n            // VE does not concatenate the static portion like we are doing here.\r\n            // Instead VE just ignores the static completely if dynamic binding is present.\r\n            // Because of locality we have already set the static portion because we don't know if there\r\n            // is a dynamic portion until later. If we would ignore the static portion it would look like\r\n            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\r\n            // thing as it would think that the static portion was removed. For this reason we\r\n            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\r\n            let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\r\n            ngDevMode &&\r\n                isClassBased === false &&\r\n                staticPrefix !== null &&\r\n                assertEqual(staticPrefix.endsWith(';'), true, \"Expecting static portion to end with ';'\");\r\n            if (staticPrefix !== null) {\r\n                // We want to make sure that falsy values of `value` become empty strings.\r\n                value = concatStringsWithSpace(staticPrefix, value ? value : '');\r\n            }\r\n            // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\r\n            // This takes over the `[style]` binding. (Same for `[class]`)\r\n            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\r\n        }\r\n        else {\r\n            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], (lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value)), isClassBased, bindingIndex);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Determines when the binding is in `hostBindings` section\r\n *\r\n * @param tView Current `TView`\r\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\r\n */\r\nfunction isInHostBindings(tView, bindingIndex) {\r\n    // All host bindings are placed after the expando section.\r\n    return bindingIndex >= tView.expandoStartIndex;\r\n}\r\n/**\r\n * Collects the necessary information to insert the binding into a linked list of style bindings\r\n * using `insertTStylingBinding`.\r\n *\r\n * @param tView `TView` where the binding linked list will be stored.\r\n * @param tStylingKey Property/key of the binding.\r\n * @param bindingIndex Index of binding associated with the `prop`\r\n * @param isClassBased `true` if `class` change (`false` if `style`)\r\n */\r\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\r\n    ngDevMode && assertFirstUpdatePass(tView);\r\n    const tData = tView.data;\r\n    if (tData[bindingIndex + 1] === null) {\r\n        // The above check is necessary because we don't clear first update pass until first successful\r\n        // (no exception) template execution. This prevents the styling instruction from double adding\r\n        // itself to the list.\r\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\r\n        // if so as not to read unnecessarily.\r\n        const tNode = tData[getSelectedIndex()];\r\n        ngDevMode && assertDefined(tNode, 'TNode expected');\r\n        const isHostBindings = isInHostBindings(tView, bindingIndex);\r\n        if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\r\n            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\r\n            // If there is a directive which uses `@Input('style')` or `@Input('class')` than\r\n            // we need to neutralize this binding since that directive is shadowing it.\r\n            // We turn this into a noop by setting the key to `false`\r\n            tStylingKey = false;\r\n        }\r\n        tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\r\n        insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\r\n    }\r\n}\r\n/**\r\n * Adds static styling information to the binding if applicable.\r\n *\r\n * The linked list of styles not only stores the list and keys, but also stores static styling\r\n * information on some of the keys. This function determines if the key should contain the styling\r\n * information and computes it.\r\n *\r\n * See `TStylingStatic` for more details.\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\r\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\r\n    const hostDirectiveDef = getCurrentDirectiveDef(tData);\r\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\r\n    if (hostDirectiveDef === null) {\r\n        // We are in template node.\r\n        // If template node already had styling instruction then it has already collected the static\r\n        // styling and there is no need to collect them again. We know that we are the first styling\r\n        // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\r\n        const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\r\n        if (isFirstStylingInstructionInTemplate) {\r\n            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\r\n            // they are already merged and it would not be possible to figure which property belongs where\r\n            // in the priority.\r\n            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\r\n            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\r\n            // We know that if we have styling binding in template we can't have residual.\r\n            residual = null;\r\n        }\r\n    }\r\n    else {\r\n        // We are in host binding node and there was no binding instruction in template node.\r\n        // This means that we need to compute the residual.\r\n        const directiveStylingLast = tNode.directiveStylingLast;\r\n        const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\r\n        if (isFirstStylingInstructionInHostBinding) {\r\n            stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\r\n            if (residual === null) {\r\n                // - If `null` than either:\r\n                //    - Template styling instruction already ran and it has consumed the static\r\n                //      styling into its `TStylingKey` and so there is no need to update residual. Instead\r\n                //      we need to update the `TStylingKey` associated with the first template node\r\n                //      instruction. OR\r\n                //    - Some other styling instruction ran and determined that there are no residuals\r\n                let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\r\n                if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\r\n                    // Only recompute if `templateStylingKey` had static values. (If no static value found\r\n                    // then there is nothing to do since this operation can only produce less static keys, not\r\n                    // more.)\r\n                    templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\r\n                    templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\r\n                    setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\r\n                }\r\n            }\r\n            else {\r\n                // We only need to recompute residual if it is not `null`.\r\n                // - If existing residual (implies there was no template styling). This means that some of\r\n                //   the statics may have moved from the residual to the `stylingKey` and so we have to\r\n                //   recompute.\r\n                // - If `undefined` this is the first time we are running.\r\n                residual = collectResidual(tData, tNode, isClassBased);\r\n            }\r\n        }\r\n    }\r\n    if (residual !== undefined) {\r\n        isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\r\n    }\r\n    return stylingKey;\r\n}\r\n/**\r\n * Retrieve the `TStylingKey` for the template styling instruction.\r\n *\r\n * This is needed since `hostBinding` styling instructions are inserted after the template\r\n * instruction. While the template instruction needs to update the residual in `TNode` the\r\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\r\n * the template instruction is downstream from the `hostBindings` instructions.\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @return `TStylingKey` if found or `undefined` if not found.\r\n */\r\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\r\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\r\n    if (getTStylingRangeNext(bindings) === 0) {\r\n        // There does not seem to be a styling instruction in the `template`.\r\n        return undefined;\r\n    }\r\n    return tData[getTStylingRangePrev(bindings)];\r\n}\r\n/**\r\n * Update the `TStylingKey` of the first template instruction in `TNode`.\r\n *\r\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\r\n * However, they execute after the template styling instructions. This means that they get inserted\r\n * in front of the template styling instructions.\r\n *\r\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\r\n * executed it means that it may need to steal static fields from the template instruction. This\r\n * method allows us to update the first template instruction `TStylingKey` with a new value.\r\n *\r\n * Assume:\r\n * ```angular-ts\r\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\r\n *\r\n * @Directive({\r\n *   host: {\r\n *     'style': 'width: 100px',\r\n *     '[style.color]': 'dirExp',\r\n *   }\r\n * })\r\n * class MyDir {}\r\n * ```\r\n *\r\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\r\n * ```ts\r\n *  ['', 'color', 'color', 'red', 'width', '100px'],\r\n * ```\r\n *\r\n * The reason for this is that the template instruction does not know if there are styling\r\n * instructions and must assume that there are none and must collect all of the static styling.\r\n * (both\r\n * `color' and 'width`)\r\n *\r\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\r\n * ```ts\r\n *  ['', 'color', 'width', '100px'],  // newly inserted\r\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\r\n * ```\r\n *\r\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\r\n * update it like so:\r\n * ```ts\r\n *  ['', 'color', 'width', '100px'],\r\n *  ['', 'color', 'color', 'red'],    // UPDATE\r\n * ```\r\n *\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\r\n */\r\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\r\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\r\n    ngDevMode &&\r\n        assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\r\n    tData[getTStylingRangePrev(bindings)] = tStylingKey;\r\n}\r\n/**\r\n * Collect all static values after the current `TNode.directiveStylingLast` index.\r\n *\r\n * Collect the remaining styling information which has not yet been collected by an existing\r\n * styling instruction.\r\n *\r\n * @param tData `TData` where the `DirectiveDefs` are stored.\r\n * @param tNode `TNode` which contains the directive range.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\r\nfunction collectResidual(tData, tNode, isClassBased) {\r\n    let residual = undefined;\r\n    const directiveEnd = tNode.directiveEnd;\r\n    ngDevMode &&\r\n        assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\r\n    // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\r\n    // collecting things after the last `hostBindings` directive which had a styling instruction.)\r\n    for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\r\n        const attrs = tData[i].hostAttrs;\r\n        residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\r\n    }\r\n    return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\r\n}\r\n/**\r\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\r\n *\r\n * (This is opposite of residual styling.)\r\n *\r\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\r\n *        styling. (Or `null` if template styling)\r\n * @param tData `TData` where the linked list is stored.\r\n * @param tNode `TNode` for which the styling is being computed.\r\n * @param stylingKey Existing `TStylingKey` to update or wrap.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\r\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\r\n    // We need to loop because there can be directives which have `hostAttrs` but don't have\r\n    // `hostBindings` so this loop catches up to the current directive..\r\n    let currentDirective = null;\r\n    const directiveEnd = tNode.directiveEnd;\r\n    let directiveStylingLast = tNode.directiveStylingLast;\r\n    if (directiveStylingLast === -1) {\r\n        directiveStylingLast = tNode.directiveStart;\r\n    }\r\n    else {\r\n        directiveStylingLast++;\r\n    }\r\n    while (directiveStylingLast < directiveEnd) {\r\n        currentDirective = tData[directiveStylingLast];\r\n        ngDevMode && assertDefined(currentDirective, 'expected to be defined');\r\n        stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\r\n        if (currentDirective === hostDirectiveDef)\r\n            break;\r\n        directiveStylingLast++;\r\n    }\r\n    if (hostDirectiveDef !== null) {\r\n        // we only advance the styling cursor if we are collecting data from host bindings.\r\n        // Template executes before host bindings and so if we would update the index,\r\n        // host bindings would not get their statics.\r\n        tNode.directiveStylingLast = directiveStylingLast;\r\n    }\r\n    return stylingKey;\r\n}\r\n/**\r\n * Convert `TAttrs` into `TStylingStatic`.\r\n *\r\n * @param stylingKey existing `TStylingKey` to update or wrap.\r\n * @param attrs `TAttributes` to process.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\r\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\r\n    const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\r\n    let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\r\n    if (attrs !== null) {\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const item = attrs[i];\r\n            if (typeof item === 'number') {\r\n                currentMarker = item;\r\n            }\r\n            else {\r\n                if (currentMarker === desiredMarker) {\r\n                    if (!Array.isArray(stylingKey)) {\r\n                        stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\r\n                    }\r\n                    keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return stylingKey === undefined ? null : stylingKey;\r\n}\r\n/**\r\n * Convert user input to `KeyValueArray`.\r\n *\r\n * This function takes user input which could be `string`, Object literal, or iterable and converts\r\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\r\n * where\r\n * even indexes contain keys and odd indexes contain values for those keys).\r\n *\r\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\r\n * independent\r\n * way.\r\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\r\n * applied)\r\n *\r\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\r\n * difference in linear fashion without the need to allocate any additional data.\r\n *\r\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\r\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\r\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\r\n *\r\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\r\n *        function so that `style` can be processed. This is done\r\n *        for tree shaking purposes.\r\n * @param stringParser The parser is passed in so that it will be tree shakable. See\r\n *        `styleStringParser` and `classStringParser`\r\n * @param value The value to parse/convert to `KeyValueArray`\r\n */\r\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\r\n    if (value == null /*|| value === undefined */ || value === '')\r\n        return EMPTY_ARRAY;\r\n    const styleKeyValueArray = [];\r\n    const unwrappedValue = unwrapSafeValue(value);\r\n    if (Array.isArray(unwrappedValue)) {\r\n        for (let i = 0; i < unwrappedValue.length; i++) {\r\n            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\r\n        }\r\n    }\r\n    else if (typeof unwrappedValue === 'object') {\r\n        for (const key in unwrappedValue) {\r\n            if (unwrappedValue.hasOwnProperty(key)) {\r\n                keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\r\n            }\r\n        }\r\n    }\r\n    else if (typeof unwrappedValue === 'string') {\r\n        stringParser(styleKeyValueArray, unwrappedValue);\r\n    }\r\n    else {\r\n        ngDevMode &&\r\n            throwError('Unsupported styling type: ' + typeof unwrappedValue + ' (' + unwrappedValue + ')');\r\n    }\r\n    return styleKeyValueArray;\r\n}\r\n/**\r\n * Set a `value` for a `key`.\r\n *\r\n * See: `keyValueArraySet` for details\r\n *\r\n * @param keyValueArray KeyValueArray to add to.\r\n * @param key Style key to add.\r\n * @param value The value to set.\r\n */\r\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\r\n    keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\r\n}\r\n/**\r\n * Class-binding-specific function for setting the `value` for a `key`.\r\n *\r\n * See: `keyValueArraySet` for details\r\n *\r\n * @param keyValueArray KeyValueArray to add to.\r\n * @param key Style key to add.\r\n * @param value The value to set.\r\n */\r\nfunction classKeyValueArraySet(keyValueArray, key, value) {\r\n    // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\r\n    // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\r\n    // will be added. Stringify the key here so that our internal data structure matches the value in\r\n    // the DOM. The only exceptions are empty strings and strings that contain spaces for which\r\n    // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\r\n    const stringKey = String(key);\r\n    if (stringKey !== '' && !stringKey.includes(' ')) {\r\n        keyValueArraySet(keyValueArray, stringKey, value);\r\n    }\r\n}\r\n/**\r\n * Update map based styling.\r\n *\r\n * Map based styling could be anything which contains more than one binding. For example `string`,\r\n * or object literal. Dealing with all of these types would complicate the logic so\r\n * instead this function expects that the complex input is first converted into normalized\r\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\r\n * very cheap to compute deltas between the previous and current value.\r\n *\r\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\r\n * @param tNode `TNode` where the binding is located.\r\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\r\n * @param renderer Renderer to use if any updates.\r\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\r\n * @param newKeyValueArray Current value represented as `KeyValueArray`\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @param bindingIndex Binding index of the binding.\r\n */\r\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\r\n    if (oldKeyValueArray === NO_CHANGE) {\r\n        // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\r\n        oldKeyValueArray = EMPTY_ARRAY;\r\n    }\r\n    let oldIndex = 0;\r\n    let newIndex = 0;\r\n    let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\r\n    let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\r\n    while (oldKey !== null || newKey !== null) {\r\n        ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\r\n        ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\r\n        const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\r\n        const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\r\n        let setKey = null;\r\n        let setValue = undefined;\r\n        if (oldKey === newKey) {\r\n            // UPDATE: Keys are equal => new value is overwriting old value.\r\n            oldIndex += 2;\r\n            newIndex += 2;\r\n            if (oldValue !== newValue) {\r\n                setKey = newKey;\r\n                setValue = newValue;\r\n            }\r\n        }\r\n        else if (newKey === null || (oldKey !== null && oldKey < newKey)) {\r\n            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\r\n            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\r\n            // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\r\n            // new array.\r\n            oldIndex += 2;\r\n            setKey = oldKey;\r\n        }\r\n        else {\r\n            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\r\n            // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\r\n            // old array.\r\n            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\r\n            newIndex += 2;\r\n            setKey = newKey;\r\n            setValue = newValue;\r\n        }\r\n        if (setKey !== null) {\r\n            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\r\n        }\r\n        oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\r\n        newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\r\n    }\r\n}\r\n/**\r\n * Update a simple (property name) styling.\r\n *\r\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\r\n * value as well as binding priority into consideration to determine which value should be written\r\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\r\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\r\n *\r\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\r\n * @param tNode `TNode` where the binding is located.\r\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\r\n * @param renderer Renderer to use if any updates.\r\n * @param prop Either style property name or a class name.\r\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n * @param bindingIndex Binding index of the binding.\r\n */\r\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\r\n    if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\r\n        // It is possible to have styling on non-elements (such as ng-container).\r\n        // This is rare, but it does happen. In such a case, just ignore the binding.\r\n        return;\r\n    }\r\n    const tData = tView.data;\r\n    const tRange = tData[bindingIndex + 1];\r\n    const higherPriorityValue = getTStylingRangeNextDuplicate(tRange)\r\n        ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased)\r\n        : undefined;\r\n    if (!isStylingValuePresent(higherPriorityValue)) {\r\n        // We don't have a next duplicate, or we did not find a duplicate value.\r\n        if (!isStylingValuePresent(value)) {\r\n            // We should delete current value or restore to lower priority value.\r\n            if (getTStylingRangePrevDuplicate(tRange)) {\r\n                // We have a possible prev duplicate, let's retrieve it.\r\n                value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\r\n            }\r\n        }\r\n        const rNode = getNativeByIndex(getSelectedIndex(), lView);\r\n        applyStyling(renderer, isClassBased, rNode, prop, value);\r\n    }\r\n}\r\n/**\r\n * Search for styling value with higher priority which is overwriting current value, or a\r\n * value of lower priority to which we should fall back if the value is `undefined`.\r\n *\r\n * When value is being applied at a location, related values need to be consulted.\r\n * - If there is a higher priority binding, we should be using that one instead.\r\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\r\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\r\n * - If there is a lower priority binding and we are changing to `undefined`\r\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\r\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\r\n *\r\n * NOTE: The styling stores two values.\r\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\r\n *    is used for dirty checking).\r\n * 2. The normalized value is stored at `index + 1`.\r\n *\r\n * @param tData `TData` used for traversing the priority.\r\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\r\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\r\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\r\n *   - `null` search prev and go all the way to end. Return last value where\r\n *     `isStylingValuePresent(value)` is true.\r\n * @param lView `LView` used for retrieving the actual values.\r\n * @param prop Property which we are interested in.\r\n * @param index Starting index in the linked list of styling bindings where the search should start.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\r\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\r\n    // `TNode` to use for resolving static styling. Also controls search direction.\r\n    //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\r\n    //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\r\n    //   - `null` search prev and go all the way to end. Return last value where\r\n    //     `isStylingValuePresent(value)` is true.\r\n    const isPrevDirection = tNode === null;\r\n    let value = undefined;\r\n    while (index > 0) {\r\n        const rawKey = tData[index];\r\n        const containsStatics = Array.isArray(rawKey);\r\n        // Unwrap the key if we contain static values.\r\n        const key = containsStatics ? rawKey[1] : rawKey;\r\n        const isStylingMap = key === null;\r\n        let valueAtLViewIndex = lView[index + 1];\r\n        if (valueAtLViewIndex === NO_CHANGE) {\r\n            // In firstUpdatePass the styling instructions create a linked list of styling.\r\n            // On subsequent passes it is possible for a styling instruction to try to read a binding\r\n            // which\r\n            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\r\n            // we have `undefined` (or empty array in case of styling-map instruction) instead. This\r\n            // allows the resolution to apply the value (which may later be overwritten when the\r\n            // binding actually executes.)\r\n            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\r\n        }\r\n        let currentValue = isStylingMap\r\n            ? keyValueArrayGet(valueAtLViewIndex, prop)\r\n            : key === prop\r\n                ? valueAtLViewIndex\r\n                : undefined;\r\n        if (containsStatics && !isStylingValuePresent(currentValue)) {\r\n            currentValue = keyValueArrayGet(rawKey, prop);\r\n        }\r\n        if (isStylingValuePresent(currentValue)) {\r\n            value = currentValue;\r\n            if (isPrevDirection) {\r\n                return value;\r\n            }\r\n        }\r\n        const tRange = tData[index + 1];\r\n        index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\r\n    }\r\n    if (tNode !== null) {\r\n        // in case where we are going in next direction AND we did not find anything, we need to\r\n        // consult residual styling\r\n        let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\r\n        if (residual != null /** OR residual !=== undefined */) {\r\n            value = keyValueArrayGet(residual, prop);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\r\n * resolution should be used.)\r\n *\r\n * @param value Binding style value.\r\n */\r\nfunction isStylingValuePresent(value) {\r\n    // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\r\n    // have an opinion as to what this binding should be and you should consult other bindings by\r\n    // priority to determine the valid value.\r\n    // This is extracted into a single function so that we have a single place to control this.\r\n    return value !== undefined;\r\n}\r\n/**\r\n * Normalizes and/or adds a suffix to the value.\r\n *\r\n * If value is `null`/`undefined` no suffix is added\r\n * @param value\r\n * @param suffix\r\n */\r\nfunction normalizeSuffix(value, suffix) {\r\n    if (value == null || value === '') ;\r\n    else if (typeof suffix === 'string') {\r\n        value = value + suffix;\r\n    }\r\n    else if (typeof value === 'object') {\r\n        value = stringify(unwrapSafeValue(value));\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Tests if the `TNode` has input shadow.\r\n *\r\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\r\n * `@Input('class')` as input.\r\n *\r\n * @param tNode `TNode` which we would like to see if it has shadow.\r\n * @param isClassBased `true` if `class` (`false` if `style`)\r\n */\r\nfunction hasStylingInputShadow(tNode, isClassBased) {\r\n    return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\r\n}\r\n\r\n/**\r\n * Create static text node\r\n *\r\n * @param index Index of the node in the data array\r\n * @param value Static string value to write.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtext(index, value = '') {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    ngDevMode &&\r\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\r\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\r\n    const tNode = tView.firstCreatePass\r\n        ? getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null)\r\n        : tView.data[adjustedIndex];\r\n    const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\r\n    lView[adjustedIndex] = textNative;\r\n    if (wasLastNodeCreated()) {\r\n        appendChild(tView, lView, textNative, tNode);\r\n    }\r\n    // Text nodes are self closing.\r\n    setCurrentTNode(tNode, false);\r\n}\r\nlet _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {\r\n    lastNodeWasCreated(true);\r\n    return createTextNode(lView[RENDERER], value);\r\n};\r\n/**\r\n * Enables hydration code path (to lookup existing elements in DOM)\r\n * in addition to the regular creation mode of text nodes.\r\n */\r\nfunction locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {\r\n    const hydrationInfo = lView[HYDRATION];\r\n    const isNodeCreationMode = !hydrationInfo ||\r\n        isInSkipHydrationBlock$1() ||\r\n        isDetachedByI18n(tNode) ||\r\n        isDisconnectedNode$1(hydrationInfo, index);\r\n    lastNodeWasCreated(isNodeCreationMode);\r\n    // Regular creation mode.\r\n    if (isNodeCreationMode) {\r\n        return createTextNode(lView[RENDERER], value);\r\n    }\r\n    // Hydration mode, looking up an existing element in DOM.\r\n    const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);\r\n    ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\r\n    ngDevMode && markRNodeAsClaimedByHydration(textNative);\r\n    return textNative;\r\n}\r\nfunction enableLocateOrCreateTextNodeImpl() {\r\n    _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\r\n}\r\n\r\n/**\r\n * Create interpolation bindings with a variable number of expressions.\r\n *\r\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\r\n * Those are faster because there is no need to create an array of expressions and iterate over it.\r\n *\r\n * `values`:\r\n * - has static text at even indexes,\r\n * - has evaluated expressions at odd indexes.\r\n *\r\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\r\n */\r\nfunction interpolationV(lView, values) {\r\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\r\n    let isBindingUpdated = false;\r\n    let bindingIndex = getBindingIndex();\r\n    for (let i = 1; i < values.length; i += 2) {\r\n        // Check if bindings (odd indexes) have changed\r\n        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\r\n    }\r\n    setBindingIndex(bindingIndex);\r\n    if (!isBindingUpdated) {\r\n        return NO_CHANGE;\r\n    }\r\n    // Build the updated content\r\n    let content = values[0];\r\n    for (let i = 1; i < values.length; i += 2) {\r\n        // The condition is to prevent an out-of-bound read\r\n        content += renderStringify(values[i]) + (i + 1 !== values.length ? values[i + 1] : '');\r\n    }\r\n    return content;\r\n}\r\n/**\r\n * Creates an interpolation binding with 1 expression.\r\n *\r\n * @param prefix static value used for concatenation only.\r\n * @param v0 value checked for change.\r\n * @param suffix static value used for concatenation only.\r\n */\r\nfunction interpolation1(lView, prefix, v0, suffix = '') {\r\n    const different = bindingUpdated(lView, nextBindingIndex(), v0);\r\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 2 expressions.\r\n */\r\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\r\n    incrementBindingIndex(2);\r\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 3 expressions.\r\n */\r\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\r\n    incrementBindingIndex(3);\r\n    return different\r\n        ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix\r\n        : NO_CHANGE;\r\n}\r\n/**\r\n * Create an interpolation binding with 4 expressions.\r\n */\r\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\r\n    incrementBindingIndex(4);\r\n    return different\r\n        ? prefix +\r\n            renderStringify(v0) +\r\n            i0 +\r\n            renderStringify(v1) +\r\n            i1 +\r\n            renderStringify(v2) +\r\n            i2 +\r\n            renderStringify(v3) +\r\n            suffix\r\n        : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 5 expressions.\r\n */\r\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\r\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\r\n    incrementBindingIndex(5);\r\n    return different\r\n        ? prefix +\r\n            renderStringify(v0) +\r\n            i0 +\r\n            renderStringify(v1) +\r\n            i1 +\r\n            renderStringify(v2) +\r\n            i2 +\r\n            renderStringify(v3) +\r\n            i3 +\r\n            renderStringify(v4) +\r\n            suffix\r\n        : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 6 expressions.\r\n */\r\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\r\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\r\n    incrementBindingIndex(6);\r\n    return different\r\n        ? prefix +\r\n            renderStringify(v0) +\r\n            i0 +\r\n            renderStringify(v1) +\r\n            i1 +\r\n            renderStringify(v2) +\r\n            i2 +\r\n            renderStringify(v3) +\r\n            i3 +\r\n            renderStringify(v4) +\r\n            i4 +\r\n            renderStringify(v5) +\r\n            suffix\r\n        : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 7 expressions.\r\n */\r\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\r\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\r\n    incrementBindingIndex(7);\r\n    return different\r\n        ? prefix +\r\n            renderStringify(v0) +\r\n            i0 +\r\n            renderStringify(v1) +\r\n            i1 +\r\n            renderStringify(v2) +\r\n            i2 +\r\n            renderStringify(v3) +\r\n            i3 +\r\n            renderStringify(v4) +\r\n            i4 +\r\n            renderStringify(v5) +\r\n            i5 +\r\n            renderStringify(v6) +\r\n            suffix\r\n        : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 8 expressions.\r\n */\r\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = '') {\r\n    const bindingIndex = getBindingIndex();\r\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\r\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\r\n    incrementBindingIndex(8);\r\n    return different\r\n        ? prefix +\r\n            renderStringify(v0) +\r\n            i0 +\r\n            renderStringify(v1) +\r\n            i1 +\r\n            renderStringify(v2) +\r\n            i2 +\r\n            renderStringify(v3) +\r\n            i3 +\r\n            renderStringify(v4) +\r\n            i4 +\r\n            renderStringify(v5) +\r\n            i5 +\r\n            renderStringify(v6) +\r\n            i6 +\r\n            renderStringify(v7) +\r\n            suffix\r\n        : NO_CHANGE;\r\n}\r\n\r\n/**\r\n *\r\n * Update text content with a lone bound value\r\n *\r\n * Used when a text node has 1 interpolated value in it, an no additional text\r\n * surrounds that interpolated value:\r\n *\r\n * ```html\r\n * <div>{{v0}}</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate(v0);\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate(v0) {\r\n    ɵɵtextInterpolate1('', v0);\r\n    return ɵɵtextInterpolate;\r\n}\r\n/**\r\n *\r\n * Update text content with single bound value surrounded by other text.\r\n *\r\n * Used when a text node has 1 interpolated value in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation1(lView, prefix, v0, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate1;\r\n}\r\n/**\r\n *\r\n * Update text content with 2 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 2 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate2;\r\n}\r\n/**\r\n *\r\n * Update text content with 3 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 3 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate3(\r\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate3;\r\n}\r\n/**\r\n *\r\n * Update text content with 4 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 4 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate4(\r\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see ɵɵtextInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate4;\r\n}\r\n/**\r\n *\r\n * Update text content with 5 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 5 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate5(\r\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate5;\r\n}\r\n/**\r\n *\r\n * Update text content with 6 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 6 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate6(\r\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\r\n * ```\r\n *\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate6;\r\n}\r\n/**\r\n *\r\n * Update text content with 7 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 7 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate7(\r\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate7;\r\n}\r\n/**\r\n *\r\n * Update text content with 8 bound values surrounded by other text.\r\n *\r\n * Used when a text node has 8 interpolated values in it:\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolate8(\r\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\r\n * ```\r\n * @returns itself, so that it may be chained.\r\n * @see textInterpolateV\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\r\n    const lView = getLView();\r\n    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolate8;\r\n}\r\n/**\r\n * Update text content with 9 or more bound values other surrounded by text.\r\n *\r\n * Used when the number of interpolated values exceeds 8.\r\n *\r\n * ```html\r\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\r\n * ```\r\n *\r\n * Its compiled representation is:\r\n *\r\n * ```ts\r\n * ɵɵtextInterpolateV(\r\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\r\n *  'suffix']);\r\n * ```\r\n *.\r\n * @param values The collection of values and the strings in between those values, beginning with\r\n * a string prefix and ending with a string suffix.\r\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\r\n *\r\n * @returns itself, so that it may be chained.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtextInterpolateV(values) {\r\n    const lView = getLView();\r\n    const interpolated = interpolationV(lView, values);\r\n    if (interpolated !== NO_CHANGE) {\r\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\r\n    }\r\n    return ɵɵtextInterpolateV;\r\n}\r\n/**\r\n * Updates a text binding at a given index in a given LView.\r\n */\r\nfunction textBindingInternal(lView, index, value) {\r\n    ngDevMode && assertString(value, 'Value should be a string');\r\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\r\n    ngDevMode && assertIndexInRange(lView, index);\r\n    const element = getNativeByIndex(index, lView);\r\n    ngDevMode && assertDefined(element, 'native element should exist');\r\n    updateTextNode(lView[RENDERER], element, value);\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Update a two-way bound property on a selected element.\r\n *\r\n * Operates on the element selected by index via the {@link select} instruction.\r\n *\r\n * @param propName Name of property.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n * @returns This function returns itself so that it may be chained\r\n * (e.g. `twoWayProperty('name', ctx.name)('title', ctx.title)`)\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtwoWayProperty(propName, value, sanitizer) {\r\n    // TODO(crisbeto): perf impact of re-evaluating this on each change detection?\r\n    if (isWritableSignal(value)) {\r\n        value = value();\r\n    }\r\n    const lView = getLView();\r\n    const bindingIndex = nextBindingIndex();\r\n    if (bindingUpdated(lView, bindingIndex, value)) {\r\n        const tView = getTView();\r\n        const tNode = getSelectedTNode();\r\n        setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\r\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\r\n    }\r\n    return ɵɵtwoWayProperty;\r\n}\r\n/**\r\n * Function used inside two-way listeners to conditionally set the value of the bound expression.\r\n *\r\n * @param target Field on which to set the value.\r\n * @param value Value to be set to the field.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtwoWayBindingSet(target, value) {\r\n    const canWrite = isWritableSignal(target);\r\n    canWrite && target.set(value);\r\n    return canWrite;\r\n}\r\n/**\r\n * Adds an event listener that updates a two-way binding to the current node.\r\n *\r\n * @param eventName Name of the event.\r\n * @param listenerFn The function to be called when event emits.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtwoWayListener(eventName, listenerFn) {\r\n    const lView = getLView();\r\n    const tView = getTView();\r\n    const tNode = getCurrentTNode();\r\n    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);\r\n    return ɵɵtwoWayListener;\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/** Object that indicates the value of a `@let` declaration that hasn't been initialized yet. */\r\nconst UNINITIALIZED_LET = {};\r\n/**\r\n * Declares an `@let` at a specific data slot. Returns itself to allow chaining.\r\n *\r\n * @param index Index at which to declare the `@let`.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵdeclareLet(index) {\r\n    const tView = getTView();\r\n    const lView = getLView();\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const tNode = getOrCreateTNode(tView, adjustedIndex, 128 /* TNodeType.LetDeclaration */, null, null);\r\n    setCurrentTNode(tNode, false);\r\n    store(tView, lView, adjustedIndex, UNINITIALIZED_LET);\r\n    return ɵɵdeclareLet;\r\n}\r\n/**\r\n * Instruction that stores the value of a `@let` declaration on the current view.\r\n * Returns the value to allow usage inside variable initializers.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵstoreLet(value) {\r\n    performanceMarkFeature('NgLet');\r\n    const tView = getTView();\r\n    const lView = getLView();\r\n    const index = getSelectedIndex();\r\n    store(tView, lView, index, value);\r\n    return value;\r\n}\r\n/**\r\n * Retrieves the value of a `@let` declaration defined in a parent view.\r\n *\r\n * @param index Index of the declaration within the view.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵreadContextLet(index) {\r\n    const contextLView = getContextLView();\r\n    const value = load(contextLView, HEADER_OFFSET + index);\r\n    if (value === UNINITIALIZED_LET) {\r\n        throw new RuntimeError(314 /* RuntimeErrorCode.UNINITIALIZED_LET_ACCESS */, ngDevMode && 'Attempting to access a @let declaration whose value is not available yet');\r\n    }\r\n    return value;\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Sets the location within the source template at which\r\n * each element in the current view was defined.\r\n *\r\n * @param index Index at which the DOM node was created.\r\n * @param templatePath Path to the template at which the node was defined.\r\n * @param locations Element locations to which to attach the source location.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵattachSourceLocations(templatePath, locations) {\r\n    const tView = getTView();\r\n    const lView = getLView();\r\n    const renderer = lView[RENDERER];\r\n    const attributeName = 'data-ng-source-location';\r\n    for (const [index, offset, line, column] of locations) {\r\n        const tNode = getTNode(tView, index + HEADER_OFFSET);\r\n        // The compiler shouldn't generate the instruction for non-element nodes, but assert just in case.\r\n        ngDevMode && assertTNodeType(tNode, 2 /* TNodeType.Element */);\r\n        const node = getNativeByIndex(index + HEADER_OFFSET, lView);\r\n        // Set the attribute directly in the DOM so it doesn't participate in directive matching.\r\n        if (!node.hasAttribute(attributeName)) {\r\n            const attributeValue = `${templatePath}@o:${offset},l:${line},c:${column}`;\r\n            renderer.setAttribute(node, attributeName, attributeValue);\r\n        }\r\n    }\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Interpolate a value with a single bound value and no prefixes or suffixes.\r\n *\r\n * @param v0 Value checked for change.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate(v0) {\r\n    // Avoid calling into the `interpolate` functions since\r\n    // we know that we don't have a prefix or suffix.\r\n    return bindingUpdated(getLView(), nextBindingIndex(), v0) ? renderStringify(v0) : NO_CHANGE;\r\n}\r\n/**\r\n * Interpolate a value with a single bound value.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate1(prefix, v0, suffix = '') {\r\n    return interpolation1(getLView(), prefix, v0, suffix);\r\n}\r\n/**\r\n * Interpolate a value with two bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate2(prefix, v0, i0, v1, suffix = '') {\r\n    return interpolation2(getLView(), prefix, v0, i0, v1, suffix);\r\n}\r\n/**\r\n * Interpolate a value with three bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate3(prefix, v0, i0, v1, i1, v2, suffix = '') {\r\n    return interpolation3(getLView(), prefix, v0, i0, v1, i1, v2, suffix);\r\n}\r\n/**\r\n * Interpolate a value with four bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix = '') {\r\n    return interpolation4(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\r\n}\r\n/**\r\n * Interpolate a value with five bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = '') {\r\n    return interpolation5(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\r\n}\r\n/**\r\n * Interpolate a value with six bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = '') {\r\n    return interpolation6(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\r\n}\r\n/**\r\n * Interpolate a value with seven bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change.\r\n * @param i5 Static value used for concatenation only.\r\n * @param v6 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = '') {\r\n    return interpolation7(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\r\n}\r\n/**\r\n * Interpolate a value with eight bound values.\r\n *\r\n * @param prefix Static value used for concatenation only.\r\n * @param v0 Value checked for change.\r\n * @param i0 Static value used for concatenation only.\r\n * @param v1 Value checked for change.\r\n * @param i1 Static value used for concatenation only.\r\n * @param v2 Value checked for change.\r\n * @param i2 Static value used for concatenation only.\r\n * @param v3 Value checked for change.\r\n * @param i3 Static value used for concatenation only.\r\n * @param v4 Value checked for change.\r\n * @param i4 Static value used for concatenation only.\r\n * @param v5 Value checked for change.\r\n * @param i5 Static value used for concatenation only.\r\n * @param v6 Value checked for change.\r\n * @param i6 Static value used for concatenation only.\r\n * @param v7 Value checked for change.\r\n * @param suffix Static value used for concatenation only.\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = '') {\r\n    return interpolation8(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\r\n}\r\n/**\r\n * Interpolate a value with nine or more bound values.\r\n *\r\n * @param values The collection of values and the strings in-between those values, beginning with\r\n * a string prefix and ending with a string suffix.\r\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\r\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵinterpolateV(values) {\r\n    return interpolationV(getLView(), values);\r\n}\r\n\r\n/**\r\n * Resolves the providers which are defined in the DirectiveDef.\r\n *\r\n * When inserting the tokens and the factories in their respective arrays, we can assume that\r\n * this method is called first for the component (if any), and then for other directives on the same\r\n * node.\r\n * As a consequence,the providers are always processed in that order:\r\n * 1) The view providers of the component\r\n * 2) The providers of the component\r\n * 3) The providers of the other directives\r\n * This matches the structure of the injectables arrays of a view (for each node).\r\n * So the tokens and the factories can be pushed at the end of the arrays, except\r\n * in one case for multi providers.\r\n *\r\n * @param def the directive definition\r\n * @param providers: Array of `providers`.\r\n * @param viewProviders: Array of `viewProviders`.\r\n */\r\nfunction providersResolver(def, providers, viewProviders) {\r\n    const tView = getTView();\r\n    if (tView.firstCreatePass) {\r\n        const isComponent = isComponentDef(def);\r\n        // The list of view providers is processed first, and the flags are updated\r\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\r\n        // Then, the list of providers is processed, and the flags are updated\r\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\r\n    }\r\n}\r\n/**\r\n * Resolves a provider and publishes it to the DI system.\r\n */\r\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\r\n    provider = resolveForwardRef(provider);\r\n    if (Array.isArray(provider)) {\r\n        // Recursively call `resolveProvider`\r\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\r\n        // cloning of the initial state.\r\n        for (let i = 0; i < provider.length; i++) {\r\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\r\n        }\r\n    }\r\n    else {\r\n        const tView = getTView();\r\n        const lView = getLView();\r\n        const tNode = getCurrentTNode();\r\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\r\n        const providerFactory = providerToFactory(provider);\r\n        if (ngDevMode) {\r\n            const injector = new NodeInjector(tNode, lView);\r\n            runInInjectorProfilerContext(injector, token, () => {\r\n                emitProviderConfiguredEvent(provider, isViewProvider);\r\n            });\r\n        }\r\n        const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\r\n        const endIndex = tNode.directiveStart;\r\n        const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\r\n        if (isTypeProvider(provider) || !provider.multi) {\r\n            // Single provider case: the factory is created and pushed immediately\r\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\r\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\r\n            if (existingFactoryIndex === -1) {\r\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\r\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\r\n                tInjectables.push(token);\r\n                tNode.directiveStart++;\r\n                tNode.directiveEnd++;\r\n                if (isViewProvider) {\r\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\r\n                }\r\n                lInjectablesBlueprint.push(factory);\r\n                lView.push(factory);\r\n            }\r\n            else {\r\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\r\n                lView[existingFactoryIndex] = factory;\r\n            }\r\n        }\r\n        else {\r\n            // Multi provider case:\r\n            // We create a multi factory which is going to aggregate all the values.\r\n            // Since the output of such a factory depends on content or view injection,\r\n            // we create two of them, which are linked together.\r\n            //\r\n            // The first one (for view providers) is always in the first block of the injectables array,\r\n            // and the second one (for providers) is always in the second block.\r\n            // This is important because view providers have higher priority. When a multi token\r\n            // is being looked up, the view providers should be found first.\r\n            // Note that it is not possible to have a multi factory in the third block (directive block).\r\n            //\r\n            // The algorithm to process multi providers is as follows:\r\n            // 1) If the multi provider comes from the `viewProviders` of the component:\r\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\r\n            //   b) Else, the multi provider is added to the existing multi factory.\r\n            // 2) If the multi provider comes from the `providers` of the component or of another\r\n            // directive:\r\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\r\n            //      It is also linked to the multi factory for view providers, if it exists.\r\n            //   b) Else, the multi provider is added to the existing multi factory.\r\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\r\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\r\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\r\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\r\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\r\n            if ((isViewProvider && !doesViewProvidersFactoryExist) ||\r\n                (!isViewProvider && !doesProvidersFactoryExist)) {\r\n                // Cases 1.a and 2.a\r\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\r\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\r\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\r\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\r\n                }\r\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\r\n                tInjectables.push(token);\r\n                tNode.directiveStart++;\r\n                tNode.directiveEnd++;\r\n                if (isViewProvider) {\r\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\r\n                }\r\n                lInjectablesBlueprint.push(factory);\r\n                lView.push(factory);\r\n            }\r\n            else {\r\n                // Cases 1.b and 2.b\r\n                const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\r\n                registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1\r\n                    ? existingProvidersFactoryIndex\r\n                    : existingViewProvidersFactoryIndex, indexInFactory);\r\n            }\r\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\r\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\r\n * @param tView `TView` in which to register the hook.\r\n * @param provider Provider whose hook should be registered.\r\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\r\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\r\n * provider factory.\r\n */\r\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\r\n    const providerIsTypeProvider = isTypeProvider(provider);\r\n    const providerIsClassProvider = isClassProvider(provider);\r\n    if (providerIsTypeProvider || providerIsClassProvider) {\r\n        // Resolve forward references as `useClass` can hold a forward reference.\r\n        const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\r\n        const prototype = classToken.prototype;\r\n        const ngOnDestroy = prototype.ngOnDestroy;\r\n        if (ngOnDestroy) {\r\n            const hooks = tView.destroyHooks || (tView.destroyHooks = []);\r\n            if (!providerIsTypeProvider && provider.multi) {\r\n                ngDevMode &&\r\n                    assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\r\n                const existingCallbacksIndex = hooks.indexOf(contextIndex);\r\n                if (existingCallbacksIndex === -1) {\r\n                    hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\r\n                }\r\n                else {\r\n                    hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\r\n                }\r\n            }\r\n            else {\r\n                hooks.push(contextIndex, ngOnDestroy);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Add a factory in a multi factory.\r\n * @returns Index at which the factory was inserted.\r\n */\r\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\r\n    if (isComponentProvider) {\r\n        multiFactory.componentProviders++;\r\n    }\r\n    return multiFactory.multi.push(factory) - 1;\r\n}\r\n/**\r\n * Returns the index of item in the array, but only in the begin to end range.\r\n */\r\nfunction indexOf(item, arr, begin, end) {\r\n    for (let i = begin; i < end; i++) {\r\n        if (arr[i] === item)\r\n            return i;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Use this with `multi` `providers`.\r\n */\r\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\r\n    return multiResolve(this.multi, []);\r\n}\r\n/**\r\n * Use this with `multi` `viewProviders`.\r\n *\r\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\r\n */\r\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\r\n    const factories = this.multi;\r\n    let result;\r\n    if (this.providerFactory) {\r\n        const componentCount = this.providerFactory.componentProviders;\r\n        const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\r\n        // Copy the section of the array which contains `multi` `providers` from the component\r\n        result = multiProviders.slice(0, componentCount);\r\n        // Insert the `viewProvider` instances.\r\n        multiResolve(factories, result);\r\n        // Copy the section of the array which contains `multi` `providers` from other directives\r\n        for (let i = componentCount; i < multiProviders.length; i++) {\r\n            result.push(multiProviders[i]);\r\n        }\r\n    }\r\n    else {\r\n        result = [];\r\n        // Insert the `viewProvider` instances.\r\n        multiResolve(factories, result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Maps an array of factories into an array of values.\r\n */\r\nfunction multiResolve(factories, result) {\r\n    for (let i = 0; i < factories.length; i++) {\r\n        const factory = factories[i];\r\n        result.push(factory());\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Creates a multi factory.\r\n */\r\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\r\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\r\n    factory.multi = [];\r\n    factory.index = index;\r\n    factory.componentProviders = 0;\r\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\r\n    return factory;\r\n}\r\n\r\n/**\r\n * This feature resolves the providers of a directive (or component),\r\n * and publish them into the DI system, making it visible to others for injection.\r\n *\r\n * For example:\r\n * ```ts\r\n * class ComponentWithProviders {\r\n *   constructor(private greeter: GreeterDE) {}\r\n *\r\n *   static ɵcmp = defineComponent({\r\n *     type: ComponentWithProviders,\r\n *     selectors: [['component-with-providers']],\r\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\r\n *    decls: 1,\r\n *    vars: 1,\r\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\r\n *      if (fs & RenderFlags.Create) {\r\n *        ɵɵtext(0);\r\n *      }\r\n *      if (fs & RenderFlags.Update) {\r\n *        ɵɵtextInterpolate(ctx.greeter.greet());\r\n *      }\r\n *    },\r\n *    features: [ɵɵProvidersFeature([GreeterDE])]\r\n *  });\r\n * }\r\n * ```\r\n *\r\n * @param definition\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\r\n    return (definition) => {\r\n        definition.providersResolver = (def, processProvidersFn) => {\r\n            return providersResolver(def, //\r\n            processProvidersFn ? processProvidersFn(providers) : providers, //\r\n            viewProviders);\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * A feature that adds support for external runtime styles for a component.\r\n * An external runtime style is a URL to a CSS stylesheet that contains the styles\r\n * for a given component. For browsers, this URL will be used in an appended `link` element\r\n * when the component is rendered. This feature is typically used for Hot Module Replacement\r\n * (HMR) of component stylesheets by leveraging preexisting global stylesheet HMR available\r\n * in most development servers.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵExternalStylesFeature(styleUrls) {\r\n    return (definition) => {\r\n        if (styleUrls.length < 1) {\r\n            return;\r\n        }\r\n        definition.getExternalStyles = (encapsulationId) => {\r\n            // Add encapsulation ID search parameter `ngcomp` to support external style encapsulation as well as the encapsulation mode\r\n            // for usage tracking.\r\n            const urls = styleUrls.map((value) => value +\r\n                '?ngcomp' +\r\n                (encapsulationId ? '=' + encodeURIComponent(encapsulationId) : '') +\r\n                '&e=' +\r\n                definition.encapsulation);\r\n            return urls;\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\r\n * definition, when generating a direct reference in the component file would otherwise create an\r\n * import cycle.\r\n *\r\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsetComponentScope(type, directives, pipes) {\r\n    const def = type.ɵcmp;\r\n    def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */ false);\r\n    def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */ true);\r\n}\r\n/**\r\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\r\n * existing module definition.\r\n *\r\n * Scope metadata of modules is not used in production builds, so calls to this function can be\r\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\r\n * to become eligible for tree-shaking as well.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵsetNgModuleScope(type, scope) {\r\n    return noSideEffects(() => {\r\n        const ngModuleDef = getNgModuleDefOrThrow(type);\r\n        ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);\r\n        ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);\r\n        ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);\r\n        if (scope.bootstrap) {\r\n            // This only happens in local compilation mode.\r\n            ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);\r\n        }\r\n        depsTracker.registerNgModule(type, scope);\r\n    });\r\n}\r\nfunction convertToTypeArray(values) {\r\n    if (typeof values === 'function') {\r\n        return values;\r\n    }\r\n    const flattenValues = flatten(values);\r\n    if (flattenValues.some(isForwardRef)) {\r\n        return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);\r\n    }\r\n    else {\r\n        return flattenValues.map(maybeUnwrapModuleWithProviders);\r\n    }\r\n}\r\nfunction maybeUnwrapModuleWithProviders(value) {\r\n    return isModuleWithProviders(value) ? value.ngModule : value;\r\n}\r\n\r\n/**\r\n * Bindings for pure functions are stored after regular bindings.\r\n *\r\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\r\n * ------------------------------------------------------------------------------------------\r\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\r\n * ------------------------------------------------------------------------------------------\r\n *                    ^                      ^\r\n *      TView.bindingStartIndex      TView.expandoStartIndex\r\n *\r\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\r\n * binding root gives the first index where the bindings are stored. In component views, the binding\r\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\r\n * any directive instances + any hostVars in directives evaluated before it.\r\n *\r\n * See VIEW_DATA.md for more information about host binding resolution.\r\n */\r\n/**\r\n * If the value hasn't been saved, calls the pure function to store and return the\r\n * value. If it has been saved, returns the saved value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn Function that returns a value\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\r\n    const bindingIndex = getBindingRoot() + slotOffset;\r\n    const lView = getLView();\r\n    return lView[bindingIndex] === NO_CHANGE\r\n        ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn())\r\n        : getBinding(lView, bindingIndex);\r\n}\r\n/**\r\n * If the value of the provided exp has changed, calls the pure function to return\r\n * an updated value. Or if the value has not changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn Function that returns an updated value\r\n * @param exp Updated expression value\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\r\n    return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\r\n    return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\r\n    return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\r\n    return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\r\n    const bindingIndex = getBindingRoot() + slotOffset;\r\n    const lView = getLView();\r\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\r\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different\r\n        ? updateBinding(lView, bindingIndex + 5, thisArg\r\n            ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5)\r\n            : pureFn(exp1, exp2, exp3, exp4, exp5))\r\n        : getBinding(lView, bindingIndex + 5);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\r\n    const bindingIndex = getBindingRoot() + slotOffset;\r\n    const lView = getLView();\r\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\r\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different\r\n        ? updateBinding(lView, bindingIndex + 6, thisArg\r\n            ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6)\r\n            : pureFn(exp1, exp2, exp3, exp4, exp5, exp6))\r\n        : getBinding(lView, bindingIndex + 6);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param exp7\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\r\n    const bindingIndex = getBindingRoot() + slotOffset;\r\n    const lView = getLView();\r\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\r\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different\r\n        ? updateBinding(lView, bindingIndex + 7, thisArg\r\n            ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7)\r\n            : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7))\r\n        : getBinding(lView, bindingIndex + 7);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param exp7\r\n * @param exp8\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\r\n    const bindingIndex = getBindingRoot() + slotOffset;\r\n    const lView = getLView();\r\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\r\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different\r\n        ? updateBinding(lView, bindingIndex + 8, thisArg\r\n            ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)\r\n            : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8))\r\n        : getBinding(lView, bindingIndex + 8);\r\n}\r\n/**\r\n * pureFunction instruction that can support any number of bindings.\r\n *\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn A pure function that takes binding values and builds an object or array\r\n * containing those values.\r\n * @param exps An array of binding values\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\r\n    return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\r\n}\r\n/**\r\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\r\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\r\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\r\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\r\n * it to `undefined`.\r\n */\r\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\r\n    ngDevMode && assertIndexInRange(lView, returnValueIndex);\r\n    const lastReturnValue = lView[returnValueIndex];\r\n    return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\r\n}\r\n/**\r\n * If the value of the provided exp has changed, calls the pure function to return\r\n * an updated value. Or if the value has not changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn Function that returns an updated value\r\n * @param exp Updated expression value\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\r\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\r\n    const bindingIndex = bindingRoot + slotOffset;\r\n    return bindingUpdated(lView, bindingIndex, exp)\r\n        ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp))\r\n        : getPureFunctionReturnValue(lView, bindingIndex + 1);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\r\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\r\n    const bindingIndex = bindingRoot + slotOffset;\r\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2)\r\n        ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2))\r\n        : getPureFunctionReturnValue(lView, bindingIndex + 2);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\r\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\r\n    const bindingIndex = bindingRoot + slotOffset;\r\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3)\r\n        ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3))\r\n        : getPureFunctionReturnValue(lView, bindingIndex + 3);\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n *\r\n */\r\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\r\n    const bindingIndex = bindingRoot + slotOffset;\r\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4)\r\n        ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4))\r\n        : getPureFunctionReturnValue(lView, bindingIndex + 4);\r\n}\r\n/**\r\n * pureFunction instruction that can support any number of bindings.\r\n *\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param lView LView in which the function is being executed.\r\n * @param bindingRoot Binding root index.\r\n * @param slotOffset the offset from binding root to the reserved slot\r\n * @param pureFn A pure function that takes binding values and builds an object or array\r\n * containing those values.\r\n * @param exps An array of binding values\r\n * @param thisArg Optional calling context of pureFn\r\n * @returns Updated or cached value\r\n */\r\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\r\n    let bindingIndex = bindingRoot + slotOffset;\r\n    let different = false;\r\n    for (let i = 0; i < exps.length; i++) {\r\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\r\n    }\r\n    return different\r\n        ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps))\r\n        : getPureFunctionReturnValue(lView, bindingIndex);\r\n}\r\n\r\n/**\r\n * Create a pipe.\r\n *\r\n * @param index Pipe index where the pipe will be stored.\r\n * @param pipeName The name of the pipe\r\n * @returns T the instance of the pipe.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpipe(index, pipeName) {\r\n    const tView = getTView();\r\n    let pipeDef;\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    if (tView.firstCreatePass) {\r\n        // The `getPipeDef` throws if a pipe with a given name is not found\r\n        // (so we use non-null assertion below).\r\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\r\n        tView.data[adjustedIndex] = pipeDef;\r\n        if (pipeDef.onDestroy) {\r\n            (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);\r\n        }\r\n    }\r\n    else {\r\n        pipeDef = tView.data[adjustedIndex];\r\n    }\r\n    const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\r\n    let previousInjectorProfilerContext;\r\n    if (ngDevMode) {\r\n        previousInjectorProfilerContext = setInjectorProfilerContext({\r\n            injector: new NodeInjector(getCurrentTNode(), getLView()),\r\n            token: pipeDef.type,\r\n        });\r\n    }\r\n    const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\r\n    try {\r\n        // DI for pipes is supposed to behave like directives when placed on a component\r\n        // host node, which means that we have to disable access to `viewProviders`.\r\n        const previousIncludeViewProviders = setIncludeViewProviders(false);\r\n        const pipeInstance = pipeFactory();\r\n        setIncludeViewProviders(previousIncludeViewProviders);\r\n        store(tView, getLView(), adjustedIndex, pipeInstance);\r\n        return pipeInstance;\r\n    }\r\n    finally {\r\n        // we have to restore the injector implementation in finally, just in case the creation of the\r\n        // pipe throws an error.\r\n        setInjectImplementation(previousInjectImplementation);\r\n        ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);\r\n    }\r\n}\r\n/**\r\n * Searches the pipe registry for a pipe with the given name. If one is found,\r\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\r\n *\r\n * @param name Name of pipe to resolve\r\n * @param registry Full list of available pipes\r\n * @returns Matching PipeDef\r\n */\r\nfunction getPipeDef(name, registry) {\r\n    if (registry) {\r\n        if (ngDevMode) {\r\n            const pipes = registry.filter((pipe) => pipe.name === name);\r\n            // TODO: Throw an error in the next major\r\n            if (pipes.length > 1) {\r\n                console.warn(formatRuntimeError(313 /* RuntimeErrorCode.MULTIPLE_MATCHING_PIPES */, getMultipleMatchingPipesMessage(name)));\r\n            }\r\n        }\r\n        for (let i = registry.length - 1; i >= 0; i--) {\r\n            const pipeDef = registry[i];\r\n            if (name === pipeDef.name) {\r\n                return pipeDef;\r\n            }\r\n        }\r\n    }\r\n    if (ngDevMode) {\r\n        throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\r\n    }\r\n    return;\r\n}\r\n/**\r\n * Generates a helpful error message for the user when multiple pipes match the name.\r\n *\r\n * @param name Name of the pipe\r\n * @returns The error message\r\n */\r\nfunction getMultipleMatchingPipesMessage(name) {\r\n    const lView = getLView();\r\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\r\n    const context = declarationLView[CONTEXT];\r\n    const hostIsStandalone = isHostComponentStandalone(lView);\r\n    const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\r\n    const verifyMessage = `check ${hostIsStandalone ? \"'@Component.imports' of this component\" : 'the imports of this module'}`;\r\n    const errorMessage = `Multiple pipes match the name \\`${name}\\`${componentInfoMessage}. ${verifyMessage}`;\r\n    return errorMessage;\r\n}\r\n/**\r\n * Generates a helpful error message for the user when a pipe is not found.\r\n *\r\n * @param name Name of the missing pipe\r\n * @returns The error message\r\n */\r\nfunction getPipeNotFoundErrorMessage(name) {\r\n    const lView = getLView();\r\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\r\n    const context = declarationLView[CONTEXT];\r\n    const hostIsStandalone = isHostComponentStandalone(lView);\r\n    const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\r\n    const verifyMessage = `Verify that it is ${hostIsStandalone\r\n        ? \"included in the '@Component.imports' of this component\"\r\n        : 'declared or imported in this module'}`;\r\n    const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\r\n    return errorMessage;\r\n}\r\n/**\r\n * Invokes a pipe with 1 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param offset the binding offset\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpipeBind1(index, offset, v1) {\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const lView = getLView();\r\n    const pipeInstance = load(lView, adjustedIndex);\r\n    return isPure(lView, adjustedIndex)\r\n        ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance)\r\n        : pipeInstance.transform(v1);\r\n}\r\n/**\r\n * Invokes a pipe with 2 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const lView = getLView();\r\n    const pipeInstance = load(lView, adjustedIndex);\r\n    return isPure(lView, adjustedIndex)\r\n        ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance)\r\n        : pipeInstance.transform(v1, v2);\r\n}\r\n/**\r\n * Invokes a pipe with 3 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n * @param v3 4rd argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const lView = getLView();\r\n    const pipeInstance = load(lView, adjustedIndex);\r\n    return isPure(lView, adjustedIndex)\r\n        ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance)\r\n        : pipeInstance.transform(v1, v2, v3);\r\n}\r\n/**\r\n * Invokes a pipe with 4 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n * @param v3 3rd argument to {@link PipeTransform#transform}.\r\n * @param v4 4th argument to {@link PipeTransform#transform}.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const lView = getLView();\r\n    const pipeInstance = load(lView, adjustedIndex);\r\n    return isPure(lView, adjustedIndex)\r\n        ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance)\r\n        : pipeInstance.transform(v1, v2, v3, v4);\r\n}\r\n/**\r\n * Invokes a pipe with variable number of arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param slotOffset the offset in the reserved slot space\r\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵpipeBindV(index, slotOffset, values) {\r\n    const adjustedIndex = index + HEADER_OFFSET;\r\n    const lView = getLView();\r\n    const pipeInstance = load(lView, adjustedIndex);\r\n    return isPure(lView, adjustedIndex)\r\n        ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance)\r\n        : pipeInstance.transform.apply(pipeInstance, values);\r\n}\r\nfunction isPure(lView, index) {\r\n    return lView[TVIEW].data[index].pure;\r\n}\r\n\r\n/**\r\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\r\n * `<ng-template>` element.\r\n *\r\n * @codeGenApi\r\n */\r\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\r\n    return createTemplateRef(tNode, lView);\r\n}\r\n\r\nfunction ɵɵgetComponentDepsFactory(type, rawImports) {\r\n    return () => {\r\n        try {\r\n            return depsTracker.getComponentDependencies(type, rawImports).dependencies;\r\n        }\r\n        catch (e) {\r\n            console.error(`Computing dependencies in local compilation mode for the component \"${type.name}\" failed with the exception:`, e);\r\n            throw e;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Sets the debug info for an Angular class.\r\n *\r\n * This runtime is guarded by ngDevMode flag.\r\n */\r\nfunction ɵsetClassDebugInfo(type, debugInfo) {\r\n    const def = getComponentDef(type);\r\n    if (def !== null) {\r\n        def.debugInfo = debugInfo;\r\n    }\r\n}\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\r\n/**\r\n * Gets the URL from which the client will fetch a new version of a component's metadata so it\r\n * can be replaced during hot module reloading.\r\n * @param id Unique ID for the component, generated during compile time.\r\n * @param timestamp Time at which the request happened.\r\n * @param base Base URL against which to resolve relative paths.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵgetReplaceMetadataURL(id, timestamp, base) {\r\n    const url = `./@ng/component?c=${id}&t=${encodeURIComponent(timestamp)}`;\r\n    return new URL(url, base).href;\r\n}\r\n/**\r\n * Replaces the metadata of a component type and re-renders all live instances of the component.\r\n * @param type Class whose metadata will be replaced.\r\n * @param applyMetadata Callback that will apply a new set of metadata on the `type` when invoked.\r\n * @param environment Syntehtic namespace imports that need to be passed along to the callback.\r\n * @param locals Local symbols from the source location that have to be exposed to the callback.\r\n * @param importMeta `import.meta` from the call site of the replacement function. Optional since\r\n *   it isn't used internally.\r\n * @param id ID to the class being replaced. **Not** the same as the component definition ID.\r\n *   Optional since the ID might not be available internally.\r\n * @codeGenApi\r\n */\r\nfunction ɵɵreplaceMetadata(type, applyMetadata, namespaces, locals, importMeta = null, id = null) {\r\n    ngDevMode && assertComponentDef(type);\r\n    const currentDef = getComponentDef(type);\r\n    // The reason `applyMetadata` is a callback that is invoked (almost) immediately is because\r\n    // the compiler usually produces more code than just the component definition, e.g. there\r\n    // can be functions for embedded views, the variables for the constant pool and `setClassMetadata`\r\n    // calls. The callback allows us to keep them isolate from the rest of the app and to invoke\r\n    // them at the right time.\r\n    applyMetadata.apply(null, [type, namespaces, ...locals]);\r\n    const { newDef, oldDef } = mergeWithExistingDefinition(currentDef, getComponentDef(type));\r\n    // TODO(crisbeto): the `applyMetadata` call above will replace the definition on the type.\r\n    // Ideally we should adjust the compiler output so the metadata is returned, however that'll\r\n    // require some internal changes. We re-add the metadata here manually.\r\n    type[NG_COMP_DEF] = newDef;\r\n    // If a `tView` hasn't been created yet, it means that this component hasn't been instantianted\r\n    // before. In this case there's nothing left for us to do aside from patching it in.\r\n    if (oldDef.tView) {\r\n        const trackedViews = getTrackedLViews().values();\r\n        for (const root of trackedViews) {\r\n            // Note: we have the additional check, because `IsRoot` can also indicate\r\n            // a component created through something like `createComponent`.\r\n            if (isRootView(root) && root[PARENT] === null) {\r\n                recreateMatchingLViews(importMeta, id, newDef, oldDef, root);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Merges two component definitions while preseving the original one in place.\r\n * @param currentDef Definition that should receive the new metadata.\r\n * @param newDef Source of the new metadata.\r\n */\r\nfunction mergeWithExistingDefinition(currentDef, newDef) {\r\n    // Clone the current definition since we reference its original data further\r\n    // down in the replacement process (e.g. when destroying the renderer).\r\n    const clone = { ...currentDef };\r\n    // Assign the new metadata in place while preserving the object literal. It's important to\r\n    // Keep the object in place, because there can be references to it, for example in the\r\n    // `directiveDefs` of another definition.\r\n    const replacement = Object.assign(currentDef, newDef, {\r\n        // We need to keep the existing directive and pipe defs, because they can get patched on\r\n        // by a call to `setComponentScope` from a module file. That call won't make it into the\r\n        // HMR replacement function, because it lives in an entirely different file.\r\n        directiveDefs: clone.directiveDefs,\r\n        pipeDefs: clone.pipeDefs,\r\n        // Preserve the old `setInput` function, because it has some state.\r\n        // This is fine, because the component instance is preserved as well.\r\n        setInput: clone.setInput,\r\n        // Externally this is redundant since we redeclare the definition using the original type.\r\n        // Internally we may receive a definition with an alternate, but identical, type so we have\r\n        // to ensure that the original one is preserved.\r\n        type: clone.type,\r\n    });\r\n    ngDevMode && assertEqual(replacement, currentDef, 'Expected definition to be merged in place');\r\n    return { newDef: replacement, oldDef: clone };\r\n}\r\n/**\r\n * Finds all LViews matching a specific component definition and recreates them.\r\n * @param importMeta `import.meta` information.\r\n * @param id HMR ID of the component.\r\n * @param oldDef Component definition to search for.\r\n * @param rootLView View from which to start the search.\r\n */\r\nfunction recreateMatchingLViews(importMeta, id, newDef, oldDef, rootLView) {\r\n    ngDevMode &&\r\n        assertDefined(oldDef.tView, 'Expected a component definition that has been instantiated at least once');\r\n    const tView = rootLView[TVIEW];\r\n    // Use `tView` to match the LView since `instanceof` can\r\n    // produce false positives when using inheritance.\r\n    if (tView === oldDef.tView) {\r\n        ngDevMode && assertComponentDef(oldDef.type);\r\n        recreateLView(importMeta, id, newDef, oldDef, rootLView);\r\n        return;\r\n    }\r\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\r\n        const current = rootLView[i];\r\n        if (isLContainer(current)) {\r\n            // The host can be an LView if a component is injecting `ViewContainerRef`.\r\n            if (isLView(current[HOST])) {\r\n                recreateMatchingLViews(importMeta, id, newDef, oldDef, current[HOST]);\r\n            }\r\n            for (let j = CONTAINER_HEADER_OFFSET; j < current.length; j++) {\r\n                recreateMatchingLViews(importMeta, id, newDef, oldDef, current[j]);\r\n            }\r\n        }\r\n        else if (isLView(current)) {\r\n            recreateMatchingLViews(importMeta, id, newDef, oldDef, current);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Removes any cached renderers from the factory for the provided type.\r\n * This is currently used by the HMR logic to ensure Renderers are kept\r\n * synchronized with any definition metadata updates.\r\n * @param factory A RendererFactory2 instance.\r\n * @param def A ComponentDef instance.\r\n */\r\nfunction clearRendererCache(factory, def) {\r\n    // Cast to read a private field.\r\n    // NOTE: This must be kept synchronized with the renderer factory implementation in\r\n    // platform-browser and platform-browser/animations.\r\n    factory.componentReplaced?.(def.id);\r\n}\r\n/**\r\n * Recreates an LView in-place from a new component definition.\r\n * @param importMeta `import.meta` information.\r\n * @param id HMR ID for the component.\r\n * @param newDef Definition from which to recreate the view.\r\n * @param oldDef Previous component definition being swapped out.\r\n * @param lView View to be recreated.\r\n */\r\nfunction recreateLView(importMeta, id, newDef, oldDef, lView) {\r\n    const instance = lView[CONTEXT];\r\n    let host = lView[HOST];\r\n    // In theory the parent can also be an LContainer, but it appears like that's\r\n    // only the case for embedded views which we won't be replacing here.\r\n    const parentLView = lView[PARENT];\r\n    ngDevMode && assertLView(parentLView);\r\n    const tNode = lView[T_HOST];\r\n    ngDevMode && assertTNodeType(tNode, 2 /* TNodeType.Element */);\r\n    ngDevMode && assertNotEqual(newDef, oldDef, 'Expected different component definition');\r\n    const zone = lView[INJECTOR].get(NgZone, null);\r\n    const recreate = () => {\r\n        // If we're recreating a component with shadow DOM encapsulation, it will have attached a\r\n        // shadow root. The browser will throw if we attempt to attach another one and there's no way\r\n        // to detach it. Our only option is to make a clone only of the root node, replace the node\r\n        // with the clone and use it for the newly-created LView.\r\n        if (oldDef.encapsulation === ViewEncapsulation.ShadowDom) {\r\n            const newHost = host.cloneNode(false);\r\n            host.replaceWith(newHost);\r\n            host = newHost;\r\n        }\r\n        // Recreate the TView since the template might've changed.\r\n        const newTView = getOrCreateComponentTView(newDef);\r\n        // Create a new LView from the new TView, but reusing the existing TNode and DOM node.\r\n        const newLView = createLView(parentLView, newTView, instance, getInitialLViewFlagsFromDef(newDef), host, tNode, null, null, // The renderer will be created a bit further down once the old one is destroyed.\r\n        null, null, null);\r\n        // Detach the LView from its current place in the tree so we don't\r\n        // start traversing any siblings and modifying their structure.\r\n        replaceLViewInTree(parentLView, lView, newLView, tNode.index);\r\n        // Destroy the detached LView.\r\n        destroyLView(lView[TVIEW], lView);\r\n        // Always force the creation of a new renderer to ensure state captured during construction\r\n        // stays consistent with the new component definition by clearing any old ached factories.\r\n        const rendererFactory = lView[ENVIRONMENT].rendererFactory;\r\n        clearRendererCache(rendererFactory, oldDef);\r\n        // Patch a brand-new renderer onto the new view only after the old\r\n        // view is destroyed so that the runtime doesn't try to reuse it.\r\n        newLView[RENDERER] = rendererFactory.createRenderer(host, newDef);\r\n        // Remove the nodes associated with the destroyed LView. This removes the\r\n        // descendants, but not the host which we want to stay in place.\r\n        removeViewFromDOM(lView[TVIEW], lView);\r\n        // Reset the content projection state of the TNode before the first render.\r\n        // Note that this has to happen after the LView has been destroyed or we\r\n        // risk some projected nodes not being removed correctly.\r\n        resetProjectionState(tNode);\r\n        // Creation pass for the new view.\r\n        renderView(newTView, newLView, instance);\r\n        // Update pass for the new view.\r\n        refreshView(newTView, newLView, newTView.template, instance);\r\n    };\r\n    // The callback isn't guaranteed to be inside the Zone so we need to bring it in ourselves.\r\n    if (zone === null) {\r\n        executeWithInvalidateFallback(importMeta, id, recreate);\r\n    }\r\n    else {\r\n        zone.run(() => executeWithInvalidateFallback(importMeta, id, recreate));\r\n    }\r\n}\r\n/**\r\n * Runs an HMR-related function and falls back to\r\n * invalidating the HMR data if it throws an error.\r\n */\r\nfunction executeWithInvalidateFallback(importMeta, id, callback) {\r\n    try {\r\n        callback();\r\n    }\r\n    catch (e) {\r\n        const error = e;\r\n        // If we have all the necessary information and APIs to send off the invalidation\r\n        // request, send it before rethrowing so the dev server can decide what to do.\r\n        if (id !== null && error.message) {\r\n            const toLog = error.message + (error.stack ? '\\n' + error.stack : '');\r\n            importMeta?.hot?.send?.('angular:invalidate', { id, message: toLog, error: true });\r\n        }\r\n        // Throw the error in case the page doesn't get refreshed.\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * Replaces one LView in the tree with another one.\r\n * @param parentLView Parent of the LView being replaced.\r\n * @param oldLView LView being replaced.\r\n * @param newLView Replacement LView to be inserted.\r\n * @param index Index at which the LView should be inserted.\r\n */\r\nfunction replaceLViewInTree(parentLView, oldLView, newLView, index) {\r\n    // Update the sibling whose `NEXT` pointer refers to the old view.\r\n    for (let i = HEADER_OFFSET; i < parentLView[TVIEW].bindingStartIndex; i++) {\r\n        const current = parentLView[i];\r\n        if ((isLView(current) || isLContainer(current)) && current[NEXT] === oldLView) {\r\n            current[NEXT] = newLView;\r\n            break;\r\n        }\r\n    }\r\n    // Set the new view as the head, if the old view was first.\r\n    if (parentLView[CHILD_HEAD] === oldLView) {\r\n        parentLView[CHILD_HEAD] = newLView;\r\n    }\r\n    // Set the new view as the tail, if the old view was last.\r\n    if (parentLView[CHILD_TAIL] === oldLView) {\r\n        parentLView[CHILD_TAIL] = newLView;\r\n    }\r\n    // Update the `NEXT` pointer to the same as the old view.\r\n    newLView[NEXT] = oldLView[NEXT];\r\n    // Clear out the `NEXT` of the old view.\r\n    oldLView[NEXT] = null;\r\n    // Insert the new LView at the correct index.\r\n    parentLView[index] = newLView;\r\n}\r\n/**\r\n * Child nodes mutate the `projection` state of their parent node as they're being projected.\r\n * This function resets the `project` back to its initial state.\r\n * @param tNode\r\n */\r\nfunction resetProjectionState(tNode) {\r\n    // The `projection` is mutated by child nodes as they're being projected. We need to\r\n    // reset it to the initial state so projection works after the template is swapped out.\r\n    if (tNode.projection !== null) {\r\n        for (const current of tNode.projection) {\r\n            if (isTNodeShape(current)) {\r\n                // Reset `projectionNext` since it can affect the traversal order during projection.\r\n                current.projectionNext = null;\r\n                current.flags &= ~2 /* TNodeFlags.isProjected */;\r\n            }\r\n        }\r\n        tNode.projection = null;\r\n    }\r\n}\r\n\r\n/**\r\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\r\n *\r\n * This should be kept up to date with the public exports of @angular/core.\r\n */\r\nconst angularCoreEnv = (() => ({\r\n    'ɵɵattribute': ɵɵattribute,\r\n    'ɵɵdefineComponent': ɵɵdefineComponent,\r\n    'ɵɵdefineDirective': ɵɵdefineDirective,\r\n    'ɵɵdefineInjectable': __defineInjectable,\r\n    'ɵɵdefineInjector': __defineInjector,\r\n    'ɵɵdefineNgModule': ɵɵdefineNgModule,\r\n    'ɵɵdefinePipe': ɵɵdefinePipe,\r\n    'ɵɵdirectiveInject': ɵɵdirectiveInject,\r\n    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\r\n    'ɵɵinject': __inject,\r\n    'ɵɵinjectAttribute': ɵɵinjectAttribute,\r\n    'ɵɵinvalidFactory': ɵɵinvalidFactory,\r\n    'ɵɵinvalidFactoryDep': __invalidFactoryDep,\r\n    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\r\n    'ɵɵresetView': __resetView,\r\n    'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\r\n    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\r\n    'ɵɵProvidersFeature': ɵɵProvidersFeature,\r\n    'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\r\n    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\r\n    'ɵɵExternalStylesFeature': ɵɵExternalStylesFeature,\r\n    'ɵɵnextContext': ɵɵnextContext,\r\n    'ɵɵnamespaceHTML': __namespaceHTML,\r\n    'ɵɵnamespaceMathML': __namespaceMathML,\r\n    'ɵɵnamespaceSVG': __namespaceSVG,\r\n    'ɵɵenableBindings': __enableBindings,\r\n    'ɵɵdisableBindings': __disableBindings,\r\n    'ɵɵelementStart': ɵɵelementStart,\r\n    'ɵɵelementEnd': ɵɵelementEnd,\r\n    'ɵɵelement': ɵɵelement,\r\n    'ɵɵelementContainerStart': ɵɵelementContainerStart,\r\n    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\r\n    'ɵɵelementContainer': ɵɵelementContainer,\r\n    'ɵɵpureFunction0': ɵɵpureFunction0,\r\n    'ɵɵpureFunction1': ɵɵpureFunction1,\r\n    'ɵɵpureFunction2': ɵɵpureFunction2,\r\n    'ɵɵpureFunction3': ɵɵpureFunction3,\r\n    'ɵɵpureFunction4': ɵɵpureFunction4,\r\n    'ɵɵpureFunction5': ɵɵpureFunction5,\r\n    'ɵɵpureFunction6': ɵɵpureFunction6,\r\n    'ɵɵpureFunction7': ɵɵpureFunction7,\r\n    'ɵɵpureFunction8': ɵɵpureFunction8,\r\n    'ɵɵpureFunctionV': ɵɵpureFunctionV,\r\n    'ɵɵgetCurrentView': ɵɵgetCurrentView,\r\n    'ɵɵrestoreView': __restoreView,\r\n    'ɵɵlistener': ɵɵlistener,\r\n    'ɵɵprojection': ɵɵprojection,\r\n    'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\r\n    'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\r\n    'ɵɵpipeBind1': ɵɵpipeBind1,\r\n    'ɵɵpipeBind2': ɵɵpipeBind2,\r\n    'ɵɵpipeBind3': ɵɵpipeBind3,\r\n    'ɵɵpipeBind4': ɵɵpipeBind4,\r\n    'ɵɵpipeBindV': ɵɵpipeBindV,\r\n    'ɵɵprojectionDef': ɵɵprojectionDef,\r\n    'ɵɵdomProperty': ɵɵdomProperty,\r\n    'ɵɵproperty': ɵɵproperty,\r\n    'ɵɵpipe': ɵɵpipe,\r\n    'ɵɵqueryRefresh': ɵɵqueryRefresh,\r\n    'ɵɵqueryAdvance': ɵɵqueryAdvance,\r\n    'ɵɵviewQuery': ɵɵviewQuery,\r\n    'ɵɵviewQuerySignal': ɵɵviewQuerySignal,\r\n    'ɵɵloadQuery': ɵɵloadQuery,\r\n    'ɵɵcontentQuery': ɵɵcontentQuery,\r\n    'ɵɵcontentQuerySignal': ɵɵcontentQuerySignal,\r\n    'ɵɵreference': ɵɵreference,\r\n    'ɵɵclassMap': ɵɵclassMap,\r\n    'ɵɵstyleMap': ɵɵstyleMap,\r\n    'ɵɵstyleProp': ɵɵstyleProp,\r\n    'ɵɵclassProp': ɵɵclassProp,\r\n    'ɵɵadvance': ɵɵadvance,\r\n    'ɵɵtemplate': ɵɵtemplate,\r\n    'ɵɵconditional': ɵɵconditional,\r\n    'ɵɵconditionalCreate': ɵɵconditionalCreate,\r\n    'ɵɵconditionalBranchCreate': ɵɵconditionalBranchCreate,\r\n    'ɵɵdefer': ɵɵdefer,\r\n    'ɵɵdeferWhen': ɵɵdeferWhen,\r\n    'ɵɵdeferOnIdle': ɵɵdeferOnIdle,\r\n    'ɵɵdeferOnImmediate': ɵɵdeferOnImmediate,\r\n    'ɵɵdeferOnTimer': ɵɵdeferOnTimer,\r\n    'ɵɵdeferOnHover': ɵɵdeferOnHover,\r\n    'ɵɵdeferOnInteraction': ɵɵdeferOnInteraction,\r\n    'ɵɵdeferOnViewport': ɵɵdeferOnViewport,\r\n    'ɵɵdeferPrefetchWhen': ɵɵdeferPrefetchWhen,\r\n    'ɵɵdeferPrefetchOnIdle': ɵɵdeferPrefetchOnIdle,\r\n    'ɵɵdeferPrefetchOnImmediate': ɵɵdeferPrefetchOnImmediate,\r\n    'ɵɵdeferPrefetchOnTimer': ɵɵdeferPrefetchOnTimer,\r\n    'ɵɵdeferPrefetchOnHover': ɵɵdeferPrefetchOnHover,\r\n    'ɵɵdeferPrefetchOnInteraction': ɵɵdeferPrefetchOnInteraction,\r\n    'ɵɵdeferPrefetchOnViewport': ɵɵdeferPrefetchOnViewport,\r\n    'ɵɵdeferHydrateWhen': ɵɵdeferHydrateWhen,\r\n    'ɵɵdeferHydrateNever': ɵɵdeferHydrateNever,\r\n    'ɵɵdeferHydrateOnIdle': ɵɵdeferHydrateOnIdle,\r\n    'ɵɵdeferHydrateOnImmediate': ɵɵdeferHydrateOnImmediate,\r\n    'ɵɵdeferHydrateOnTimer': ɵɵdeferHydrateOnTimer,\r\n    'ɵɵdeferHydrateOnHover': ɵɵdeferHydrateOnHover,\r\n    'ɵɵdeferHydrateOnInteraction': ɵɵdeferHydrateOnInteraction,\r\n    'ɵɵdeferHydrateOnViewport': ɵɵdeferHydrateOnViewport,\r\n    'ɵɵdeferEnableTimerScheduling': ɵɵdeferEnableTimerScheduling,\r\n    'ɵɵrepeater': ɵɵrepeater,\r\n    'ɵɵrepeaterCreate': ɵɵrepeaterCreate,\r\n    'ɵɵrepeaterTrackByIndex': ɵɵrepeaterTrackByIndex,\r\n    'ɵɵrepeaterTrackByIdentity': ɵɵrepeaterTrackByIdentity,\r\n    'ɵɵcomponentInstance': ɵɵcomponentInstance,\r\n    'ɵɵtext': ɵɵtext,\r\n    'ɵɵtextInterpolate': ɵɵtextInterpolate,\r\n    'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\r\n    'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\r\n    'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\r\n    'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\r\n    'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\r\n    'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\r\n    'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\r\n    'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\r\n    'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\r\n    'ɵɵi18n': ɵɵi18n,\r\n    'ɵɵi18nAttributes': ɵɵi18nAttributes,\r\n    'ɵɵi18nExp': ɵɵi18nExp,\r\n    'ɵɵi18nStart': ɵɵi18nStart,\r\n    'ɵɵi18nEnd': ɵɵi18nEnd,\r\n    'ɵɵi18nApply': ɵɵi18nApply,\r\n    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\r\n    'ɵɵresolveWindow': ɵɵresolveWindow,\r\n    'ɵɵresolveDocument': ɵɵresolveDocument,\r\n    'ɵɵresolveBody': ɵɵresolveBody,\r\n    'ɵɵsetComponentScope': ɵɵsetComponentScope,\r\n    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\r\n    'ɵɵregisterNgModuleType': registerNgModuleType,\r\n    'ɵɵgetComponentDepsFactory': ɵɵgetComponentDepsFactory,\r\n    'ɵsetClassDebugInfo': ɵsetClassDebugInfo,\r\n    'ɵɵdeclareLet': ɵɵdeclareLet,\r\n    'ɵɵstoreLet': ɵɵstoreLet,\r\n    'ɵɵreadContextLet': ɵɵreadContextLet,\r\n    'ɵɵattachSourceLocations': ɵɵattachSourceLocations,\r\n    'ɵɵinterpolate': ɵɵinterpolate,\r\n    'ɵɵinterpolate1': ɵɵinterpolate1,\r\n    'ɵɵinterpolate2': ɵɵinterpolate2,\r\n    'ɵɵinterpolate3': ɵɵinterpolate3,\r\n    'ɵɵinterpolate4': ɵɵinterpolate4,\r\n    'ɵɵinterpolate5': ɵɵinterpolate5,\r\n    'ɵɵinterpolate6': ɵɵinterpolate6,\r\n    'ɵɵinterpolate7': ɵɵinterpolate7,\r\n    'ɵɵinterpolate8': ɵɵinterpolate8,\r\n    'ɵɵinterpolateV': ɵɵinterpolateV,\r\n    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\r\n    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\r\n    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\r\n    'ɵɵsanitizeScript': ɵɵsanitizeScript,\r\n    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\r\n    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\r\n    'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\r\n    'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\r\n    'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\r\n    'forwardRef': forwardRef,\r\n    'resolveForwardRef': resolveForwardRef,\r\n    'ɵɵtwoWayProperty': ɵɵtwoWayProperty,\r\n    'ɵɵtwoWayBindingSet': ɵɵtwoWayBindingSet,\r\n    'ɵɵtwoWayListener': ɵɵtwoWayListener,\r\n    'ɵɵreplaceMetadata': ɵɵreplaceMetadata,\r\n    'ɵɵgetReplaceMetadataURL': ɵɵgetReplaceMetadataURL,\r\n}))();\r\n\r\nlet jitOptions = null;\r\nfunction setJitOptions(options) {\r\n    if (jitOptions !== null) {\r\n        if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\r\n            ngDevMode &&\r\n                console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');\r\n            return;\r\n        }\r\n        if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\r\n            ngDevMode &&\r\n                console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');\r\n            return;\r\n        }\r\n    }\r\n    jitOptions = options;\r\n}\r\nfunction getJitOptions() {\r\n    return jitOptions;\r\n}\r\nfunction resetJitOptions() {\r\n    jitOptions = null;\r\n}\r\n\r\nconst moduleQueue = [];\r\n/**\r\n * Enqueues moduleDef to be checked later to see if scope can be set on its\r\n * component declarations.\r\n */\r\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\r\n    moduleQueue.push({ moduleType, ngModule });\r\n}\r\nlet flushingModuleQueue = false;\r\n/**\r\n * Loops over queued module definitions, if a given module definition has all of its\r\n * declarations resolved, it dequeues that module definition and sets the scope on\r\n * its declarations.\r\n */\r\nfunction flushModuleScopingQueueAsMuchAsPossible() {\r\n    if (!flushingModuleQueue) {\r\n        flushingModuleQueue = true;\r\n        try {\r\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\r\n                const { moduleType, ngModule } = moduleQueue[i];\r\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\r\n                    // dequeue\r\n                    moduleQueue.splice(i, 1);\r\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            flushingModuleQueue = false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns truthy if a declaration has resolved. If the declaration happens to be\r\n * an array of declarations, it will recurse to check each declaration in that array\r\n * (which may also be arrays).\r\n */\r\nfunction isResolvedDeclaration(declaration) {\r\n    if (Array.isArray(declaration)) {\r\n        return declaration.every(isResolvedDeclaration);\r\n    }\r\n    return !!resolveForwardRef(declaration);\r\n}\r\n/**\r\n * Compiles a module in JIT mode.\r\n *\r\n * This function automatically gets called when a class has a `@NgModule` decorator.\r\n */\r\nfunction compileNgModule(moduleType, ngModule = {}) {\r\n    compileNgModuleDefs(moduleType, ngModule);\r\n    if (ngModule.id !== undefined) {\r\n        registerNgModuleType(moduleType, ngModule.id);\r\n    }\r\n    // Because we don't know if all declarations have resolved yet at the moment the\r\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\r\n    // on its declarations to be run at a later time when all declarations for the module,\r\n    // including forward refs, have resolved.\r\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\r\n}\r\n/**\r\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\r\n *\r\n * It's possible to compile a module via this API which will allow duplicate declarations in its\r\n * root.\r\n */\r\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\r\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\r\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\r\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\r\n    let ngModuleDef = null;\r\n    Object.defineProperty(moduleType, NG_MOD_DEF, {\r\n        configurable: true,\r\n        get: () => {\r\n            if (ngModuleDef === null) {\r\n                if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\r\n                    // We need to assert this immediately, because allowing it to continue will cause it to\r\n                    // go into an infinite loop before we've reached the point where we throw all the errors.\r\n                    throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\r\n                }\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'NgModule',\r\n                    type: moduleType,\r\n                });\r\n                ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\r\n                    type: moduleType,\r\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\r\n                    declarations: declarations.map(resolveForwardRef),\r\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY)\r\n                        .map(resolveForwardRef)\r\n                        .map(expandModuleWithProviders),\r\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY)\r\n                        .map(resolveForwardRef)\r\n                        .map(expandModuleWithProviders),\r\n                    schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\r\n                    id: ngModule.id || null,\r\n                });\r\n                // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\r\n                // should verify that there are no unknown elements in a template. In AOT mode, that check\r\n                // happens at compile time and `schemas` information is not present on Component and Module\r\n                // defs after compilation (so the check doesn't happen the second time at runtime).\r\n                if (!ngModuleDef.schemas) {\r\n                    ngModuleDef.schemas = [];\r\n                }\r\n            }\r\n            return ngModuleDef;\r\n        },\r\n    });\r\n    let ngFactoryDef = null;\r\n    Object.defineProperty(moduleType, NG_FACTORY_DEF, {\r\n        get: () => {\r\n            if (ngFactoryDef === null) {\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'NgModule',\r\n                    type: moduleType,\r\n                });\r\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\r\n                    name: moduleType.name,\r\n                    type: moduleType,\r\n                    deps: reflectDependencies(moduleType),\r\n                    target: compiler.FactoryTarget.NgModule,\r\n                    typeArgumentCount: 0,\r\n                });\r\n            }\r\n            return ngFactoryDef;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n    let ngInjectorDef = null;\r\n    Object.defineProperty(moduleType, NG_INJ_DEF, {\r\n        get: () => {\r\n            if (ngInjectorDef === null) {\r\n                ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\r\n                const meta = {\r\n                    name: moduleType.name,\r\n                    type: moduleType,\r\n                    providers: ngModule.providers || EMPTY_ARRAY,\r\n                    imports: [\r\n                        (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\r\n                        (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\r\n                    ],\r\n                };\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'NgModule',\r\n                    type: moduleType,\r\n                });\r\n                ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\r\n            }\r\n            return ngInjectorDef;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n}\r\nfunction generateStandaloneInDeclarationsError(type, location) {\r\n    const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\r\n    const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` +\r\n        'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\r\n    return `${prefix} ${location}, ${suffix}`;\r\n}\r\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\r\n    if (verifiedNgModule.get(moduleType))\r\n        return;\r\n    // skip verifications of standalone components, directives, and pipes\r\n    if (isStandalone(moduleType))\r\n        return;\r\n    verifiedNgModule.set(moduleType, true);\r\n    moduleType = resolveForwardRef(moduleType);\r\n    let ngModuleDef;\r\n    if (importingModule) {\r\n        ngModuleDef = getNgModuleDef(moduleType);\r\n        if (!ngModuleDef) {\r\n            throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\r\n        }\r\n    }\r\n    else {\r\n        ngModuleDef = getNgModuleDefOrThrow(moduleType);\r\n    }\r\n    const errors = [];\r\n    const declarations = maybeUnwrapFn(ngModuleDef.declarations);\r\n    const imports = maybeUnwrapFn(ngModuleDef.imports);\r\n    flatten(imports)\r\n        .map(unwrapModuleWithProvidersImports)\r\n        .forEach((modOrStandaloneCmpt) => {\r\n        verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\r\n        verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\r\n    });\r\n    const exports = maybeUnwrapFn(ngModuleDef.exports);\r\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\r\n    declarations.forEach(verifyDirectivesHaveSelector);\r\n    declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));\r\n    const combinedDeclarations = [\r\n        ...declarations.map(resolveForwardRef),\r\n        ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),\r\n    ];\r\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\r\n    declarations.forEach((decl) => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\r\n    const ngModule = getAnnotation(moduleType, 'NgModule');\r\n    if (ngModule) {\r\n        ngModule.imports &&\r\n            flatten(ngModule.imports)\r\n                .map(unwrapModuleWithProvidersImports)\r\n                .forEach((mod) => {\r\n                verifySemanticsOfNgModuleImport(mod, moduleType);\r\n                verifySemanticsOfNgModuleDef(mod, false, moduleType);\r\n            });\r\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\r\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\r\n    }\r\n    // Throw Error if any errors were detected.\r\n    if (errors.length) {\r\n        throw new Error(errors.join('\\n'));\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    function verifyDeclarationsHaveDefinitions(type) {\r\n        type = resolveForwardRef(type);\r\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\r\n        if (!def) {\r\n            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\r\n        }\r\n    }\r\n    function verifyDirectivesHaveSelector(type) {\r\n        type = resolveForwardRef(type);\r\n        const def = getDirectiveDef(type);\r\n        if (!getComponentDef(type) && def && def.selectors.length == 0) {\r\n            errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\r\n        }\r\n    }\r\n    function verifyNotStandalone(type, moduleType) {\r\n        type = resolveForwardRef(type);\r\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\r\n        if (def?.standalone) {\r\n            const location = `\"${stringifyForError(moduleType)}\" NgModule`;\r\n            errors.push(generateStandaloneInDeclarationsError(type, location));\r\n        }\r\n    }\r\n    function verifyExportsAreDeclaredOrReExported(type) {\r\n        type = resolveForwardRef(type);\r\n        const kind = (getComponentDef(type) && 'component') ||\r\n            (getDirectiveDef(type) && 'directive') ||\r\n            (getPipeDef$1(type) && 'pipe');\r\n        if (kind) {\r\n            // only checked if we are declared as Component, Directive, or Pipe\r\n            // Modules don't need to be declared or imported.\r\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\r\n                // We are exporting something which we don't explicitly declare or import.\r\n                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\r\n            }\r\n        }\r\n    }\r\n    function verifyDeclarationIsUnique(type, suppressErrors) {\r\n        type = resolveForwardRef(type);\r\n        const existingModule = ownerNgModule.get(type);\r\n        if (existingModule && existingModule !== moduleType) {\r\n            if (!suppressErrors) {\r\n                const modules = [existingModule, moduleType].map(stringifyForError).sort();\r\n                errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\r\n                    `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\r\n                    `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\r\n            }\r\n        }\r\n        else {\r\n            // Mark type as having owner.\r\n            ownerNgModule.set(type, moduleType);\r\n        }\r\n    }\r\n    function verifyComponentIsPartOfNgModule(type) {\r\n        type = resolveForwardRef(type);\r\n        const existingModule = ownerNgModule.get(type);\r\n        if (!existingModule && !isStandalone(type)) {\r\n            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\r\n        }\r\n    }\r\n    function verifyCorrectBootstrapType(type) {\r\n        type = resolveForwardRef(type);\r\n        if (!getComponentDef(type)) {\r\n            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\r\n        }\r\n        if (isStandalone(type)) {\r\n            // Note: this error should be the same as the\r\n            // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\r\n            errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` +\r\n                `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` +\r\n                `function for bootstrap instead.`);\r\n        }\r\n    }\r\n    function verifySemanticsOfNgModuleImport(type, importingModule) {\r\n        type = resolveForwardRef(type);\r\n        const directiveDef = getComponentDef(type) || getDirectiveDef(type);\r\n        if (directiveDef !== null && !directiveDef.standalone) {\r\n            throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\r\n        }\r\n        const pipeDef = getPipeDef$1(type);\r\n        if (pipeDef !== null && !pipeDef.standalone) {\r\n            throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\r\n        }\r\n    }\r\n}\r\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\r\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\r\n    return typeOrWithProviders.ngModule || typeOrWithProviders;\r\n}\r\nfunction getAnnotation(type, name) {\r\n    let annotation = null;\r\n    collect(type.__annotations__);\r\n    collect(type.decorators);\r\n    return annotation;\r\n    function collect(annotations) {\r\n        if (annotations) {\r\n            annotations.forEach(readAnnotation);\r\n        }\r\n    }\r\n    function readAnnotation(decorator) {\r\n        if (!annotation) {\r\n            const proto = Object.getPrototypeOf(decorator);\r\n            if (proto.ngMetadataName == name) {\r\n                annotation = decorator;\r\n            }\r\n            else if (decorator.type) {\r\n                const proto = Object.getPrototypeOf(decorator.type);\r\n                if (proto.ngMetadataName == name) {\r\n                    annotation = decorator.args[0];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Keep track of compiled components. This is needed because in tests we often want to compile the\r\n * same component with more than one NgModule. This would cause an error unless we reset which\r\n * NgModule the component belongs to. We keep the list of compiled components here so that the\r\n * TestBed can reset it later.\r\n */\r\nlet ownerNgModule = new WeakMap();\r\nlet verifiedNgModule = new WeakMap();\r\nfunction resetCompiledComponents() {\r\n    ownerNgModule = new WeakMap();\r\n    verifiedNgModule = new WeakMap();\r\n    moduleQueue.length = 0;\r\n    GENERATED_COMP_IDS.clear();\r\n}\r\n/**\r\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\r\n * traversing the exports of imported modules.\r\n * @param type\r\n */\r\nfunction computeCombinedExports(type) {\r\n    type = resolveForwardRef(type);\r\n    const ngModuleDef = getNgModuleDef(type);\r\n    // a standalone component, directive or pipe\r\n    if (ngModuleDef === null) {\r\n        return [type];\r\n    }\r\n    return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type) => {\r\n        const ngModuleDef = getNgModuleDef(type);\r\n        if (ngModuleDef) {\r\n            verifySemanticsOfNgModuleDef(type, false);\r\n            return computeCombinedExports(type);\r\n        }\r\n        else {\r\n            return type;\r\n        }\r\n    }));\r\n}\r\n/**\r\n * Some declared components may be compiled asynchronously, and thus may not have their\r\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\r\n * the `ngSelectorScope` property of the declared type.\r\n */\r\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\r\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\r\n    const transitiveScopes = transitiveScopesFor(moduleType);\r\n    declarations.forEach((declaration) => {\r\n        declaration = resolveForwardRef(declaration);\r\n        if (declaration.hasOwnProperty(NG_COMP_DEF)) {\r\n            // A `ɵcmp` field exists - go ahead and patch the component directly.\r\n            const component = declaration;\r\n            const componentDef = getComponentDef(component);\r\n            patchComponentDefWithScope(componentDef, transitiveScopes);\r\n        }\r\n        else if (!declaration.hasOwnProperty(NG_DIR_DEF) &&\r\n            !declaration.hasOwnProperty(NG_PIPE_DEF)) {\r\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\r\n            declaration.ngSelectorScope = moduleType;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Patch the definition of a component with directives and pipes from the compilation scope of\r\n * a given module.\r\n */\r\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\r\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\r\n        .map((dir) => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir))\r\n        .filter((def) => !!def);\r\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map((pipe) => getPipeDef$1(pipe));\r\n    componentDef.schemas = transitiveScopes.schemas;\r\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\r\n    // may face a problem where previously compiled defs available to a given Component/Directive\r\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\r\n    // order to avoid this problem, we force fresh TView to be created.\r\n    componentDef.tView = null;\r\n}\r\n/**\r\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\r\n * (either a NgModule or a standalone component / directive / pipe).\r\n */\r\nfunction transitiveScopesFor(type) {\r\n    if (isNgModule(type)) {\r\n        const scope = depsTracker.getNgModuleScope(type);\r\n        const def = getNgModuleDefOrThrow(type);\r\n        return {\r\n            schemas: def.schemas || null,\r\n            ...scope,\r\n        };\r\n    }\r\n    else if (isStandalone(type)) {\r\n        const directiveDef = getComponentDef(type) || getDirectiveDef(type);\r\n        if (directiveDef !== null) {\r\n            return {\r\n                schemas: null,\r\n                compilation: {\r\n                    directives: new Set(),\r\n                    pipes: new Set(),\r\n                },\r\n                exported: {\r\n                    directives: new Set([type]),\r\n                    pipes: new Set(),\r\n                },\r\n            };\r\n        }\r\n        const pipeDef = getPipeDef$1(type);\r\n        if (pipeDef !== null) {\r\n            return {\r\n                schemas: null,\r\n                compilation: {\r\n                    directives: new Set(),\r\n                    pipes: new Set(),\r\n                },\r\n                exported: {\r\n                    directives: new Set(),\r\n                    pipes: new Set([type]),\r\n                },\r\n            };\r\n        }\r\n    }\r\n    // TODO: change the error message to be more user-facing and take standalone into account\r\n    throw new Error(`${type.name} does not have a module def (ɵmod property)`);\r\n}\r\nfunction expandModuleWithProviders(value) {\r\n    if (isModuleWithProviders(value)) {\r\n        return value.ngModule;\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\r\n * matters in the following scenario:\r\n *\r\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\r\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\r\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\r\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\r\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\r\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\r\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\r\n * all compilations have finished.\r\n */\r\nlet compilationDepth = 0;\r\n/**\r\n * Compile an Angular component according to its decorator metadata, and patch the resulting\r\n * component def (ɵcmp) onto the component type.\r\n *\r\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\r\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\r\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\r\n * until the global queue has been resolved with a call to `resolveComponentResources`.\r\n */\r\nfunction compileComponent(type, metadata) {\r\n    // Initialize ngDevMode. This must be the first statement in compileComponent.\r\n    // See the `initNgDevMode` docstring for more information.\r\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\r\n    let ngComponentDef = null;\r\n    // Metadata may have resources which need to be resolved.\r\n    maybeQueueResolutionOfComponentResources(type, metadata);\r\n    // Note that we're using the same function as `Directive`, because that's only subset of metadata\r\n    // that we need to create the ngFactoryDef. We're avoiding using the component metadata\r\n    // because we'd have to resolve the asynchronous templates.\r\n    addDirectiveFactoryDef(type, metadata);\r\n    Object.defineProperty(type, NG_COMP_DEF, {\r\n        get: () => {\r\n            if (ngComponentDef === null) {\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'component',\r\n                    type: type,\r\n                });\r\n                if (componentNeedsResolution(metadata)) {\r\n                    const error = [`Component '${type.name}' is not resolved:`];\r\n                    if (metadata.templateUrl) {\r\n                        error.push(` - templateUrl: ${metadata.templateUrl}`);\r\n                    }\r\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\r\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\r\n                    }\r\n                    if (metadata.styleUrl) {\r\n                        error.push(` - styleUrl: ${metadata.styleUrl}`);\r\n                    }\r\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\r\n                    throw new Error(error.join('\\n'));\r\n                }\r\n                // This const was called `jitOptions` previously but had to be renamed to `options` because\r\n                // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\r\n                // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\r\n                // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\r\n                const options = getJitOptions();\r\n                let preserveWhitespaces = metadata.preserveWhitespaces;\r\n                if (preserveWhitespaces === undefined) {\r\n                    if (options !== null && options.preserveWhitespaces !== undefined) {\r\n                        preserveWhitespaces = options.preserveWhitespaces;\r\n                    }\r\n                    else {\r\n                        preserveWhitespaces = false;\r\n                    }\r\n                }\r\n                let encapsulation = metadata.encapsulation;\r\n                if (encapsulation === undefined) {\r\n                    if (options !== null && options.defaultEncapsulation !== undefined) {\r\n                        encapsulation = options.defaultEncapsulation;\r\n                    }\r\n                    else {\r\n                        encapsulation = ViewEncapsulation.Emulated;\r\n                    }\r\n                }\r\n                const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\r\n                const meta = {\r\n                    ...directiveMetadata(type, metadata),\r\n                    typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\r\n                    template: metadata.template || '',\r\n                    preserveWhitespaces,\r\n                    styles: typeof metadata.styles === 'string'\r\n                        ? [metadata.styles]\r\n                        : metadata.styles || EMPTY_ARRAY,\r\n                    animations: metadata.animations,\r\n                    // JIT components are always compiled against an empty set of `declarations`. Instead, the\r\n                    // `directiveDefs` and `pipeDefs` are updated at a later point:\r\n                    //  * for NgModule-based components, they're set when the NgModule which declares the\r\n                    //    component resolves in the module scoping queue\r\n                    //  * for standalone components, they're set just below, after `compileComponent`.\r\n                    declarations: [],\r\n                    changeDetection: metadata.changeDetection,\r\n                    encapsulation,\r\n                    interpolation: metadata.interpolation,\r\n                    viewProviders: metadata.viewProviders || null,\r\n                };\r\n                compilationDepth++;\r\n                try {\r\n                    if (meta.usesInheritance) {\r\n                        addDirectiveDefToUndecoratedParents(type);\r\n                    }\r\n                    ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\r\n                    if (meta.isStandalone) {\r\n                        // Patch the component definition for standalone components with `directiveDefs` and\r\n                        // `pipeDefs` functions which lazily compute the directives/pipes available in the\r\n                        // standalone component. Also set `dependencies` to the lazily resolved list of imports.\r\n                        const imports = flatten(metadata.imports || EMPTY_ARRAY);\r\n                        const { directiveDefs, pipeDefs } = getStandaloneDefFunctions(type, imports);\r\n                        ngComponentDef.directiveDefs = directiveDefs;\r\n                        ngComponentDef.pipeDefs = pipeDefs;\r\n                        ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\r\n                    }\r\n                }\r\n                finally {\r\n                    // Ensure that the compilation depth is decremented even when the compilation failed.\r\n                    compilationDepth--;\r\n                }\r\n                if (compilationDepth === 0) {\r\n                    // When NgModule decorator executed, we enqueued the module definition such that\r\n                    // it would only dequeue and add itself as module scope to all of its declarations,\r\n                    // but only if  if all of its declarations had resolved. This call runs the check\r\n                    // to see if any modules that are in the queue can be dequeued and add scope to\r\n                    // their declarations.\r\n                    flushModuleScopingQueueAsMuchAsPossible();\r\n                }\r\n                // If component compilation is async, then the @NgModule annotation which declares the\r\n                // component may execute and set an ngSelectorScope property on the component type. This\r\n                // allows the component to patch itself with directiveDefs from the module after it\r\n                // finishes compiling.\r\n                if (hasSelectorScope(type)) {\r\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\r\n                    patchComponentDefWithScope(ngComponentDef, scopes);\r\n                }\r\n                if (metadata.schemas) {\r\n                    if (meta.isStandalone) {\r\n                        ngComponentDef.schemas = metadata.schemas;\r\n                    }\r\n                    else {\r\n                        throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);\r\n                    }\r\n                }\r\n                else if (meta.isStandalone) {\r\n                    ngComponentDef.schemas = [];\r\n                }\r\n            }\r\n            return ngComponentDef;\r\n        },\r\n        set: (def) => {\r\n            ngComponentDef = def;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n}\r\n/**\r\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\r\n * standalone component, which process `imports` and filter out directives and pipes. The use of\r\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\r\n * component's `imports`.\r\n */\r\nfunction getStandaloneDefFunctions(type, imports) {\r\n    const directiveDefs = () => {\r\n        if (ngDevMode) {\r\n            for (const rawDep of imports) {\r\n                verifyStandaloneImport(rawDep, type);\r\n            }\r\n        }\r\n        if (!isComponent(type)) {\r\n            return [];\r\n        }\r\n        const scope = depsTracker.getStandaloneComponentScope(type, imports);\r\n        return [...scope.compilation.directives]\r\n            .map((p) => (getComponentDef(p) || getDirectiveDef(p)))\r\n            .filter((d) => d !== null);\r\n    };\r\n    const pipeDefs = () => {\r\n        if (ngDevMode) {\r\n            for (const rawDep of imports) {\r\n                verifyStandaloneImport(rawDep, type);\r\n            }\r\n        }\r\n        if (!isComponent(type)) {\r\n            return [];\r\n        }\r\n        const scope = depsTracker.getStandaloneComponentScope(type, imports);\r\n        return [...scope.compilation.pipes].map((p) => getPipeDef$1(p)).filter((d) => d !== null);\r\n    };\r\n    return {\r\n        directiveDefs,\r\n        pipeDefs,\r\n    };\r\n}\r\nfunction hasSelectorScope(component) {\r\n    return component.ngSelectorScope !== undefined;\r\n}\r\n/**\r\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\r\n * directive def onto the component type.\r\n *\r\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\r\n * will resolve when compilation completes and the directive becomes usable.\r\n */\r\nfunction compileDirective(type, directive) {\r\n    let ngDirectiveDef = null;\r\n    addDirectiveFactoryDef(type, directive || {});\r\n    Object.defineProperty(type, NG_DIR_DEF, {\r\n        get: () => {\r\n            if (ngDirectiveDef === null) {\r\n                // `directive` can be null in the case of abstract directives as a base class\r\n                // that use `@Directive()` with no selector. In that case, pass empty object to the\r\n                // `directiveMetadata` function instead of null.\r\n                const meta = getDirectiveMetadata(type, directive || {});\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'directive',\r\n                    type,\r\n                });\r\n                ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\r\n            }\r\n            return ngDirectiveDef;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n}\r\nfunction getDirectiveMetadata(type, metadata) {\r\n    const name = type && type.name;\r\n    const sourceMapUrl = `ng:///${name}/ɵdir.js`;\r\n    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'directive', type });\r\n    const facade = directiveMetadata(type, metadata);\r\n    facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\r\n    if (facade.usesInheritance) {\r\n        addDirectiveDefToUndecoratedParents(type);\r\n    }\r\n    return { metadata: facade, sourceMapUrl };\r\n}\r\nfunction addDirectiveFactoryDef(type, metadata) {\r\n    let ngFactoryDef = null;\r\n    Object.defineProperty(type, NG_FACTORY_DEF, {\r\n        get: () => {\r\n            if (ngFactoryDef === null) {\r\n                const meta = getDirectiveMetadata(type, metadata);\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'directive',\r\n                    type,\r\n                });\r\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\r\n                    name: meta.metadata.name,\r\n                    type: meta.metadata.type,\r\n                    typeArgumentCount: 0,\r\n                    deps: reflectDependencies(type),\r\n                    target: compiler.FactoryTarget.Directive,\r\n                });\r\n            }\r\n            return ngFactoryDef;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n}\r\nfunction extendsDirectlyFromObject(type) {\r\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\r\n}\r\n/**\r\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\r\n * `Component`).\r\n */\r\nfunction directiveMetadata(type, metadata) {\r\n    // Reflect inputs and outputs.\r\n    const reflect = getReflect();\r\n    const propMetadata = reflect.ownPropMetadata(type);\r\n    return {\r\n        name: type.name,\r\n        type: type,\r\n        selector: metadata.selector !== undefined ? metadata.selector : null,\r\n        host: metadata.host || EMPTY_OBJ,\r\n        propMetadata: propMetadata,\r\n        inputs: metadata.inputs || EMPTY_ARRAY,\r\n        outputs: metadata.outputs || EMPTY_ARRAY,\r\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\r\n        lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges') },\r\n        typeSourceSpan: null,\r\n        usesInheritance: !extendsDirectlyFromObject(type),\r\n        exportAs: extractExportAs(metadata.exportAs),\r\n        providers: metadata.providers || null,\r\n        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\r\n        isStandalone: metadata.standalone === undefined ? true : !!metadata.standalone,\r\n        isSignal: !!metadata.signals,\r\n        hostDirectives: metadata.hostDirectives?.map((directive) => typeof directive === 'function' ? { directive } : directive) || null,\r\n    };\r\n}\r\n/**\r\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\r\n */\r\nfunction addDirectiveDefToUndecoratedParents(type) {\r\n    const objPrototype = Object.prototype;\r\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\r\n    // Go up the prototype until we hit `Object`.\r\n    while (parent && parent !== objPrototype) {\r\n        // Since inheritance works if the class was annotated already, we only need to add\r\n        // the def if there are no annotations and the def hasn't been created already.\r\n        if (!getDirectiveDef(parent) &&\r\n            !getComponentDef(parent) &&\r\n            shouldAddAbstractDirective(parent)) {\r\n            compileDirective(parent, null);\r\n        }\r\n        parent = Object.getPrototypeOf(parent);\r\n    }\r\n}\r\nfunction convertToR3QueryPredicate(selector) {\r\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\r\n}\r\nfunction convertToR3QueryMetadata(propertyName, ann) {\r\n    return {\r\n        propertyName: propertyName,\r\n        predicate: convertToR3QueryPredicate(ann.selector),\r\n        descendants: ann.descendants,\r\n        first: ann.first,\r\n        read: ann.read ? ann.read : null,\r\n        static: !!ann.static,\r\n        emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,\r\n        isSignal: !!ann.isSignal,\r\n    };\r\n}\r\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\r\n    const queriesMeta = [];\r\n    for (const field in propMetadata) {\r\n        if (propMetadata.hasOwnProperty(field)) {\r\n            const annotations = propMetadata[field];\r\n            annotations.forEach((ann) => {\r\n                if (isQueryAnn(ann)) {\r\n                    if (!ann.selector) {\r\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\r\n                            `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\r\n                    }\r\n                    if (annotations.some(isInputAnnotation)) {\r\n                        throw new Error(`Cannot combine @Input decorators with query decorators`);\r\n                    }\r\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return queriesMeta;\r\n}\r\nfunction extractExportAs(exportAs) {\r\n    return exportAs === undefined ? null : splitByComma(exportAs);\r\n}\r\nfunction isContentQuery(value) {\r\n    const name = value.ngMetadataName;\r\n    return name === 'ContentChild' || name === 'ContentChildren';\r\n}\r\nfunction isViewQuery(value) {\r\n    const name = value.ngMetadataName;\r\n    return name === 'ViewChild' || name === 'ViewChildren';\r\n}\r\nfunction isInputAnnotation(value) {\r\n    return value.ngMetadataName === 'Input';\r\n}\r\nfunction splitByComma(value) {\r\n    return value.split(',').map((piece) => piece.trim());\r\n}\r\nconst LIFECYCLE_HOOKS = [\r\n    'ngOnChanges',\r\n    'ngOnInit',\r\n    'ngOnDestroy',\r\n    'ngDoCheck',\r\n    'ngAfterViewInit',\r\n    'ngAfterViewChecked',\r\n    'ngAfterContentInit',\r\n    'ngAfterContentChecked',\r\n];\r\nfunction shouldAddAbstractDirective(type) {\r\n    const reflect = getReflect();\r\n    if (LIFECYCLE_HOOKS.some((hookName) => reflect.hasLifecycleHook(type, hookName))) {\r\n        return true;\r\n    }\r\n    const propMetadata = reflect.propMetadata(type);\r\n    for (const field in propMetadata) {\r\n        const annotations = propMetadata[field];\r\n        for (let i = 0; i < annotations.length; i++) {\r\n            const current = annotations[i];\r\n            const metadataName = current.ngMetadataName;\r\n            if (isInputAnnotation(current) ||\r\n                isContentQuery(current) ||\r\n                isViewQuery(current) ||\r\n                metadataName === 'Output' ||\r\n                metadataName === 'HostBinding' ||\r\n                metadataName === 'HostListener') {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction compilePipe(type, meta) {\r\n    let ngPipeDef = null;\r\n    let ngFactoryDef = null;\r\n    Object.defineProperty(type, NG_FACTORY_DEF, {\r\n        get: () => {\r\n            if (ngFactoryDef === null) {\r\n                const metadata = getPipeMetadata(type, meta);\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'pipe',\r\n                    type: metadata.type,\r\n                });\r\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\r\n                    name: metadata.name,\r\n                    type: metadata.type,\r\n                    typeArgumentCount: 0,\r\n                    deps: reflectDependencies(type),\r\n                    target: compiler.FactoryTarget.Pipe,\r\n                });\r\n            }\r\n            return ngFactoryDef;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n    Object.defineProperty(type, NG_PIPE_DEF, {\r\n        get: () => {\r\n            if (ngPipeDef === null) {\r\n                const metadata = getPipeMetadata(type, meta);\r\n                const compiler = getCompilerFacade({\r\n                    usage: 0 /* JitCompilerUsage.Decorator */,\r\n                    kind: 'pipe',\r\n                    type: metadata.type,\r\n                });\r\n                ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\r\n            }\r\n            return ngPipeDef;\r\n        },\r\n        // Make the property configurable in dev mode to allow overriding in tests\r\n        configurable: !!ngDevMode,\r\n    });\r\n}\r\nfunction getPipeMetadata(type, meta) {\r\n    return {\r\n        type: type,\r\n        name: type.name,\r\n        pipeName: meta.name,\r\n        pure: meta.pure !== undefined ? meta.pure : true,\r\n        isStandalone: meta.standalone === undefined ? true : !!meta.standalone,\r\n    };\r\n}\r\n\r\n/**\r\n * Type of the Directive metadata.\r\n *\r\n * @publicApi\r\n */\r\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));\r\n/**\r\n * Component decorator and metadata.\r\n *\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Component = makeDecorator('Component', (c = {}) => ({ changeDetection: ChangeDetectionStrategy.Default, ...c }), Directive, undefined, (type, meta) => compileComponent(type, meta));\r\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Pipe = makeDecorator('Pipe', (p) => ({ pure: true, ...p }), undefined, undefined, (type, meta) => compilePipe(type, meta));\r\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Input = makePropDecorator('Input', (arg) => {\r\n    if (!arg) {\r\n        return {};\r\n    }\r\n    return typeof arg === 'string' ? { alias: arg } : arg;\r\n});\r\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst Output = makePropDecorator('Output', (alias) => ({ alias }));\r\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\r\n/**\r\n * @Annotation\r\n * @publicApi\r\n */\r\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));\r\n\r\n/**\r\n * @Annotation\r\n */\r\nconst NgModule = makeDecorator('NgModule', (ngModule) => ngModule, undefined, undefined, \r\n/**\r\n * Decorator that marks the following class as an NgModule, and supplies\r\n * configuration metadata for it.\r\n *\r\n * * The `declarations` option configures the compiler\r\n * with information about what belongs to the NgModule.\r\n * * The `providers` options configures the NgModule's injector to provide\r\n * dependencies the NgModule members.\r\n * * The `imports` and `exports` options bring in members from other modules, and make\r\n * this module's members available to others.\r\n */\r\n(type, meta) => compileNgModule(type, meta));\r\n\r\n/**\r\n * Combination of NgModuleFactory and ComponentFactories.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * Ivy JIT mode doesn't require accessing this symbol.\r\n */\r\nclass ModuleWithComponentFactories {\r\n    ngModuleFactory;\r\n    componentFactories;\r\n    constructor(ngModuleFactory, componentFactories) {\r\n        this.ngModuleFactory = ngModuleFactory;\r\n        this.componentFactories = componentFactories;\r\n    }\r\n}\r\n/**\r\n * Low-level service for running the angular compiler during runtime\r\n * to create {@link ComponentFactory}s, which\r\n * can later be used to create and render a Component instance.\r\n *\r\n * Each `@NgModule` provides an own `Compiler` to its injector,\r\n * that will use the directives/pipes of the ng module for compilation\r\n * of components.\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * Ivy JIT mode doesn't require accessing this symbol.\r\n */\r\nclass Compiler {\r\n    /**\r\n     * Compiles the given NgModule and all of its components. All templates of the components\r\n     * have to be inlined.\r\n     */\r\n    compileModuleSync(moduleType) {\r\n        return new NgModuleFactory(moduleType);\r\n    }\r\n    /**\r\n     * Compiles the given NgModule and all of its components\r\n     */\r\n    compileModuleAsync(moduleType) {\r\n        return Promise.resolve(this.compileModuleSync(moduleType));\r\n    }\r\n    /**\r\n     * Same as {@link Compiler#compileModuleSync compileModuleSync} but also creates ComponentFactories for all components.\r\n     */\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        const ngModuleFactory = this.compileModuleSync(moduleType);\r\n        const moduleDef = getNgModuleDef(moduleType);\r\n        const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {\r\n            const componentDef = getComponentDef(declaration);\r\n            componentDef && factories.push(new ComponentFactory(componentDef));\r\n            return factories;\r\n        }, []);\r\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\r\n    }\r\n    /**\r\n     * Same as {@link Compiler#compileModuleAsync compileModuleAsync} but also creates ComponentFactories for all components.\r\n     */\r\n    compileModuleAndAllComponentsAsync(moduleType) {\r\n        return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\r\n    }\r\n    /**\r\n     * Clears all caches.\r\n     */\r\n    clearCache() { }\r\n    /**\r\n     * Clears the cache for the given component/ngModule.\r\n     */\r\n    clearCacheFor(type) { }\r\n    /**\r\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\r\n     */\r\n    getModuleId(moduleType) {\r\n        return undefined;\r\n    }\r\n    static ɵfac = function Compiler_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || Compiler)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: Compiler, factory: Compiler.ɵfac, providedIn: 'root' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n/**\r\n * Token to provide CompilerOptions in the platform injector.\r\n *\r\n * @publicApi\r\n */\r\nconst COMPILER_OPTIONS = new InjectionToken(ngDevMode ? 'compilerOptions' : '');\r\n/**\r\n * A factory for creating a Compiler\r\n *\r\n * @publicApi\r\n *\r\n * @deprecated\r\n * Ivy JIT mode doesn't require accessing this symbol.\r\n */\r\nclass CompilerFactory {\r\n}\r\n\r\nclass NgZoneChangeDetectionScheduler {\r\n    zone = inject(NgZone);\r\n    changeDetectionScheduler = inject(ChangeDetectionScheduler);\r\n    applicationRef = inject(ApplicationRef);\r\n    applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\r\n    _onMicrotaskEmptySubscription;\r\n    initialize() {\r\n        if (this._onMicrotaskEmptySubscription) {\r\n            return;\r\n        }\r\n        this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\r\n            next: () => {\r\n                // `onMicroTaskEmpty` can happen _during_ the zoneless scheduler change detection because\r\n                // zone.run(() => {}) will result in `checkStable` at the end of the `zone.run` closure\r\n                // and emit `onMicrotaskEmpty` synchronously if run coalsecing is false.\r\n                if (this.changeDetectionScheduler.runningTick) {\r\n                    return;\r\n                }\r\n                this.zone.run(() => {\r\n                    try {\r\n                        this.applicationRef.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\r\n                        this.applicationRef._tick();\r\n                    }\r\n                    catch (e) {\r\n                        this.applicationErrorHandler(e);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._onMicrotaskEmptySubscription?.unsubscribe();\r\n    }\r\n    static ɵfac = function NgZoneChangeDetectionScheduler_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || NgZoneChangeDetectionScheduler)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: NgZoneChangeDetectionScheduler, factory: NgZoneChangeDetectionScheduler.ɵfac, providedIn: 'root' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n/**\r\n * Internal token used to verify that `provideZoneChangeDetection` is not used\r\n * with the bootstrapModule API.\r\n */\r\nconst PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'provideZoneChangeDetection token' : '', { factory: () => false });\r\nfunction internalProvideZoneChangeDetection({ ngZoneFactory, ignoreChangesOutsideZone, scheduleInRootZone, }) {\r\n    ngZoneFactory ??= () => new NgZone({ ...getNgZoneOptions(), scheduleInRootZone });\r\n    return [\r\n        { provide: NgZone, useFactory: ngZoneFactory },\r\n        {\r\n            provide: ENVIRONMENT_INITIALIZER,\r\n            multi: true,\r\n            useFactory: () => {\r\n                const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {\r\n                    optional: true,\r\n                });\r\n                if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                    ngZoneChangeDetectionScheduler === null) {\r\n                    throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, `A required Injectable was not found in the dependency injection tree. ` +\r\n                        'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.');\r\n                }\r\n                return () => ngZoneChangeDetectionScheduler.initialize();\r\n            },\r\n        },\r\n        {\r\n            provide: ENVIRONMENT_INITIALIZER,\r\n            multi: true,\r\n            useFactory: () => {\r\n                const service = inject(ZoneStablePendingTask);\r\n                return () => {\r\n                    service.initialize();\r\n                };\r\n            },\r\n        },\r\n        // Always disable scheduler whenever explicitly disabled, even if another place called\r\n        // `provideZoneChangeDetection` without the 'ignore' option.\r\n        ignoreChangesOutsideZone === true ? { provide: ZONELESS_SCHEDULER_DISABLED, useValue: true } : [],\r\n        {\r\n            provide: SCHEDULE_IN_ROOT_ZONE,\r\n            useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT,\r\n        },\r\n        {\r\n            provide: INTERNAL_APPLICATION_ERROR_HANDLER,\r\n            useFactory: () => {\r\n                const zone = inject(NgZone);\r\n                const injector = inject(EnvironmentInjector);\r\n                let userErrorHandler;\r\n                return (e) => {\r\n                    zone.runOutsideAngular(() => {\r\n                        if (injector.destroyed && !userErrorHandler) {\r\n                            setTimeout(() => {\r\n                                throw e;\r\n                            });\r\n                        }\r\n                        else {\r\n                            userErrorHandler ??= injector.get(ErrorHandler);\r\n                            userErrorHandler.handleError(e);\r\n                        }\r\n                    });\r\n                };\r\n            },\r\n        },\r\n    ];\r\n}\r\n/**\r\n * Provides `NgZone`-based change detection for the application bootstrapped using\r\n * `bootstrapApplication`.\r\n *\r\n * `NgZone` is already provided in applications by default. This provider allows you to configure\r\n * options like `eventCoalescing` in the `NgZone`.\r\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\r\n * `BootstrapOptions` instead.\r\n *\r\n * @usageNotes\r\n * ```ts\r\n * bootstrapApplication(MyApp, {providers: [\r\n *   provideZoneChangeDetection({eventCoalescing: true}),\r\n * ]});\r\n * ```\r\n *\r\n * @publicApi\r\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\r\n * @see {@link NgZoneOptions}\r\n */\r\nfunction provideZoneChangeDetection(options) {\r\n    const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;\r\n    const scheduleInRootZone = options?.scheduleInRootZone;\r\n    const zoneProviders = internalProvideZoneChangeDetection({\r\n        ngZoneFactory: () => {\r\n            const ngZoneOptions = getNgZoneOptions(options);\r\n            ngZoneOptions.scheduleInRootZone = scheduleInRootZone;\r\n            if (ngZoneOptions.shouldCoalesceEventChangeDetection) {\r\n                performanceMarkFeature('NgZone_CoalesceEvent');\r\n            }\r\n            return new NgZone(ngZoneOptions);\r\n        },\r\n        ignoreChangesOutsideZone,\r\n        scheduleInRootZone,\r\n    });\r\n    return makeEnvironmentProviders([\r\n        { provide: PROVIDED_NG_ZONE, useValue: true },\r\n        { provide: ZONELESS_ENABLED, useValue: false },\r\n        zoneProviders,\r\n    ]);\r\n}\r\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\r\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\r\n// a set of default options returned.\r\nfunction getNgZoneOptions(options) {\r\n    return {\r\n        enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\r\n        shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,\r\n        shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false,\r\n    };\r\n}\r\nclass ZoneStablePendingTask {\r\n    subscription = new Subscription();\r\n    initialized = false;\r\n    zone = inject(NgZone);\r\n    pendingTasks = inject(PendingTasksInternal);\r\n    initialize() {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        this.initialized = true;\r\n        let task = null;\r\n        if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\r\n            task = this.pendingTasks.add();\r\n        }\r\n        this.zone.runOutsideAngular(() => {\r\n            this.subscription.add(this.zone.onStable.subscribe(() => {\r\n                NgZone.assertNotInAngularZone();\r\n                // Check whether there are no pending macro/micro tasks in the next tick\r\n                // to allow for NgZone to update the state.\r\n                queueMicrotask(() => {\r\n                    if (task !== null &&\r\n                        !this.zone.hasPendingMacrotasks &&\r\n                        !this.zone.hasPendingMicrotasks) {\r\n                        this.pendingTasks.remove(task);\r\n                        task = null;\r\n                    }\r\n                });\r\n            }));\r\n        });\r\n        this.subscription.add(this.zone.onUnstable.subscribe(() => {\r\n            NgZone.assertInAngularZone();\r\n            task ??= this.pendingTasks.add();\r\n        }));\r\n    }\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n    static ɵfac = function ZoneStablePendingTask_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || ZoneStablePendingTask)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: ZoneStablePendingTask, factory: ZoneStablePendingTask.ɵfac, providedIn: 'root' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n\r\nconst CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;\r\nlet consecutiveMicrotaskNotifications = 0;\r\nlet stackFromLastFewNotifications = [];\r\nfunction trackMicrotaskNotificationForDebugging() {\r\n    consecutiveMicrotaskNotifications++;\r\n    if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {\r\n        const stack = new Error().stack;\r\n        if (stack) {\r\n            stackFromLastFewNotifications.push(stack);\r\n        }\r\n    }\r\n    if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {\r\n        throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, 'Angular could not stabilize because there were endless change notifications within the browser event loop. ' +\r\n            'The stack from the last several notifications: \\n' +\r\n            stackFromLastFewNotifications.join('\\n'));\r\n    }\r\n}\r\nclass ChangeDetectionSchedulerImpl {\r\n    applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\r\n    appRef = inject(ApplicationRef);\r\n    taskService = inject(PendingTasksInternal);\r\n    ngZone = inject(NgZone);\r\n    zonelessEnabled = inject(ZONELESS_ENABLED);\r\n    tracing = inject(TracingService, { optional: true });\r\n    disableScheduling = inject(ZONELESS_SCHEDULER_DISABLED, { optional: true }) ?? false;\r\n    zoneIsDefined = typeof Zone !== 'undefined' && !!Zone.root.run;\r\n    schedulerTickApplyArgs = [{ data: { '__scheduler_tick__': true } }];\r\n    subscriptions = new Subscription();\r\n    angularZoneId = this.zoneIsDefined\r\n        ? this.ngZone._inner?.get(angularZoneInstanceIdProperty)\r\n        : null;\r\n    scheduleInRootZone = !this.zonelessEnabled &&\r\n        this.zoneIsDefined &&\r\n        (inject(SCHEDULE_IN_ROOT_ZONE, { optional: true }) ?? false);\r\n    cancelScheduledCallback = null;\r\n    useMicrotaskScheduler = false;\r\n    runningTick = false;\r\n    pendingRenderTaskId = null;\r\n    constructor() {\r\n        this.subscriptions.add(this.appRef.afterTick.subscribe(() => {\r\n            // If the scheduler isn't running a tick but the application ticked, that means\r\n            // someone called ApplicationRef.tick manually. In this case, we should cancel\r\n            // any change detections that had been scheduled so we don't run an extra one.\r\n            if (!this.runningTick) {\r\n                this.cleanup();\r\n            }\r\n        }));\r\n        this.subscriptions.add(this.ngZone.onUnstable.subscribe(() => {\r\n            // If the zone becomes unstable when we're not running tick (this happens from the zone.run),\r\n            // we should cancel any scheduled change detection here because at this point we\r\n            // know that the zone will stabilize at some point and run change detection itself.\r\n            if (!this.runningTick) {\r\n                this.cleanup();\r\n            }\r\n        }));\r\n        // TODO(atscott): These conditions will need to change when zoneless is the default\r\n        // Instead, they should flip to checking if ZoneJS scheduling is provided\r\n        this.disableScheduling ||=\r\n            !this.zonelessEnabled &&\r\n                // NoopNgZone without enabling zoneless means no scheduling whatsoever\r\n                (this.ngZone instanceof NoopNgZone ||\r\n                    // The same goes for the lack of Zone without enabling zoneless scheduling\r\n                    !this.zoneIsDefined);\r\n    }\r\n    notify(source) {\r\n        if (!this.zonelessEnabled && source === 5 /* NotificationSource.Listener */) {\r\n            // When the notification comes from a listener, we skip the notification unless the\r\n            // application has enabled zoneless. Ideally, listeners wouldn't notify the scheduler at all\r\n            // automatically. We do not know that a developer made a change in the listener callback that\r\n            // requires an `ApplicationRef.tick` (synchronize templates / run render hooks). We do this\r\n            // only for an easier migration from OnPush components to zoneless. Because listeners are\r\n            // usually executed inside the Angular zone and listeners automatically call `markViewDirty`,\r\n            // developers never needed to manually use `ChangeDetectorRef.markForCheck` or some other API\r\n            // to make listener callbacks work correctly with `OnPush` components.\r\n            return;\r\n        }\r\n        let force = false;\r\n        switch (source) {\r\n            case 0 /* NotificationSource.MarkAncestorsForTraversal */: {\r\n                this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\r\n                break;\r\n            }\r\n            case 3 /* NotificationSource.DebugApplyChanges */:\r\n            case 2 /* NotificationSource.DeferBlockStateUpdate */:\r\n            case 4 /* NotificationSource.MarkForCheck */:\r\n            case 5 /* NotificationSource.Listener */:\r\n            case 1 /* NotificationSource.SetInput */: {\r\n                this.appRef.dirtyFlags |= 4 /* ApplicationRefDirtyFlags.ViewTreeCheck */;\r\n                break;\r\n            }\r\n            case 6 /* NotificationSource.CustomElement */: {\r\n                // We use `ViewTreeTraversal` to ensure we refresh the element even if this is triggered\r\n                // during CD. In practice this is a no-op since the elements code also calls via a\r\n                // `markForRefresh()` API which sends `NotificationSource.MarkAncestorsForTraversal` anyway.\r\n                this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\r\n                force = true;\r\n                break;\r\n            }\r\n            case 12 /* NotificationSource.RootEffect */: {\r\n                this.appRef.dirtyFlags |= 16 /* ApplicationRefDirtyFlags.RootEffects */;\r\n                // Root effects still force a CD, even if the scheduler is disabled. This ensures that\r\n                // effects always run, even when triggered from outside the zone when the scheduler is\r\n                // otherwise disabled.\r\n                force = true;\r\n                break;\r\n            }\r\n            case 13 /* NotificationSource.ViewEffect */: {\r\n                // This is technically a no-op, since view effects will also send a\r\n                // `MarkAncestorsForTraversal` notification. Still, we set this for logical consistency.\r\n                this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\r\n                // View effects still force a CD, even if the scheduler is disabled. This ensures that\r\n                // effects always run, even when triggered from outside the zone when the scheduler is\r\n                // otherwise disabled.\r\n                force = true;\r\n                break;\r\n            }\r\n            case 11 /* NotificationSource.PendingTaskRemoved */: {\r\n                // Removing a pending task via the public API forces a scheduled tick, ensuring that\r\n                // stability is async and delayed until there was at least an opportunity to run\r\n                // application synchronization. This prevents some footguns when working with the\r\n                // public API for pending tasks where developers attempt to update application state\r\n                // immediately after removing the last task.\r\n                force = true;\r\n                break;\r\n            }\r\n            case 9 /* NotificationSource.ViewDetachedFromDOM */:\r\n            case 8 /* NotificationSource.ViewAttached */:\r\n            case 7 /* NotificationSource.RenderHook */:\r\n            case 10 /* NotificationSource.AsyncAnimationsLoaded */:\r\n            default: {\r\n                // These notifications only schedule a tick but do not change whether we should refresh\r\n                // views. Instead, we only need to run render hooks unless another notification from the\r\n                // other set is also received before `tick` happens.\r\n                this.appRef.dirtyFlags |= 8 /* ApplicationRefDirtyFlags.AfterRender */;\r\n            }\r\n        }\r\n        // If not already defined, attempt to capture a tracing snapshot of this\r\n        // notification so that the resulting CD run can be attributed to the\r\n        // context which produced the notification.\r\n        this.appRef.tracingSnapshot = this.tracing?.snapshot(this.appRef.tracingSnapshot) ?? null;\r\n        if (!this.shouldScheduleTick(force)) {\r\n            return;\r\n        }\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (this.useMicrotaskScheduler) {\r\n                trackMicrotaskNotificationForDebugging();\r\n            }\r\n            else {\r\n                consecutiveMicrotaskNotifications = 0;\r\n                stackFromLastFewNotifications.length = 0;\r\n            }\r\n        }\r\n        const scheduleCallback = this.useMicrotaskScheduler\r\n            ? scheduleCallbackWithMicrotask\r\n            : scheduleCallbackWithRafRace;\r\n        this.pendingRenderTaskId = this.taskService.add();\r\n        if (this.scheduleInRootZone) {\r\n            this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));\r\n        }\r\n        else {\r\n            this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() => scheduleCallback(() => this.tick()));\r\n        }\r\n    }\r\n    shouldScheduleTick(force) {\r\n        if ((this.disableScheduling && !force) || this.appRef.destroyed) {\r\n            return false;\r\n        }\r\n        // already scheduled or running\r\n        if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {\r\n            return false;\r\n        }\r\n        // If we're inside the zone don't bother with scheduler. Zone will stabilize\r\n        // eventually and run change detection.\r\n        if (!this.zonelessEnabled &&\r\n            this.zoneIsDefined &&\r\n            Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Calls ApplicationRef._tick inside the `NgZone`.\r\n     *\r\n     * Calling `tick` directly runs change detection and cancels any change detection that had been\r\n     * scheduled previously.\r\n     *\r\n     * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to\r\n     *     render hooks when `false`.\r\n     */\r\n    tick() {\r\n        // When ngZone.run below exits, onMicrotaskEmpty may emit if the zone is\r\n        // stable. We want to prevent double ticking so we track whether the tick is\r\n        // already running and skip it if so.\r\n        if (this.runningTick || this.appRef.destroyed) {\r\n            return;\r\n        }\r\n        // If we reach the tick and there is no work to be done in ApplicationRef.tick,\r\n        // skip it altogether and clean up. There may be no work if, for example, the only\r\n        // event that notified the scheduler was the removal of a pending task.\r\n        if (this.appRef.dirtyFlags === 0 /* ApplicationRefDirtyFlags.None */) {\r\n            this.cleanup();\r\n            return;\r\n        }\r\n        // The scheduler used to pass \"whether to check views\" as a boolean flag instead of setting\r\n        // fine-grained dirtiness flags, and global checking was always used on the first pass. This\r\n        // created an interesting edge case: if a notification made a view dirty and then ticked via the\r\n        // scheduler (and not the zone) a global check was still performed.\r\n        //\r\n        // Ideally, this would not be the case, and only zone-based ticks would do global passes.\r\n        // However this is a breaking change and requires fixes in g3. Until this cleanup can be done,\r\n        // we add the `ViewTreeGlobal` flag to request a global check if any views are dirty in a\r\n        // scheduled tick (unless zoneless is enabled, in which case global checks aren't really a\r\n        // thing).\r\n        //\r\n        // TODO(alxhub): clean up and remove this workaround as a breaking change.\r\n        if (!this.zonelessEnabled && this.appRef.dirtyFlags & 7 /* ApplicationRefDirtyFlags.ViewTreeAny */) {\r\n            this.appRef.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\r\n        }\r\n        const task = this.taskService.add();\r\n        try {\r\n            this.ngZone.run(() => {\r\n                this.runningTick = true;\r\n                this.appRef._tick();\r\n            }, undefined, this.schedulerTickApplyArgs);\r\n        }\r\n        catch (e) {\r\n            this.taskService.remove(task);\r\n            this.applicationErrorHandler(e);\r\n        }\r\n        finally {\r\n            this.cleanup();\r\n        }\r\n        // If we're notified of a change within 1 microtask of running change\r\n        // detection, run another round in the same event loop. This allows code\r\n        // which uses Promise.resolve (see NgModel) to avoid\r\n        // ExpressionChanged...Error to still be reflected in a single browser\r\n        // paint, even if that spans multiple rounds of change detection.\r\n        this.useMicrotaskScheduler = true;\r\n        scheduleCallbackWithMicrotask(() => {\r\n            this.useMicrotaskScheduler = false;\r\n            this.taskService.remove(task);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.subscriptions.unsubscribe();\r\n        this.cleanup();\r\n    }\r\n    cleanup() {\r\n        this.runningTick = false;\r\n        this.cancelScheduledCallback?.();\r\n        this.cancelScheduledCallback = null;\r\n        // If this is the last task, the service will synchronously emit a stable\r\n        // notification. If there is a subscriber that then acts in a way that\r\n        // tries to notify the scheduler again, we need to be able to respond to\r\n        // schedule a new change detection. Therefore, we should clear the task ID\r\n        // before removing it from the pending tasks (or the tasks service should\r\n        // not synchronously emit stable, similar to how Zone stableness only\r\n        // happens if it's still stable after a microtask).\r\n        if (this.pendingRenderTaskId !== null) {\r\n            const taskId = this.pendingRenderTaskId;\r\n            this.pendingRenderTaskId = null;\r\n            this.taskService.remove(taskId);\r\n        }\r\n    }\r\n    static ɵfac = function ChangeDetectionSchedulerImpl_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || ChangeDetectionSchedulerImpl)(); };\r\n    static ɵprov = /*@__PURE__*/ __defineInjectable({ token: ChangeDetectionSchedulerImpl, factory: ChangeDetectionSchedulerImpl.ɵfac, providedIn: 'root' });\r\n}\r\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], () => [], null); })();\r\n/**\r\n * Provides change detection without ZoneJS for the application bootstrapped using\r\n * `bootstrapApplication`.\r\n *\r\n * This function allows you to configure the application to not use the state/state changes of\r\n * ZoneJS to schedule change detection in the application. This will work when ZoneJS is not present\r\n * on the page at all or if it exists because something else is using it (either another Angular\r\n * application which uses ZoneJS for scheduling or some other library that relies on ZoneJS).\r\n *\r\n * This can also be added to the `TestBed` providers to configure the test environment to more\r\n * closely match production behavior. This will help give higher confidence that components are\r\n * compatible with zoneless change detection.\r\n *\r\n * ZoneJS uses browser events to trigger change detection. When using this provider, Angular will\r\n * instead use Angular APIs to schedule change detection. These APIs include:\r\n *\r\n * - `ChangeDetectorRef.markForCheck`\r\n * - `ComponentRef.setInput`\r\n * - updating a signal that is read in a template\r\n * - when bound host or template listeners are triggered\r\n * - attaching a view that was marked dirty by one of the above\r\n * - removing a view\r\n * - registering a render hook (templates are only refreshed if render hooks do one of the above)\r\n *\r\n * @usageNotes\r\n * ```ts\r\n * bootstrapApplication(MyApp, {providers: [\r\n *   provideZonelessChangeDetection(),\r\n * ]});\r\n * ```\r\n *\r\n * This API is experimental. Neither the shape, nor the underlying behavior is stable and can change\r\n * in patch versions. There are known feature gaps and API ergonomic considerations. We will iterate\r\n * on the exact API based on the feedback and our understanding of the problem and solution space.\r\n *\r\n * @developerPreview 20.0\r\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\r\n */\r\nfunction provideZonelessChangeDetection() {\r\n    performanceMarkFeature('NgZoneless');\r\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof Zone !== 'undefined' && Zone) {\r\n        const message = formatRuntimeError(914 /* RuntimeErrorCode.UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE */, `The application is using zoneless change detection, but is still loading Zone.js. ` +\r\n            `Consider removing Zone.js to get the full benefits of zoneless. ` +\r\n            `In applications using the Angular CLI, Zone.js is typically included in the \"polyfills\" section of the angular.json file.`);\r\n        console.warn(message);\r\n    }\r\n    return makeEnvironmentProviders([\r\n        { provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl },\r\n        { provide: NgZone, useClass: NoopNgZone },\r\n        { provide: ZONELESS_ENABLED, useValue: true },\r\n        { provide: SCHEDULE_IN_ROOT_ZONE, useValue: false },\r\n        typeof ngDevMode === 'undefined' || ngDevMode\r\n            ? [{ provide: PROVIDED_ZONELESS, useValue: true }]\r\n            : [],\r\n    ]);\r\n}\r\n\r\n/// <reference path=\"../../../goog.d.ts\" />\r\n/**\r\n * Work out the locale from the potential global properties.\r\n *\r\n * * Closure Compiler: use `goog.LOCALE`.\r\n * * Ivy enabled: use `$localize.locale`\r\n */\r\nfunction getGlobalLocale() {\r\n    if (typeof ngI18nClosureMode !== 'undefined' &&\r\n        ngI18nClosureMode &&\r\n        typeof goog !== 'undefined' &&\r\n        goog.LOCALE !== 'en') {\r\n        // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\r\n        // * In order to preserve backwards compatibility, we use Angular default value over\r\n        //   Closure Compiler's one.\r\n        return goog.LOCALE;\r\n    }\r\n    else {\r\n        // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\r\n        // COMPILE-TIME INLINER.\r\n        //\r\n        // * During compile time inlining of translations the expression will be replaced\r\n        //   with a string literal that is the current locale. Other forms of this expression are not\r\n        //   guaranteed to be replaced.\r\n        //\r\n        // * During runtime translation evaluation, the developer is required to set `$localize.locale`\r\n        //   if required, or just to provide their own `LOCALE_ID` provider.\r\n        return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;\r\n    }\r\n}\r\n/**\r\n * Provide this token to set the locale of your application.\r\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\r\n * DecimalPipe and PercentPipe) and by ICU expressions.\r\n *\r\n * See the [i18n guide](guide/i18n/locale-id) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps:\r\n * ```ts\r\n * import { LOCALE_ID } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nconst LOCALE_ID = new InjectionToken(ngDevMode ? 'LocaleId' : '', {\r\n    providedIn: 'root',\r\n    factory: () => inject(LOCALE_ID, { optional: true, skipSelf: true }) || getGlobalLocale(),\r\n});\r\n/**\r\n * Provide this token to set the default currency code your application uses for\r\n * CurrencyPipe when there is no currency code passed into it. This is only used by\r\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\r\n *\r\n * See the [i18n guide](guide/i18n/locale-id) for more information.\r\n *\r\n * <div class=\"docs-alert docs-alert-helpful\">\r\n *\r\n * The default currency code is currently always `USD`.\r\n *\r\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\r\n * your application `NgModule`:\r\n *\r\n * ```ts\r\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\r\n * ```\r\n *\r\n * </div>\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps:\r\n * ```ts\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nconst DEFAULT_CURRENCY_CODE = new InjectionToken(ngDevMode ? 'DefaultCurrencyCode' : '', {\r\n    providedIn: 'root',\r\n    factory: () => USD_CURRENCY_CODE,\r\n});\r\n/**\r\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\r\n * `xlf` or `xlf2`) when you want to translate your application in another language.\r\n *\r\n * See the [i18n guide](guide/i18n/merge) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps:\r\n * ```ts\r\n * import { TRANSLATIONS } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * // content of your translation file\r\n * const translations = '....';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nconst TRANSLATIONS = new InjectionToken(ngDevMode ? 'Translations' : '');\r\n/**\r\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\r\n * `xlf` or `xlf2`.\r\n *\r\n * See the [i18n guide](guide/i18n/merge) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * In standalone apps:\r\n * ```ts\r\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\r\n *\r\n * const appConfig: ApplicationConfig = {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * };\r\n * ```\r\n *\r\n * In module based apps: *\r\n * ```ts\r\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nconst TRANSLATIONS_FORMAT = new InjectionToken(ngDevMode ? 'TranslationsFormat' : '');\r\n/**\r\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\r\n * that the compiler should use in case of missing translations:\r\n * - Error: throw if you have missing translations.\r\n * - Warning (default): show a warning in the console and/or shell.\r\n * - Ignore: do nothing.\r\n *\r\n * See the [i18n guide](guide/i18n/merge#report-missing-translations) for more information.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n * ```ts\r\n * import { MissingTranslationStrategy } from '@angular/core';\r\n * import { platformBrowser } from '@angular/platform-browser';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowser().bootstrapModule(AppModule, {\r\n *   missingTranslation: MissingTranslationStrategy.Error\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nvar MissingTranslationStrategy;\r\n(function (MissingTranslationStrategy) {\r\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\r\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\r\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\r\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\r\n\r\n/**\r\n * @publicApi\r\n */\r\nclass DebugEventListener {\r\n    name;\r\n    callback;\r\n    constructor(name, callback) {\r\n        this.name = name;\r\n        this.callback = callback;\r\n    }\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nfunction asNativeElements(debugEls) {\r\n    return debugEls.map((el) => el.nativeElement);\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nclass DebugNode {\r\n    /**\r\n     * The underlying DOM node.\r\n     */\r\n    nativeNode;\r\n    constructor(nativeNode) {\r\n        this.nativeNode = nativeNode;\r\n    }\r\n    /**\r\n     * The `DebugElement` parent. Will be `null` if this is the root element.\r\n     */\r\n    get parent() {\r\n        const parent = this.nativeNode.parentNode;\r\n        return parent ? new DebugElement(parent) : null;\r\n    }\r\n    /**\r\n     * The host dependency injector. For example, the root element's component instance injector.\r\n     */\r\n    get injector() {\r\n        return getInjector(this.nativeNode);\r\n    }\r\n    /**\r\n     * The element's own component instance, if it has one.\r\n     */\r\n    get componentInstance() {\r\n        const nativeElement = this.nativeNode;\r\n        return (nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement)));\r\n    }\r\n    /**\r\n     * An object that provides parent context for this element. Often an ancestor component instance\r\n     * that governs this element.\r\n     *\r\n     * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\r\n     * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\r\n     * of heroes\"`.\r\n     */\r\n    get context() {\r\n        return getComponent(this.nativeNode) || getContext(this.nativeNode);\r\n    }\r\n    /**\r\n     * The callbacks attached to the component's @Output properties and/or the element's event\r\n     * properties.\r\n     */\r\n    get listeners() {\r\n        return getListeners(this.nativeNode).filter((listener) => listener.type === 'dom');\r\n    }\r\n    /**\r\n     * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\r\n     * variable name.\r\n     */\r\n    get references() {\r\n        return getLocalRefs(this.nativeNode);\r\n    }\r\n    /**\r\n     * This component's injector lookup tokens. Includes the component itself plus the tokens that the\r\n     * component lists in its providers metadata.\r\n     */\r\n    get providerTokens() {\r\n        return getInjectionTokens(this.nativeNode);\r\n    }\r\n}\r\n/**\r\n * @publicApi\r\n *\r\n * @see [Component testing scenarios](guide/testing/components-scenarios)\r\n * @see [Basics of testing components](guide/testing/components-basics)\r\n * @see [Testing utility APIs](guide/testing/utility-apis)\r\n */\r\nclass DebugElement extends DebugNode {\r\n    constructor(nativeNode) {\r\n        ngDevMode && assertDomNode(nativeNode);\r\n        super(nativeNode);\r\n    }\r\n    /**\r\n     * The underlying DOM element at the root of the component.\r\n     */\r\n    get nativeElement() {\r\n        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\r\n    }\r\n    /**\r\n     * The element tag name, if it is an element.\r\n     */\r\n    get name() {\r\n        const context = getLContext(this.nativeNode);\r\n        const lView = context ? context.lView : null;\r\n        if (lView !== null) {\r\n            const tData = lView[TVIEW].data;\r\n            const tNode = tData[context.nodeIndex];\r\n            return tNode.value;\r\n        }\r\n        else {\r\n            return this.nativeNode.nodeName;\r\n        }\r\n    }\r\n    /**\r\n     *  Gets a map of property names to property values for an element.\r\n     *\r\n     *  This map includes:\r\n     *  - Regular property bindings (e.g. `[id]=\"id\"`)\r\n     *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\r\n     *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\r\n     *\r\n     *  It does not include:\r\n     *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\r\n     *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\r\n     */\r\n    get properties() {\r\n        const context = getLContext(this.nativeNode);\r\n        const lView = context ? context.lView : null;\r\n        if (lView === null) {\r\n            return {};\r\n        }\r\n        const tData = lView[TVIEW].data;\r\n        const tNode = tData[context.nodeIndex];\r\n        const properties = {};\r\n        // Collect properties from the DOM.\r\n        copyDomProperties(this.nativeElement, properties);\r\n        // Collect properties from the bindings. This is needed for animation renderer which has\r\n        // synthetic properties which don't get reflected into the DOM.\r\n        collectPropertyBindings(properties, tNode, lView, tData);\r\n        return properties;\r\n    }\r\n    /**\r\n     *  A map of attribute names to attribute values for an element.\r\n     */\r\n    // TODO: replace null by undefined in the return type\r\n    get attributes() {\r\n        const attributes = {};\r\n        const element = this.nativeElement;\r\n        if (!element) {\r\n            return attributes;\r\n        }\r\n        const context = getLContext(element);\r\n        const lView = context ? context.lView : null;\r\n        if (lView === null) {\r\n            return {};\r\n        }\r\n        const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\r\n        const lowercaseTNodeAttrs = [];\r\n        // For debug nodes we take the element's attribute directly from the DOM since it allows us\r\n        // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\r\n        // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\r\n        // however since we have the attributes already on the TNode, we can preserve the case by going\r\n        // through them once, adding them to the `attributes` map and putting their lower-cased name\r\n        // into an array. Afterwards when we're going through the native DOM attributes, we can check\r\n        // whether we haven't run into an attribute already through the TNode.\r\n        if (tNodeAttrs) {\r\n            let i = 0;\r\n            while (i < tNodeAttrs.length) {\r\n                const attrName = tNodeAttrs[i];\r\n                // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\r\n                // else will be handled below when we read the final attributes off the DOM.\r\n                if (typeof attrName !== 'string')\r\n                    break;\r\n                const attrValue = tNodeAttrs[i + 1];\r\n                attributes[attrName] = attrValue;\r\n                lowercaseTNodeAttrs.push(attrName.toLowerCase());\r\n                i += 2;\r\n            }\r\n        }\r\n        for (const attr of element.attributes) {\r\n            // Make sure that we don't assign the same attribute both in its\r\n            // case-sensitive form and the lower-cased one from the browser.\r\n            if (!lowercaseTNodeAttrs.includes(attr.name)) {\r\n                attributes[attr.name] = attr.value;\r\n            }\r\n        }\r\n        return attributes;\r\n    }\r\n    /**\r\n     * The inline styles of the DOM element.\r\n     */\r\n    // TODO: replace null by undefined in the return type\r\n    get styles() {\r\n        const element = this.nativeElement;\r\n        return (element?.style ?? {});\r\n    }\r\n    /**\r\n     * A map containing the class names on the element as keys.\r\n     *\r\n     * This map is derived from the `className` property of the DOM element.\r\n     *\r\n     * Note: The values of this object will always be `true`. The class key will not appear in the KV\r\n     * object if it does not exist on the element.\r\n     *\r\n     * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\r\n     */\r\n    get classes() {\r\n        const result = {};\r\n        const element = this.nativeElement;\r\n        // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\r\n        const className = element.className;\r\n        const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\r\n        classes.forEach((value) => (result[value] = true));\r\n        return result;\r\n    }\r\n    /**\r\n     * The `childNodes` of the DOM element as a `DebugNode` array.\r\n     *\r\n     * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\r\n     */\r\n    get childNodes() {\r\n        const childNodes = this.nativeNode.childNodes;\r\n        const children = [];\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            const element = childNodes[i];\r\n            children.push(getDebugNode(element));\r\n        }\r\n        return children;\r\n    }\r\n    /**\r\n     * The immediate `DebugElement` children. Walk the tree by descending through `children`.\r\n     */\r\n    get children() {\r\n        const nativeElement = this.nativeElement;\r\n        if (!nativeElement)\r\n            return [];\r\n        const childNodes = nativeElement.children;\r\n        const children = [];\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            const element = childNodes[i];\r\n            children.push(getDebugNode(element));\r\n        }\r\n        return children;\r\n    }\r\n    /**\r\n     * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\r\n     */\r\n    query(predicate) {\r\n        const results = this.queryAll(predicate);\r\n        return results[0] || null;\r\n    }\r\n    /**\r\n     * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\r\n     */\r\n    queryAll(predicate) {\r\n        const matches = [];\r\n        _queryAll(this, predicate, matches, true);\r\n        return matches;\r\n    }\r\n    /**\r\n     * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\r\n     */\r\n    queryAllNodes(predicate) {\r\n        const matches = [];\r\n        _queryAll(this, predicate, matches, false);\r\n        return matches;\r\n    }\r\n    /**\r\n     * Triggers the event by its name if there is a corresponding listener in the element's\r\n     * `listeners` collection.\r\n     *\r\n     * If the event lacks a listener or there's some other problem, consider\r\n     * calling `nativeElement.dispatchEvent(eventObject)`.\r\n     *\r\n     * @param eventName The name of the event to trigger\r\n     * @param eventObj The _event object_ expected by the handler\r\n     *\r\n     * @see [Testing components scenarios](guide/testing/components-scenarios#trigger-event-handler)\r\n     */\r\n    triggerEventHandler(eventName, eventObj) {\r\n        const node = this.nativeNode;\r\n        const invokedListeners = [];\r\n        this.listeners.forEach((listener) => {\r\n            if (listener.name === eventName) {\r\n                const callback = listener.callback;\r\n                callback.call(node, eventObj);\r\n                invokedListeners.push(callback);\r\n            }\r\n        });\r\n        // We need to check whether `eventListeners` exists, because it's something\r\n        // that Zone.js only adds to `EventTarget` in browser environments.\r\n        if (typeof node.eventListeners === 'function') {\r\n            // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\r\n            // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\r\n            // listener.\r\n            node.eventListeners(eventName).forEach((listener) => {\r\n                // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\r\n                // use `toString` on the listener and see if it contains the token. We use this approach to\r\n                // ensure that it still worked with compiled code since it cannot remove or rename string\r\n                // literals. We also considered using a special function name (i.e. if(listener.name ===\r\n                // special)) but that was more cumbersome and we were also concerned the compiled code could\r\n                // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\r\n                if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\r\n                    const unwrappedListener = listener('__ngUnwrap__');\r\n                    return (invokedListeners.indexOf(unwrappedListener) === -1 &&\r\n                        unwrappedListener.call(node, eventObj));\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nfunction copyDomProperties(element, properties) {\r\n    if (element) {\r\n        // Skip own properties (as those are patched)\r\n        let obj = Object.getPrototypeOf(element);\r\n        const NodePrototype = Node.prototype;\r\n        while (obj !== null && obj !== NodePrototype) {\r\n            const descriptors = Object.getOwnPropertyDescriptors(obj);\r\n            for (let key in descriptors) {\r\n                if (!key.startsWith('__') && !key.startsWith('on')) {\r\n                    // don't include properties starting with `__` and `on`.\r\n                    // `__` are patched values which should not be included.\r\n                    // `on` are listeners which also should not be included.\r\n                    const value = element[key];\r\n                    if (isPrimitiveValue(value)) {\r\n                        properties[key] = value;\r\n                    }\r\n                }\r\n            }\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n    }\r\n}\r\nfunction isPrimitiveValue(value) {\r\n    return (typeof value === 'string' ||\r\n        typeof value === 'boolean' ||\r\n        typeof value === 'number' ||\r\n        value === null);\r\n}\r\nfunction _queryAll(parentElement, predicate, matches, elementsOnly) {\r\n    const context = getLContext(parentElement.nativeNode);\r\n    const lView = context ? context.lView : null;\r\n    if (lView !== null) {\r\n        const parentTNode = lView[TVIEW].data[context.nodeIndex];\r\n        _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\r\n    }\r\n    else {\r\n        // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\r\n        // APIs.\r\n        _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\r\n    }\r\n}\r\n/**\r\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\r\n *\r\n * @param tNode the current TNode\r\n * @param lView the LView of this TNode\r\n * @param predicate the predicate to match\r\n * @param matches the list of positive matches\r\n * @param elementsOnly whether only elements should be searched\r\n * @param rootNativeNode the root native node on which predicate should not be matched\r\n */\r\nfunction _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\r\n    ngDevMode && assertTNodeForLView(tNode, lView);\r\n    const nativeNode = getNativeByTNodeOrNull(tNode, lView);\r\n    // For each type of TNode, specific logic is executed.\r\n    if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\r\n        // Case 1: the TNode is an element\r\n        // The native node has to be checked.\r\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\r\n        if (isComponentHost(tNode)) {\r\n            // If the element is the host of a component, then all nodes in its view have to be processed.\r\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\r\n            const componentView = getComponentLViewByIndex(tNode.index, lView);\r\n            if (componentView && componentView[TVIEW].firstChild) {\r\n                _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\r\n            }\r\n        }\r\n        else {\r\n            if (tNode.child) {\r\n                // Otherwise, its children have to be processed.\r\n                _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\r\n            }\r\n            // We also have to query the DOM directly in order to catch elements inserted through\r\n            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\r\n            // times. ViewEngine could do it more efficiently, because all the insertions go through\r\n            // Renderer2, however that's not the case in Ivy. This approach is being used because:\r\n            // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\r\n            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\r\n            // 2. It allows us to capture nodes that were inserted directly via the DOM.\r\n            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\r\n        }\r\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\r\n        // processed.\r\n        const nodeOrContainer = lView[tNode.index];\r\n        if (isLContainer(nodeOrContainer)) {\r\n            _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\r\n        }\r\n    }\r\n    else if (tNode.type & 4 /* TNodeType.Container */) {\r\n        // Case 2: the TNode is a container\r\n        // The native node has to be checked.\r\n        const lContainer = lView[tNode.index];\r\n        _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\r\n        // Each view inside the container has to be processed.\r\n        _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\r\n    }\r\n    else if (tNode.type & 16 /* TNodeType.Projection */) {\r\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\r\n        // The nodes projected at this location all need to be processed.\r\n        const componentView = lView[DECLARATION_COMPONENT_VIEW];\r\n        const componentHost = componentView[T_HOST];\r\n        const head = componentHost.projection[tNode.projection];\r\n        if (Array.isArray(head)) {\r\n            for (let nativeNode of head) {\r\n                _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\r\n            }\r\n        }\r\n        else if (head) {\r\n            const nextLView = componentView[PARENT];\r\n            const nextTNode = nextLView[TVIEW].data[head.index];\r\n            _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\r\n        }\r\n    }\r\n    else if (tNode.child) {\r\n        // Case 4: the TNode is a view.\r\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\r\n    }\r\n    // We don't want to go to the next sibling of the root node.\r\n    if (rootNativeNode !== nativeNode) {\r\n        // To determine the next node to be processed, we need to use the next or the projectionNext\r\n        // link, depending on whether the current node has been projected.\r\n        const nextTNode = tNode.flags & 2 /* TNodeFlags.isProjected */ ? tNode.projectionNext : tNode.next;\r\n        if (nextTNode) {\r\n            _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Process all TNodes in a given container.\r\n *\r\n * @param lContainer the container to be processed\r\n * @param predicate the predicate to match\r\n * @param matches the list of positive matches\r\n * @param elementsOnly whether only elements should be searched\r\n * @param rootNativeNode the root native node on which predicate should not be matched\r\n */\r\nfunction _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\r\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\r\n        const childView = lContainer[i];\r\n        const firstChild = childView[TVIEW].firstChild;\r\n        if (firstChild) {\r\n            _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Match the current native node against the predicate.\r\n *\r\n * @param nativeNode the current native node\r\n * @param predicate the predicate to match\r\n * @param matches the list of positive matches\r\n * @param elementsOnly whether only elements should be searched\r\n * @param rootNativeNode the root native node on which predicate should not be matched\r\n */\r\nfunction _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\r\n    if (rootNativeNode !== nativeNode) {\r\n        const debugNode = getDebugNode(nativeNode);\r\n        if (!debugNode) {\r\n            return;\r\n        }\r\n        // Type of the \"predicate and \"matches\" array are set based on the value of\r\n        // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\r\n        // types with generics, so we manually cast the parameters accordingly.\r\n        if (elementsOnly &&\r\n            debugNode instanceof DebugElement &&\r\n            predicate(debugNode) &&\r\n            matches.indexOf(debugNode) === -1) {\r\n            matches.push(debugNode);\r\n        }\r\n        else if (!elementsOnly &&\r\n            predicate(debugNode) &&\r\n            matches.indexOf(debugNode) === -1) {\r\n            matches.push(debugNode);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Match all the descendants of a DOM node against a predicate.\r\n *\r\n * @param nativeNode the current native node\r\n * @param predicate the predicate to match\r\n * @param matches the list where matches are stored\r\n * @param elementsOnly whether only elements should be searched\r\n */\r\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\r\n    const nodes = parentNode.childNodes;\r\n    const length = nodes.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const node = nodes[i];\r\n        const debugNode = getDebugNode(node);\r\n        if (debugNode) {\r\n            if (elementsOnly &&\r\n                debugNode instanceof DebugElement &&\r\n                predicate(debugNode) &&\r\n                matches.indexOf(debugNode) === -1) {\r\n                matches.push(debugNode);\r\n            }\r\n            else if (!elementsOnly &&\r\n                predicate(debugNode) &&\r\n                matches.indexOf(debugNode) === -1) {\r\n                matches.push(debugNode);\r\n            }\r\n            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Iterates through the property bindings for a given node and generates\r\n * a map of property names to values. This map only contains property bindings\r\n * defined in templates, not in host bindings.\r\n */\r\nfunction collectPropertyBindings(properties, tNode, lView, tData) {\r\n    let bindingIndexes = tNode.propertyBindings;\r\n    if (bindingIndexes !== null) {\r\n        for (let i = 0; i < bindingIndexes.length; i++) {\r\n            const bindingIndex = bindingIndexes[i];\r\n            const propMetadata = tData[bindingIndex];\r\n            const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\r\n            const propertyName = metadataParts[0];\r\n            if (metadataParts.length > 1) {\r\n                let value = metadataParts[1];\r\n                for (let j = 1; j < metadataParts.length - 1; j++) {\r\n                    value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\r\n                }\r\n                properties[propertyName] = value;\r\n            }\r\n            else {\r\n                properties[propertyName] = lView[bindingIndex];\r\n            }\r\n        }\r\n    }\r\n}\r\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\r\n/**\r\n * @publicApi\r\n */\r\nfunction getDebugNode(nativeNode) {\r\n    if (nativeNode instanceof Node) {\r\n        if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {\r\n            nativeNode[NG_DEBUG_PROPERTY] =\r\n                nativeNode.nodeType == Node.ELEMENT_NODE\r\n                    ? new DebugElement(nativeNode)\r\n                    : new DebugNode(nativeNode);\r\n        }\r\n        return nativeNode[NG_DEBUG_PROPERTY];\r\n    }\r\n    return null;\r\n}\r\n\r\nexport { AFTER_RENDER_PHASES, ANIMATION_MODULE_TYPE, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, AcxChangeDetectionStrategy, AcxViewEncapsulation, AfterRenderImpl, AfterRenderManager, AfterRenderSequence, ApplicationInitStatus, ApplicationRef, Attribute, COMPILER_OPTIONS, CONTAINERS, CSP_NONCE, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionSchedulerImpl, ChangeDetectionStrategy, Compiler, CompilerFactory, Component, ComponentFactory, ComponentFactory$1, ComponentFactoryResolver$1 as ComponentFactoryResolver, ComponentRef$1 as ComponentRef, ComponentRef as ComponentRef$1, Console, DEFAULT_CURRENCY_CODE, DEFAULT_LOCALE_ID, DEFER_BLOCK_CONFIG, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DEFER_BLOCK_ID, DEFER_BLOCK_SSR_ID_ATTRIBUTE, DEFER_BLOCK_STATE$1 as DEFER_BLOCK_STATE, DEFER_BLOCK_STATE as DEFER_BLOCK_STATE$1, DEFER_HYDRATE_TRIGGERS, DEFER_PARENT_BLOCK_ID, DEHYDRATED_BLOCK_REGISTRY, DISCONNECTED_NODES, DebugElement, DebugEventListener, DebugNode, DeferBlockBehavior, DeferBlockState, DehydratedBlockRegistry, Directive, ELEMENT_CONTAINERS, EVENT_REPLAY_ENABLED_DEFAULT, ElementRef, EnvironmentNgModuleRefAdapter, EventEmitter, Framework, Host, HostBinding, HostListener, HydrationStatus, I18N_DATA, IMAGE_CONFIG, IMAGE_CONFIG_DEFAULTS, IS_EVENT_REPLAY_ENABLED, IS_HYDRATION_DOM_REUSE_ENABLED, IS_I18N_HYDRATION_ENABLED, IS_INCREMENTAL_HYDRATION_ENABLED, Inject, Injectable, Input, JSACTION_BLOCK_ELEMENT_MAP, JSACTION_EVENT_CONTRACT, LContext, LOCALE_ID, LocaleDataIndex, MULTIPLIER, MissingTranslationStrategy, ModuleWithComponentFactories, NGH_ATTR_NAME, NGH_DATA_KEY, NGH_DEFER_BLOCKS_KEY, NODES, NOOP_AFTER_RENDER_REF, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE, NO_ERRORS_SCHEMA, NUM_ROOT_NODES, NgModule, NgModuleFactory, NgModuleFactory$1, NgModuleRef, NgModuleRef$1, NgProbeToken, NgZone, NoopNgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, PRESERVE_HOST_CONTENT, PROVIDED_NG_ZONE, Pipe, QueryList, ReflectionCapabilities, Renderer2, RendererFactory2, RendererStyleFlags2, SKIP_HYDRATION_ATTR_NAME, SSR_CONTENT_INTEGRITY_MARKER, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, TEMPLATES, TEMPLATE_ID, TESTABILITY, TESTABILITY_GETTER, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, TimerScheduler, TracingAction, TracingService, TransferState, Type, UseExhaustiveCheckNoChanges, ViewContainerRef, ViewEncapsulation, ViewRef, _sanitizeHtml, _sanitizeUrl, afterEveryRender, afterNextRender, allowSanitizationBypassAndThrow, angularCoreEnv, appendDeferBlocksToJSActionMap, asNativeElements, assertComponentDef, assertStandaloneComponentType, bypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript, bypassSanitizationTrustStyle, bypassSanitizationTrustUrl, calcPathForNode, checkNoChangesInternal, cleanupDehydratedViews, clearResolutionOfComponentResourcesQueue, collectNativeNodes, collectNativeNodesInLContainer, compileComponent, compileDirective, compileNgModule, compileNgModuleDefs, compilePipe, convertHydrateTriggersToJsAction, countBlocksSkippedByHydration, createEnvironmentInjector, createMultiResultQuerySignalFn, createNgModule, createNgModuleRef, createNgModuleRefWithProviders, createSingleResultOptionalQuerySignalFn, createSingleResultRequiredQuerySignalFn, depsTracker, devModeEqual, enableApplyRootElementTransformImpl, enableClaimDehydratedIcuCaseImpl, enableFindMatchingDehydratedViewImpl, enableLocateOrCreateContainerAnchorImpl, enableLocateOrCreateContainerRefImpl, enableLocateOrCreateElementContainerNodeImpl, enableLocateOrCreateElementNodeImpl, enableLocateOrCreateI18nNodeImpl, enableLocateOrCreateTextNodeImpl, enablePrepareI18nBlockForHydrationImpl, enableProfiling, enableRetrieveDeferBlockDataImpl, enableRetrieveHydrationInfoImpl, enableStashEventListenerImpl, findLocaleData, flushModuleScopingQueueAsMuchAsPossible, gatherDeferBlocksCommentNodes, generateStandaloneInDeclarationsError, getAsyncClassMetadataFn, getCompilerFacade, getDebugNode, getDeferBlocks$1 as getDeferBlocks, getDirectives, getDocument, getHostElement, getLContext, getLDeferBlockDetails, getLNodeForHydration, getLocaleCurrencyCode, getLocalePluralCase, getNgZone, getNgZoneOptions, getOrComputeI18nChildren, getRegisteredNgModuleType, getSanitizationBypassType, getTDeferBlockDetails, inputBinding, internalProvideZoneChangeDetection, invokeListeners, isBoundToModule, isComponentDefPendingResolution, isComponentResourceResolutionQueueEmpty, isDeferBlock, isDetachedByI18n, isDisconnectedNode, isI18nHydrationEnabled, isI18nHydrationSupportEnabled, isInSkipHydrationBlock, isIncrementalHydrationEnabled, isJsObject, isLetDeclaration, isListLikeIterable, isNgModule, isPromise, isSubscribable, isTNodeShape, isViewDirty, iterateListLike, makePropDecorator, makeStateKey, markForRefresh, noSideEffects, optionsReducer, outputBinding, patchComponentDefWithScope, performanceMarkFeature, processAndInitTriggers, processBlockData, processTextNodeBeforeSerialization, profiler, provideAppInitializer, provideNgReflectAttributes, provideZoneChangeDetection, provideZonelessChangeDetection, publishDefaultGlobalUtils, publishExternalGlobalUtil, publishSignalConfiguration, readHydrationInfo, readPatchedLView, registerLocaleData, registerNgModuleType, remove, removeListeners, renderDeferBlockState, resetCompiledComponents, resetJitOptions, resolveComponentResources, restoreComponentResolutionQueue, setAllowDuplicateNgModuleIdsForTest, setClassMetadata, setClassMetadataAsync, setDocument, setIsI18nHydrationSupportEnabled, setJSActionAttributes, setJitOptions, setLocaleId, setStashFn, setTestabilityGetter, sharedMapFunction, sharedStashFunction, transitiveScopesFor, triggerHydrationFromBlockName, triggerResourceLoading, trySerializeI18nBlock, twoWayBinding, unregisterAllLocaleData, unsupportedProjectionOfDomNodes, unwrapSafeValue, validateMatchingNode, validateNodeExists, verifySsrContentsIntegrity, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, ɵsetClassDebugInfo, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, ɵɵCopyDefinitionFeature, ɵɵExternalStylesFeature, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattachSourceLocations, ɵɵattribute, ɵɵclassMap, ɵɵclassProp, ɵɵcomponentInstance, ɵɵconditional, ɵɵconditionalBranchCreate, ɵɵconditionalCreate, ɵɵcontentQuery, ɵɵcontentQuerySignal, ɵɵdeclareLet, ɵɵdefer, ɵɵdeferEnableTimerScheduling, ɵɵdeferHydrateNever, ɵɵdeferHydrateOnHover, ɵɵdeferHydrateOnIdle, ɵɵdeferHydrateOnImmediate, ɵɵdeferHydrateOnInteraction, ɵɵdeferHydrateOnTimer, ɵɵdeferHydrateOnViewport, ɵɵdeferHydrateWhen, ɵɵdeferOnHover, ɵɵdeferOnIdle, ɵɵdeferOnImmediate, ɵɵdeferOnInteraction, ɵɵdeferOnTimer, ɵɵdeferOnViewport, ɵɵdeferPrefetchOnHover, ɵɵdeferPrefetchOnIdle, ɵɵdeferPrefetchOnImmediate, ɵɵdeferPrefetchOnInteraction, ɵɵdeferPrefetchOnTimer, ɵɵdeferPrefetchOnViewport, ɵɵdeferPrefetchWhen, ɵɵdeferWhen, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdomProperty, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵgetComponentDepsFactory, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵgetReplaceMetadataURL, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinjectAttribute, ɵɵinterpolate, ɵɵinterpolate1, ɵɵinterpolate2, ɵɵinterpolate3, ɵɵinterpolate4, ɵɵinterpolate5, ɵɵinterpolate6, ɵɵinterpolate7, ɵɵinterpolate8, ɵɵinterpolateV, ɵɵinvalidFactory, ɵɵlistener, ɵɵloadQuery, ɵɵnextContext, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryAdvance, ɵɵqueryRefresh, ɵɵreadContextLet, ɵɵreference, ɵɵrepeater, ɵɵrepeaterCreate, ɵɵrepeaterTrackByIdentity, ɵɵrepeaterTrackByIndex, ɵɵreplaceMetadata, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstoreLet, ɵɵstyleMap, ɵɵstyleProp, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵtwoWayBindingSet, ɵɵtwoWayListener, ɵɵtwoWayProperty, ɵɵvalidateIframeAttribute, ɵɵviewQuery, ɵɵviewQuerySignal };\r\n\n"],"mappings":"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,wDACvC,CAAC+c,WAAW,CAACld,KAAK,CAAC,GAAG,CAAC,CAAC,yCAAyC+c,SAAS,EAAE;MAC5EG,WAAW,CAACld,KAAK,CAAC,IAAI,KAAK,CAAC;MAC5B4d,gBAAgB,CAACC,SAAS,EAAEJ,IAAI,CAAC;IACrC;EACJ,CAAC,MACI;IACDG,gBAAgB,CAACC,SAAS,EAAEJ,IAAI,CAAC;EACrC;AACJ;AAEA,MAAMO,kBAAkB,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EACtBjI,OAAO;EACP;AACJ;AACA;EACIkI,UAAU;EACV;AACJ;AACA;AACA;EACIC,SAAS,GAAG,KAAK;EACjB;AACJ;AACA;EACIC,mBAAmB;EACnB;AACJ;AACA;EACIC,KAAK;EACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB;EAClB;AACJ;AACA;AACA;EACInL,KAAK;EACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoL,eAAe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,CAAC,GAAG,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+tD,QAAQA,CAAA,EAAG;IACPtmD,oCAAoC,CAAC,IAAI,CAACif,MAAM,CAAC;IACjD,IAAI,CAACA,MAAM,CAAC1mB,KAAK,CAAC,IAAI,GAAG,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIguD,aAAaA,CAAA,EAAG;IACZ;IACA;IACA;IACA;IACA;IACA,IAAI,CAACtnC,MAAM,CAAC1mB,KAAK,CAAC,IAAI,IAAI,CAAC;IAC3BqqD,qBAAqB,CAAC,IAAI,CAAC3jC,MAAM,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIunC,cAAcA,CAAA,EAAG;IACb,IAAI,CAACv5C,SAAS,EACV;IACJ,IAAI;MACA,IAAI,CAACk2C,UAAU,KAAK,IAAI,CAAClkC,MAAM,CAACrkB,QAAQ,CAAC,CAAC8hB,GAAG,CAACy+B,2BAA2B,EAAED,uCAAuC,CAAC;IACvH,CAAC,CACD,MAAM;MACF,IAAI,CAACiI,UAAU,GAAGjI,uCAAuC;IAC7D;IACAgI,sBAAsB,CAAC,IAAI,CAACjkC,MAAM,EAAE,IAAI,CAACkkC,UAAU,CAAC;EACxD;EACAsD,wBAAwBA,CAAA,EAAG;IACvB,IAAI,IAAI,CAACX,OAAO,EAAE;MACd,MAAM,IAAI/qD,YAAY,CAAC,GAAG,CAAC,8CAA8CkS,SAAS,IAAI,+DAA+D,CAAC;IAC1J;IACA,IAAI,CAAC84C,wBAAwB,GAAG,IAAI;EACxC;EA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SsE,0BAA0BA,CAAA,EAAG;EAClChuF,iCAAiC,CAAC,MAAM;IACpC,IAAImgC,YAAY,GAAG,EAAE;IACrB,IAAI97B,SAAS,EAAE;MACX,MAAM4pF,cAAc,GAAGpuF,iBAAiB,CAAC,CAAC;MAC1CsgC,YAAY,GACR8tD,cAAc,IAAIz0C,uBAAuB,CAACy0C,cAAc,CAAC,GACnD,2FAA2F,GAC3F,mDAAmD;IACjE;IACA,MAAM,IAAI97F,YAAY,CAAC,GAAG,CAAC,0DAA0DguC,YAAY,CAAC;EACtG,CAAC,CAAC;AACN;AACA,SAAS86B,eAAeA,CAACizB,EAAE,EAAE;EACzB,OAAOA,EAAE,CAACjzB,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkzB,YAAY,CAAC;EACfrtF,IAAI;EACJ8C,KAAK;EACLJ,WAAWA,CAAC1C,IAAI,EAAE8C,KAAK,EAAE;IACrB,IAAI,CAAC9C,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC8C,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA,MAAMwqF,sBAAsB,GAAG,EAAE;AACjC,SAASC,cAAcA,CAACp+E,GAAG,EAAEq+E,IAAI,EAAE;EAC/B,IAAI3/E,KAAK,CAACC,OAAO,CAAC0/E,IAAI,CAAC,EAAE;IACrB,OAAOA,IAAI,CAACrzE,MAAM,CAACozE,cAAc,EAAEp+E,GAAG,CAAC;EAC3C;EACA,OAAO;IAAE,GAAGA,GAAG;IAAE,GAAGq+E;EAAK,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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V,UAAU,EAAE,MAAM;EAClBhU,OAAO,EAAEA,CAAA,KAAMhS,MAAM,CAAC85H,SAAS,EAAE;IAAE11G,QAAQ,EAAE,IAAI;IAAEE,QAAQ,EAAE;EAAK,CAAC,CAAC,IAAIm1G,eAAe,CAAC;AAC5F,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,qBAAqB,GAAG,IAAIh6H,cAAc,CAAC2Q,SAAS,GAAG,qBAAqB,GAAG,EAAE,EAAE;EACrFsV,UAAU,EAAE,MAAM;EAClBhU,OAAO,EAAEA,CAAA,KAAMq8F;AACnB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2rB,YAAY,GAAG,IAAIj6H,cAAc,CAAC2Q,SAAS,GAAG,cAAc,GAAG,EAAE,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMupH,mBAAmB,GAAG,IAAIl6H,cAAc,CAAC2Q,SAAS,GAAG,oBAAoB,GAAG,EAAE,CAAC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIwpH,0BAA0B;AAC9B,CAAC,UAAUA,0BAA0B,EAAE;EACnCA,0BAA0B,CAACA,0BAA0B,CAAC,OAAO,CAAC,GAAG,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}