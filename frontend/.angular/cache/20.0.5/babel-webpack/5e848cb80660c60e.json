{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/auth']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport class AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const isAuthenticated = this.authService.isAuthenticated();\n    const isAdmin = this.authService.isAdmin();\n    const currentUser = this.authService.getCurrentUser();\n    console.log('AdminGuard - isAuthenticated:', isAuthenticated);\n    console.log('AdminGuard - isAdmin:', isAdmin);\n    console.log('AdminGuard - currentUser:', currentUser);\n    if (isAuthenticated && isAdmin) {\n      return true;\n    } else {\n      console.log('AdminGuard - Redirecting to auth');\n      this.router.navigate(['/auth']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AdminGuard_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","isAuthenticated","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn","AdminGuard","isAdmin","currentUser","getCurrentUser","console","log"],"sources":["C:\\Users\\winni\\OneDrive\\Desktop\\JINZ-Media-Full-Source\\frontend\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  \r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(): boolean {\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/auth']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  \r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(): boolean {\r\n    const isAuthenticated = this.authService.isAuthenticated();\r\n    const isAdmin = this.authService.isAdmin();\r\n    const currentUser = this.authService.getCurrentUser();\r\n    \r\n    console.log('AdminGuard - isAuthenticated:', isAuthenticated);\r\n    console.log('AdminGuard - isAdmin:', isAdmin);\r\n    console.log('AdminGuard - currentUser:', currentUser);\r\n    \r\n    if (isAuthenticated && isAdmin) {\r\n      return true;\r\n    } else {\r\n      console.log('AdminGuard - Redirecting to auth');\r\n      this.router.navigate(['/auth']);\r\n      return false;\r\n    }\r\n  }\r\n} "],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACF,WAAW,CAACG,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;IACd;EACF;EAAC,QAAAC,CAAA,G;qCAdUP,SAAS,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATd,SAAS;IAAAe,OAAA,EAATf,SAAS,CAAAgB,IAAA;IAAAC,UAAA,EAFR;EAAM;;AAsBpB,OAAM,MAAOC,UAAU;EAErBjB,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT,MAAMC,eAAe,GAAG,IAAI,CAACH,WAAW,CAACG,eAAe,EAAE;IAC1D,MAAMc,OAAO,GAAG,IAAI,CAACjB,WAAW,CAACiB,OAAO,EAAE;IAC1C,MAAMC,WAAW,GAAG,IAAI,CAAClB,WAAW,CAACmB,cAAc,EAAE;IAErDC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAElB,eAAe,CAAC;IAC7DiB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,OAAO,CAAC;IAC7CG,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,WAAW,CAAC;IAErD,IAAIf,eAAe,IAAIc,OAAO,EAAE;MAC9B,OAAO,IAAI;IACb,CAAC,MAAM;MACLG,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI,CAACpB,MAAM,CAACG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;IACd;EACF;EAAC,QAAAC,CAAA,G;qCAvBUW,UAAU,EAAAV,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVI,UAAU;IAAAH,OAAA,EAAVG,UAAU,CAAAF,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}