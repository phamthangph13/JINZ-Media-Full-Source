{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\nclass UniqueSelectionDispatcher {\n  _listeners = [];\n  /**\r\n   * Notify other items that selection for the given name has been set.\r\n   * @param id ID of the item.\r\n   * @param name Name of the item.\r\n   */\n  notify(id, name) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n  /**\r\n   * Listen for future changes to item selection.\r\n   * @return Function used to deregister listener\r\n   */\n  listen(listener) {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter(registered => {\n        return listener !== registered;\n      });\n    };\n  }\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n  static ɵfac = function UniqueSelectionDispatcher_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || UniqueSelectionDispatcher)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UniqueSelectionDispatcher,\n    factory: UniqueSelectionDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nexport { UniqueSelectionDispatcher as U };","map":{"version":3,"names":["i0","Injectable","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","push","filter","registered","ngOnDestroy","ɵfac","UniqueSelectionDispatcher_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","U"],"sources":["C:/Users/winni/OneDrive/Desktop/JINZ-Media-Full-Source/frontend/node_modules/@angular/cdk/fesm2022/unique-selection-dispatcher-Cewa_Eg3.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\nclass UniqueSelectionDispatcher {\r\n    _listeners = [];\r\n    /**\r\n     * Notify other items that selection for the given name has been set.\r\n     * @param id ID of the item.\r\n     * @param name Name of the item.\r\n     */\r\n    notify(id, name) {\r\n        for (let listener of this._listeners) {\r\n            listener(id, name);\r\n        }\r\n    }\r\n    /**\r\n     * Listen for future changes to item selection.\r\n     * @return Function used to deregister listener\r\n     */\r\n    listen(listener) {\r\n        this._listeners.push(listener);\r\n        return () => {\r\n            this._listeners = this._listeners.filter((registered) => {\r\n                return listener !== registered;\r\n            });\r\n        };\r\n    }\r\n    ngOnDestroy() {\r\n        this._listeners = [];\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }] });\r\n\r\nexport { UniqueSelectionDispatcher as U };\r\n\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,QAAQ,eAAe;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,CAAC;EAC5BC,UAAU,GAAG,EAAE;EACf;AACJ;AACA;AACA;AACA;EACIC,MAAMA,CAACC,EAAE,EAAEC,IAAI,EAAE;IACb,KAAK,IAAIC,QAAQ,IAAI,IAAI,CAACJ,UAAU,EAAE;MAClCI,QAAQ,CAACF,EAAE,EAAEC,IAAI,CAAC;IACtB;EACJ;EACA;AACJ;AACA;AACA;EACIE,MAAMA,CAACD,QAAQ,EAAE;IACb,IAAI,CAACJ,UAAU,CAACM,IAAI,CAACF,QAAQ,CAAC;IAC9B,OAAO,MAAM;MACT,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACO,MAAM,CAAEC,UAAU,IAAK;QACrD,OAAOJ,QAAQ,KAAKI,UAAU;MAClC,CAAC,CAAC;IACN,CAAC;EACL;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACT,UAAU,GAAG,EAAE;EACxB;EACA,OAAOU,IAAI,YAAAC,kCAAAC,iBAAA;IAAA,YAAAA,iBAAA,IAAwFb,yBAAyB;EAAA;EAC5H,OAAOc,KAAK,kBAD6EhB,EAAE,CAAAiB,kBAAA;IAAAC,KAAA,EACYhB,yBAAyB;IAAAiB,OAAA,EAAzBjB,yBAAyB,CAAAW,IAAA;IAAAO,UAAA,EAAc;EAAM;AACxJ;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAH6FrB,EAAE,CAAAsB,iBAAA,CAGJpB,yBAAyB,EAAc,CAAC;IACvHqB,IAAI,EAAEtB,UAAU;IAChBuB,IAAI,EAAE,CAAC;MAAEJ,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC;AAAA;AAEV,SAASlB,yBAAyB,IAAIuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}